
relayDelay.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000089f8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000108  08008b04  08008b04  00018b04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008c0c  08008c0c  000201cc  2**0
                  CONTENTS
  4 .ARM          00000000  08008c0c  08008c0c  000201cc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008c0c  08008c0c  000201cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008c0c  08008c0c  00018c0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008c10  08008c10  00018c10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001cc  20000000  08008c14  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000013e8  200001cc  08008de0  000201cc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200015b4  08008de0  000215b4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201cc  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000201f5  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000fafa  00000000  00000000  00020238  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000305c  00000000  00000000  0002fd32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e90  00000000  00000000  00032d90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000af6  00000000  00000000  00033c20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00004a45  00000000  00000000  00034716  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012662  00000000  00000000  0003915b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008af57  00000000  00000000  0004b7bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003f84  00000000  00000000  000d6714  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  000da698  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200001cc 	.word	0x200001cc
 8000128:	00000000 	.word	0x00000000
 800012c:	08008aec 	.word	0x08008aec

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200001d0 	.word	0x200001d0
 8000148:	08008aec 	.word	0x08008aec

0800014c <readInputs>:
static void MX_SPI1_Init(void);
static void MX_USART1_UART_Init(void);
/* USER CODE BEGIN PFP */

// Read PMB input states and create boolean struct plus debounce
InputData readInputs(void) {
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0

    // Simulating the GPIO pins for each field for demonstration.


    // Read for chargeEnabled
    if(HAL_GPIO_ReadPin(EN_INPUT_BUS, CH_EN) == false) { //if PB5 CH_EN low
 8000152:	2120      	movs	r1, #32
 8000154:	4820      	ldr	r0, [pc, #128]	; (80001d8 <readInputs+0x8c>)
 8000156:	f000 fe9f 	bl	8000e98 <HAL_GPIO_ReadPin>
 800015a:	4603      	mov	r3, r0
 800015c:	2b00      	cmp	r3, #0
 800015e:	d102      	bne.n	8000166 <readInputs+0x1a>
			data.chargeEnabled = true;
 8000160:	2301      	movs	r3, #1
 8000162:	703b      	strb	r3, [r7, #0]
 8000164:	e001      	b.n	800016a <readInputs+0x1e>
	}
	else{
		data.chargeEnabled = false;
 8000166:	2300      	movs	r3, #0
 8000168:	703b      	strb	r3, [r7, #0]
	}

    // Read for dischargeEnabled
    if(HAL_GPIO_ReadPin(EN_INPUT_BUS, DSC_EN) == false) { //if PB6 DSC_EN low
 800016a:	2140      	movs	r1, #64	; 0x40
 800016c:	481a      	ldr	r0, [pc, #104]	; (80001d8 <readInputs+0x8c>)
 800016e:	f000 fe93 	bl	8000e98 <HAL_GPIO_ReadPin>
 8000172:	4603      	mov	r3, r0
 8000174:	2b00      	cmp	r3, #0
 8000176:	d102      	bne.n	800017e <readInputs+0x32>
			data.dischargeEnabled = true;
 8000178:	2301      	movs	r3, #1
 800017a:	707b      	strb	r3, [r7, #1]
 800017c:	e001      	b.n	8000182 <readInputs+0x36>
	}
	else{
		data.dischargeEnabled = false;
 800017e:	2300      	movs	r3, #0
 8000180:	707b      	strb	r3, [r7, #1]
	}

    // Read for chargerDetected
    if(HAL_GPIO_ReadPin(EN_INPUT_BUS, SP_EN) == false) { //if SP_EN PB7 is low  (charger detected)
 8000182:	2180      	movs	r1, #128	; 0x80
 8000184:	4814      	ldr	r0, [pc, #80]	; (80001d8 <readInputs+0x8c>)
 8000186:	f000 fe87 	bl	8000e98 <HAL_GPIO_ReadPin>
 800018a:	4603      	mov	r3, r0
 800018c:	2b00      	cmp	r3, #0
 800018e:	d102      	bne.n	8000196 <readInputs+0x4a>
            data.chargerDetected = true;
 8000190:	2301      	movs	r3, #1
 8000192:	70bb      	strb	r3, [r7, #2]
 8000194:	e001      	b.n	800019a <readInputs+0x4e>
    }
    else{
    	data.chargerDetected = false;
 8000196:	2300      	movs	r3, #0
 8000198:	70bb      	strb	r3, [r7, #2]
    }

    // Read for antisafeEnabled
    if(HAL_GPIO_ReadPin(EN_INPUT_BUS, ANTISAFE_PIN) == false){ //if PB3 antisafe is low
 800019a:	2108      	movs	r1, #8
 800019c:	480e      	ldr	r0, [pc, #56]	; (80001d8 <readInputs+0x8c>)
 800019e:	f000 fe7b 	bl	8000e98 <HAL_GPIO_ReadPin>
 80001a2:	4603      	mov	r3, r0
 80001a4:	2b00      	cmp	r3, #0
 80001a6:	d102      	bne.n	80001ae <readInputs+0x62>
        data.antisafeEnabled = true;
 80001a8:	2301      	movs	r3, #1
 80001aa:	70fb      	strb	r3, [r7, #3]
 80001ac:	e001      	b.n	80001b2 <readInputs+0x66>
	}
	else{
		data.antisafeEnabled = false;
 80001ae:	2300      	movs	r3, #0
 80001b0:	70fb      	strb	r3, [r7, #3]
	}

    return data;
 80001b2:	683b      	ldr	r3, [r7, #0]
 80001b4:	607b      	str	r3, [r7, #4]
 80001b6:	2300      	movs	r3, #0
 80001b8:	793a      	ldrb	r2, [r7, #4]
 80001ba:	f362 0307 	bfi	r3, r2, #0, #8
 80001be:	797a      	ldrb	r2, [r7, #5]
 80001c0:	f362 230f 	bfi	r3, r2, #8, #8
 80001c4:	79ba      	ldrb	r2, [r7, #6]
 80001c6:	f362 4317 	bfi	r3, r2, #16, #8
 80001ca:	79fa      	ldrb	r2, [r7, #7]
 80001cc:	f362 631f 	bfi	r3, r2, #24, #8
}
 80001d0:	4618      	mov	r0, r3
 80001d2:	3708      	adds	r7, #8
 80001d4:	46bd      	mov	sp, r7
 80001d6:	bd80      	pop	{r7, pc}
 80001d8:	40010c00 	.word	0x40010c00

080001dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001dc:	b590      	push	{r4, r7, lr}
 80001de:	b0a7      	sub	sp, #156	; 0x9c
 80001e0:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001e2:	f000 fb41 	bl	8000868 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001e6:	f000 f867 	bl	80002b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001ea:	f000 f921 	bl	8000430 <MX_GPIO_Init>
  MX_SPI1_Init();
 80001ee:	f000 f8bf 	bl	8000370 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 80001f2:	f000 f8f3 	bl	80003dc <MX_USART1_UART_Init>
  MX_USB_DEVICE_Init();
 80001f6:	f007 fad3 	bl	80077a0 <MX_USB_DEVICE_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  static int i = 0;
	  InputData data = readInputs();
 80001fa:	f7ff ffa7 	bl	800014c <readInputs>
 80001fe:	4603      	mov	r3, r0
 8000200:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80


	  if(i%10 == 0){
 8000204:	4b27      	ldr	r3, [pc, #156]	; (80002a4 <main+0xc8>)
 8000206:	6819      	ldr	r1, [r3, #0]
 8000208:	4b27      	ldr	r3, [pc, #156]	; (80002a8 <main+0xcc>)
 800020a:	fb83 2301 	smull	r2, r3, r3, r1
 800020e:	109a      	asrs	r2, r3, #2
 8000210:	17cb      	asrs	r3, r1, #31
 8000212:	1ad2      	subs	r2, r2, r3
 8000214:	4613      	mov	r3, r2
 8000216:	009b      	lsls	r3, r3, #2
 8000218:	4413      	add	r3, r2
 800021a:	005b      	lsls	r3, r3, #1
 800021c:	1aca      	subs	r2, r1, r3
 800021e:	2a00      	cmp	r2, #0
 8000220:	d136      	bne.n	8000290 <main+0xb4>
		  uint8_t buffer[128] = {0}; // Initialize to zeros
 8000222:	2300      	movs	r3, #0
 8000224:	603b      	str	r3, [r7, #0]
 8000226:	1d3b      	adds	r3, r7, #4
 8000228:	227c      	movs	r2, #124	; 0x7c
 800022a:	2100      	movs	r1, #0
 800022c:	4618      	mov	r0, r3
 800022e:	f007 ffcb 	bl	80081c8 <memset>
		  int length = snprintf((char *)buffer, sizeof(buffer),
		  							"chargeEnabled: %s, "
		  							"dischargeEnabled: %s, "
		  							"chargerDetected: %s, "
		  							"antisafeEnabled: %s\r\n",
		  							data.chargeEnabled ? "true" : "false",
 8000232:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
		  int length = snprintf((char *)buffer, sizeof(buffer),
 8000236:	2b00      	cmp	r3, #0
 8000238:	d001      	beq.n	800023e <main+0x62>
 800023a:	4c1c      	ldr	r4, [pc, #112]	; (80002ac <main+0xd0>)
 800023c:	e000      	b.n	8000240 <main+0x64>
 800023e:	4c1c      	ldr	r4, [pc, #112]	; (80002b0 <main+0xd4>)
		  							data.dischargeEnabled ? "true" : "false",
 8000240:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
		  int length = snprintf((char *)buffer, sizeof(buffer),
 8000244:	2b00      	cmp	r3, #0
 8000246:	d001      	beq.n	800024c <main+0x70>
 8000248:	4b18      	ldr	r3, [pc, #96]	; (80002ac <main+0xd0>)
 800024a:	e000      	b.n	800024e <main+0x72>
 800024c:	4b18      	ldr	r3, [pc, #96]	; (80002b0 <main+0xd4>)
		  							data.chargerDetected ? "true" : "false",
 800024e:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
		  int length = snprintf((char *)buffer, sizeof(buffer),
 8000252:	2a00      	cmp	r2, #0
 8000254:	d001      	beq.n	800025a <main+0x7e>
 8000256:	4a15      	ldr	r2, [pc, #84]	; (80002ac <main+0xd0>)
 8000258:	e000      	b.n	800025c <main+0x80>
 800025a:	4a15      	ldr	r2, [pc, #84]	; (80002b0 <main+0xd4>)
		  							data.antisafeEnabled ? "true" : "false");
 800025c:	f897 1083 	ldrb.w	r1, [r7, #131]	; 0x83
		  int length = snprintf((char *)buffer, sizeof(buffer),
 8000260:	2900      	cmp	r1, #0
 8000262:	d001      	beq.n	8000268 <main+0x8c>
 8000264:	4911      	ldr	r1, [pc, #68]	; (80002ac <main+0xd0>)
 8000266:	e000      	b.n	800026a <main+0x8e>
 8000268:	4911      	ldr	r1, [pc, #68]	; (80002b0 <main+0xd4>)
 800026a:	4638      	mov	r0, r7
 800026c:	9102      	str	r1, [sp, #8]
 800026e:	9201      	str	r2, [sp, #4]
 8000270:	9300      	str	r3, [sp, #0]
 8000272:	4623      	mov	r3, r4
 8000274:	4a0f      	ldr	r2, [pc, #60]	; (80002b4 <main+0xd8>)
 8000276:	2180      	movs	r1, #128	; 0x80
 8000278:	f007 ff72 	bl	8008160 <sniprintf>
 800027c:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84

		  	  CDC_Transmit_FS(buffer, length);  // Use length here
 8000280:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000284:	b29a      	uxth	r2, r3
 8000286:	463b      	mov	r3, r7
 8000288:	4611      	mov	r1, r2
 800028a:	4618      	mov	r0, r3
 800028c:	f007 fb8a 	bl	80079a4 <CDC_Transmit_FS>
	  }
	  else{

	  }

	  i++;
 8000290:	4b04      	ldr	r3, [pc, #16]	; (80002a4 <main+0xc8>)
 8000292:	681b      	ldr	r3, [r3, #0]
 8000294:	3301      	adds	r3, #1
 8000296:	4a03      	ldr	r2, [pc, #12]	; (80002a4 <main+0xc8>)
 8000298:	6013      	str	r3, [r2, #0]

	  HAL_Delay(100);
 800029a:	2064      	movs	r0, #100	; 0x64
 800029c:	f000 fb46 	bl	800092c <HAL_Delay>
  {
 80002a0:	e7ab      	b.n	80001fa <main+0x1e>
 80002a2:	bf00      	nop
 80002a4:	20000284 	.word	0x20000284
 80002a8:	66666667 	.word	0x66666667
 80002ac:	08008b04 	.word	0x08008b04
 80002b0:	08008b0c 	.word	0x08008b0c
 80002b4:	08008b14 	.word	0x08008b14

080002b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002b8:	b580      	push	{r7, lr}
 80002ba:	b094      	sub	sp, #80	; 0x50
 80002bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002be:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80002c2:	2228      	movs	r2, #40	; 0x28
 80002c4:	2100      	movs	r1, #0
 80002c6:	4618      	mov	r0, r3
 80002c8:	f007 ff7e 	bl	80081c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002cc:	f107 0314 	add.w	r3, r7, #20
 80002d0:	2200      	movs	r2, #0
 80002d2:	601a      	str	r2, [r3, #0]
 80002d4:	605a      	str	r2, [r3, #4]
 80002d6:	609a      	str	r2, [r3, #8]
 80002d8:	60da      	str	r2, [r3, #12]
 80002da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002dc:	1d3b      	adds	r3, r7, #4
 80002de:	2200      	movs	r2, #0
 80002e0:	601a      	str	r2, [r3, #0]
 80002e2:	605a      	str	r2, [r3, #4]
 80002e4:	609a      	str	r2, [r3, #8]
 80002e6:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80002e8:	2301      	movs	r3, #1
 80002ea:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80002ec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 80002f2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80002f6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002f8:	2301      	movs	r3, #1
 80002fa:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002fc:	2302      	movs	r3, #2
 80002fe:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000300:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000304:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000306:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800030a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800030c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000310:	4618      	mov	r0, r3
 8000312:	f002 fad7 	bl	80028c4 <HAL_RCC_OscConfig>
 8000316:	4603      	mov	r3, r0
 8000318:	2b00      	cmp	r3, #0
 800031a:	d001      	beq.n	8000320 <SystemClock_Config+0x68>
  {
    Error_Handler();
 800031c:	f000 f93c 	bl	8000598 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000320:	230f      	movs	r3, #15
 8000322:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000324:	2302      	movs	r3, #2
 8000326:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000328:	2300      	movs	r3, #0
 800032a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800032c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000330:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000332:	2300      	movs	r3, #0
 8000334:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000336:	f107 0314 	add.w	r3, r7, #20
 800033a:	2102      	movs	r1, #2
 800033c:	4618      	mov	r0, r3
 800033e:	f002 fd43 	bl	8002dc8 <HAL_RCC_ClockConfig>
 8000342:	4603      	mov	r3, r0
 8000344:	2b00      	cmp	r3, #0
 8000346:	d001      	beq.n	800034c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000348:	f000 f926 	bl	8000598 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800034c:	2310      	movs	r3, #16
 800034e:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000350:	2300      	movs	r3, #0
 8000352:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000354:	1d3b      	adds	r3, r7, #4
 8000356:	4618      	mov	r0, r3
 8000358:	f002 fed0 	bl	80030fc <HAL_RCCEx_PeriphCLKConfig>
 800035c:	4603      	mov	r3, r0
 800035e:	2b00      	cmp	r3, #0
 8000360:	d001      	beq.n	8000366 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000362:	f000 f919 	bl	8000598 <Error_Handler>
  }
}
 8000366:	bf00      	nop
 8000368:	3750      	adds	r7, #80	; 0x50
 800036a:	46bd      	mov	sp, r7
 800036c:	bd80      	pop	{r7, pc}
	...

08000370 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000370:	b580      	push	{r7, lr}
 8000372:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000374:	4b17      	ldr	r3, [pc, #92]	; (80003d4 <MX_SPI1_Init+0x64>)
 8000376:	4a18      	ldr	r2, [pc, #96]	; (80003d8 <MX_SPI1_Init+0x68>)
 8000378:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800037a:	4b16      	ldr	r3, [pc, #88]	; (80003d4 <MX_SPI1_Init+0x64>)
 800037c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000380:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000382:	4b14      	ldr	r3, [pc, #80]	; (80003d4 <MX_SPI1_Init+0x64>)
 8000384:	2200      	movs	r2, #0
 8000386:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000388:	4b12      	ldr	r3, [pc, #72]	; (80003d4 <MX_SPI1_Init+0x64>)
 800038a:	2200      	movs	r2, #0
 800038c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800038e:	4b11      	ldr	r3, [pc, #68]	; (80003d4 <MX_SPI1_Init+0x64>)
 8000390:	2200      	movs	r2, #0
 8000392:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000394:	4b0f      	ldr	r3, [pc, #60]	; (80003d4 <MX_SPI1_Init+0x64>)
 8000396:	2200      	movs	r2, #0
 8000398:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800039a:	4b0e      	ldr	r3, [pc, #56]	; (80003d4 <MX_SPI1_Init+0x64>)
 800039c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80003a0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80003a2:	4b0c      	ldr	r3, [pc, #48]	; (80003d4 <MX_SPI1_Init+0x64>)
 80003a4:	2218      	movs	r2, #24
 80003a6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80003a8:	4b0a      	ldr	r3, [pc, #40]	; (80003d4 <MX_SPI1_Init+0x64>)
 80003aa:	2200      	movs	r2, #0
 80003ac:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80003ae:	4b09      	ldr	r3, [pc, #36]	; (80003d4 <MX_SPI1_Init+0x64>)
 80003b0:	2200      	movs	r2, #0
 80003b2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80003b4:	4b07      	ldr	r3, [pc, #28]	; (80003d4 <MX_SPI1_Init+0x64>)
 80003b6:	2200      	movs	r2, #0
 80003b8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80003ba:	4b06      	ldr	r3, [pc, #24]	; (80003d4 <MX_SPI1_Init+0x64>)
 80003bc:	220a      	movs	r2, #10
 80003be:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80003c0:	4804      	ldr	r0, [pc, #16]	; (80003d4 <MX_SPI1_Init+0x64>)
 80003c2:	f002 ff51 	bl	8003268 <HAL_SPI_Init>
 80003c6:	4603      	mov	r3, r0
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d001      	beq.n	80003d0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80003cc:	f000 f8e4 	bl	8000598 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80003d0:	bf00      	nop
 80003d2:	bd80      	pop	{r7, pc}
 80003d4:	200001e8 	.word	0x200001e8
 80003d8:	40013000 	.word	0x40013000

080003dc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80003dc:	b580      	push	{r7, lr}
 80003de:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80003e0:	4b11      	ldr	r3, [pc, #68]	; (8000428 <MX_USART1_UART_Init+0x4c>)
 80003e2:	4a12      	ldr	r2, [pc, #72]	; (800042c <MX_USART1_UART_Init+0x50>)
 80003e4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80003e6:	4b10      	ldr	r3, [pc, #64]	; (8000428 <MX_USART1_UART_Init+0x4c>)
 80003e8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80003ec:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80003ee:	4b0e      	ldr	r3, [pc, #56]	; (8000428 <MX_USART1_UART_Init+0x4c>)
 80003f0:	2200      	movs	r2, #0
 80003f2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80003f4:	4b0c      	ldr	r3, [pc, #48]	; (8000428 <MX_USART1_UART_Init+0x4c>)
 80003f6:	2200      	movs	r2, #0
 80003f8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80003fa:	4b0b      	ldr	r3, [pc, #44]	; (8000428 <MX_USART1_UART_Init+0x4c>)
 80003fc:	2200      	movs	r2, #0
 80003fe:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000400:	4b09      	ldr	r3, [pc, #36]	; (8000428 <MX_USART1_UART_Init+0x4c>)
 8000402:	220c      	movs	r2, #12
 8000404:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000406:	4b08      	ldr	r3, [pc, #32]	; (8000428 <MX_USART1_UART_Init+0x4c>)
 8000408:	2200      	movs	r2, #0
 800040a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800040c:	4b06      	ldr	r3, [pc, #24]	; (8000428 <MX_USART1_UART_Init+0x4c>)
 800040e:	2200      	movs	r2, #0
 8000410:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000412:	4805      	ldr	r0, [pc, #20]	; (8000428 <MX_USART1_UART_Init+0x4c>)
 8000414:	f002 ffac 	bl	8003370 <HAL_UART_Init>
 8000418:	4603      	mov	r3, r0
 800041a:	2b00      	cmp	r3, #0
 800041c:	d001      	beq.n	8000422 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800041e:	f000 f8bb 	bl	8000598 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000422:	bf00      	nop
 8000424:	bd80      	pop	{r7, pc}
 8000426:	bf00      	nop
 8000428:	20000240 	.word	0x20000240
 800042c:	40013800 	.word	0x40013800

08000430 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000430:	b580      	push	{r7, lr}
 8000432:	b088      	sub	sp, #32
 8000434:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000436:	f107 0310 	add.w	r3, r7, #16
 800043a:	2200      	movs	r2, #0
 800043c:	601a      	str	r2, [r3, #0]
 800043e:	605a      	str	r2, [r3, #4]
 8000440:	609a      	str	r2, [r3, #8]
 8000442:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000444:	4b4f      	ldr	r3, [pc, #316]	; (8000584 <MX_GPIO_Init+0x154>)
 8000446:	699b      	ldr	r3, [r3, #24]
 8000448:	4a4e      	ldr	r2, [pc, #312]	; (8000584 <MX_GPIO_Init+0x154>)
 800044a:	f043 0310 	orr.w	r3, r3, #16
 800044e:	6193      	str	r3, [r2, #24]
 8000450:	4b4c      	ldr	r3, [pc, #304]	; (8000584 <MX_GPIO_Init+0x154>)
 8000452:	699b      	ldr	r3, [r3, #24]
 8000454:	f003 0310 	and.w	r3, r3, #16
 8000458:	60fb      	str	r3, [r7, #12]
 800045a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800045c:	4b49      	ldr	r3, [pc, #292]	; (8000584 <MX_GPIO_Init+0x154>)
 800045e:	699b      	ldr	r3, [r3, #24]
 8000460:	4a48      	ldr	r2, [pc, #288]	; (8000584 <MX_GPIO_Init+0x154>)
 8000462:	f043 0320 	orr.w	r3, r3, #32
 8000466:	6193      	str	r3, [r2, #24]
 8000468:	4b46      	ldr	r3, [pc, #280]	; (8000584 <MX_GPIO_Init+0x154>)
 800046a:	699b      	ldr	r3, [r3, #24]
 800046c:	f003 0320 	and.w	r3, r3, #32
 8000470:	60bb      	str	r3, [r7, #8]
 8000472:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000474:	4b43      	ldr	r3, [pc, #268]	; (8000584 <MX_GPIO_Init+0x154>)
 8000476:	699b      	ldr	r3, [r3, #24]
 8000478:	4a42      	ldr	r2, [pc, #264]	; (8000584 <MX_GPIO_Init+0x154>)
 800047a:	f043 0304 	orr.w	r3, r3, #4
 800047e:	6193      	str	r3, [r2, #24]
 8000480:	4b40      	ldr	r3, [pc, #256]	; (8000584 <MX_GPIO_Init+0x154>)
 8000482:	699b      	ldr	r3, [r3, #24]
 8000484:	f003 0304 	and.w	r3, r3, #4
 8000488:	607b      	str	r3, [r7, #4]
 800048a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800048c:	4b3d      	ldr	r3, [pc, #244]	; (8000584 <MX_GPIO_Init+0x154>)
 800048e:	699b      	ldr	r3, [r3, #24]
 8000490:	4a3c      	ldr	r2, [pc, #240]	; (8000584 <MX_GPIO_Init+0x154>)
 8000492:	f043 0308 	orr.w	r3, r3, #8
 8000496:	6193      	str	r3, [r2, #24]
 8000498:	4b3a      	ldr	r3, [pc, #232]	; (8000584 <MX_GPIO_Init+0x154>)
 800049a:	699b      	ldr	r3, [r3, #24]
 800049c:	f003 0308 	and.w	r3, r3, #8
 80004a0:	603b      	str	r3, [r7, #0]
 80004a2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80004a4:	2200      	movs	r2, #0
 80004a6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004aa:	4837      	ldr	r0, [pc, #220]	; (8000588 <MX_GPIO_Init+0x158>)
 80004ac:	f000 fd0b 	bl	8000ec6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 80004b0:	2200      	movs	r2, #0
 80004b2:	f44f 718f 	mov.w	r1, #286	; 0x11e
 80004b6:	4835      	ldr	r0, [pc, #212]	; (800058c <MX_GPIO_Init+0x15c>)
 80004b8:	f000 fd05 	bl	8000ec6 <HAL_GPIO_WritePin>
                          |GPIO_PIN_8, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11
 80004bc:	2200      	movs	r2, #0
 80004be:	f64f 4113 	movw	r1, #64531	; 0xfc13
 80004c2:	4833      	ldr	r0, [pc, #204]	; (8000590 <MX_GPIO_Init+0x160>)
 80004c4:	f000 fcff 	bl	8000ec6 <HAL_GPIO_WritePin>
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_4, GPIO_PIN_RESET);

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80004c8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80004cc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004ce:	2301      	movs	r3, #1
 80004d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004d2:	2300      	movs	r3, #0
 80004d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004d6:	2302      	movs	r3, #2
 80004d8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80004da:	f107 0310 	add.w	r3, r7, #16
 80004de:	4619      	mov	r1, r3
 80004e0:	4829      	ldr	r0, [pc, #164]	; (8000588 <MX_GPIO_Init+0x158>)
 80004e2:	f000 fb55 	bl	8000b90 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80004e6:	2301      	movs	r3, #1
 80004e8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80004ea:	4b2a      	ldr	r3, [pc, #168]	; (8000594 <MX_GPIO_Init+0x164>)
 80004ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80004ee:	2301      	movs	r3, #1
 80004f0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004f2:	f107 0310 	add.w	r3, r7, #16
 80004f6:	4619      	mov	r1, r3
 80004f8:	4824      	ldr	r0, [pc, #144]	; (800058c <MX_GPIO_Init+0x15c>)
 80004fa:	f000 fb49 	bl	8000b90 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA3 PA4
                           PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 80004fe:	f44f 738f 	mov.w	r3, #286	; 0x11e
 8000502:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000504:	2301      	movs	r3, #1
 8000506:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000508:	2300      	movs	r3, #0
 800050a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800050c:	2302      	movs	r3, #2
 800050e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000510:	f107 0310 	add.w	r3, r7, #16
 8000514:	4619      	mov	r1, r3
 8000516:	481d      	ldr	r0, [pc, #116]	; (800058c <MX_GPIO_Init+0x15c>)
 8000518:	f000 fb3a 	bl	8000b90 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB10 PB11
                           PB12 PB13 PB14 PB15
                           PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11
 800051c:	f64f 4313 	movw	r3, #64531	; 0xfc13
 8000520:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000522:	2301      	movs	r3, #1
 8000524:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000526:	2300      	movs	r3, #0
 8000528:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800052a:	2302      	movs	r3, #2
 800052c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800052e:	f107 0310 	add.w	r3, r7, #16
 8000532:	4619      	mov	r1, r3
 8000534:	4816      	ldr	r0, [pc, #88]	; (8000590 <MX_GPIO_Init+0x160>)
 8000536:	f000 fb2b 	bl	8000b90 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 800053a:	2308      	movs	r3, #8
 800053c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800053e:	2300      	movs	r3, #0
 8000540:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000542:	2301      	movs	r3, #1
 8000544:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000546:	f107 0310 	add.w	r3, r7, #16
 800054a:	4619      	mov	r1, r3
 800054c:	4810      	ldr	r0, [pc, #64]	; (8000590 <MX_GPIO_Init+0x160>)
 800054e:	f000 fb1f 	bl	8000b90 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB5 PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000552:	23e0      	movs	r3, #224	; 0xe0
 8000554:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000556:	2300      	movs	r3, #0
 8000558:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800055a:	2300      	movs	r3, #0
 800055c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800055e:	f107 0310 	add.w	r3, r7, #16
 8000562:	4619      	mov	r1, r3
 8000564:	480a      	ldr	r0, [pc, #40]	; (8000590 <MX_GPIO_Init+0x160>)
 8000566:	f000 fb13 	bl	8000b90 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800056a:	2200      	movs	r2, #0
 800056c:	2100      	movs	r1, #0
 800056e:	2006      	movs	r0, #6
 8000570:	f000 fad7 	bl	8000b22 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000574:	2006      	movs	r0, #6
 8000576:	f000 faf0 	bl	8000b5a <HAL_NVIC_EnableIRQ>

}
 800057a:	bf00      	nop
 800057c:	3720      	adds	r7, #32
 800057e:	46bd      	mov	sp, r7
 8000580:	bd80      	pop	{r7, pc}
 8000582:	bf00      	nop
 8000584:	40021000 	.word	0x40021000
 8000588:	40011000 	.word	0x40011000
 800058c:	40010800 	.word	0x40010800
 8000590:	40010c00 	.word	0x40010c00
 8000594:	10110000 	.word	0x10110000

08000598 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000598:	b480      	push	{r7}
 800059a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800059c:	b672      	cpsid	i
}
 800059e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005a0:	e7fe      	b.n	80005a0 <Error_Handler+0x8>
	...

080005a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005a4:	b480      	push	{r7}
 80005a6:	b085      	sub	sp, #20
 80005a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80005aa:	4b15      	ldr	r3, [pc, #84]	; (8000600 <HAL_MspInit+0x5c>)
 80005ac:	699b      	ldr	r3, [r3, #24]
 80005ae:	4a14      	ldr	r2, [pc, #80]	; (8000600 <HAL_MspInit+0x5c>)
 80005b0:	f043 0301 	orr.w	r3, r3, #1
 80005b4:	6193      	str	r3, [r2, #24]
 80005b6:	4b12      	ldr	r3, [pc, #72]	; (8000600 <HAL_MspInit+0x5c>)
 80005b8:	699b      	ldr	r3, [r3, #24]
 80005ba:	f003 0301 	and.w	r3, r3, #1
 80005be:	60bb      	str	r3, [r7, #8]
 80005c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005c2:	4b0f      	ldr	r3, [pc, #60]	; (8000600 <HAL_MspInit+0x5c>)
 80005c4:	69db      	ldr	r3, [r3, #28]
 80005c6:	4a0e      	ldr	r2, [pc, #56]	; (8000600 <HAL_MspInit+0x5c>)
 80005c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005cc:	61d3      	str	r3, [r2, #28]
 80005ce:	4b0c      	ldr	r3, [pc, #48]	; (8000600 <HAL_MspInit+0x5c>)
 80005d0:	69db      	ldr	r3, [r3, #28]
 80005d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005d6:	607b      	str	r3, [r7, #4]
 80005d8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80005da:	4b0a      	ldr	r3, [pc, #40]	; (8000604 <HAL_MspInit+0x60>)
 80005dc:	685b      	ldr	r3, [r3, #4]
 80005de:	60fb      	str	r3, [r7, #12]
 80005e0:	68fb      	ldr	r3, [r7, #12]
 80005e2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80005e6:	60fb      	str	r3, [r7, #12]
 80005e8:	68fb      	ldr	r3, [r7, #12]
 80005ea:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80005ee:	60fb      	str	r3, [r7, #12]
 80005f0:	4a04      	ldr	r2, [pc, #16]	; (8000604 <HAL_MspInit+0x60>)
 80005f2:	68fb      	ldr	r3, [r7, #12]
 80005f4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005f6:	bf00      	nop
 80005f8:	3714      	adds	r7, #20
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bc80      	pop	{r7}
 80005fe:	4770      	bx	lr
 8000600:	40021000 	.word	0x40021000
 8000604:	40010000 	.word	0x40010000

08000608 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b088      	sub	sp, #32
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000610:	f107 0310 	add.w	r3, r7, #16
 8000614:	2200      	movs	r2, #0
 8000616:	601a      	str	r2, [r3, #0]
 8000618:	605a      	str	r2, [r3, #4]
 800061a:	609a      	str	r2, [r3, #8]
 800061c:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	4a1b      	ldr	r2, [pc, #108]	; (8000690 <HAL_SPI_MspInit+0x88>)
 8000624:	4293      	cmp	r3, r2
 8000626:	d12f      	bne.n	8000688 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000628:	4b1a      	ldr	r3, [pc, #104]	; (8000694 <HAL_SPI_MspInit+0x8c>)
 800062a:	699b      	ldr	r3, [r3, #24]
 800062c:	4a19      	ldr	r2, [pc, #100]	; (8000694 <HAL_SPI_MspInit+0x8c>)
 800062e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000632:	6193      	str	r3, [r2, #24]
 8000634:	4b17      	ldr	r3, [pc, #92]	; (8000694 <HAL_SPI_MspInit+0x8c>)
 8000636:	699b      	ldr	r3, [r3, #24]
 8000638:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800063c:	60fb      	str	r3, [r7, #12]
 800063e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000640:	4b14      	ldr	r3, [pc, #80]	; (8000694 <HAL_SPI_MspInit+0x8c>)
 8000642:	699b      	ldr	r3, [r3, #24]
 8000644:	4a13      	ldr	r2, [pc, #76]	; (8000694 <HAL_SPI_MspInit+0x8c>)
 8000646:	f043 0304 	orr.w	r3, r3, #4
 800064a:	6193      	str	r3, [r2, #24]
 800064c:	4b11      	ldr	r3, [pc, #68]	; (8000694 <HAL_SPI_MspInit+0x8c>)
 800064e:	699b      	ldr	r3, [r3, #24]
 8000650:	f003 0304 	and.w	r3, r3, #4
 8000654:	60bb      	str	r3, [r7, #8]
 8000656:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000658:	23a0      	movs	r3, #160	; 0xa0
 800065a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800065c:	2302      	movs	r3, #2
 800065e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000660:	2303      	movs	r3, #3
 8000662:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000664:	f107 0310 	add.w	r3, r7, #16
 8000668:	4619      	mov	r1, r3
 800066a:	480b      	ldr	r0, [pc, #44]	; (8000698 <HAL_SPI_MspInit+0x90>)
 800066c:	f000 fa90 	bl	8000b90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000670:	2340      	movs	r3, #64	; 0x40
 8000672:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000674:	2300      	movs	r3, #0
 8000676:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000678:	2300      	movs	r3, #0
 800067a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800067c:	f107 0310 	add.w	r3, r7, #16
 8000680:	4619      	mov	r1, r3
 8000682:	4805      	ldr	r0, [pc, #20]	; (8000698 <HAL_SPI_MspInit+0x90>)
 8000684:	f000 fa84 	bl	8000b90 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000688:	bf00      	nop
 800068a:	3720      	adds	r7, #32
 800068c:	46bd      	mov	sp, r7
 800068e:	bd80      	pop	{r7, pc}
 8000690:	40013000 	.word	0x40013000
 8000694:	40021000 	.word	0x40021000
 8000698:	40010800 	.word	0x40010800

0800069c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b088      	sub	sp, #32
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006a4:	f107 0310 	add.w	r3, r7, #16
 80006a8:	2200      	movs	r2, #0
 80006aa:	601a      	str	r2, [r3, #0]
 80006ac:	605a      	str	r2, [r3, #4]
 80006ae:	609a      	str	r2, [r3, #8]
 80006b0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	4a1c      	ldr	r2, [pc, #112]	; (8000728 <HAL_UART_MspInit+0x8c>)
 80006b8:	4293      	cmp	r3, r2
 80006ba:	d131      	bne.n	8000720 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80006bc:	4b1b      	ldr	r3, [pc, #108]	; (800072c <HAL_UART_MspInit+0x90>)
 80006be:	699b      	ldr	r3, [r3, #24]
 80006c0:	4a1a      	ldr	r2, [pc, #104]	; (800072c <HAL_UART_MspInit+0x90>)
 80006c2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006c6:	6193      	str	r3, [r2, #24]
 80006c8:	4b18      	ldr	r3, [pc, #96]	; (800072c <HAL_UART_MspInit+0x90>)
 80006ca:	699b      	ldr	r3, [r3, #24]
 80006cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006d0:	60fb      	str	r3, [r7, #12]
 80006d2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006d4:	4b15      	ldr	r3, [pc, #84]	; (800072c <HAL_UART_MspInit+0x90>)
 80006d6:	699b      	ldr	r3, [r3, #24]
 80006d8:	4a14      	ldr	r2, [pc, #80]	; (800072c <HAL_UART_MspInit+0x90>)
 80006da:	f043 0304 	orr.w	r3, r3, #4
 80006de:	6193      	str	r3, [r2, #24]
 80006e0:	4b12      	ldr	r3, [pc, #72]	; (800072c <HAL_UART_MspInit+0x90>)
 80006e2:	699b      	ldr	r3, [r3, #24]
 80006e4:	f003 0304 	and.w	r3, r3, #4
 80006e8:	60bb      	str	r3, [r7, #8]
 80006ea:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80006ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 80006f0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006f2:	2302      	movs	r3, #2
 80006f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006f6:	2303      	movs	r3, #3
 80006f8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006fa:	f107 0310 	add.w	r3, r7, #16
 80006fe:	4619      	mov	r1, r3
 8000700:	480b      	ldr	r0, [pc, #44]	; (8000730 <HAL_UART_MspInit+0x94>)
 8000702:	f000 fa45 	bl	8000b90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000706:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800070a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800070c:	2300      	movs	r3, #0
 800070e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000710:	2300      	movs	r3, #0
 8000712:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000714:	f107 0310 	add.w	r3, r7, #16
 8000718:	4619      	mov	r1, r3
 800071a:	4805      	ldr	r0, [pc, #20]	; (8000730 <HAL_UART_MspInit+0x94>)
 800071c:	f000 fa38 	bl	8000b90 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000720:	bf00      	nop
 8000722:	3720      	adds	r7, #32
 8000724:	46bd      	mov	sp, r7
 8000726:	bd80      	pop	{r7, pc}
 8000728:	40013800 	.word	0x40013800
 800072c:	40021000 	.word	0x40021000
 8000730:	40010800 	.word	0x40010800

08000734 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000734:	b480      	push	{r7}
 8000736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000738:	e7fe      	b.n	8000738 <NMI_Handler+0x4>

0800073a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800073a:	b480      	push	{r7}
 800073c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800073e:	e7fe      	b.n	800073e <HardFault_Handler+0x4>

08000740 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000740:	b480      	push	{r7}
 8000742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000744:	e7fe      	b.n	8000744 <MemManage_Handler+0x4>

08000746 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000746:	b480      	push	{r7}
 8000748:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800074a:	e7fe      	b.n	800074a <BusFault_Handler+0x4>

0800074c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800074c:	b480      	push	{r7}
 800074e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000750:	e7fe      	b.n	8000750 <UsageFault_Handler+0x4>

08000752 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000752:	b480      	push	{r7}
 8000754:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000756:	bf00      	nop
 8000758:	46bd      	mov	sp, r7
 800075a:	bc80      	pop	{r7}
 800075c:	4770      	bx	lr

0800075e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800075e:	b480      	push	{r7}
 8000760:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000762:	bf00      	nop
 8000764:	46bd      	mov	sp, r7
 8000766:	bc80      	pop	{r7}
 8000768:	4770      	bx	lr

0800076a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800076a:	b480      	push	{r7}
 800076c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800076e:	bf00      	nop
 8000770:	46bd      	mov	sp, r7
 8000772:	bc80      	pop	{r7}
 8000774:	4770      	bx	lr

08000776 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000776:	b580      	push	{r7, lr}
 8000778:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800077a:	f000 f8bb 	bl	80008f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800077e:	bf00      	nop
 8000780:	bd80      	pop	{r7, pc}

08000782 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000782:	b580      	push	{r7, lr}
 8000784:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000786:	2001      	movs	r0, #1
 8000788:	f000 fbb6 	bl	8000ef8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800078c:	bf00      	nop
 800078e:	bd80      	pop	{r7, pc}

08000790 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000794:	4802      	ldr	r0, [pc, #8]	; (80007a0 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000796:	f000 fd02 	bl	800119e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 800079a:	bf00      	nop
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	20000f60 	.word	0x20000f60

080007a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b086      	sub	sp, #24
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80007ac:	4a14      	ldr	r2, [pc, #80]	; (8000800 <_sbrk+0x5c>)
 80007ae:	4b15      	ldr	r3, [pc, #84]	; (8000804 <_sbrk+0x60>)
 80007b0:	1ad3      	subs	r3, r2, r3
 80007b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80007b4:	697b      	ldr	r3, [r7, #20]
 80007b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80007b8:	4b13      	ldr	r3, [pc, #76]	; (8000808 <_sbrk+0x64>)
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d102      	bne.n	80007c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80007c0:	4b11      	ldr	r3, [pc, #68]	; (8000808 <_sbrk+0x64>)
 80007c2:	4a12      	ldr	r2, [pc, #72]	; (800080c <_sbrk+0x68>)
 80007c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80007c6:	4b10      	ldr	r3, [pc, #64]	; (8000808 <_sbrk+0x64>)
 80007c8:	681a      	ldr	r2, [r3, #0]
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	4413      	add	r3, r2
 80007ce:	693a      	ldr	r2, [r7, #16]
 80007d0:	429a      	cmp	r2, r3
 80007d2:	d207      	bcs.n	80007e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80007d4:	f007 fd00 	bl	80081d8 <__errno>
 80007d8:	4603      	mov	r3, r0
 80007da:	220c      	movs	r2, #12
 80007dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80007de:	f04f 33ff 	mov.w	r3, #4294967295
 80007e2:	e009      	b.n	80007f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80007e4:	4b08      	ldr	r3, [pc, #32]	; (8000808 <_sbrk+0x64>)
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80007ea:	4b07      	ldr	r3, [pc, #28]	; (8000808 <_sbrk+0x64>)
 80007ec:	681a      	ldr	r2, [r3, #0]
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	4413      	add	r3, r2
 80007f2:	4a05      	ldr	r2, [pc, #20]	; (8000808 <_sbrk+0x64>)
 80007f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80007f6:	68fb      	ldr	r3, [r7, #12]
}
 80007f8:	4618      	mov	r0, r3
 80007fa:	3718      	adds	r7, #24
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bd80      	pop	{r7, pc}
 8000800:	20005000 	.word	0x20005000
 8000804:	00000400 	.word	0x00000400
 8000808:	20000288 	.word	0x20000288
 800080c:	200015b8 	.word	0x200015b8

08000810 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000810:	b480      	push	{r7}
 8000812:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000814:	bf00      	nop
 8000816:	46bd      	mov	sp, r7
 8000818:	bc80      	pop	{r7}
 800081a:	4770      	bx	lr

0800081c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800081c:	480c      	ldr	r0, [pc, #48]	; (8000850 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800081e:	490d      	ldr	r1, [pc, #52]	; (8000854 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000820:	4a0d      	ldr	r2, [pc, #52]	; (8000858 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000822:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000824:	e002      	b.n	800082c <LoopCopyDataInit>

08000826 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000826:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000828:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800082a:	3304      	adds	r3, #4

0800082c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800082c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800082e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000830:	d3f9      	bcc.n	8000826 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000832:	4a0a      	ldr	r2, [pc, #40]	; (800085c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000834:	4c0a      	ldr	r4, [pc, #40]	; (8000860 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000836:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000838:	e001      	b.n	800083e <LoopFillZerobss>

0800083a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800083a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800083c:	3204      	adds	r2, #4

0800083e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800083e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000840:	d3fb      	bcc.n	800083a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000842:	f7ff ffe5 	bl	8000810 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000846:	f007 fccd 	bl	80081e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800084a:	f7ff fcc7 	bl	80001dc <main>
  bx lr
 800084e:	4770      	bx	lr
  ldr r0, =_sdata
 8000850:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000854:	200001cc 	.word	0x200001cc
  ldr r2, =_sidata
 8000858:	08008c14 	.word	0x08008c14
  ldr r2, =_sbss
 800085c:	200001cc 	.word	0x200001cc
  ldr r4, =_ebss
 8000860:	200015b4 	.word	0x200015b4

08000864 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000864:	e7fe      	b.n	8000864 <ADC1_2_IRQHandler>
	...

08000868 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800086c:	4b08      	ldr	r3, [pc, #32]	; (8000890 <HAL_Init+0x28>)
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	4a07      	ldr	r2, [pc, #28]	; (8000890 <HAL_Init+0x28>)
 8000872:	f043 0310 	orr.w	r3, r3, #16
 8000876:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000878:	2003      	movs	r0, #3
 800087a:	f000 f947 	bl	8000b0c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800087e:	200f      	movs	r0, #15
 8000880:	f000 f808 	bl	8000894 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000884:	f7ff fe8e 	bl	80005a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000888:	2300      	movs	r3, #0
}
 800088a:	4618      	mov	r0, r3
 800088c:	bd80      	pop	{r7, pc}
 800088e:	bf00      	nop
 8000890:	40022000 	.word	0x40022000

08000894 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b082      	sub	sp, #8
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800089c:	4b12      	ldr	r3, [pc, #72]	; (80008e8 <HAL_InitTick+0x54>)
 800089e:	681a      	ldr	r2, [r3, #0]
 80008a0:	4b12      	ldr	r3, [pc, #72]	; (80008ec <HAL_InitTick+0x58>)
 80008a2:	781b      	ldrb	r3, [r3, #0]
 80008a4:	4619      	mov	r1, r3
 80008a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80008ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80008b2:	4618      	mov	r0, r3
 80008b4:	f000 f95f 	bl	8000b76 <HAL_SYSTICK_Config>
 80008b8:	4603      	mov	r3, r0
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d001      	beq.n	80008c2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80008be:	2301      	movs	r3, #1
 80008c0:	e00e      	b.n	80008e0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	2b0f      	cmp	r3, #15
 80008c6:	d80a      	bhi.n	80008de <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008c8:	2200      	movs	r2, #0
 80008ca:	6879      	ldr	r1, [r7, #4]
 80008cc:	f04f 30ff 	mov.w	r0, #4294967295
 80008d0:	f000 f927 	bl	8000b22 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008d4:	4a06      	ldr	r2, [pc, #24]	; (80008f0 <HAL_InitTick+0x5c>)
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80008da:	2300      	movs	r3, #0
 80008dc:	e000      	b.n	80008e0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80008de:	2301      	movs	r3, #1
}
 80008e0:	4618      	mov	r0, r3
 80008e2:	3708      	adds	r7, #8
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bd80      	pop	{r7, pc}
 80008e8:	20000000 	.word	0x20000000
 80008ec:	20000008 	.word	0x20000008
 80008f0:	20000004 	.word	0x20000004

080008f4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008f4:	b480      	push	{r7}
 80008f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008f8:	4b05      	ldr	r3, [pc, #20]	; (8000910 <HAL_IncTick+0x1c>)
 80008fa:	781b      	ldrb	r3, [r3, #0]
 80008fc:	461a      	mov	r2, r3
 80008fe:	4b05      	ldr	r3, [pc, #20]	; (8000914 <HAL_IncTick+0x20>)
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	4413      	add	r3, r2
 8000904:	4a03      	ldr	r2, [pc, #12]	; (8000914 <HAL_IncTick+0x20>)
 8000906:	6013      	str	r3, [r2, #0]
}
 8000908:	bf00      	nop
 800090a:	46bd      	mov	sp, r7
 800090c:	bc80      	pop	{r7}
 800090e:	4770      	bx	lr
 8000910:	20000008 	.word	0x20000008
 8000914:	2000028c 	.word	0x2000028c

08000918 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000918:	b480      	push	{r7}
 800091a:	af00      	add	r7, sp, #0
  return uwTick;
 800091c:	4b02      	ldr	r3, [pc, #8]	; (8000928 <HAL_GetTick+0x10>)
 800091e:	681b      	ldr	r3, [r3, #0]
}
 8000920:	4618      	mov	r0, r3
 8000922:	46bd      	mov	sp, r7
 8000924:	bc80      	pop	{r7}
 8000926:	4770      	bx	lr
 8000928:	2000028c 	.word	0x2000028c

0800092c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b084      	sub	sp, #16
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000934:	f7ff fff0 	bl	8000918 <HAL_GetTick>
 8000938:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800093e:	68fb      	ldr	r3, [r7, #12]
 8000940:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000944:	d005      	beq.n	8000952 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000946:	4b0a      	ldr	r3, [pc, #40]	; (8000970 <HAL_Delay+0x44>)
 8000948:	781b      	ldrb	r3, [r3, #0]
 800094a:	461a      	mov	r2, r3
 800094c:	68fb      	ldr	r3, [r7, #12]
 800094e:	4413      	add	r3, r2
 8000950:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000952:	bf00      	nop
 8000954:	f7ff ffe0 	bl	8000918 <HAL_GetTick>
 8000958:	4602      	mov	r2, r0
 800095a:	68bb      	ldr	r3, [r7, #8]
 800095c:	1ad3      	subs	r3, r2, r3
 800095e:	68fa      	ldr	r2, [r7, #12]
 8000960:	429a      	cmp	r2, r3
 8000962:	d8f7      	bhi.n	8000954 <HAL_Delay+0x28>
  {
  }
}
 8000964:	bf00      	nop
 8000966:	bf00      	nop
 8000968:	3710      	adds	r7, #16
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	20000008 	.word	0x20000008

08000974 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000974:	b480      	push	{r7}
 8000976:	b085      	sub	sp, #20
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	f003 0307 	and.w	r3, r3, #7
 8000982:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000984:	4b0c      	ldr	r3, [pc, #48]	; (80009b8 <__NVIC_SetPriorityGrouping+0x44>)
 8000986:	68db      	ldr	r3, [r3, #12]
 8000988:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800098a:	68ba      	ldr	r2, [r7, #8]
 800098c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000990:	4013      	ands	r3, r2
 8000992:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000994:	68fb      	ldr	r3, [r7, #12]
 8000996:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000998:	68bb      	ldr	r3, [r7, #8]
 800099a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800099c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80009a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009a6:	4a04      	ldr	r2, [pc, #16]	; (80009b8 <__NVIC_SetPriorityGrouping+0x44>)
 80009a8:	68bb      	ldr	r3, [r7, #8]
 80009aa:	60d3      	str	r3, [r2, #12]
}
 80009ac:	bf00      	nop
 80009ae:	3714      	adds	r7, #20
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bc80      	pop	{r7}
 80009b4:	4770      	bx	lr
 80009b6:	bf00      	nop
 80009b8:	e000ed00 	.word	0xe000ed00

080009bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009c0:	4b04      	ldr	r3, [pc, #16]	; (80009d4 <__NVIC_GetPriorityGrouping+0x18>)
 80009c2:	68db      	ldr	r3, [r3, #12]
 80009c4:	0a1b      	lsrs	r3, r3, #8
 80009c6:	f003 0307 	and.w	r3, r3, #7
}
 80009ca:	4618      	mov	r0, r3
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bc80      	pop	{r7}
 80009d0:	4770      	bx	lr
 80009d2:	bf00      	nop
 80009d4:	e000ed00 	.word	0xe000ed00

080009d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009d8:	b480      	push	{r7}
 80009da:	b083      	sub	sp, #12
 80009dc:	af00      	add	r7, sp, #0
 80009de:	4603      	mov	r3, r0
 80009e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	db0b      	blt.n	8000a02 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80009ea:	79fb      	ldrb	r3, [r7, #7]
 80009ec:	f003 021f 	and.w	r2, r3, #31
 80009f0:	4906      	ldr	r1, [pc, #24]	; (8000a0c <__NVIC_EnableIRQ+0x34>)
 80009f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009f6:	095b      	lsrs	r3, r3, #5
 80009f8:	2001      	movs	r0, #1
 80009fa:	fa00 f202 	lsl.w	r2, r0, r2
 80009fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000a02:	bf00      	nop
 8000a04:	370c      	adds	r7, #12
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bc80      	pop	{r7}
 8000a0a:	4770      	bx	lr
 8000a0c:	e000e100 	.word	0xe000e100

08000a10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a10:	b480      	push	{r7}
 8000a12:	b083      	sub	sp, #12
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	4603      	mov	r3, r0
 8000a18:	6039      	str	r1, [r7, #0]
 8000a1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	db0a      	blt.n	8000a3a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a24:	683b      	ldr	r3, [r7, #0]
 8000a26:	b2da      	uxtb	r2, r3
 8000a28:	490c      	ldr	r1, [pc, #48]	; (8000a5c <__NVIC_SetPriority+0x4c>)
 8000a2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a2e:	0112      	lsls	r2, r2, #4
 8000a30:	b2d2      	uxtb	r2, r2
 8000a32:	440b      	add	r3, r1
 8000a34:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a38:	e00a      	b.n	8000a50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a3a:	683b      	ldr	r3, [r7, #0]
 8000a3c:	b2da      	uxtb	r2, r3
 8000a3e:	4908      	ldr	r1, [pc, #32]	; (8000a60 <__NVIC_SetPriority+0x50>)
 8000a40:	79fb      	ldrb	r3, [r7, #7]
 8000a42:	f003 030f 	and.w	r3, r3, #15
 8000a46:	3b04      	subs	r3, #4
 8000a48:	0112      	lsls	r2, r2, #4
 8000a4a:	b2d2      	uxtb	r2, r2
 8000a4c:	440b      	add	r3, r1
 8000a4e:	761a      	strb	r2, [r3, #24]
}
 8000a50:	bf00      	nop
 8000a52:	370c      	adds	r7, #12
 8000a54:	46bd      	mov	sp, r7
 8000a56:	bc80      	pop	{r7}
 8000a58:	4770      	bx	lr
 8000a5a:	bf00      	nop
 8000a5c:	e000e100 	.word	0xe000e100
 8000a60:	e000ed00 	.word	0xe000ed00

08000a64 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a64:	b480      	push	{r7}
 8000a66:	b089      	sub	sp, #36	; 0x24
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	60f8      	str	r0, [r7, #12]
 8000a6c:	60b9      	str	r1, [r7, #8]
 8000a6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a70:	68fb      	ldr	r3, [r7, #12]
 8000a72:	f003 0307 	and.w	r3, r3, #7
 8000a76:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a78:	69fb      	ldr	r3, [r7, #28]
 8000a7a:	f1c3 0307 	rsb	r3, r3, #7
 8000a7e:	2b04      	cmp	r3, #4
 8000a80:	bf28      	it	cs
 8000a82:	2304      	movcs	r3, #4
 8000a84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a86:	69fb      	ldr	r3, [r7, #28]
 8000a88:	3304      	adds	r3, #4
 8000a8a:	2b06      	cmp	r3, #6
 8000a8c:	d902      	bls.n	8000a94 <NVIC_EncodePriority+0x30>
 8000a8e:	69fb      	ldr	r3, [r7, #28]
 8000a90:	3b03      	subs	r3, #3
 8000a92:	e000      	b.n	8000a96 <NVIC_EncodePriority+0x32>
 8000a94:	2300      	movs	r3, #0
 8000a96:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a98:	f04f 32ff 	mov.w	r2, #4294967295
 8000a9c:	69bb      	ldr	r3, [r7, #24]
 8000a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000aa2:	43da      	mvns	r2, r3
 8000aa4:	68bb      	ldr	r3, [r7, #8]
 8000aa6:	401a      	ands	r2, r3
 8000aa8:	697b      	ldr	r3, [r7, #20]
 8000aaa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000aac:	f04f 31ff 	mov.w	r1, #4294967295
 8000ab0:	697b      	ldr	r3, [r7, #20]
 8000ab2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ab6:	43d9      	mvns	r1, r3
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000abc:	4313      	orrs	r3, r2
         );
}
 8000abe:	4618      	mov	r0, r3
 8000ac0:	3724      	adds	r7, #36	; 0x24
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bc80      	pop	{r7}
 8000ac6:	4770      	bx	lr

08000ac8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b082      	sub	sp, #8
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	3b01      	subs	r3, #1
 8000ad4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ad8:	d301      	bcc.n	8000ade <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ada:	2301      	movs	r3, #1
 8000adc:	e00f      	b.n	8000afe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ade:	4a0a      	ldr	r2, [pc, #40]	; (8000b08 <SysTick_Config+0x40>)
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	3b01      	subs	r3, #1
 8000ae4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ae6:	210f      	movs	r1, #15
 8000ae8:	f04f 30ff 	mov.w	r0, #4294967295
 8000aec:	f7ff ff90 	bl	8000a10 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000af0:	4b05      	ldr	r3, [pc, #20]	; (8000b08 <SysTick_Config+0x40>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000af6:	4b04      	ldr	r3, [pc, #16]	; (8000b08 <SysTick_Config+0x40>)
 8000af8:	2207      	movs	r2, #7
 8000afa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000afc:	2300      	movs	r3, #0
}
 8000afe:	4618      	mov	r0, r3
 8000b00:	3708      	adds	r7, #8
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	e000e010 	.word	0xe000e010

08000b0c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b082      	sub	sp, #8
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b14:	6878      	ldr	r0, [r7, #4]
 8000b16:	f7ff ff2d 	bl	8000974 <__NVIC_SetPriorityGrouping>
}
 8000b1a:	bf00      	nop
 8000b1c:	3708      	adds	r7, #8
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}

08000b22 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b22:	b580      	push	{r7, lr}
 8000b24:	b086      	sub	sp, #24
 8000b26:	af00      	add	r7, sp, #0
 8000b28:	4603      	mov	r3, r0
 8000b2a:	60b9      	str	r1, [r7, #8]
 8000b2c:	607a      	str	r2, [r7, #4]
 8000b2e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b30:	2300      	movs	r3, #0
 8000b32:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b34:	f7ff ff42 	bl	80009bc <__NVIC_GetPriorityGrouping>
 8000b38:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b3a:	687a      	ldr	r2, [r7, #4]
 8000b3c:	68b9      	ldr	r1, [r7, #8]
 8000b3e:	6978      	ldr	r0, [r7, #20]
 8000b40:	f7ff ff90 	bl	8000a64 <NVIC_EncodePriority>
 8000b44:	4602      	mov	r2, r0
 8000b46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b4a:	4611      	mov	r1, r2
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	f7ff ff5f 	bl	8000a10 <__NVIC_SetPriority>
}
 8000b52:	bf00      	nop
 8000b54:	3718      	adds	r7, #24
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}

08000b5a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b5a:	b580      	push	{r7, lr}
 8000b5c:	b082      	sub	sp, #8
 8000b5e:	af00      	add	r7, sp, #0
 8000b60:	4603      	mov	r3, r0
 8000b62:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b68:	4618      	mov	r0, r3
 8000b6a:	f7ff ff35 	bl	80009d8 <__NVIC_EnableIRQ>
}
 8000b6e:	bf00      	nop
 8000b70:	3708      	adds	r7, #8
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}

08000b76 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b76:	b580      	push	{r7, lr}
 8000b78:	b082      	sub	sp, #8
 8000b7a:	af00      	add	r7, sp, #0
 8000b7c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b7e:	6878      	ldr	r0, [r7, #4]
 8000b80:	f7ff ffa2 	bl	8000ac8 <SysTick_Config>
 8000b84:	4603      	mov	r3, r0
}
 8000b86:	4618      	mov	r0, r3
 8000b88:	3708      	adds	r7, #8
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}
	...

08000b90 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b90:	b480      	push	{r7}
 8000b92:	b08b      	sub	sp, #44	; 0x2c
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
 8000b98:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ba2:	e169      	b.n	8000e78 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000ba4:	2201      	movs	r2, #1
 8000ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bac:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000bae:	683b      	ldr	r3, [r7, #0]
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	69fa      	ldr	r2, [r7, #28]
 8000bb4:	4013      	ands	r3, r2
 8000bb6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000bb8:	69ba      	ldr	r2, [r7, #24]
 8000bba:	69fb      	ldr	r3, [r7, #28]
 8000bbc:	429a      	cmp	r2, r3
 8000bbe:	f040 8158 	bne.w	8000e72 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000bc2:	683b      	ldr	r3, [r7, #0]
 8000bc4:	685b      	ldr	r3, [r3, #4]
 8000bc6:	4a9a      	ldr	r2, [pc, #616]	; (8000e30 <HAL_GPIO_Init+0x2a0>)
 8000bc8:	4293      	cmp	r3, r2
 8000bca:	d05e      	beq.n	8000c8a <HAL_GPIO_Init+0xfa>
 8000bcc:	4a98      	ldr	r2, [pc, #608]	; (8000e30 <HAL_GPIO_Init+0x2a0>)
 8000bce:	4293      	cmp	r3, r2
 8000bd0:	d875      	bhi.n	8000cbe <HAL_GPIO_Init+0x12e>
 8000bd2:	4a98      	ldr	r2, [pc, #608]	; (8000e34 <HAL_GPIO_Init+0x2a4>)
 8000bd4:	4293      	cmp	r3, r2
 8000bd6:	d058      	beq.n	8000c8a <HAL_GPIO_Init+0xfa>
 8000bd8:	4a96      	ldr	r2, [pc, #600]	; (8000e34 <HAL_GPIO_Init+0x2a4>)
 8000bda:	4293      	cmp	r3, r2
 8000bdc:	d86f      	bhi.n	8000cbe <HAL_GPIO_Init+0x12e>
 8000bde:	4a96      	ldr	r2, [pc, #600]	; (8000e38 <HAL_GPIO_Init+0x2a8>)
 8000be0:	4293      	cmp	r3, r2
 8000be2:	d052      	beq.n	8000c8a <HAL_GPIO_Init+0xfa>
 8000be4:	4a94      	ldr	r2, [pc, #592]	; (8000e38 <HAL_GPIO_Init+0x2a8>)
 8000be6:	4293      	cmp	r3, r2
 8000be8:	d869      	bhi.n	8000cbe <HAL_GPIO_Init+0x12e>
 8000bea:	4a94      	ldr	r2, [pc, #592]	; (8000e3c <HAL_GPIO_Init+0x2ac>)
 8000bec:	4293      	cmp	r3, r2
 8000bee:	d04c      	beq.n	8000c8a <HAL_GPIO_Init+0xfa>
 8000bf0:	4a92      	ldr	r2, [pc, #584]	; (8000e3c <HAL_GPIO_Init+0x2ac>)
 8000bf2:	4293      	cmp	r3, r2
 8000bf4:	d863      	bhi.n	8000cbe <HAL_GPIO_Init+0x12e>
 8000bf6:	4a92      	ldr	r2, [pc, #584]	; (8000e40 <HAL_GPIO_Init+0x2b0>)
 8000bf8:	4293      	cmp	r3, r2
 8000bfa:	d046      	beq.n	8000c8a <HAL_GPIO_Init+0xfa>
 8000bfc:	4a90      	ldr	r2, [pc, #576]	; (8000e40 <HAL_GPIO_Init+0x2b0>)
 8000bfe:	4293      	cmp	r3, r2
 8000c00:	d85d      	bhi.n	8000cbe <HAL_GPIO_Init+0x12e>
 8000c02:	2b12      	cmp	r3, #18
 8000c04:	d82a      	bhi.n	8000c5c <HAL_GPIO_Init+0xcc>
 8000c06:	2b12      	cmp	r3, #18
 8000c08:	d859      	bhi.n	8000cbe <HAL_GPIO_Init+0x12e>
 8000c0a:	a201      	add	r2, pc, #4	; (adr r2, 8000c10 <HAL_GPIO_Init+0x80>)
 8000c0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c10:	08000c8b 	.word	0x08000c8b
 8000c14:	08000c65 	.word	0x08000c65
 8000c18:	08000c77 	.word	0x08000c77
 8000c1c:	08000cb9 	.word	0x08000cb9
 8000c20:	08000cbf 	.word	0x08000cbf
 8000c24:	08000cbf 	.word	0x08000cbf
 8000c28:	08000cbf 	.word	0x08000cbf
 8000c2c:	08000cbf 	.word	0x08000cbf
 8000c30:	08000cbf 	.word	0x08000cbf
 8000c34:	08000cbf 	.word	0x08000cbf
 8000c38:	08000cbf 	.word	0x08000cbf
 8000c3c:	08000cbf 	.word	0x08000cbf
 8000c40:	08000cbf 	.word	0x08000cbf
 8000c44:	08000cbf 	.word	0x08000cbf
 8000c48:	08000cbf 	.word	0x08000cbf
 8000c4c:	08000cbf 	.word	0x08000cbf
 8000c50:	08000cbf 	.word	0x08000cbf
 8000c54:	08000c6d 	.word	0x08000c6d
 8000c58:	08000c81 	.word	0x08000c81
 8000c5c:	4a79      	ldr	r2, [pc, #484]	; (8000e44 <HAL_GPIO_Init+0x2b4>)
 8000c5e:	4293      	cmp	r3, r2
 8000c60:	d013      	beq.n	8000c8a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000c62:	e02c      	b.n	8000cbe <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000c64:	683b      	ldr	r3, [r7, #0]
 8000c66:	68db      	ldr	r3, [r3, #12]
 8000c68:	623b      	str	r3, [r7, #32]
          break;
 8000c6a:	e029      	b.n	8000cc0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000c6c:	683b      	ldr	r3, [r7, #0]
 8000c6e:	68db      	ldr	r3, [r3, #12]
 8000c70:	3304      	adds	r3, #4
 8000c72:	623b      	str	r3, [r7, #32]
          break;
 8000c74:	e024      	b.n	8000cc0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000c76:	683b      	ldr	r3, [r7, #0]
 8000c78:	68db      	ldr	r3, [r3, #12]
 8000c7a:	3308      	adds	r3, #8
 8000c7c:	623b      	str	r3, [r7, #32]
          break;
 8000c7e:	e01f      	b.n	8000cc0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000c80:	683b      	ldr	r3, [r7, #0]
 8000c82:	68db      	ldr	r3, [r3, #12]
 8000c84:	330c      	adds	r3, #12
 8000c86:	623b      	str	r3, [r7, #32]
          break;
 8000c88:	e01a      	b.n	8000cc0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000c8a:	683b      	ldr	r3, [r7, #0]
 8000c8c:	689b      	ldr	r3, [r3, #8]
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d102      	bne.n	8000c98 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000c92:	2304      	movs	r3, #4
 8000c94:	623b      	str	r3, [r7, #32]
          break;
 8000c96:	e013      	b.n	8000cc0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000c98:	683b      	ldr	r3, [r7, #0]
 8000c9a:	689b      	ldr	r3, [r3, #8]
 8000c9c:	2b01      	cmp	r3, #1
 8000c9e:	d105      	bne.n	8000cac <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ca0:	2308      	movs	r3, #8
 8000ca2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	69fa      	ldr	r2, [r7, #28]
 8000ca8:	611a      	str	r2, [r3, #16]
          break;
 8000caa:	e009      	b.n	8000cc0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000cac:	2308      	movs	r3, #8
 8000cae:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	69fa      	ldr	r2, [r7, #28]
 8000cb4:	615a      	str	r2, [r3, #20]
          break;
 8000cb6:	e003      	b.n	8000cc0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	623b      	str	r3, [r7, #32]
          break;
 8000cbc:	e000      	b.n	8000cc0 <HAL_GPIO_Init+0x130>
          break;
 8000cbe:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000cc0:	69bb      	ldr	r3, [r7, #24]
 8000cc2:	2bff      	cmp	r3, #255	; 0xff
 8000cc4:	d801      	bhi.n	8000cca <HAL_GPIO_Init+0x13a>
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	e001      	b.n	8000cce <HAL_GPIO_Init+0x13e>
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	3304      	adds	r3, #4
 8000cce:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000cd0:	69bb      	ldr	r3, [r7, #24]
 8000cd2:	2bff      	cmp	r3, #255	; 0xff
 8000cd4:	d802      	bhi.n	8000cdc <HAL_GPIO_Init+0x14c>
 8000cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cd8:	009b      	lsls	r3, r3, #2
 8000cda:	e002      	b.n	8000ce2 <HAL_GPIO_Init+0x152>
 8000cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cde:	3b08      	subs	r3, #8
 8000ce0:	009b      	lsls	r3, r3, #2
 8000ce2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000ce4:	697b      	ldr	r3, [r7, #20]
 8000ce6:	681a      	ldr	r2, [r3, #0]
 8000ce8:	210f      	movs	r1, #15
 8000cea:	693b      	ldr	r3, [r7, #16]
 8000cec:	fa01 f303 	lsl.w	r3, r1, r3
 8000cf0:	43db      	mvns	r3, r3
 8000cf2:	401a      	ands	r2, r3
 8000cf4:	6a39      	ldr	r1, [r7, #32]
 8000cf6:	693b      	ldr	r3, [r7, #16]
 8000cf8:	fa01 f303 	lsl.w	r3, r1, r3
 8000cfc:	431a      	orrs	r2, r3
 8000cfe:	697b      	ldr	r3, [r7, #20]
 8000d00:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000d02:	683b      	ldr	r3, [r7, #0]
 8000d04:	685b      	ldr	r3, [r3, #4]
 8000d06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	f000 80b1 	beq.w	8000e72 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000d10:	4b4d      	ldr	r3, [pc, #308]	; (8000e48 <HAL_GPIO_Init+0x2b8>)
 8000d12:	699b      	ldr	r3, [r3, #24]
 8000d14:	4a4c      	ldr	r2, [pc, #304]	; (8000e48 <HAL_GPIO_Init+0x2b8>)
 8000d16:	f043 0301 	orr.w	r3, r3, #1
 8000d1a:	6193      	str	r3, [r2, #24]
 8000d1c:	4b4a      	ldr	r3, [pc, #296]	; (8000e48 <HAL_GPIO_Init+0x2b8>)
 8000d1e:	699b      	ldr	r3, [r3, #24]
 8000d20:	f003 0301 	and.w	r3, r3, #1
 8000d24:	60bb      	str	r3, [r7, #8]
 8000d26:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000d28:	4a48      	ldr	r2, [pc, #288]	; (8000e4c <HAL_GPIO_Init+0x2bc>)
 8000d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d2c:	089b      	lsrs	r3, r3, #2
 8000d2e:	3302      	adds	r3, #2
 8000d30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d34:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d38:	f003 0303 	and.w	r3, r3, #3
 8000d3c:	009b      	lsls	r3, r3, #2
 8000d3e:	220f      	movs	r2, #15
 8000d40:	fa02 f303 	lsl.w	r3, r2, r3
 8000d44:	43db      	mvns	r3, r3
 8000d46:	68fa      	ldr	r2, [r7, #12]
 8000d48:	4013      	ands	r3, r2
 8000d4a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	4a40      	ldr	r2, [pc, #256]	; (8000e50 <HAL_GPIO_Init+0x2c0>)
 8000d50:	4293      	cmp	r3, r2
 8000d52:	d013      	beq.n	8000d7c <HAL_GPIO_Init+0x1ec>
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	4a3f      	ldr	r2, [pc, #252]	; (8000e54 <HAL_GPIO_Init+0x2c4>)
 8000d58:	4293      	cmp	r3, r2
 8000d5a:	d00d      	beq.n	8000d78 <HAL_GPIO_Init+0x1e8>
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	4a3e      	ldr	r2, [pc, #248]	; (8000e58 <HAL_GPIO_Init+0x2c8>)
 8000d60:	4293      	cmp	r3, r2
 8000d62:	d007      	beq.n	8000d74 <HAL_GPIO_Init+0x1e4>
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	4a3d      	ldr	r2, [pc, #244]	; (8000e5c <HAL_GPIO_Init+0x2cc>)
 8000d68:	4293      	cmp	r3, r2
 8000d6a:	d101      	bne.n	8000d70 <HAL_GPIO_Init+0x1e0>
 8000d6c:	2303      	movs	r3, #3
 8000d6e:	e006      	b.n	8000d7e <HAL_GPIO_Init+0x1ee>
 8000d70:	2304      	movs	r3, #4
 8000d72:	e004      	b.n	8000d7e <HAL_GPIO_Init+0x1ee>
 8000d74:	2302      	movs	r3, #2
 8000d76:	e002      	b.n	8000d7e <HAL_GPIO_Init+0x1ee>
 8000d78:	2301      	movs	r3, #1
 8000d7a:	e000      	b.n	8000d7e <HAL_GPIO_Init+0x1ee>
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000d80:	f002 0203 	and.w	r2, r2, #3
 8000d84:	0092      	lsls	r2, r2, #2
 8000d86:	4093      	lsls	r3, r2
 8000d88:	68fa      	ldr	r2, [r7, #12]
 8000d8a:	4313      	orrs	r3, r2
 8000d8c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000d8e:	492f      	ldr	r1, [pc, #188]	; (8000e4c <HAL_GPIO_Init+0x2bc>)
 8000d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d92:	089b      	lsrs	r3, r3, #2
 8000d94:	3302      	adds	r3, #2
 8000d96:	68fa      	ldr	r2, [r7, #12]
 8000d98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000d9c:	683b      	ldr	r3, [r7, #0]
 8000d9e:	685b      	ldr	r3, [r3, #4]
 8000da0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d006      	beq.n	8000db6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000da8:	4b2d      	ldr	r3, [pc, #180]	; (8000e60 <HAL_GPIO_Init+0x2d0>)
 8000daa:	681a      	ldr	r2, [r3, #0]
 8000dac:	492c      	ldr	r1, [pc, #176]	; (8000e60 <HAL_GPIO_Init+0x2d0>)
 8000dae:	69bb      	ldr	r3, [r7, #24]
 8000db0:	4313      	orrs	r3, r2
 8000db2:	600b      	str	r3, [r1, #0]
 8000db4:	e006      	b.n	8000dc4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000db6:	4b2a      	ldr	r3, [pc, #168]	; (8000e60 <HAL_GPIO_Init+0x2d0>)
 8000db8:	681a      	ldr	r2, [r3, #0]
 8000dba:	69bb      	ldr	r3, [r7, #24]
 8000dbc:	43db      	mvns	r3, r3
 8000dbe:	4928      	ldr	r1, [pc, #160]	; (8000e60 <HAL_GPIO_Init+0x2d0>)
 8000dc0:	4013      	ands	r3, r2
 8000dc2:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000dc4:	683b      	ldr	r3, [r7, #0]
 8000dc6:	685b      	ldr	r3, [r3, #4]
 8000dc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d006      	beq.n	8000dde <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000dd0:	4b23      	ldr	r3, [pc, #140]	; (8000e60 <HAL_GPIO_Init+0x2d0>)
 8000dd2:	685a      	ldr	r2, [r3, #4]
 8000dd4:	4922      	ldr	r1, [pc, #136]	; (8000e60 <HAL_GPIO_Init+0x2d0>)
 8000dd6:	69bb      	ldr	r3, [r7, #24]
 8000dd8:	4313      	orrs	r3, r2
 8000dda:	604b      	str	r3, [r1, #4]
 8000ddc:	e006      	b.n	8000dec <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000dde:	4b20      	ldr	r3, [pc, #128]	; (8000e60 <HAL_GPIO_Init+0x2d0>)
 8000de0:	685a      	ldr	r2, [r3, #4]
 8000de2:	69bb      	ldr	r3, [r7, #24]
 8000de4:	43db      	mvns	r3, r3
 8000de6:	491e      	ldr	r1, [pc, #120]	; (8000e60 <HAL_GPIO_Init+0x2d0>)
 8000de8:	4013      	ands	r3, r2
 8000dea:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000dec:	683b      	ldr	r3, [r7, #0]
 8000dee:	685b      	ldr	r3, [r3, #4]
 8000df0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d006      	beq.n	8000e06 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000df8:	4b19      	ldr	r3, [pc, #100]	; (8000e60 <HAL_GPIO_Init+0x2d0>)
 8000dfa:	689a      	ldr	r2, [r3, #8]
 8000dfc:	4918      	ldr	r1, [pc, #96]	; (8000e60 <HAL_GPIO_Init+0x2d0>)
 8000dfe:	69bb      	ldr	r3, [r7, #24]
 8000e00:	4313      	orrs	r3, r2
 8000e02:	608b      	str	r3, [r1, #8]
 8000e04:	e006      	b.n	8000e14 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000e06:	4b16      	ldr	r3, [pc, #88]	; (8000e60 <HAL_GPIO_Init+0x2d0>)
 8000e08:	689a      	ldr	r2, [r3, #8]
 8000e0a:	69bb      	ldr	r3, [r7, #24]
 8000e0c:	43db      	mvns	r3, r3
 8000e0e:	4914      	ldr	r1, [pc, #80]	; (8000e60 <HAL_GPIO_Init+0x2d0>)
 8000e10:	4013      	ands	r3, r2
 8000e12:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	685b      	ldr	r3, [r3, #4]
 8000e18:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d021      	beq.n	8000e64 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000e20:	4b0f      	ldr	r3, [pc, #60]	; (8000e60 <HAL_GPIO_Init+0x2d0>)
 8000e22:	68da      	ldr	r2, [r3, #12]
 8000e24:	490e      	ldr	r1, [pc, #56]	; (8000e60 <HAL_GPIO_Init+0x2d0>)
 8000e26:	69bb      	ldr	r3, [r7, #24]
 8000e28:	4313      	orrs	r3, r2
 8000e2a:	60cb      	str	r3, [r1, #12]
 8000e2c:	e021      	b.n	8000e72 <HAL_GPIO_Init+0x2e2>
 8000e2e:	bf00      	nop
 8000e30:	10320000 	.word	0x10320000
 8000e34:	10310000 	.word	0x10310000
 8000e38:	10220000 	.word	0x10220000
 8000e3c:	10210000 	.word	0x10210000
 8000e40:	10120000 	.word	0x10120000
 8000e44:	10110000 	.word	0x10110000
 8000e48:	40021000 	.word	0x40021000
 8000e4c:	40010000 	.word	0x40010000
 8000e50:	40010800 	.word	0x40010800
 8000e54:	40010c00 	.word	0x40010c00
 8000e58:	40011000 	.word	0x40011000
 8000e5c:	40011400 	.word	0x40011400
 8000e60:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000e64:	4b0b      	ldr	r3, [pc, #44]	; (8000e94 <HAL_GPIO_Init+0x304>)
 8000e66:	68da      	ldr	r2, [r3, #12]
 8000e68:	69bb      	ldr	r3, [r7, #24]
 8000e6a:	43db      	mvns	r3, r3
 8000e6c:	4909      	ldr	r1, [pc, #36]	; (8000e94 <HAL_GPIO_Init+0x304>)
 8000e6e:	4013      	ands	r3, r2
 8000e70:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e74:	3301      	adds	r3, #1
 8000e76:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	681a      	ldr	r2, [r3, #0]
 8000e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e7e:	fa22 f303 	lsr.w	r3, r2, r3
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	f47f ae8e 	bne.w	8000ba4 <HAL_GPIO_Init+0x14>
  }
}
 8000e88:	bf00      	nop
 8000e8a:	bf00      	nop
 8000e8c:	372c      	adds	r7, #44	; 0x2c
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bc80      	pop	{r7}
 8000e92:	4770      	bx	lr
 8000e94:	40010400 	.word	0x40010400

08000e98 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	b085      	sub	sp, #20
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
 8000ea0:	460b      	mov	r3, r1
 8000ea2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	689a      	ldr	r2, [r3, #8]
 8000ea8:	887b      	ldrh	r3, [r7, #2]
 8000eaa:	4013      	ands	r3, r2
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d002      	beq.n	8000eb6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000eb0:	2301      	movs	r3, #1
 8000eb2:	73fb      	strb	r3, [r7, #15]
 8000eb4:	e001      	b.n	8000eba <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000eba:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	3714      	adds	r7, #20
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bc80      	pop	{r7}
 8000ec4:	4770      	bx	lr

08000ec6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ec6:	b480      	push	{r7}
 8000ec8:	b083      	sub	sp, #12
 8000eca:	af00      	add	r7, sp, #0
 8000ecc:	6078      	str	r0, [r7, #4]
 8000ece:	460b      	mov	r3, r1
 8000ed0:	807b      	strh	r3, [r7, #2]
 8000ed2:	4613      	mov	r3, r2
 8000ed4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000ed6:	787b      	ldrb	r3, [r7, #1]
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d003      	beq.n	8000ee4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000edc:	887a      	ldrh	r2, [r7, #2]
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000ee2:	e003      	b.n	8000eec <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000ee4:	887b      	ldrh	r3, [r7, #2]
 8000ee6:	041a      	lsls	r2, r3, #16
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	611a      	str	r2, [r3, #16]
}
 8000eec:	bf00      	nop
 8000eee:	370c      	adds	r7, #12
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bc80      	pop	{r7}
 8000ef4:	4770      	bx	lr
	...

08000ef8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b082      	sub	sp, #8
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	4603      	mov	r3, r0
 8000f00:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000f02:	4b08      	ldr	r3, [pc, #32]	; (8000f24 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000f04:	695a      	ldr	r2, [r3, #20]
 8000f06:	88fb      	ldrh	r3, [r7, #6]
 8000f08:	4013      	ands	r3, r2
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d006      	beq.n	8000f1c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000f0e:	4a05      	ldr	r2, [pc, #20]	; (8000f24 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000f10:	88fb      	ldrh	r3, [r7, #6]
 8000f12:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000f14:	88fb      	ldrh	r3, [r7, #6]
 8000f16:	4618      	mov	r0, r3
 8000f18:	f000 f806 	bl	8000f28 <HAL_GPIO_EXTI_Callback>
  }
}
 8000f1c:	bf00      	nop
 8000f1e:	3708      	adds	r7, #8
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd80      	pop	{r7, pc}
 8000f24:	40010400 	.word	0x40010400

08000f28 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	b083      	sub	sp, #12
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	4603      	mov	r3, r0
 8000f30:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8000f32:	bf00      	nop
 8000f34:	370c      	adds	r7, #12
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bc80      	pop	{r7}
 8000f3a:	4770      	bx	lr

08000f3c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000f3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f3e:	b08b      	sub	sp, #44	; 0x2c
 8000f40:	af06      	add	r7, sp, #24
 8000f42:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d101      	bne.n	8000f4e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	e0fd      	b.n	800114a <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8000f54:	b2db      	uxtb	r3, r3
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d106      	bne.n	8000f68 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000f62:	6878      	ldr	r0, [r7, #4]
 8000f64:	f006 fe52 	bl	8007c0c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	2203      	movs	r2, #3
 8000f6c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	4618      	mov	r0, r3
 8000f76:	f002 fafd 	bl	8003574 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	603b      	str	r3, [r7, #0]
 8000f80:	687e      	ldr	r6, [r7, #4]
 8000f82:	466d      	mov	r5, sp
 8000f84:	f106 0410 	add.w	r4, r6, #16
 8000f88:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000f8a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000f8c:	6823      	ldr	r3, [r4, #0]
 8000f8e:	602b      	str	r3, [r5, #0]
 8000f90:	1d33      	adds	r3, r6, #4
 8000f92:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000f94:	6838      	ldr	r0, [r7, #0]
 8000f96:	f002 fac7 	bl	8003528 <USB_CoreInit>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d005      	beq.n	8000fac <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	2202      	movs	r2, #2
 8000fa4:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8000fa8:	2301      	movs	r3, #1
 8000faa:	e0ce      	b.n	800114a <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	2100      	movs	r1, #0
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f002 faf8 	bl	80035a8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000fb8:	2300      	movs	r3, #0
 8000fba:	73fb      	strb	r3, [r7, #15]
 8000fbc:	e04c      	b.n	8001058 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000fbe:	7bfb      	ldrb	r3, [r7, #15]
 8000fc0:	6879      	ldr	r1, [r7, #4]
 8000fc2:	1c5a      	adds	r2, r3, #1
 8000fc4:	4613      	mov	r3, r2
 8000fc6:	009b      	lsls	r3, r3, #2
 8000fc8:	4413      	add	r3, r2
 8000fca:	00db      	lsls	r3, r3, #3
 8000fcc:	440b      	add	r3, r1
 8000fce:	3301      	adds	r3, #1
 8000fd0:	2201      	movs	r2, #1
 8000fd2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000fd4:	7bfb      	ldrb	r3, [r7, #15]
 8000fd6:	6879      	ldr	r1, [r7, #4]
 8000fd8:	1c5a      	adds	r2, r3, #1
 8000fda:	4613      	mov	r3, r2
 8000fdc:	009b      	lsls	r3, r3, #2
 8000fde:	4413      	add	r3, r2
 8000fe0:	00db      	lsls	r3, r3, #3
 8000fe2:	440b      	add	r3, r1
 8000fe4:	7bfa      	ldrb	r2, [r7, #15]
 8000fe6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000fe8:	7bfa      	ldrb	r2, [r7, #15]
 8000fea:	7bfb      	ldrb	r3, [r7, #15]
 8000fec:	b298      	uxth	r0, r3
 8000fee:	6879      	ldr	r1, [r7, #4]
 8000ff0:	4613      	mov	r3, r2
 8000ff2:	009b      	lsls	r3, r3, #2
 8000ff4:	4413      	add	r3, r2
 8000ff6:	00db      	lsls	r3, r3, #3
 8000ff8:	440b      	add	r3, r1
 8000ffa:	3336      	adds	r3, #54	; 0x36
 8000ffc:	4602      	mov	r2, r0
 8000ffe:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001000:	7bfb      	ldrb	r3, [r7, #15]
 8001002:	6879      	ldr	r1, [r7, #4]
 8001004:	1c5a      	adds	r2, r3, #1
 8001006:	4613      	mov	r3, r2
 8001008:	009b      	lsls	r3, r3, #2
 800100a:	4413      	add	r3, r2
 800100c:	00db      	lsls	r3, r3, #3
 800100e:	440b      	add	r3, r1
 8001010:	3303      	adds	r3, #3
 8001012:	2200      	movs	r2, #0
 8001014:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001016:	7bfa      	ldrb	r2, [r7, #15]
 8001018:	6879      	ldr	r1, [r7, #4]
 800101a:	4613      	mov	r3, r2
 800101c:	009b      	lsls	r3, r3, #2
 800101e:	4413      	add	r3, r2
 8001020:	00db      	lsls	r3, r3, #3
 8001022:	440b      	add	r3, r1
 8001024:	3338      	adds	r3, #56	; 0x38
 8001026:	2200      	movs	r2, #0
 8001028:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800102a:	7bfa      	ldrb	r2, [r7, #15]
 800102c:	6879      	ldr	r1, [r7, #4]
 800102e:	4613      	mov	r3, r2
 8001030:	009b      	lsls	r3, r3, #2
 8001032:	4413      	add	r3, r2
 8001034:	00db      	lsls	r3, r3, #3
 8001036:	440b      	add	r3, r1
 8001038:	333c      	adds	r3, #60	; 0x3c
 800103a:	2200      	movs	r2, #0
 800103c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800103e:	7bfa      	ldrb	r2, [r7, #15]
 8001040:	6879      	ldr	r1, [r7, #4]
 8001042:	4613      	mov	r3, r2
 8001044:	009b      	lsls	r3, r3, #2
 8001046:	4413      	add	r3, r2
 8001048:	00db      	lsls	r3, r3, #3
 800104a:	440b      	add	r3, r1
 800104c:	3340      	adds	r3, #64	; 0x40
 800104e:	2200      	movs	r2, #0
 8001050:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001052:	7bfb      	ldrb	r3, [r7, #15]
 8001054:	3301      	adds	r3, #1
 8001056:	73fb      	strb	r3, [r7, #15]
 8001058:	7bfa      	ldrb	r2, [r7, #15]
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	685b      	ldr	r3, [r3, #4]
 800105e:	429a      	cmp	r2, r3
 8001060:	d3ad      	bcc.n	8000fbe <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001062:	2300      	movs	r3, #0
 8001064:	73fb      	strb	r3, [r7, #15]
 8001066:	e044      	b.n	80010f2 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001068:	7bfa      	ldrb	r2, [r7, #15]
 800106a:	6879      	ldr	r1, [r7, #4]
 800106c:	4613      	mov	r3, r2
 800106e:	009b      	lsls	r3, r3, #2
 8001070:	4413      	add	r3, r2
 8001072:	00db      	lsls	r3, r3, #3
 8001074:	440b      	add	r3, r1
 8001076:	f203 1369 	addw	r3, r3, #361	; 0x169
 800107a:	2200      	movs	r2, #0
 800107c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800107e:	7bfa      	ldrb	r2, [r7, #15]
 8001080:	6879      	ldr	r1, [r7, #4]
 8001082:	4613      	mov	r3, r2
 8001084:	009b      	lsls	r3, r3, #2
 8001086:	4413      	add	r3, r2
 8001088:	00db      	lsls	r3, r3, #3
 800108a:	440b      	add	r3, r1
 800108c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001090:	7bfa      	ldrb	r2, [r7, #15]
 8001092:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001094:	7bfa      	ldrb	r2, [r7, #15]
 8001096:	6879      	ldr	r1, [r7, #4]
 8001098:	4613      	mov	r3, r2
 800109a:	009b      	lsls	r3, r3, #2
 800109c:	4413      	add	r3, r2
 800109e:	00db      	lsls	r3, r3, #3
 80010a0:	440b      	add	r3, r1
 80010a2:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80010a6:	2200      	movs	r2, #0
 80010a8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80010aa:	7bfa      	ldrb	r2, [r7, #15]
 80010ac:	6879      	ldr	r1, [r7, #4]
 80010ae:	4613      	mov	r3, r2
 80010b0:	009b      	lsls	r3, r3, #2
 80010b2:	4413      	add	r3, r2
 80010b4:	00db      	lsls	r3, r3, #3
 80010b6:	440b      	add	r3, r1
 80010b8:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80010bc:	2200      	movs	r2, #0
 80010be:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80010c0:	7bfa      	ldrb	r2, [r7, #15]
 80010c2:	6879      	ldr	r1, [r7, #4]
 80010c4:	4613      	mov	r3, r2
 80010c6:	009b      	lsls	r3, r3, #2
 80010c8:	4413      	add	r3, r2
 80010ca:	00db      	lsls	r3, r3, #3
 80010cc:	440b      	add	r3, r1
 80010ce:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80010d2:	2200      	movs	r2, #0
 80010d4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80010d6:	7bfa      	ldrb	r2, [r7, #15]
 80010d8:	6879      	ldr	r1, [r7, #4]
 80010da:	4613      	mov	r3, r2
 80010dc:	009b      	lsls	r3, r3, #2
 80010de:	4413      	add	r3, r2
 80010e0:	00db      	lsls	r3, r3, #3
 80010e2:	440b      	add	r3, r1
 80010e4:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80010e8:	2200      	movs	r2, #0
 80010ea:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80010ec:	7bfb      	ldrb	r3, [r7, #15]
 80010ee:	3301      	adds	r3, #1
 80010f0:	73fb      	strb	r3, [r7, #15]
 80010f2:	7bfa      	ldrb	r2, [r7, #15]
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	685b      	ldr	r3, [r3, #4]
 80010f8:	429a      	cmp	r2, r3
 80010fa:	d3b5      	bcc.n	8001068 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	603b      	str	r3, [r7, #0]
 8001102:	687e      	ldr	r6, [r7, #4]
 8001104:	466d      	mov	r5, sp
 8001106:	f106 0410 	add.w	r4, r6, #16
 800110a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800110c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800110e:	6823      	ldr	r3, [r4, #0]
 8001110:	602b      	str	r3, [r5, #0]
 8001112:	1d33      	adds	r3, r6, #4
 8001114:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001116:	6838      	ldr	r0, [r7, #0]
 8001118:	f002 fa52 	bl	80035c0 <USB_DevInit>
 800111c:	4603      	mov	r3, r0
 800111e:	2b00      	cmp	r3, #0
 8001120:	d005      	beq.n	800112e <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	2202      	movs	r2, #2
 8001126:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 800112a:	2301      	movs	r3, #1
 800112c:	e00d      	b.n	800114a <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	2200      	movs	r2, #0
 8001132:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	2201      	movs	r2, #1
 800113a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	4618      	mov	r0, r3
 8001144:	f004 ff04 	bl	8005f50 <USB_DevDisconnect>

  return HAL_OK;
 8001148:	2300      	movs	r3, #0
}
 800114a:	4618      	mov	r0, r3
 800114c:	3714      	adds	r7, #20
 800114e:	46bd      	mov	sp, r7
 8001150:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001152 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001152:	b580      	push	{r7, lr}
 8001154:	b082      	sub	sp, #8
 8001156:	af00      	add	r7, sp, #0
 8001158:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001160:	2b01      	cmp	r3, #1
 8001162:	d101      	bne.n	8001168 <HAL_PCD_Start+0x16>
 8001164:	2302      	movs	r3, #2
 8001166:	e016      	b.n	8001196 <HAL_PCD_Start+0x44>
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	2201      	movs	r2, #1
 800116c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	4618      	mov	r0, r3
 8001176:	f002 f9e7 	bl	8003548 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 800117a:	2101      	movs	r1, #1
 800117c:	6878      	ldr	r0, [r7, #4]
 800117e:	f006 ffb8 	bl	80080f2 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	4618      	mov	r0, r3
 8001188:	f004 fed8 	bl	8005f3c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	2200      	movs	r2, #0
 8001190:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001194:	2300      	movs	r3, #0
}
 8001196:	4618      	mov	r0, r3
 8001198:	3708      	adds	r7, #8
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}

0800119e <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800119e:	b580      	push	{r7, lr}
 80011a0:	b088      	sub	sp, #32
 80011a2:	af00      	add	r7, sp, #0
 80011a4:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	4618      	mov	r0, r3
 80011ac:	f004 feda 	bl	8005f64 <USB_ReadInterrupts>
 80011b0:	4603      	mov	r3, r0
 80011b2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80011b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80011ba:	d102      	bne.n	80011c2 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80011bc:	6878      	ldr	r0, [r7, #4]
 80011be:	f000 fb5f 	bl	8001880 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	4618      	mov	r0, r3
 80011c8:	f004 fecc 	bl	8005f64 <USB_ReadInterrupts>
 80011cc:	4603      	mov	r3, r0
 80011ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80011d6:	d112      	bne.n	80011fe <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80011e0:	b29a      	uxth	r2, r3
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80011ea:	b292      	uxth	r2, r2
 80011ec:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80011f0:	6878      	ldr	r0, [r7, #4]
 80011f2:	f006 fd86 	bl	8007d02 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80011f6:	2100      	movs	r1, #0
 80011f8:	6878      	ldr	r0, [r7, #4]
 80011fa:	f000 f923 	bl	8001444 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	4618      	mov	r0, r3
 8001204:	f004 feae 	bl	8005f64 <USB_ReadInterrupts>
 8001208:	4603      	mov	r3, r0
 800120a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800120e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001212:	d10b      	bne.n	800122c <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800121c:	b29a      	uxth	r2, r3
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001226:	b292      	uxth	r2, r2
 8001228:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4618      	mov	r0, r3
 8001232:	f004 fe97 	bl	8005f64 <USB_ReadInterrupts>
 8001236:	4603      	mov	r3, r0
 8001238:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800123c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001240:	d10b      	bne.n	800125a <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800124a:	b29a      	uxth	r2, r3
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001254:	b292      	uxth	r2, r2
 8001256:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	4618      	mov	r0, r3
 8001260:	f004 fe80 	bl	8005f64 <USB_ReadInterrupts>
 8001264:	4603      	mov	r3, r0
 8001266:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800126a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800126e:	d126      	bne.n	80012be <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001278:	b29a      	uxth	r2, r3
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f022 0204 	bic.w	r2, r2, #4
 8001282:	b292      	uxth	r2, r2
 8001284:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001290:	b29a      	uxth	r2, r3
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f022 0208 	bic.w	r2, r2, #8
 800129a:	b292      	uxth	r2, r2
 800129c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80012a0:	6878      	ldr	r0, [r7, #4]
 80012a2:	f006 fd67 	bl	8007d74 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80012ae:	b29a      	uxth	r2, r3
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80012b8:	b292      	uxth	r2, r2
 80012ba:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	4618      	mov	r0, r3
 80012c4:	f004 fe4e 	bl	8005f64 <USB_ReadInterrupts>
 80012c8:	4603      	mov	r3, r0
 80012ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80012ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80012d2:	f040 8082 	bne.w	80013da <HAL_PCD_IRQHandler+0x23c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 80012d6:	2300      	movs	r3, #0
 80012d8:	77fb      	strb	r3, [r7, #31]
 80012da:	e010      	b.n	80012fe <HAL_PCD_IRQHandler+0x160>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	461a      	mov	r2, r3
 80012e2:	7ffb      	ldrb	r3, [r7, #31]
 80012e4:	009b      	lsls	r3, r3, #2
 80012e6:	441a      	add	r2, r3
 80012e8:	7ffb      	ldrb	r3, [r7, #31]
 80012ea:	8812      	ldrh	r2, [r2, #0]
 80012ec:	b292      	uxth	r2, r2
 80012ee:	005b      	lsls	r3, r3, #1
 80012f0:	3320      	adds	r3, #32
 80012f2:	443b      	add	r3, r7
 80012f4:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 80012f8:	7ffb      	ldrb	r3, [r7, #31]
 80012fa:	3301      	adds	r3, #1
 80012fc:	77fb      	strb	r3, [r7, #31]
 80012fe:	7ffb      	ldrb	r3, [r7, #31]
 8001300:	2b07      	cmp	r3, #7
 8001302:	d9eb      	bls.n	80012dc <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800130c:	b29a      	uxth	r2, r3
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f042 0201 	orr.w	r2, r2, #1
 8001316:	b292      	uxth	r2, r2
 8001318:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001324:	b29a      	uxth	r2, r3
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f022 0201 	bic.w	r2, r2, #1
 800132e:	b292      	uxth	r2, r2
 8001330:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8001334:	bf00      	nop
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800133e:	b29b      	uxth	r3, r3
 8001340:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001344:	2b00      	cmp	r3, #0
 8001346:	d0f6      	beq.n	8001336 <HAL_PCD_IRQHandler+0x198>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001350:	b29a      	uxth	r2, r3
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800135a:	b292      	uxth	r2, r2
 800135c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8001360:	2300      	movs	r3, #0
 8001362:	77fb      	strb	r3, [r7, #31]
 8001364:	e00f      	b.n	8001386 <HAL_PCD_IRQHandler+0x1e8>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8001366:	7ffb      	ldrb	r3, [r7, #31]
 8001368:	687a      	ldr	r2, [r7, #4]
 800136a:	6812      	ldr	r2, [r2, #0]
 800136c:	4611      	mov	r1, r2
 800136e:	7ffa      	ldrb	r2, [r7, #31]
 8001370:	0092      	lsls	r2, r2, #2
 8001372:	440a      	add	r2, r1
 8001374:	005b      	lsls	r3, r3, #1
 8001376:	3320      	adds	r3, #32
 8001378:	443b      	add	r3, r7
 800137a:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 800137e:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8001380:	7ffb      	ldrb	r3, [r7, #31]
 8001382:	3301      	adds	r3, #1
 8001384:	77fb      	strb	r3, [r7, #31]
 8001386:	7ffb      	ldrb	r3, [r7, #31]
 8001388:	2b07      	cmp	r3, #7
 800138a:	d9ec      	bls.n	8001366 <HAL_PCD_IRQHandler+0x1c8>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001394:	b29a      	uxth	r2, r3
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f042 0208 	orr.w	r2, r2, #8
 800139e:	b292      	uxth	r2, r2
 80013a0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80013ac:	b29a      	uxth	r2, r3
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80013b6:	b292      	uxth	r2, r2
 80013b8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80013c4:	b29a      	uxth	r2, r3
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f042 0204 	orr.w	r2, r2, #4
 80013ce:	b292      	uxth	r2, r2
 80013d0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80013d4:	6878      	ldr	r0, [r7, #4]
 80013d6:	f006 fcb3 	bl	8007d40 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	4618      	mov	r0, r3
 80013e0:	f004 fdc0 	bl	8005f64 <USB_ReadInterrupts>
 80013e4:	4603      	mov	r3, r0
 80013e6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80013ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80013ee:	d10e      	bne.n	800140e <HAL_PCD_IRQHandler+0x270>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80013f8:	b29a      	uxth	r2, r3
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001402:	b292      	uxth	r2, r2
 8001404:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001408:	6878      	ldr	r0, [r7, #4]
 800140a:	f006 fc6c 	bl	8007ce6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	4618      	mov	r0, r3
 8001414:	f004 fda6 	bl	8005f64 <USB_ReadInterrupts>
 8001418:	4603      	mov	r3, r0
 800141a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800141e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001422:	d10b      	bne.n	800143c <HAL_PCD_IRQHandler+0x29e>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800142c:	b29a      	uxth	r2, r3
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001436:	b292      	uxth	r2, r2
 8001438:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 800143c:	bf00      	nop
 800143e:	3720      	adds	r7, #32
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}

08001444 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b082      	sub	sp, #8
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
 800144c:	460b      	mov	r3, r1
 800144e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001456:	2b01      	cmp	r3, #1
 8001458:	d101      	bne.n	800145e <HAL_PCD_SetAddress+0x1a>
 800145a:	2302      	movs	r3, #2
 800145c:	e013      	b.n	8001486 <HAL_PCD_SetAddress+0x42>
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	2201      	movs	r2, #1
 8001462:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	78fa      	ldrb	r2, [r7, #3]
 800146a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	78fa      	ldrb	r2, [r7, #3]
 8001474:	4611      	mov	r1, r2
 8001476:	4618      	mov	r0, r3
 8001478:	f004 fd4d 	bl	8005f16 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	2200      	movs	r2, #0
 8001480:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001484:	2300      	movs	r3, #0
}
 8001486:	4618      	mov	r0, r3
 8001488:	3708      	adds	r7, #8
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}

0800148e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800148e:	b580      	push	{r7, lr}
 8001490:	b084      	sub	sp, #16
 8001492:	af00      	add	r7, sp, #0
 8001494:	6078      	str	r0, [r7, #4]
 8001496:	4608      	mov	r0, r1
 8001498:	4611      	mov	r1, r2
 800149a:	461a      	mov	r2, r3
 800149c:	4603      	mov	r3, r0
 800149e:	70fb      	strb	r3, [r7, #3]
 80014a0:	460b      	mov	r3, r1
 80014a2:	803b      	strh	r3, [r7, #0]
 80014a4:	4613      	mov	r3, r2
 80014a6:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80014a8:	2300      	movs	r3, #0
 80014aa:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80014ac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	da0e      	bge.n	80014d2 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80014b4:	78fb      	ldrb	r3, [r7, #3]
 80014b6:	f003 0307 	and.w	r3, r3, #7
 80014ba:	1c5a      	adds	r2, r3, #1
 80014bc:	4613      	mov	r3, r2
 80014be:	009b      	lsls	r3, r3, #2
 80014c0:	4413      	add	r3, r2
 80014c2:	00db      	lsls	r3, r3, #3
 80014c4:	687a      	ldr	r2, [r7, #4]
 80014c6:	4413      	add	r3, r2
 80014c8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	2201      	movs	r2, #1
 80014ce:	705a      	strb	r2, [r3, #1]
 80014d0:	e00e      	b.n	80014f0 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80014d2:	78fb      	ldrb	r3, [r7, #3]
 80014d4:	f003 0207 	and.w	r2, r3, #7
 80014d8:	4613      	mov	r3, r2
 80014da:	009b      	lsls	r3, r3, #2
 80014dc:	4413      	add	r3, r2
 80014de:	00db      	lsls	r3, r3, #3
 80014e0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80014e4:	687a      	ldr	r2, [r7, #4]
 80014e6:	4413      	add	r3, r2
 80014e8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	2200      	movs	r2, #0
 80014ee:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80014f0:	78fb      	ldrb	r3, [r7, #3]
 80014f2:	f003 0307 	and.w	r3, r3, #7
 80014f6:	b2da      	uxtb	r2, r3
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80014fc:	883a      	ldrh	r2, [r7, #0]
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	78ba      	ldrb	r2, [r7, #2]
 8001506:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	785b      	ldrb	r3, [r3, #1]
 800150c:	2b00      	cmp	r3, #0
 800150e:	d004      	beq.n	800151a <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	781b      	ldrb	r3, [r3, #0]
 8001514:	b29a      	uxth	r2, r3
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800151a:	78bb      	ldrb	r3, [r7, #2]
 800151c:	2b02      	cmp	r3, #2
 800151e:	d102      	bne.n	8001526 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	2200      	movs	r2, #0
 8001524:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800152c:	2b01      	cmp	r3, #1
 800152e:	d101      	bne.n	8001534 <HAL_PCD_EP_Open+0xa6>
 8001530:	2302      	movs	r3, #2
 8001532:	e00e      	b.n	8001552 <HAL_PCD_EP_Open+0xc4>
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	2201      	movs	r2, #1
 8001538:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	68f9      	ldr	r1, [r7, #12]
 8001542:	4618      	mov	r0, r3
 8001544:	f002 f85c 	bl	8003600 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	2200      	movs	r2, #0
 800154c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8001550:	7afb      	ldrb	r3, [r7, #11]
}
 8001552:	4618      	mov	r0, r3
 8001554:	3710      	adds	r7, #16
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}

0800155a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800155a:	b580      	push	{r7, lr}
 800155c:	b084      	sub	sp, #16
 800155e:	af00      	add	r7, sp, #0
 8001560:	6078      	str	r0, [r7, #4]
 8001562:	460b      	mov	r3, r1
 8001564:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001566:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800156a:	2b00      	cmp	r3, #0
 800156c:	da0e      	bge.n	800158c <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800156e:	78fb      	ldrb	r3, [r7, #3]
 8001570:	f003 0307 	and.w	r3, r3, #7
 8001574:	1c5a      	adds	r2, r3, #1
 8001576:	4613      	mov	r3, r2
 8001578:	009b      	lsls	r3, r3, #2
 800157a:	4413      	add	r3, r2
 800157c:	00db      	lsls	r3, r3, #3
 800157e:	687a      	ldr	r2, [r7, #4]
 8001580:	4413      	add	r3, r2
 8001582:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	2201      	movs	r2, #1
 8001588:	705a      	strb	r2, [r3, #1]
 800158a:	e00e      	b.n	80015aa <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800158c:	78fb      	ldrb	r3, [r7, #3]
 800158e:	f003 0207 	and.w	r2, r3, #7
 8001592:	4613      	mov	r3, r2
 8001594:	009b      	lsls	r3, r3, #2
 8001596:	4413      	add	r3, r2
 8001598:	00db      	lsls	r3, r3, #3
 800159a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800159e:	687a      	ldr	r2, [r7, #4]
 80015a0:	4413      	add	r3, r2
 80015a2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	2200      	movs	r2, #0
 80015a8:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80015aa:	78fb      	ldrb	r3, [r7, #3]
 80015ac:	f003 0307 	and.w	r3, r3, #7
 80015b0:	b2da      	uxtb	r2, r3
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80015bc:	2b01      	cmp	r3, #1
 80015be:	d101      	bne.n	80015c4 <HAL_PCD_EP_Close+0x6a>
 80015c0:	2302      	movs	r3, #2
 80015c2:	e00e      	b.n	80015e2 <HAL_PCD_EP_Close+0x88>
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	2201      	movs	r2, #1
 80015c8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	68f9      	ldr	r1, [r7, #12]
 80015d2:	4618      	mov	r0, r3
 80015d4:	f002 fb7e 	bl	8003cd4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	2200      	movs	r2, #0
 80015dc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 80015e0:	2300      	movs	r3, #0
}
 80015e2:	4618      	mov	r0, r3
 80015e4:	3710      	adds	r7, #16
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}

080015ea <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80015ea:	b580      	push	{r7, lr}
 80015ec:	b086      	sub	sp, #24
 80015ee:	af00      	add	r7, sp, #0
 80015f0:	60f8      	str	r0, [r7, #12]
 80015f2:	607a      	str	r2, [r7, #4]
 80015f4:	603b      	str	r3, [r7, #0]
 80015f6:	460b      	mov	r3, r1
 80015f8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80015fa:	7afb      	ldrb	r3, [r7, #11]
 80015fc:	f003 0207 	and.w	r2, r3, #7
 8001600:	4613      	mov	r3, r2
 8001602:	009b      	lsls	r3, r3, #2
 8001604:	4413      	add	r3, r2
 8001606:	00db      	lsls	r3, r3, #3
 8001608:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800160c:	68fa      	ldr	r2, [r7, #12]
 800160e:	4413      	add	r3, r2
 8001610:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001612:	697b      	ldr	r3, [r7, #20]
 8001614:	687a      	ldr	r2, [r7, #4]
 8001616:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001618:	697b      	ldr	r3, [r7, #20]
 800161a:	683a      	ldr	r2, [r7, #0]
 800161c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800161e:	697b      	ldr	r3, [r7, #20]
 8001620:	2200      	movs	r2, #0
 8001622:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001624:	697b      	ldr	r3, [r7, #20]
 8001626:	2200      	movs	r2, #0
 8001628:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800162a:	7afb      	ldrb	r3, [r7, #11]
 800162c:	f003 0307 	and.w	r3, r3, #7
 8001630:	b2da      	uxtb	r2, r3
 8001632:	697b      	ldr	r3, [r7, #20]
 8001634:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001636:	7afb      	ldrb	r3, [r7, #11]
 8001638:	f003 0307 	and.w	r3, r3, #7
 800163c:	2b00      	cmp	r3, #0
 800163e:	d106      	bne.n	800164e <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	6979      	ldr	r1, [r7, #20]
 8001646:	4618      	mov	r0, r3
 8001648:	f002 fd30 	bl	80040ac <USB_EPStartXfer>
 800164c:	e005      	b.n	800165a <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	6979      	ldr	r1, [r7, #20]
 8001654:	4618      	mov	r0, r3
 8001656:	f002 fd29 	bl	80040ac <USB_EPStartXfer>
  }

  return HAL_OK;
 800165a:	2300      	movs	r3, #0
}
 800165c:	4618      	mov	r0, r3
 800165e:	3718      	adds	r7, #24
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}

08001664 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001664:	b480      	push	{r7}
 8001666:	b083      	sub	sp, #12
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
 800166c:	460b      	mov	r3, r1
 800166e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001670:	78fb      	ldrb	r3, [r7, #3]
 8001672:	f003 0207 	and.w	r2, r3, #7
 8001676:	6879      	ldr	r1, [r7, #4]
 8001678:	4613      	mov	r3, r2
 800167a:	009b      	lsls	r3, r3, #2
 800167c:	4413      	add	r3, r2
 800167e:	00db      	lsls	r3, r3, #3
 8001680:	440b      	add	r3, r1
 8001682:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8001686:	681b      	ldr	r3, [r3, #0]
}
 8001688:	4618      	mov	r0, r3
 800168a:	370c      	adds	r7, #12
 800168c:	46bd      	mov	sp, r7
 800168e:	bc80      	pop	{r7}
 8001690:	4770      	bx	lr

08001692 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001692:	b580      	push	{r7, lr}
 8001694:	b086      	sub	sp, #24
 8001696:	af00      	add	r7, sp, #0
 8001698:	60f8      	str	r0, [r7, #12]
 800169a:	607a      	str	r2, [r7, #4]
 800169c:	603b      	str	r3, [r7, #0]
 800169e:	460b      	mov	r3, r1
 80016a0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80016a2:	7afb      	ldrb	r3, [r7, #11]
 80016a4:	f003 0307 	and.w	r3, r3, #7
 80016a8:	1c5a      	adds	r2, r3, #1
 80016aa:	4613      	mov	r3, r2
 80016ac:	009b      	lsls	r3, r3, #2
 80016ae:	4413      	add	r3, r2
 80016b0:	00db      	lsls	r3, r3, #3
 80016b2:	68fa      	ldr	r2, [r7, #12]
 80016b4:	4413      	add	r3, r2
 80016b6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80016b8:	697b      	ldr	r3, [r7, #20]
 80016ba:	687a      	ldr	r2, [r7, #4]
 80016bc:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80016be:	697b      	ldr	r3, [r7, #20]
 80016c0:	683a      	ldr	r2, [r7, #0]
 80016c2:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 80016c4:	697b      	ldr	r3, [r7, #20]
 80016c6:	2201      	movs	r2, #1
 80016c8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 80016cc:	697b      	ldr	r3, [r7, #20]
 80016ce:	683a      	ldr	r2, [r7, #0]
 80016d0:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 80016d2:	697b      	ldr	r3, [r7, #20]
 80016d4:	2200      	movs	r2, #0
 80016d6:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80016d8:	697b      	ldr	r3, [r7, #20]
 80016da:	2201      	movs	r2, #1
 80016dc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80016de:	7afb      	ldrb	r3, [r7, #11]
 80016e0:	f003 0307 	and.w	r3, r3, #7
 80016e4:	b2da      	uxtb	r2, r3
 80016e6:	697b      	ldr	r3, [r7, #20]
 80016e8:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80016ea:	7afb      	ldrb	r3, [r7, #11]
 80016ec:	f003 0307 	and.w	r3, r3, #7
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d106      	bne.n	8001702 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	6979      	ldr	r1, [r7, #20]
 80016fa:	4618      	mov	r0, r3
 80016fc:	f002 fcd6 	bl	80040ac <USB_EPStartXfer>
 8001700:	e005      	b.n	800170e <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	6979      	ldr	r1, [r7, #20]
 8001708:	4618      	mov	r0, r3
 800170a:	f002 fccf 	bl	80040ac <USB_EPStartXfer>
  }

  return HAL_OK;
 800170e:	2300      	movs	r3, #0
}
 8001710:	4618      	mov	r0, r3
 8001712:	3718      	adds	r7, #24
 8001714:	46bd      	mov	sp, r7
 8001716:	bd80      	pop	{r7, pc}

08001718 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b084      	sub	sp, #16
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
 8001720:	460b      	mov	r3, r1
 8001722:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001724:	78fb      	ldrb	r3, [r7, #3]
 8001726:	f003 0207 	and.w	r2, r3, #7
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	685b      	ldr	r3, [r3, #4]
 800172e:	429a      	cmp	r2, r3
 8001730:	d901      	bls.n	8001736 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001732:	2301      	movs	r3, #1
 8001734:	e04c      	b.n	80017d0 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001736:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800173a:	2b00      	cmp	r3, #0
 800173c:	da0e      	bge.n	800175c <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800173e:	78fb      	ldrb	r3, [r7, #3]
 8001740:	f003 0307 	and.w	r3, r3, #7
 8001744:	1c5a      	adds	r2, r3, #1
 8001746:	4613      	mov	r3, r2
 8001748:	009b      	lsls	r3, r3, #2
 800174a:	4413      	add	r3, r2
 800174c:	00db      	lsls	r3, r3, #3
 800174e:	687a      	ldr	r2, [r7, #4]
 8001750:	4413      	add	r3, r2
 8001752:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	2201      	movs	r2, #1
 8001758:	705a      	strb	r2, [r3, #1]
 800175a:	e00c      	b.n	8001776 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800175c:	78fa      	ldrb	r2, [r7, #3]
 800175e:	4613      	mov	r3, r2
 8001760:	009b      	lsls	r3, r3, #2
 8001762:	4413      	add	r3, r2
 8001764:	00db      	lsls	r3, r3, #3
 8001766:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800176a:	687a      	ldr	r2, [r7, #4]
 800176c:	4413      	add	r3, r2
 800176e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	2200      	movs	r2, #0
 8001774:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	2201      	movs	r2, #1
 800177a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800177c:	78fb      	ldrb	r3, [r7, #3]
 800177e:	f003 0307 	and.w	r3, r3, #7
 8001782:	b2da      	uxtb	r2, r3
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800178e:	2b01      	cmp	r3, #1
 8001790:	d101      	bne.n	8001796 <HAL_PCD_EP_SetStall+0x7e>
 8001792:	2302      	movs	r3, #2
 8001794:	e01c      	b.n	80017d0 <HAL_PCD_EP_SetStall+0xb8>
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	2201      	movs	r2, #1
 800179a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	68f9      	ldr	r1, [r7, #12]
 80017a4:	4618      	mov	r0, r3
 80017a6:	f004 fab9 	bl	8005d1c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80017aa:	78fb      	ldrb	r3, [r7, #3]
 80017ac:	f003 0307 	and.w	r3, r3, #7
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d108      	bne.n	80017c6 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681a      	ldr	r2, [r3, #0]
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80017be:	4619      	mov	r1, r3
 80017c0:	4610      	mov	r0, r2
 80017c2:	f004 fbde 	bl	8005f82 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	2200      	movs	r2, #0
 80017ca:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80017ce:	2300      	movs	r3, #0
}
 80017d0:	4618      	mov	r0, r3
 80017d2:	3710      	adds	r7, #16
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bd80      	pop	{r7, pc}

080017d8 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b084      	sub	sp, #16
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
 80017e0:	460b      	mov	r3, r1
 80017e2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80017e4:	78fb      	ldrb	r3, [r7, #3]
 80017e6:	f003 020f 	and.w	r2, r3, #15
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	685b      	ldr	r3, [r3, #4]
 80017ee:	429a      	cmp	r2, r3
 80017f0:	d901      	bls.n	80017f6 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80017f2:	2301      	movs	r3, #1
 80017f4:	e040      	b.n	8001878 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80017f6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	da0e      	bge.n	800181c <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80017fe:	78fb      	ldrb	r3, [r7, #3]
 8001800:	f003 0307 	and.w	r3, r3, #7
 8001804:	1c5a      	adds	r2, r3, #1
 8001806:	4613      	mov	r3, r2
 8001808:	009b      	lsls	r3, r3, #2
 800180a:	4413      	add	r3, r2
 800180c:	00db      	lsls	r3, r3, #3
 800180e:	687a      	ldr	r2, [r7, #4]
 8001810:	4413      	add	r3, r2
 8001812:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	2201      	movs	r2, #1
 8001818:	705a      	strb	r2, [r3, #1]
 800181a:	e00e      	b.n	800183a <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800181c:	78fb      	ldrb	r3, [r7, #3]
 800181e:	f003 0207 	and.w	r2, r3, #7
 8001822:	4613      	mov	r3, r2
 8001824:	009b      	lsls	r3, r3, #2
 8001826:	4413      	add	r3, r2
 8001828:	00db      	lsls	r3, r3, #3
 800182a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800182e:	687a      	ldr	r2, [r7, #4]
 8001830:	4413      	add	r3, r2
 8001832:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	2200      	movs	r2, #0
 8001838:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	2200      	movs	r2, #0
 800183e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001840:	78fb      	ldrb	r3, [r7, #3]
 8001842:	f003 0307 	and.w	r3, r3, #7
 8001846:	b2da      	uxtb	r2, r3
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001852:	2b01      	cmp	r3, #1
 8001854:	d101      	bne.n	800185a <HAL_PCD_EP_ClrStall+0x82>
 8001856:	2302      	movs	r3, #2
 8001858:	e00e      	b.n	8001878 <HAL_PCD_EP_ClrStall+0xa0>
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	2201      	movs	r2, #1
 800185e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	68f9      	ldr	r1, [r7, #12]
 8001868:	4618      	mov	r0, r3
 800186a:	f004 faa7 	bl	8005dbc <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	2200      	movs	r2, #0
 8001872:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001876:	2300      	movs	r3, #0
}
 8001878:	4618      	mov	r0, r3
 800187a:	3710      	adds	r7, #16
 800187c:	46bd      	mov	sp, r7
 800187e:	bd80      	pop	{r7, pc}

08001880 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b08e      	sub	sp, #56	; 0x38
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001888:	e2ec      	b.n	8001e64 <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001892:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001894:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001896:	b2db      	uxtb	r3, r3
 8001898:	f003 030f 	and.w	r3, r3, #15
 800189c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 80018a0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	f040 8161 	bne.w	8001b6c <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80018aa:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80018ac:	f003 0310 	and.w	r3, r3, #16
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d152      	bne.n	800195a <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	881b      	ldrh	r3, [r3, #0]
 80018ba:	b29b      	uxth	r3, r3
 80018bc:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80018c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80018c4:	81fb      	strh	r3, [r7, #14]
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681a      	ldr	r2, [r3, #0]
 80018ca:	89fb      	ldrh	r3, [r7, #14]
 80018cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80018d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80018d4:	b29b      	uxth	r3, r3
 80018d6:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	3328      	adds	r3, #40	; 0x28
 80018dc:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80018e6:	b29b      	uxth	r3, r3
 80018e8:	461a      	mov	r2, r3
 80018ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ec:	781b      	ldrb	r3, [r3, #0]
 80018ee:	00db      	lsls	r3, r3, #3
 80018f0:	4413      	add	r3, r2
 80018f2:	3302      	adds	r3, #2
 80018f4:	005b      	lsls	r3, r3, #1
 80018f6:	687a      	ldr	r2, [r7, #4]
 80018f8:	6812      	ldr	r2, [r2, #0]
 80018fa:	4413      	add	r3, r2
 80018fc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001900:	881b      	ldrh	r3, [r3, #0]
 8001902:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001908:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800190a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800190c:	695a      	ldr	r2, [r3, #20]
 800190e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001910:	69db      	ldr	r3, [r3, #28]
 8001912:	441a      	add	r2, r3
 8001914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001916:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001918:	2100      	movs	r1, #0
 800191a:	6878      	ldr	r0, [r7, #4]
 800191c:	f006 f9c9 	bl	8007cb2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001926:	b2db      	uxtb	r3, r3
 8001928:	2b00      	cmp	r3, #0
 800192a:	f000 829b 	beq.w	8001e64 <PCD_EP_ISR_Handler+0x5e4>
 800192e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001930:	699b      	ldr	r3, [r3, #24]
 8001932:	2b00      	cmp	r3, #0
 8001934:	f040 8296 	bne.w	8001e64 <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800193e:	b2db      	uxtb	r3, r3
 8001940:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001944:	b2da      	uxtb	r2, r3
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	b292      	uxth	r2, r2
 800194c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	2200      	movs	r2, #0
 8001954:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001958:	e284      	b.n	8001e64 <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001960:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	881b      	ldrh	r3, [r3, #0]
 8001968:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800196a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800196c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001970:	2b00      	cmp	r3, #0
 8001972:	d034      	beq.n	80019de <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800197c:	b29b      	uxth	r3, r3
 800197e:	461a      	mov	r2, r3
 8001980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001982:	781b      	ldrb	r3, [r3, #0]
 8001984:	00db      	lsls	r3, r3, #3
 8001986:	4413      	add	r3, r2
 8001988:	3306      	adds	r3, #6
 800198a:	005b      	lsls	r3, r3, #1
 800198c:	687a      	ldr	r2, [r7, #4]
 800198e:	6812      	ldr	r2, [r2, #0]
 8001990:	4413      	add	r3, r2
 8001992:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001996:	881b      	ldrh	r3, [r3, #0]
 8001998:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800199c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800199e:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6818      	ldr	r0, [r3, #0]
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 80019aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ac:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80019ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019b0:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80019b2:	b29b      	uxth	r3, r3
 80019b4:	f004 fb35 	bl	8006022 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	881b      	ldrh	r3, [r3, #0]
 80019be:	b29a      	uxth	r2, r3
 80019c0:	f640 738f 	movw	r3, #3983	; 0xf8f
 80019c4:	4013      	ands	r3, r2
 80019c6:	823b      	strh	r3, [r7, #16]
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	8a3a      	ldrh	r2, [r7, #16]
 80019ce:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80019d2:	b292      	uxth	r2, r2
 80019d4:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80019d6:	6878      	ldr	r0, [r7, #4]
 80019d8:	f006 f93e 	bl	8007c58 <HAL_PCD_SetupStageCallback>
 80019dc:	e242      	b.n	8001e64 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80019de:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	f280 823e 	bge.w	8001e64 <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	881b      	ldrh	r3, [r3, #0]
 80019ee:	b29a      	uxth	r2, r3
 80019f0:	f640 738f 	movw	r3, #3983	; 0xf8f
 80019f4:	4013      	ands	r3, r2
 80019f6:	83bb      	strh	r3, [r7, #28]
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	8bba      	ldrh	r2, [r7, #28]
 80019fe:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001a02:	b292      	uxth	r2, r2
 8001a04:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001a0e:	b29b      	uxth	r3, r3
 8001a10:	461a      	mov	r2, r3
 8001a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a14:	781b      	ldrb	r3, [r3, #0]
 8001a16:	00db      	lsls	r3, r3, #3
 8001a18:	4413      	add	r3, r2
 8001a1a:	3306      	adds	r3, #6
 8001a1c:	005b      	lsls	r3, r3, #1
 8001a1e:	687a      	ldr	r2, [r7, #4]
 8001a20:	6812      	ldr	r2, [r2, #0]
 8001a22:	4413      	add	r3, r2
 8001a24:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001a28:	881b      	ldrh	r3, [r3, #0]
 8001a2a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a30:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a34:	69db      	ldr	r3, [r3, #28]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d019      	beq.n	8001a6e <PCD_EP_ISR_Handler+0x1ee>
 8001a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a3c:	695b      	ldr	r3, [r3, #20]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d015      	beq.n	8001a6e <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	6818      	ldr	r0, [r3, #0]
 8001a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a48:	6959      	ldr	r1, [r3, #20]
 8001a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a4c:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a50:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001a52:	b29b      	uxth	r3, r3
 8001a54:	f004 fae5 	bl	8006022 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a5a:	695a      	ldr	r2, [r3, #20]
 8001a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a5e:	69db      	ldr	r3, [r3, #28]
 8001a60:	441a      	add	r2, r3
 8001a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a64:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001a66:	2100      	movs	r1, #0
 8001a68:	6878      	ldr	r0, [r7, #4]
 8001a6a:	f006 f907 	bl	8007c7c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	881b      	ldrh	r3, [r3, #0]
 8001a74:	b29b      	uxth	r3, r3
 8001a76:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	f040 81f2 	bne.w	8001e64 <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	61bb      	str	r3, [r7, #24]
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001a8e:	b29b      	uxth	r3, r3
 8001a90:	461a      	mov	r2, r3
 8001a92:	69bb      	ldr	r3, [r7, #24]
 8001a94:	4413      	add	r3, r2
 8001a96:	61bb      	str	r3, [r7, #24]
 8001a98:	69bb      	ldr	r3, [r7, #24]
 8001a9a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001a9e:	617b      	str	r3, [r7, #20]
 8001aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aa2:	691b      	ldr	r3, [r3, #16]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d112      	bne.n	8001ace <PCD_EP_ISR_Handler+0x24e>
 8001aa8:	697b      	ldr	r3, [r7, #20]
 8001aaa:	881b      	ldrh	r3, [r3, #0]
 8001aac:	b29b      	uxth	r3, r3
 8001aae:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001ab2:	b29a      	uxth	r2, r3
 8001ab4:	697b      	ldr	r3, [r7, #20]
 8001ab6:	801a      	strh	r2, [r3, #0]
 8001ab8:	697b      	ldr	r3, [r7, #20]
 8001aba:	881b      	ldrh	r3, [r3, #0]
 8001abc:	b29b      	uxth	r3, r3
 8001abe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001ac2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001ac6:	b29a      	uxth	r2, r3
 8001ac8:	697b      	ldr	r3, [r7, #20]
 8001aca:	801a      	strh	r2, [r3, #0]
 8001acc:	e02f      	b.n	8001b2e <PCD_EP_ISR_Handler+0x2ae>
 8001ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ad0:	691b      	ldr	r3, [r3, #16]
 8001ad2:	2b3e      	cmp	r3, #62	; 0x3e
 8001ad4:	d813      	bhi.n	8001afe <PCD_EP_ISR_Handler+0x27e>
 8001ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ad8:	691b      	ldr	r3, [r3, #16]
 8001ada:	085b      	lsrs	r3, r3, #1
 8001adc:	633b      	str	r3, [r7, #48]	; 0x30
 8001ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ae0:	691b      	ldr	r3, [r3, #16]
 8001ae2:	f003 0301 	and.w	r3, r3, #1
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d002      	beq.n	8001af0 <PCD_EP_ISR_Handler+0x270>
 8001aea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001aec:	3301      	adds	r3, #1
 8001aee:	633b      	str	r3, [r7, #48]	; 0x30
 8001af0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001af2:	b29b      	uxth	r3, r3
 8001af4:	029b      	lsls	r3, r3, #10
 8001af6:	b29a      	uxth	r2, r3
 8001af8:	697b      	ldr	r3, [r7, #20]
 8001afa:	801a      	strh	r2, [r3, #0]
 8001afc:	e017      	b.n	8001b2e <PCD_EP_ISR_Handler+0x2ae>
 8001afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b00:	691b      	ldr	r3, [r3, #16]
 8001b02:	095b      	lsrs	r3, r3, #5
 8001b04:	633b      	str	r3, [r7, #48]	; 0x30
 8001b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b08:	691b      	ldr	r3, [r3, #16]
 8001b0a:	f003 031f 	and.w	r3, r3, #31
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d102      	bne.n	8001b18 <PCD_EP_ISR_Handler+0x298>
 8001b12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b14:	3b01      	subs	r3, #1
 8001b16:	633b      	str	r3, [r7, #48]	; 0x30
 8001b18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b1a:	b29b      	uxth	r3, r3
 8001b1c:	029b      	lsls	r3, r3, #10
 8001b1e:	b29b      	uxth	r3, r3
 8001b20:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001b24:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001b28:	b29a      	uxth	r2, r3
 8001b2a:	697b      	ldr	r3, [r7, #20]
 8001b2c:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	881b      	ldrh	r3, [r3, #0]
 8001b34:	b29b      	uxth	r3, r3
 8001b36:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001b3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001b3e:	827b      	strh	r3, [r7, #18]
 8001b40:	8a7b      	ldrh	r3, [r7, #18]
 8001b42:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8001b46:	827b      	strh	r3, [r7, #18]
 8001b48:	8a7b      	ldrh	r3, [r7, #18]
 8001b4a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001b4e:	827b      	strh	r3, [r7, #18]
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681a      	ldr	r2, [r3, #0]
 8001b54:	8a7b      	ldrh	r3, [r7, #18]
 8001b56:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001b5a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001b5e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b66:	b29b      	uxth	r3, r3
 8001b68:	8013      	strh	r3, [r2, #0]
 8001b6a:	e17b      	b.n	8001e64 <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	461a      	mov	r2, r3
 8001b72:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001b76:	009b      	lsls	r3, r3, #2
 8001b78:	4413      	add	r3, r2
 8001b7a:	881b      	ldrh	r3, [r3, #0]
 8001b7c:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001b7e:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	f280 80ea 	bge.w	8001d5c <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	461a      	mov	r2, r3
 8001b8e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001b92:	009b      	lsls	r3, r3, #2
 8001b94:	4413      	add	r3, r2
 8001b96:	881b      	ldrh	r3, [r3, #0]
 8001b98:	b29a      	uxth	r2, r3
 8001b9a:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001b9e:	4013      	ands	r3, r2
 8001ba0:	853b      	strh	r3, [r7, #40]	; 0x28
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	461a      	mov	r2, r3
 8001ba8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001bac:	009b      	lsls	r3, r3, #2
 8001bae:	4413      	add	r3, r2
 8001bb0:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001bb2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001bb6:	b292      	uxth	r2, r2
 8001bb8:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001bba:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8001bbe:	4613      	mov	r3, r2
 8001bc0:	009b      	lsls	r3, r3, #2
 8001bc2:	4413      	add	r3, r2
 8001bc4:	00db      	lsls	r3, r3, #3
 8001bc6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001bca:	687a      	ldr	r2, [r7, #4]
 8001bcc:	4413      	add	r3, r2
 8001bce:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8001bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bd2:	7b1b      	ldrb	r3, [r3, #12]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d122      	bne.n	8001c1e <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001be0:	b29b      	uxth	r3, r3
 8001be2:	461a      	mov	r2, r3
 8001be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001be6:	781b      	ldrb	r3, [r3, #0]
 8001be8:	00db      	lsls	r3, r3, #3
 8001bea:	4413      	add	r3, r2
 8001bec:	3306      	adds	r3, #6
 8001bee:	005b      	lsls	r3, r3, #1
 8001bf0:	687a      	ldr	r2, [r7, #4]
 8001bf2:	6812      	ldr	r2, [r2, #0]
 8001bf4:	4413      	add	r3, r2
 8001bf6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001bfa:	881b      	ldrh	r3, [r3, #0]
 8001bfc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001c00:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8001c02:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	f000 8087 	beq.w	8001d18 <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	6818      	ldr	r0, [r3, #0]
 8001c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c10:	6959      	ldr	r1, [r3, #20]
 8001c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c14:	88da      	ldrh	r2, [r3, #6]
 8001c16:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001c18:	f004 fa03 	bl	8006022 <USB_ReadPMA>
 8001c1c:	e07c      	b.n	8001d18 <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8001c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c20:	78db      	ldrb	r3, [r3, #3]
 8001c22:	2b02      	cmp	r3, #2
 8001c24:	d108      	bne.n	8001c38 <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8001c26:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001c28:	461a      	mov	r2, r3
 8001c2a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001c2c:	6878      	ldr	r0, [r7, #4]
 8001c2e:	f000 f927 	bl	8001e80 <HAL_PCD_EP_DB_Receive>
 8001c32:	4603      	mov	r3, r0
 8001c34:	86fb      	strh	r3, [r7, #54]	; 0x36
 8001c36:	e06f      	b.n	8001d18 <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	461a      	mov	r2, r3
 8001c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c40:	781b      	ldrb	r3, [r3, #0]
 8001c42:	009b      	lsls	r3, r3, #2
 8001c44:	4413      	add	r3, r2
 8001c46:	881b      	ldrh	r3, [r3, #0]
 8001c48:	b29b      	uxth	r3, r3
 8001c4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001c4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001c52:	847b      	strh	r3, [r7, #34]	; 0x22
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	461a      	mov	r2, r3
 8001c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c5c:	781b      	ldrb	r3, [r3, #0]
 8001c5e:	009b      	lsls	r3, r3, #2
 8001c60:	441a      	add	r2, r3
 8001c62:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001c64:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001c68:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001c6c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c70:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001c74:	b29b      	uxth	r3, r3
 8001c76:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	461a      	mov	r2, r3
 8001c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c80:	781b      	ldrb	r3, [r3, #0]
 8001c82:	009b      	lsls	r3, r3, #2
 8001c84:	4413      	add	r3, r2
 8001c86:	881b      	ldrh	r3, [r3, #0]
 8001c88:	b29b      	uxth	r3, r3
 8001c8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d021      	beq.n	8001cd6 <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001c9a:	b29b      	uxth	r3, r3
 8001c9c:	461a      	mov	r2, r3
 8001c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ca0:	781b      	ldrb	r3, [r3, #0]
 8001ca2:	00db      	lsls	r3, r3, #3
 8001ca4:	4413      	add	r3, r2
 8001ca6:	3302      	adds	r3, #2
 8001ca8:	005b      	lsls	r3, r3, #1
 8001caa:	687a      	ldr	r2, [r7, #4]
 8001cac:	6812      	ldr	r2, [r2, #0]
 8001cae:	4413      	add	r3, r2
 8001cb0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001cb4:	881b      	ldrh	r3, [r3, #0]
 8001cb6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001cba:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8001cbc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d02a      	beq.n	8001d18 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	6818      	ldr	r0, [r3, #0]
 8001cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cc8:	6959      	ldr	r1, [r3, #20]
 8001cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ccc:	891a      	ldrh	r2, [r3, #8]
 8001cce:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001cd0:	f004 f9a7 	bl	8006022 <USB_ReadPMA>
 8001cd4:	e020      	b.n	8001d18 <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001cde:	b29b      	uxth	r3, r3
 8001ce0:	461a      	mov	r2, r3
 8001ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ce4:	781b      	ldrb	r3, [r3, #0]
 8001ce6:	00db      	lsls	r3, r3, #3
 8001ce8:	4413      	add	r3, r2
 8001cea:	3306      	adds	r3, #6
 8001cec:	005b      	lsls	r3, r3, #1
 8001cee:	687a      	ldr	r2, [r7, #4]
 8001cf0:	6812      	ldr	r2, [r2, #0]
 8001cf2:	4413      	add	r3, r2
 8001cf4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001cf8:	881b      	ldrh	r3, [r3, #0]
 8001cfa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001cfe:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8001d00:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d008      	beq.n	8001d18 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6818      	ldr	r0, [r3, #0]
 8001d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d0c:	6959      	ldr	r1, [r3, #20]
 8001d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d10:	895a      	ldrh	r2, [r3, #10]
 8001d12:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001d14:	f004 f985 	bl	8006022 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8001d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d1a:	69da      	ldr	r2, [r3, #28]
 8001d1c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001d1e:	441a      	add	r2, r3
 8001d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d22:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8001d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d26:	695a      	ldr	r2, [r3, #20]
 8001d28:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001d2a:	441a      	add	r2, r3
 8001d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d2e:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d32:	699b      	ldr	r3, [r3, #24]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d004      	beq.n	8001d42 <PCD_EP_ISR_Handler+0x4c2>
 8001d38:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d3c:	691b      	ldr	r3, [r3, #16]
 8001d3e:	429a      	cmp	r2, r3
 8001d40:	d206      	bcs.n	8001d50 <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d44:	781b      	ldrb	r3, [r3, #0]
 8001d46:	4619      	mov	r1, r3
 8001d48:	6878      	ldr	r0, [r7, #4]
 8001d4a:	f005 ff97 	bl	8007c7c <HAL_PCD_DataOutStageCallback>
 8001d4e:	e005      	b.n	8001d5c <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001d56:	4618      	mov	r0, r3
 8001d58:	f002 f9a8 	bl	80040ac <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001d5c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001d5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d07e      	beq.n	8001e64 <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 8001d66:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001d6a:	1c5a      	adds	r2, r3, #1
 8001d6c:	4613      	mov	r3, r2
 8001d6e:	009b      	lsls	r3, r3, #2
 8001d70:	4413      	add	r3, r2
 8001d72:	00db      	lsls	r3, r3, #3
 8001d74:	687a      	ldr	r2, [r7, #4]
 8001d76:	4413      	add	r3, r2
 8001d78:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	461a      	mov	r2, r3
 8001d80:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001d84:	009b      	lsls	r3, r3, #2
 8001d86:	4413      	add	r3, r2
 8001d88:	881b      	ldrh	r3, [r3, #0]
 8001d8a:	b29b      	uxth	r3, r3
 8001d8c:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001d90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d94:	843b      	strh	r3, [r7, #32]
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	461a      	mov	r2, r3
 8001d9c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001da0:	009b      	lsls	r3, r3, #2
 8001da2:	441a      	add	r2, r3
 8001da4:	8c3b      	ldrh	r3, [r7, #32]
 8001da6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001daa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001dae:	b29b      	uxth	r3, r3
 8001db0:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8001db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001db4:	78db      	ldrb	r3, [r3, #3]
 8001db6:	2b03      	cmp	r3, #3
 8001db8:	d00c      	beq.n	8001dd4 <PCD_EP_ISR_Handler+0x554>
 8001dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dbc:	78db      	ldrb	r3, [r3, #3]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d008      	beq.n	8001dd4 <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8001dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dc4:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8001dc6:	2b02      	cmp	r3, #2
 8001dc8:	d146      	bne.n	8001e58 <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8001dca:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001dcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d141      	bne.n	8001e58 <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001ddc:	b29b      	uxth	r3, r3
 8001dde:	461a      	mov	r2, r3
 8001de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001de2:	781b      	ldrb	r3, [r3, #0]
 8001de4:	00db      	lsls	r3, r3, #3
 8001de6:	4413      	add	r3, r2
 8001de8:	3302      	adds	r3, #2
 8001dea:	005b      	lsls	r3, r3, #1
 8001dec:	687a      	ldr	r2, [r7, #4]
 8001dee:	6812      	ldr	r2, [r2, #0]
 8001df0:	4413      	add	r3, r2
 8001df2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001df6:	881b      	ldrh	r3, [r3, #0]
 8001df8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001dfc:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8001dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e00:	699a      	ldr	r2, [r3, #24]
 8001e02:	8bfb      	ldrh	r3, [r7, #30]
 8001e04:	429a      	cmp	r2, r3
 8001e06:	d906      	bls.n	8001e16 <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 8001e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e0a:	699a      	ldr	r2, [r3, #24]
 8001e0c:	8bfb      	ldrh	r3, [r7, #30]
 8001e0e:	1ad2      	subs	r2, r2, r3
 8001e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e12:	619a      	str	r2, [r3, #24]
 8001e14:	e002      	b.n	8001e1c <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 8001e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e18:	2200      	movs	r2, #0
 8001e1a:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8001e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e1e:	699b      	ldr	r3, [r3, #24]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d106      	bne.n	8001e32 <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e26:	781b      	ldrb	r3, [r3, #0]
 8001e28:	4619      	mov	r1, r3
 8001e2a:	6878      	ldr	r0, [r7, #4]
 8001e2c:	f005 ff41 	bl	8007cb2 <HAL_PCD_DataInStageCallback>
 8001e30:	e018      	b.n	8001e64 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8001e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e34:	695a      	ldr	r2, [r3, #20]
 8001e36:	8bfb      	ldrh	r3, [r7, #30]
 8001e38:	441a      	add	r2, r3
 8001e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e3c:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8001e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e40:	69da      	ldr	r2, [r3, #28]
 8001e42:	8bfb      	ldrh	r3, [r7, #30]
 8001e44:	441a      	add	r2, r3
 8001e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e48:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001e50:	4618      	mov	r0, r3
 8001e52:	f002 f92b 	bl	80040ac <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8001e56:	e005      	b.n	8001e64 <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8001e58:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001e5a:	461a      	mov	r2, r3
 8001e5c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001e5e:	6878      	ldr	r0, [r7, #4]
 8001e60:	f000 f91b 	bl	800209a <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001e6c:	b29b      	uxth	r3, r3
 8001e6e:	b21b      	sxth	r3, r3
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	f6ff ad0a 	blt.w	800188a <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8001e76:	2300      	movs	r3, #0
}
 8001e78:	4618      	mov	r0, r3
 8001e7a:	3738      	adds	r7, #56	; 0x38
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bd80      	pop	{r7, pc}

08001e80 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b088      	sub	sp, #32
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	60f8      	str	r0, [r7, #12]
 8001e88:	60b9      	str	r1, [r7, #8]
 8001e8a:	4613      	mov	r3, r2
 8001e8c:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001e8e:	88fb      	ldrh	r3, [r7, #6]
 8001e90:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d07e      	beq.n	8001f96 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001ea0:	b29b      	uxth	r3, r3
 8001ea2:	461a      	mov	r2, r3
 8001ea4:	68bb      	ldr	r3, [r7, #8]
 8001ea6:	781b      	ldrb	r3, [r3, #0]
 8001ea8:	00db      	lsls	r3, r3, #3
 8001eaa:	4413      	add	r3, r2
 8001eac:	3302      	adds	r3, #2
 8001eae:	005b      	lsls	r3, r3, #1
 8001eb0:	68fa      	ldr	r2, [r7, #12]
 8001eb2:	6812      	ldr	r2, [r2, #0]
 8001eb4:	4413      	add	r3, r2
 8001eb6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001eba:	881b      	ldrh	r3, [r3, #0]
 8001ebc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001ec0:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8001ec2:	68bb      	ldr	r3, [r7, #8]
 8001ec4:	699a      	ldr	r2, [r3, #24]
 8001ec6:	8b7b      	ldrh	r3, [r7, #26]
 8001ec8:	429a      	cmp	r2, r3
 8001eca:	d306      	bcc.n	8001eda <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8001ecc:	68bb      	ldr	r3, [r7, #8]
 8001ece:	699a      	ldr	r2, [r3, #24]
 8001ed0:	8b7b      	ldrh	r3, [r7, #26]
 8001ed2:	1ad2      	subs	r2, r2, r3
 8001ed4:	68bb      	ldr	r3, [r7, #8]
 8001ed6:	619a      	str	r2, [r3, #24]
 8001ed8:	e002      	b.n	8001ee0 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8001eda:	68bb      	ldr	r3, [r7, #8]
 8001edc:	2200      	movs	r2, #0
 8001ede:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001ee0:	68bb      	ldr	r3, [r7, #8]
 8001ee2:	699b      	ldr	r3, [r3, #24]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d123      	bne.n	8001f30 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	461a      	mov	r2, r3
 8001eee:	68bb      	ldr	r3, [r7, #8]
 8001ef0:	781b      	ldrb	r3, [r3, #0]
 8001ef2:	009b      	lsls	r3, r3, #2
 8001ef4:	4413      	add	r3, r2
 8001ef6:	881b      	ldrh	r3, [r3, #0]
 8001ef8:	b29b      	uxth	r3, r3
 8001efa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001efe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f02:	833b      	strh	r3, [r7, #24]
 8001f04:	8b3b      	ldrh	r3, [r7, #24]
 8001f06:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001f0a:	833b      	strh	r3, [r7, #24]
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	461a      	mov	r2, r3
 8001f12:	68bb      	ldr	r3, [r7, #8]
 8001f14:	781b      	ldrb	r3, [r3, #0]
 8001f16:	009b      	lsls	r3, r3, #2
 8001f18:	441a      	add	r2, r3
 8001f1a:	8b3b      	ldrh	r3, [r7, #24]
 8001f1c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001f20:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001f24:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f2c:	b29b      	uxth	r3, r3
 8001f2e:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001f30:	88fb      	ldrh	r3, [r7, #6]
 8001f32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d01f      	beq.n	8001f7a <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	461a      	mov	r2, r3
 8001f40:	68bb      	ldr	r3, [r7, #8]
 8001f42:	781b      	ldrb	r3, [r3, #0]
 8001f44:	009b      	lsls	r3, r3, #2
 8001f46:	4413      	add	r3, r2
 8001f48:	881b      	ldrh	r3, [r3, #0]
 8001f4a:	b29b      	uxth	r3, r3
 8001f4c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001f50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f54:	82fb      	strh	r3, [r7, #22]
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	461a      	mov	r2, r3
 8001f5c:	68bb      	ldr	r3, [r7, #8]
 8001f5e:	781b      	ldrb	r3, [r3, #0]
 8001f60:	009b      	lsls	r3, r3, #2
 8001f62:	441a      	add	r2, r3
 8001f64:	8afb      	ldrh	r3, [r7, #22]
 8001f66:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001f6a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001f6e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f72:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001f76:	b29b      	uxth	r3, r3
 8001f78:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8001f7a:	8b7b      	ldrh	r3, [r7, #26]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	f000 8087 	beq.w	8002090 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	6818      	ldr	r0, [r3, #0]
 8001f86:	68bb      	ldr	r3, [r7, #8]
 8001f88:	6959      	ldr	r1, [r3, #20]
 8001f8a:	68bb      	ldr	r3, [r7, #8]
 8001f8c:	891a      	ldrh	r2, [r3, #8]
 8001f8e:	8b7b      	ldrh	r3, [r7, #26]
 8001f90:	f004 f847 	bl	8006022 <USB_ReadPMA>
 8001f94:	e07c      	b.n	8002090 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001f9e:	b29b      	uxth	r3, r3
 8001fa0:	461a      	mov	r2, r3
 8001fa2:	68bb      	ldr	r3, [r7, #8]
 8001fa4:	781b      	ldrb	r3, [r3, #0]
 8001fa6:	00db      	lsls	r3, r3, #3
 8001fa8:	4413      	add	r3, r2
 8001faa:	3306      	adds	r3, #6
 8001fac:	005b      	lsls	r3, r3, #1
 8001fae:	68fa      	ldr	r2, [r7, #12]
 8001fb0:	6812      	ldr	r2, [r2, #0]
 8001fb2:	4413      	add	r3, r2
 8001fb4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001fb8:	881b      	ldrh	r3, [r3, #0]
 8001fba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001fbe:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8001fc0:	68bb      	ldr	r3, [r7, #8]
 8001fc2:	699a      	ldr	r2, [r3, #24]
 8001fc4:	8b7b      	ldrh	r3, [r7, #26]
 8001fc6:	429a      	cmp	r2, r3
 8001fc8:	d306      	bcc.n	8001fd8 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8001fca:	68bb      	ldr	r3, [r7, #8]
 8001fcc:	699a      	ldr	r2, [r3, #24]
 8001fce:	8b7b      	ldrh	r3, [r7, #26]
 8001fd0:	1ad2      	subs	r2, r2, r3
 8001fd2:	68bb      	ldr	r3, [r7, #8]
 8001fd4:	619a      	str	r2, [r3, #24]
 8001fd6:	e002      	b.n	8001fde <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8001fd8:	68bb      	ldr	r3, [r7, #8]
 8001fda:	2200      	movs	r2, #0
 8001fdc:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001fde:	68bb      	ldr	r3, [r7, #8]
 8001fe0:	699b      	ldr	r3, [r3, #24]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d123      	bne.n	800202e <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	461a      	mov	r2, r3
 8001fec:	68bb      	ldr	r3, [r7, #8]
 8001fee:	781b      	ldrb	r3, [r3, #0]
 8001ff0:	009b      	lsls	r3, r3, #2
 8001ff2:	4413      	add	r3, r2
 8001ff4:	881b      	ldrh	r3, [r3, #0]
 8001ff6:	b29b      	uxth	r3, r3
 8001ff8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001ffc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002000:	83fb      	strh	r3, [r7, #30]
 8002002:	8bfb      	ldrh	r3, [r7, #30]
 8002004:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002008:	83fb      	strh	r3, [r7, #30]
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	461a      	mov	r2, r3
 8002010:	68bb      	ldr	r3, [r7, #8]
 8002012:	781b      	ldrb	r3, [r3, #0]
 8002014:	009b      	lsls	r3, r3, #2
 8002016:	441a      	add	r2, r3
 8002018:	8bfb      	ldrh	r3, [r7, #30]
 800201a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800201e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002022:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002026:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800202a:	b29b      	uxth	r3, r3
 800202c:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800202e:	88fb      	ldrh	r3, [r7, #6]
 8002030:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002034:	2b00      	cmp	r3, #0
 8002036:	d11f      	bne.n	8002078 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	461a      	mov	r2, r3
 800203e:	68bb      	ldr	r3, [r7, #8]
 8002040:	781b      	ldrb	r3, [r3, #0]
 8002042:	009b      	lsls	r3, r3, #2
 8002044:	4413      	add	r3, r2
 8002046:	881b      	ldrh	r3, [r3, #0]
 8002048:	b29b      	uxth	r3, r3
 800204a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800204e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002052:	83bb      	strh	r3, [r7, #28]
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	461a      	mov	r2, r3
 800205a:	68bb      	ldr	r3, [r7, #8]
 800205c:	781b      	ldrb	r3, [r3, #0]
 800205e:	009b      	lsls	r3, r3, #2
 8002060:	441a      	add	r2, r3
 8002062:	8bbb      	ldrh	r3, [r7, #28]
 8002064:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002068:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800206c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002070:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002074:	b29b      	uxth	r3, r3
 8002076:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002078:	8b7b      	ldrh	r3, [r7, #26]
 800207a:	2b00      	cmp	r3, #0
 800207c:	d008      	beq.n	8002090 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	6818      	ldr	r0, [r3, #0]
 8002082:	68bb      	ldr	r3, [r7, #8]
 8002084:	6959      	ldr	r1, [r3, #20]
 8002086:	68bb      	ldr	r3, [r7, #8]
 8002088:	895a      	ldrh	r2, [r3, #10]
 800208a:	8b7b      	ldrh	r3, [r7, #26]
 800208c:	f003 ffc9 	bl	8006022 <USB_ReadPMA>
    }
  }

  return count;
 8002090:	8b7b      	ldrh	r3, [r7, #26]
}
 8002092:	4618      	mov	r0, r3
 8002094:	3720      	adds	r7, #32
 8002096:	46bd      	mov	sp, r7
 8002098:	bd80      	pop	{r7, pc}

0800209a <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800209a:	b580      	push	{r7, lr}
 800209c:	b0a2      	sub	sp, #136	; 0x88
 800209e:	af00      	add	r7, sp, #0
 80020a0:	60f8      	str	r0, [r7, #12]
 80020a2:	60b9      	str	r1, [r7, #8]
 80020a4:	4613      	mov	r3, r2
 80020a6:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80020a8:	88fb      	ldrh	r3, [r7, #6]
 80020aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	f000 81c7 	beq.w	8002442 <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80020bc:	b29b      	uxth	r3, r3
 80020be:	461a      	mov	r2, r3
 80020c0:	68bb      	ldr	r3, [r7, #8]
 80020c2:	781b      	ldrb	r3, [r3, #0]
 80020c4:	00db      	lsls	r3, r3, #3
 80020c6:	4413      	add	r3, r2
 80020c8:	3302      	adds	r3, #2
 80020ca:	005b      	lsls	r3, r3, #1
 80020cc:	68fa      	ldr	r2, [r7, #12]
 80020ce:	6812      	ldr	r2, [r2, #0]
 80020d0:	4413      	add	r3, r2
 80020d2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80020d6:	881b      	ldrh	r3, [r3, #0]
 80020d8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80020dc:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 80020e0:	68bb      	ldr	r3, [r7, #8]
 80020e2:	699a      	ldr	r2, [r3, #24]
 80020e4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80020e8:	429a      	cmp	r2, r3
 80020ea:	d907      	bls.n	80020fc <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 80020ec:	68bb      	ldr	r3, [r7, #8]
 80020ee:	699a      	ldr	r2, [r3, #24]
 80020f0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80020f4:	1ad2      	subs	r2, r2, r3
 80020f6:	68bb      	ldr	r3, [r7, #8]
 80020f8:	619a      	str	r2, [r3, #24]
 80020fa:	e002      	b.n	8002102 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 80020fc:	68bb      	ldr	r3, [r7, #8]
 80020fe:	2200      	movs	r2, #0
 8002100:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002102:	68bb      	ldr	r3, [r7, #8]
 8002104:	699b      	ldr	r3, [r3, #24]
 8002106:	2b00      	cmp	r3, #0
 8002108:	f040 80b9 	bne.w	800227e <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800210c:	68bb      	ldr	r3, [r7, #8]
 800210e:	785b      	ldrb	r3, [r3, #1]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d126      	bne.n	8002162 <HAL_PCD_EP_DB_Transmit+0xc8>
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	62bb      	str	r3, [r7, #40]	; 0x28
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002122:	b29b      	uxth	r3, r3
 8002124:	461a      	mov	r2, r3
 8002126:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002128:	4413      	add	r3, r2
 800212a:	62bb      	str	r3, [r7, #40]	; 0x28
 800212c:	68bb      	ldr	r3, [r7, #8]
 800212e:	781b      	ldrb	r3, [r3, #0]
 8002130:	011a      	lsls	r2, r3, #4
 8002132:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002134:	4413      	add	r3, r2
 8002136:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800213a:	627b      	str	r3, [r7, #36]	; 0x24
 800213c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800213e:	881b      	ldrh	r3, [r3, #0]
 8002140:	b29b      	uxth	r3, r3
 8002142:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002146:	b29a      	uxth	r2, r3
 8002148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800214a:	801a      	strh	r2, [r3, #0]
 800214c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800214e:	881b      	ldrh	r3, [r3, #0]
 8002150:	b29b      	uxth	r3, r3
 8002152:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002156:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800215a:	b29a      	uxth	r2, r3
 800215c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800215e:	801a      	strh	r2, [r3, #0]
 8002160:	e01a      	b.n	8002198 <HAL_PCD_EP_DB_Transmit+0xfe>
 8002162:	68bb      	ldr	r3, [r7, #8]
 8002164:	785b      	ldrb	r3, [r3, #1]
 8002166:	2b01      	cmp	r3, #1
 8002168:	d116      	bne.n	8002198 <HAL_PCD_EP_DB_Transmit+0xfe>
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	633b      	str	r3, [r7, #48]	; 0x30
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002178:	b29b      	uxth	r3, r3
 800217a:	461a      	mov	r2, r3
 800217c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800217e:	4413      	add	r3, r2
 8002180:	633b      	str	r3, [r7, #48]	; 0x30
 8002182:	68bb      	ldr	r3, [r7, #8]
 8002184:	781b      	ldrb	r3, [r3, #0]
 8002186:	011a      	lsls	r2, r3, #4
 8002188:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800218a:	4413      	add	r3, r2
 800218c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002190:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002192:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002194:	2200      	movs	r2, #0
 8002196:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	623b      	str	r3, [r7, #32]
 800219e:	68bb      	ldr	r3, [r7, #8]
 80021a0:	785b      	ldrb	r3, [r3, #1]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d126      	bne.n	80021f4 <HAL_PCD_EP_DB_Transmit+0x15a>
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	61bb      	str	r3, [r7, #24]
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80021b4:	b29b      	uxth	r3, r3
 80021b6:	461a      	mov	r2, r3
 80021b8:	69bb      	ldr	r3, [r7, #24]
 80021ba:	4413      	add	r3, r2
 80021bc:	61bb      	str	r3, [r7, #24]
 80021be:	68bb      	ldr	r3, [r7, #8]
 80021c0:	781b      	ldrb	r3, [r3, #0]
 80021c2:	011a      	lsls	r2, r3, #4
 80021c4:	69bb      	ldr	r3, [r7, #24]
 80021c6:	4413      	add	r3, r2
 80021c8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80021cc:	617b      	str	r3, [r7, #20]
 80021ce:	697b      	ldr	r3, [r7, #20]
 80021d0:	881b      	ldrh	r3, [r3, #0]
 80021d2:	b29b      	uxth	r3, r3
 80021d4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80021d8:	b29a      	uxth	r2, r3
 80021da:	697b      	ldr	r3, [r7, #20]
 80021dc:	801a      	strh	r2, [r3, #0]
 80021de:	697b      	ldr	r3, [r7, #20]
 80021e0:	881b      	ldrh	r3, [r3, #0]
 80021e2:	b29b      	uxth	r3, r3
 80021e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80021e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80021ec:	b29a      	uxth	r2, r3
 80021ee:	697b      	ldr	r3, [r7, #20]
 80021f0:	801a      	strh	r2, [r3, #0]
 80021f2:	e017      	b.n	8002224 <HAL_PCD_EP_DB_Transmit+0x18a>
 80021f4:	68bb      	ldr	r3, [r7, #8]
 80021f6:	785b      	ldrb	r3, [r3, #1]
 80021f8:	2b01      	cmp	r3, #1
 80021fa:	d113      	bne.n	8002224 <HAL_PCD_EP_DB_Transmit+0x18a>
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002204:	b29b      	uxth	r3, r3
 8002206:	461a      	mov	r2, r3
 8002208:	6a3b      	ldr	r3, [r7, #32]
 800220a:	4413      	add	r3, r2
 800220c:	623b      	str	r3, [r7, #32]
 800220e:	68bb      	ldr	r3, [r7, #8]
 8002210:	781b      	ldrb	r3, [r3, #0]
 8002212:	011a      	lsls	r2, r3, #4
 8002214:	6a3b      	ldr	r3, [r7, #32]
 8002216:	4413      	add	r3, r2
 8002218:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800221c:	61fb      	str	r3, [r7, #28]
 800221e:	69fb      	ldr	r3, [r7, #28]
 8002220:	2200      	movs	r2, #0
 8002222:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002224:	68bb      	ldr	r3, [r7, #8]
 8002226:	781b      	ldrb	r3, [r3, #0]
 8002228:	4619      	mov	r1, r3
 800222a:	68f8      	ldr	r0, [r7, #12]
 800222c:	f005 fd41 	bl	8007cb2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002230:	88fb      	ldrh	r3, [r7, #6]
 8002232:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002236:	2b00      	cmp	r3, #0
 8002238:	f000 82d4 	beq.w	80027e4 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	461a      	mov	r2, r3
 8002242:	68bb      	ldr	r3, [r7, #8]
 8002244:	781b      	ldrb	r3, [r3, #0]
 8002246:	009b      	lsls	r3, r3, #2
 8002248:	4413      	add	r3, r2
 800224a:	881b      	ldrh	r3, [r3, #0]
 800224c:	b29b      	uxth	r3, r3
 800224e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002252:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002256:	827b      	strh	r3, [r7, #18]
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	461a      	mov	r2, r3
 800225e:	68bb      	ldr	r3, [r7, #8]
 8002260:	781b      	ldrb	r3, [r3, #0]
 8002262:	009b      	lsls	r3, r3, #2
 8002264:	441a      	add	r2, r3
 8002266:	8a7b      	ldrh	r3, [r7, #18]
 8002268:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800226c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002270:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002274:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002278:	b29b      	uxth	r3, r3
 800227a:	8013      	strh	r3, [r2, #0]
 800227c:	e2b2      	b.n	80027e4 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800227e:	88fb      	ldrh	r3, [r7, #6]
 8002280:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002284:	2b00      	cmp	r3, #0
 8002286:	d021      	beq.n	80022cc <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	461a      	mov	r2, r3
 800228e:	68bb      	ldr	r3, [r7, #8]
 8002290:	781b      	ldrb	r3, [r3, #0]
 8002292:	009b      	lsls	r3, r3, #2
 8002294:	4413      	add	r3, r2
 8002296:	881b      	ldrh	r3, [r3, #0]
 8002298:	b29b      	uxth	r3, r3
 800229a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800229e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022a2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	461a      	mov	r2, r3
 80022ac:	68bb      	ldr	r3, [r7, #8]
 80022ae:	781b      	ldrb	r3, [r3, #0]
 80022b0:	009b      	lsls	r3, r3, #2
 80022b2:	441a      	add	r2, r3
 80022b4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80022b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80022bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80022c0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80022c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80022c8:	b29b      	uxth	r3, r3
 80022ca:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80022cc:	68bb      	ldr	r3, [r7, #8]
 80022ce:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80022d2:	2b01      	cmp	r3, #1
 80022d4:	f040 8286 	bne.w	80027e4 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 80022d8:	68bb      	ldr	r3, [r7, #8]
 80022da:	695a      	ldr	r2, [r3, #20]
 80022dc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80022e0:	441a      	add	r2, r3
 80022e2:	68bb      	ldr	r3, [r7, #8]
 80022e4:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80022e6:	68bb      	ldr	r3, [r7, #8]
 80022e8:	69da      	ldr	r2, [r3, #28]
 80022ea:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80022ee:	441a      	add	r2, r3
 80022f0:	68bb      	ldr	r3, [r7, #8]
 80022f2:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80022f4:	68bb      	ldr	r3, [r7, #8]
 80022f6:	6a1a      	ldr	r2, [r3, #32]
 80022f8:	68bb      	ldr	r3, [r7, #8]
 80022fa:	691b      	ldr	r3, [r3, #16]
 80022fc:	429a      	cmp	r2, r3
 80022fe:	d309      	bcc.n	8002314 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8002300:	68bb      	ldr	r3, [r7, #8]
 8002302:	691b      	ldr	r3, [r3, #16]
 8002304:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8002306:	68bb      	ldr	r3, [r7, #8]
 8002308:	6a1a      	ldr	r2, [r3, #32]
 800230a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800230c:	1ad2      	subs	r2, r2, r3
 800230e:	68bb      	ldr	r3, [r7, #8]
 8002310:	621a      	str	r2, [r3, #32]
 8002312:	e015      	b.n	8002340 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8002314:	68bb      	ldr	r3, [r7, #8]
 8002316:	6a1b      	ldr	r3, [r3, #32]
 8002318:	2b00      	cmp	r3, #0
 800231a:	d107      	bne.n	800232c <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 800231c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002320:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8002322:	68bb      	ldr	r3, [r7, #8]
 8002324:	2200      	movs	r2, #0
 8002326:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800232a:	e009      	b.n	8002340 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800232c:	68bb      	ldr	r3, [r7, #8]
 800232e:	2200      	movs	r2, #0
 8002330:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8002334:	68bb      	ldr	r3, [r7, #8]
 8002336:	6a1b      	ldr	r3, [r3, #32]
 8002338:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 800233a:	68bb      	ldr	r3, [r7, #8]
 800233c:	2200      	movs	r2, #0
 800233e:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002340:	68bb      	ldr	r3, [r7, #8]
 8002342:	785b      	ldrb	r3, [r3, #1]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d155      	bne.n	80023f4 <HAL_PCD_EP_DB_Transmit+0x35a>
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	63bb      	str	r3, [r7, #56]	; 0x38
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002356:	b29b      	uxth	r3, r3
 8002358:	461a      	mov	r2, r3
 800235a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800235c:	4413      	add	r3, r2
 800235e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002360:	68bb      	ldr	r3, [r7, #8]
 8002362:	781b      	ldrb	r3, [r3, #0]
 8002364:	011a      	lsls	r2, r3, #4
 8002366:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002368:	4413      	add	r3, r2
 800236a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800236e:	637b      	str	r3, [r7, #52]	; 0x34
 8002370:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002372:	2b00      	cmp	r3, #0
 8002374:	d112      	bne.n	800239c <HAL_PCD_EP_DB_Transmit+0x302>
 8002376:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002378:	881b      	ldrh	r3, [r3, #0]
 800237a:	b29b      	uxth	r3, r3
 800237c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002380:	b29a      	uxth	r2, r3
 8002382:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002384:	801a      	strh	r2, [r3, #0]
 8002386:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002388:	881b      	ldrh	r3, [r3, #0]
 800238a:	b29b      	uxth	r3, r3
 800238c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002390:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002394:	b29a      	uxth	r2, r3
 8002396:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002398:	801a      	strh	r2, [r3, #0]
 800239a:	e047      	b.n	800242c <HAL_PCD_EP_DB_Transmit+0x392>
 800239c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800239e:	2b3e      	cmp	r3, #62	; 0x3e
 80023a0:	d811      	bhi.n	80023c6 <HAL_PCD_EP_DB_Transmit+0x32c>
 80023a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80023a4:	085b      	lsrs	r3, r3, #1
 80023a6:	64bb      	str	r3, [r7, #72]	; 0x48
 80023a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80023aa:	f003 0301 	and.w	r3, r3, #1
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d002      	beq.n	80023b8 <HAL_PCD_EP_DB_Transmit+0x31e>
 80023b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80023b4:	3301      	adds	r3, #1
 80023b6:	64bb      	str	r3, [r7, #72]	; 0x48
 80023b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80023ba:	b29b      	uxth	r3, r3
 80023bc:	029b      	lsls	r3, r3, #10
 80023be:	b29a      	uxth	r2, r3
 80023c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023c2:	801a      	strh	r2, [r3, #0]
 80023c4:	e032      	b.n	800242c <HAL_PCD_EP_DB_Transmit+0x392>
 80023c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80023c8:	095b      	lsrs	r3, r3, #5
 80023ca:	64bb      	str	r3, [r7, #72]	; 0x48
 80023cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80023ce:	f003 031f 	and.w	r3, r3, #31
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d102      	bne.n	80023dc <HAL_PCD_EP_DB_Transmit+0x342>
 80023d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80023d8:	3b01      	subs	r3, #1
 80023da:	64bb      	str	r3, [r7, #72]	; 0x48
 80023dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80023de:	b29b      	uxth	r3, r3
 80023e0:	029b      	lsls	r3, r3, #10
 80023e2:	b29b      	uxth	r3, r3
 80023e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80023e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80023ec:	b29a      	uxth	r2, r3
 80023ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023f0:	801a      	strh	r2, [r3, #0]
 80023f2:	e01b      	b.n	800242c <HAL_PCD_EP_DB_Transmit+0x392>
 80023f4:	68bb      	ldr	r3, [r7, #8]
 80023f6:	785b      	ldrb	r3, [r3, #1]
 80023f8:	2b01      	cmp	r3, #1
 80023fa:	d117      	bne.n	800242c <HAL_PCD_EP_DB_Transmit+0x392>
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	643b      	str	r3, [r7, #64]	; 0x40
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800240a:	b29b      	uxth	r3, r3
 800240c:	461a      	mov	r2, r3
 800240e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002410:	4413      	add	r3, r2
 8002412:	643b      	str	r3, [r7, #64]	; 0x40
 8002414:	68bb      	ldr	r3, [r7, #8]
 8002416:	781b      	ldrb	r3, [r3, #0]
 8002418:	011a      	lsls	r2, r3, #4
 800241a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800241c:	4413      	add	r3, r2
 800241e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002422:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002424:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002426:	b29a      	uxth	r2, r3
 8002428:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800242a:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	6818      	ldr	r0, [r3, #0]
 8002430:	68bb      	ldr	r3, [r7, #8]
 8002432:	6959      	ldr	r1, [r3, #20]
 8002434:	68bb      	ldr	r3, [r7, #8]
 8002436:	891a      	ldrh	r2, [r3, #8]
 8002438:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800243a:	b29b      	uxth	r3, r3
 800243c:	f003 fdac 	bl	8005f98 <USB_WritePMA>
 8002440:	e1d0      	b.n	80027e4 <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800244a:	b29b      	uxth	r3, r3
 800244c:	461a      	mov	r2, r3
 800244e:	68bb      	ldr	r3, [r7, #8]
 8002450:	781b      	ldrb	r3, [r3, #0]
 8002452:	00db      	lsls	r3, r3, #3
 8002454:	4413      	add	r3, r2
 8002456:	3306      	adds	r3, #6
 8002458:	005b      	lsls	r3, r3, #1
 800245a:	68fa      	ldr	r2, [r7, #12]
 800245c:	6812      	ldr	r2, [r2, #0]
 800245e:	4413      	add	r3, r2
 8002460:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002464:	881b      	ldrh	r3, [r3, #0]
 8002466:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800246a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 800246e:	68bb      	ldr	r3, [r7, #8]
 8002470:	699a      	ldr	r2, [r3, #24]
 8002472:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002476:	429a      	cmp	r2, r3
 8002478:	d307      	bcc.n	800248a <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 800247a:	68bb      	ldr	r3, [r7, #8]
 800247c:	699a      	ldr	r2, [r3, #24]
 800247e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002482:	1ad2      	subs	r2, r2, r3
 8002484:	68bb      	ldr	r3, [r7, #8]
 8002486:	619a      	str	r2, [r3, #24]
 8002488:	e002      	b.n	8002490 <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 800248a:	68bb      	ldr	r3, [r7, #8]
 800248c:	2200      	movs	r2, #0
 800248e:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002490:	68bb      	ldr	r3, [r7, #8]
 8002492:	699b      	ldr	r3, [r3, #24]
 8002494:	2b00      	cmp	r3, #0
 8002496:	f040 80c4 	bne.w	8002622 <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800249a:	68bb      	ldr	r3, [r7, #8]
 800249c:	785b      	ldrb	r3, [r3, #1]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d126      	bne.n	80024f0 <HAL_PCD_EP_DB_Transmit+0x456>
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80024b0:	b29b      	uxth	r3, r3
 80024b2:	461a      	mov	r2, r3
 80024b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024b6:	4413      	add	r3, r2
 80024b8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80024ba:	68bb      	ldr	r3, [r7, #8]
 80024bc:	781b      	ldrb	r3, [r3, #0]
 80024be:	011a      	lsls	r2, r3, #4
 80024c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024c2:	4413      	add	r3, r2
 80024c4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80024c8:	66bb      	str	r3, [r7, #104]	; 0x68
 80024ca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80024cc:	881b      	ldrh	r3, [r3, #0]
 80024ce:	b29b      	uxth	r3, r3
 80024d0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80024d4:	b29a      	uxth	r2, r3
 80024d6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80024d8:	801a      	strh	r2, [r3, #0]
 80024da:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80024dc:	881b      	ldrh	r3, [r3, #0]
 80024de:	b29b      	uxth	r3, r3
 80024e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80024e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80024e8:	b29a      	uxth	r2, r3
 80024ea:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80024ec:	801a      	strh	r2, [r3, #0]
 80024ee:	e01a      	b.n	8002526 <HAL_PCD_EP_DB_Transmit+0x48c>
 80024f0:	68bb      	ldr	r3, [r7, #8]
 80024f2:	785b      	ldrb	r3, [r3, #1]
 80024f4:	2b01      	cmp	r3, #1
 80024f6:	d116      	bne.n	8002526 <HAL_PCD_EP_DB_Transmit+0x48c>
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	677b      	str	r3, [r7, #116]	; 0x74
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002506:	b29b      	uxth	r3, r3
 8002508:	461a      	mov	r2, r3
 800250a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800250c:	4413      	add	r3, r2
 800250e:	677b      	str	r3, [r7, #116]	; 0x74
 8002510:	68bb      	ldr	r3, [r7, #8]
 8002512:	781b      	ldrb	r3, [r3, #0]
 8002514:	011a      	lsls	r2, r3, #4
 8002516:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002518:	4413      	add	r3, r2
 800251a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800251e:	673b      	str	r3, [r7, #112]	; 0x70
 8002520:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002522:	2200      	movs	r2, #0
 8002524:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	67bb      	str	r3, [r7, #120]	; 0x78
 800252c:	68bb      	ldr	r3, [r7, #8]
 800252e:	785b      	ldrb	r3, [r3, #1]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d12f      	bne.n	8002594 <HAL_PCD_EP_DB_Transmit+0x4fa>
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002544:	b29b      	uxth	r3, r3
 8002546:	461a      	mov	r2, r3
 8002548:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800254c:	4413      	add	r3, r2
 800254e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002552:	68bb      	ldr	r3, [r7, #8]
 8002554:	781b      	ldrb	r3, [r3, #0]
 8002556:	011a      	lsls	r2, r3, #4
 8002558:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800255c:	4413      	add	r3, r2
 800255e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002562:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002566:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800256a:	881b      	ldrh	r3, [r3, #0]
 800256c:	b29b      	uxth	r3, r3
 800256e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002572:	b29a      	uxth	r2, r3
 8002574:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002578:	801a      	strh	r2, [r3, #0]
 800257a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800257e:	881b      	ldrh	r3, [r3, #0]
 8002580:	b29b      	uxth	r3, r3
 8002582:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002586:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800258a:	b29a      	uxth	r2, r3
 800258c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002590:	801a      	strh	r2, [r3, #0]
 8002592:	e017      	b.n	80025c4 <HAL_PCD_EP_DB_Transmit+0x52a>
 8002594:	68bb      	ldr	r3, [r7, #8]
 8002596:	785b      	ldrb	r3, [r3, #1]
 8002598:	2b01      	cmp	r3, #1
 800259a:	d113      	bne.n	80025c4 <HAL_PCD_EP_DB_Transmit+0x52a>
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80025a4:	b29b      	uxth	r3, r3
 80025a6:	461a      	mov	r2, r3
 80025a8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80025aa:	4413      	add	r3, r2
 80025ac:	67bb      	str	r3, [r7, #120]	; 0x78
 80025ae:	68bb      	ldr	r3, [r7, #8]
 80025b0:	781b      	ldrb	r3, [r3, #0]
 80025b2:	011a      	lsls	r2, r3, #4
 80025b4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80025b6:	4413      	add	r3, r2
 80025b8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80025bc:	67fb      	str	r3, [r7, #124]	; 0x7c
 80025be:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80025c0:	2200      	movs	r2, #0
 80025c2:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80025c4:	68bb      	ldr	r3, [r7, #8]
 80025c6:	781b      	ldrb	r3, [r3, #0]
 80025c8:	4619      	mov	r1, r3
 80025ca:	68f8      	ldr	r0, [r7, #12]
 80025cc:	f005 fb71 	bl	8007cb2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80025d0:	88fb      	ldrh	r3, [r7, #6]
 80025d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	f040 8104 	bne.w	80027e4 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	461a      	mov	r2, r3
 80025e2:	68bb      	ldr	r3, [r7, #8]
 80025e4:	781b      	ldrb	r3, [r3, #0]
 80025e6:	009b      	lsls	r3, r3, #2
 80025e8:	4413      	add	r3, r2
 80025ea:	881b      	ldrh	r3, [r3, #0]
 80025ec:	b29b      	uxth	r3, r3
 80025ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80025f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025f6:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	461a      	mov	r2, r3
 8002600:	68bb      	ldr	r3, [r7, #8]
 8002602:	781b      	ldrb	r3, [r3, #0]
 8002604:	009b      	lsls	r3, r3, #2
 8002606:	441a      	add	r2, r3
 8002608:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800260c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002610:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002614:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002618:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800261c:	b29b      	uxth	r3, r3
 800261e:	8013      	strh	r3, [r2, #0]
 8002620:	e0e0      	b.n	80027e4 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002622:	88fb      	ldrh	r3, [r7, #6]
 8002624:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002628:	2b00      	cmp	r3, #0
 800262a:	d121      	bne.n	8002670 <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	461a      	mov	r2, r3
 8002632:	68bb      	ldr	r3, [r7, #8]
 8002634:	781b      	ldrb	r3, [r3, #0]
 8002636:	009b      	lsls	r3, r3, #2
 8002638:	4413      	add	r3, r2
 800263a:	881b      	ldrh	r3, [r3, #0]
 800263c:	b29b      	uxth	r3, r3
 800263e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002642:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002646:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	461a      	mov	r2, r3
 8002650:	68bb      	ldr	r3, [r7, #8]
 8002652:	781b      	ldrb	r3, [r3, #0]
 8002654:	009b      	lsls	r3, r3, #2
 8002656:	441a      	add	r2, r3
 8002658:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800265c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002660:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002664:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002668:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800266c:	b29b      	uxth	r3, r3
 800266e:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002670:	68bb      	ldr	r3, [r7, #8]
 8002672:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002676:	2b01      	cmp	r3, #1
 8002678:	f040 80b4 	bne.w	80027e4 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 800267c:	68bb      	ldr	r3, [r7, #8]
 800267e:	695a      	ldr	r2, [r3, #20]
 8002680:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002684:	441a      	add	r2, r3
 8002686:	68bb      	ldr	r3, [r7, #8]
 8002688:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 800268a:	68bb      	ldr	r3, [r7, #8]
 800268c:	69da      	ldr	r2, [r3, #28]
 800268e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002692:	441a      	add	r2, r3
 8002694:	68bb      	ldr	r3, [r7, #8]
 8002696:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002698:	68bb      	ldr	r3, [r7, #8]
 800269a:	6a1a      	ldr	r2, [r3, #32]
 800269c:	68bb      	ldr	r3, [r7, #8]
 800269e:	691b      	ldr	r3, [r3, #16]
 80026a0:	429a      	cmp	r2, r3
 80026a2:	d309      	bcc.n	80026b8 <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 80026a4:	68bb      	ldr	r3, [r7, #8]
 80026a6:	691b      	ldr	r3, [r3, #16]
 80026a8:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 80026aa:	68bb      	ldr	r3, [r7, #8]
 80026ac:	6a1a      	ldr	r2, [r3, #32]
 80026ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80026b0:	1ad2      	subs	r2, r2, r3
 80026b2:	68bb      	ldr	r3, [r7, #8]
 80026b4:	621a      	str	r2, [r3, #32]
 80026b6:	e015      	b.n	80026e4 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 80026b8:	68bb      	ldr	r3, [r7, #8]
 80026ba:	6a1b      	ldr	r3, [r3, #32]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d107      	bne.n	80026d0 <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 80026c0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80026c4:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 80026c6:	68bb      	ldr	r3, [r7, #8]
 80026c8:	2200      	movs	r2, #0
 80026ca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80026ce:	e009      	b.n	80026e4 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 80026d0:	68bb      	ldr	r3, [r7, #8]
 80026d2:	6a1b      	ldr	r3, [r3, #32]
 80026d4:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 80026d6:	68bb      	ldr	r3, [r7, #8]
 80026d8:	2200      	movs	r2, #0
 80026da:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80026dc:	68bb      	ldr	r3, [r7, #8]
 80026de:	2200      	movs	r2, #0
 80026e0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	667b      	str	r3, [r7, #100]	; 0x64
 80026ea:	68bb      	ldr	r3, [r7, #8]
 80026ec:	785b      	ldrb	r3, [r3, #1]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d155      	bne.n	800279e <HAL_PCD_EP_DB_Transmit+0x704>
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002700:	b29b      	uxth	r3, r3
 8002702:	461a      	mov	r2, r3
 8002704:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002706:	4413      	add	r3, r2
 8002708:	65fb      	str	r3, [r7, #92]	; 0x5c
 800270a:	68bb      	ldr	r3, [r7, #8]
 800270c:	781b      	ldrb	r3, [r3, #0]
 800270e:	011a      	lsls	r2, r3, #4
 8002710:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002712:	4413      	add	r3, r2
 8002714:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002718:	65bb      	str	r3, [r7, #88]	; 0x58
 800271a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800271c:	2b00      	cmp	r3, #0
 800271e:	d112      	bne.n	8002746 <HAL_PCD_EP_DB_Transmit+0x6ac>
 8002720:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002722:	881b      	ldrh	r3, [r3, #0]
 8002724:	b29b      	uxth	r3, r3
 8002726:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800272a:	b29a      	uxth	r2, r3
 800272c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800272e:	801a      	strh	r2, [r3, #0]
 8002730:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002732:	881b      	ldrh	r3, [r3, #0]
 8002734:	b29b      	uxth	r3, r3
 8002736:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800273a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800273e:	b29a      	uxth	r2, r3
 8002740:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002742:	801a      	strh	r2, [r3, #0]
 8002744:	e044      	b.n	80027d0 <HAL_PCD_EP_DB_Transmit+0x736>
 8002746:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002748:	2b3e      	cmp	r3, #62	; 0x3e
 800274a:	d811      	bhi.n	8002770 <HAL_PCD_EP_DB_Transmit+0x6d6>
 800274c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800274e:	085b      	lsrs	r3, r3, #1
 8002750:	657b      	str	r3, [r7, #84]	; 0x54
 8002752:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002754:	f003 0301 	and.w	r3, r3, #1
 8002758:	2b00      	cmp	r3, #0
 800275a:	d002      	beq.n	8002762 <HAL_PCD_EP_DB_Transmit+0x6c8>
 800275c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800275e:	3301      	adds	r3, #1
 8002760:	657b      	str	r3, [r7, #84]	; 0x54
 8002762:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002764:	b29b      	uxth	r3, r3
 8002766:	029b      	lsls	r3, r3, #10
 8002768:	b29a      	uxth	r2, r3
 800276a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800276c:	801a      	strh	r2, [r3, #0]
 800276e:	e02f      	b.n	80027d0 <HAL_PCD_EP_DB_Transmit+0x736>
 8002770:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002772:	095b      	lsrs	r3, r3, #5
 8002774:	657b      	str	r3, [r7, #84]	; 0x54
 8002776:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002778:	f003 031f 	and.w	r3, r3, #31
 800277c:	2b00      	cmp	r3, #0
 800277e:	d102      	bne.n	8002786 <HAL_PCD_EP_DB_Transmit+0x6ec>
 8002780:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002782:	3b01      	subs	r3, #1
 8002784:	657b      	str	r3, [r7, #84]	; 0x54
 8002786:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002788:	b29b      	uxth	r3, r3
 800278a:	029b      	lsls	r3, r3, #10
 800278c:	b29b      	uxth	r3, r3
 800278e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002792:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002796:	b29a      	uxth	r2, r3
 8002798:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800279a:	801a      	strh	r2, [r3, #0]
 800279c:	e018      	b.n	80027d0 <HAL_PCD_EP_DB_Transmit+0x736>
 800279e:	68bb      	ldr	r3, [r7, #8]
 80027a0:	785b      	ldrb	r3, [r3, #1]
 80027a2:	2b01      	cmp	r3, #1
 80027a4:	d114      	bne.n	80027d0 <HAL_PCD_EP_DB_Transmit+0x736>
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80027ae:	b29b      	uxth	r3, r3
 80027b0:	461a      	mov	r2, r3
 80027b2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80027b4:	4413      	add	r3, r2
 80027b6:	667b      	str	r3, [r7, #100]	; 0x64
 80027b8:	68bb      	ldr	r3, [r7, #8]
 80027ba:	781b      	ldrb	r3, [r3, #0]
 80027bc:	011a      	lsls	r2, r3, #4
 80027be:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80027c0:	4413      	add	r3, r2
 80027c2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80027c6:	663b      	str	r3, [r7, #96]	; 0x60
 80027c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80027ca:	b29a      	uxth	r2, r3
 80027cc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80027ce:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	6818      	ldr	r0, [r3, #0]
 80027d4:	68bb      	ldr	r3, [r7, #8]
 80027d6:	6959      	ldr	r1, [r3, #20]
 80027d8:	68bb      	ldr	r3, [r7, #8]
 80027da:	895a      	ldrh	r2, [r3, #10]
 80027dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80027de:	b29b      	uxth	r3, r3
 80027e0:	f003 fbda 	bl	8005f98 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	461a      	mov	r2, r3
 80027ea:	68bb      	ldr	r3, [r7, #8]
 80027ec:	781b      	ldrb	r3, [r3, #0]
 80027ee:	009b      	lsls	r3, r3, #2
 80027f0:	4413      	add	r3, r2
 80027f2:	881b      	ldrh	r3, [r3, #0]
 80027f4:	b29b      	uxth	r3, r3
 80027f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80027fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80027fe:	823b      	strh	r3, [r7, #16]
 8002800:	8a3b      	ldrh	r3, [r7, #16]
 8002802:	f083 0310 	eor.w	r3, r3, #16
 8002806:	823b      	strh	r3, [r7, #16]
 8002808:	8a3b      	ldrh	r3, [r7, #16]
 800280a:	f083 0320 	eor.w	r3, r3, #32
 800280e:	823b      	strh	r3, [r7, #16]
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	461a      	mov	r2, r3
 8002816:	68bb      	ldr	r3, [r7, #8]
 8002818:	781b      	ldrb	r3, [r3, #0]
 800281a:	009b      	lsls	r3, r3, #2
 800281c:	441a      	add	r2, r3
 800281e:	8a3b      	ldrh	r3, [r7, #16]
 8002820:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002824:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002828:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800282c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002830:	b29b      	uxth	r3, r3
 8002832:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8002834:	2300      	movs	r3, #0
}
 8002836:	4618      	mov	r0, r3
 8002838:	3788      	adds	r7, #136	; 0x88
 800283a:	46bd      	mov	sp, r7
 800283c:	bd80      	pop	{r7, pc}

0800283e <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800283e:	b480      	push	{r7}
 8002840:	b087      	sub	sp, #28
 8002842:	af00      	add	r7, sp, #0
 8002844:	60f8      	str	r0, [r7, #12]
 8002846:	607b      	str	r3, [r7, #4]
 8002848:	460b      	mov	r3, r1
 800284a:	817b      	strh	r3, [r7, #10]
 800284c:	4613      	mov	r3, r2
 800284e:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002850:	897b      	ldrh	r3, [r7, #10]
 8002852:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002856:	b29b      	uxth	r3, r3
 8002858:	2b00      	cmp	r3, #0
 800285a:	d00b      	beq.n	8002874 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800285c:	897b      	ldrh	r3, [r7, #10]
 800285e:	f003 0307 	and.w	r3, r3, #7
 8002862:	1c5a      	adds	r2, r3, #1
 8002864:	4613      	mov	r3, r2
 8002866:	009b      	lsls	r3, r3, #2
 8002868:	4413      	add	r3, r2
 800286a:	00db      	lsls	r3, r3, #3
 800286c:	68fa      	ldr	r2, [r7, #12]
 800286e:	4413      	add	r3, r2
 8002870:	617b      	str	r3, [r7, #20]
 8002872:	e009      	b.n	8002888 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002874:	897a      	ldrh	r2, [r7, #10]
 8002876:	4613      	mov	r3, r2
 8002878:	009b      	lsls	r3, r3, #2
 800287a:	4413      	add	r3, r2
 800287c:	00db      	lsls	r3, r3, #3
 800287e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002882:	68fa      	ldr	r2, [r7, #12]
 8002884:	4413      	add	r3, r2
 8002886:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002888:	893b      	ldrh	r3, [r7, #8]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d107      	bne.n	800289e <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800288e:	697b      	ldr	r3, [r7, #20]
 8002890:	2200      	movs	r2, #0
 8002892:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	b29a      	uxth	r2, r3
 8002898:	697b      	ldr	r3, [r7, #20]
 800289a:	80da      	strh	r2, [r3, #6]
 800289c:	e00b      	b.n	80028b6 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800289e:	697b      	ldr	r3, [r7, #20]
 80028a0:	2201      	movs	r2, #1
 80028a2:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	b29a      	uxth	r2, r3
 80028a8:	697b      	ldr	r3, [r7, #20]
 80028aa:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	0c1b      	lsrs	r3, r3, #16
 80028b0:	b29a      	uxth	r2, r3
 80028b2:	697b      	ldr	r3, [r7, #20]
 80028b4:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 80028b6:	2300      	movs	r3, #0
}
 80028b8:	4618      	mov	r0, r3
 80028ba:	371c      	adds	r7, #28
 80028bc:	46bd      	mov	sp, r7
 80028be:	bc80      	pop	{r7}
 80028c0:	4770      	bx	lr
	...

080028c4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b086      	sub	sp, #24
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d101      	bne.n	80028d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80028d2:	2301      	movs	r3, #1
 80028d4:	e272      	b.n	8002dbc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f003 0301 	and.w	r3, r3, #1
 80028de:	2b00      	cmp	r3, #0
 80028e0:	f000 8087 	beq.w	80029f2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80028e4:	4b92      	ldr	r3, [pc, #584]	; (8002b30 <HAL_RCC_OscConfig+0x26c>)
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	f003 030c 	and.w	r3, r3, #12
 80028ec:	2b04      	cmp	r3, #4
 80028ee:	d00c      	beq.n	800290a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80028f0:	4b8f      	ldr	r3, [pc, #572]	; (8002b30 <HAL_RCC_OscConfig+0x26c>)
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	f003 030c 	and.w	r3, r3, #12
 80028f8:	2b08      	cmp	r3, #8
 80028fa:	d112      	bne.n	8002922 <HAL_RCC_OscConfig+0x5e>
 80028fc:	4b8c      	ldr	r3, [pc, #560]	; (8002b30 <HAL_RCC_OscConfig+0x26c>)
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002904:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002908:	d10b      	bne.n	8002922 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800290a:	4b89      	ldr	r3, [pc, #548]	; (8002b30 <HAL_RCC_OscConfig+0x26c>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002912:	2b00      	cmp	r3, #0
 8002914:	d06c      	beq.n	80029f0 <HAL_RCC_OscConfig+0x12c>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	2b00      	cmp	r3, #0
 800291c:	d168      	bne.n	80029f0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800291e:	2301      	movs	r3, #1
 8002920:	e24c      	b.n	8002dbc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	685b      	ldr	r3, [r3, #4]
 8002926:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800292a:	d106      	bne.n	800293a <HAL_RCC_OscConfig+0x76>
 800292c:	4b80      	ldr	r3, [pc, #512]	; (8002b30 <HAL_RCC_OscConfig+0x26c>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4a7f      	ldr	r2, [pc, #508]	; (8002b30 <HAL_RCC_OscConfig+0x26c>)
 8002932:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002936:	6013      	str	r3, [r2, #0]
 8002938:	e02e      	b.n	8002998 <HAL_RCC_OscConfig+0xd4>
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	2b00      	cmp	r3, #0
 8002940:	d10c      	bne.n	800295c <HAL_RCC_OscConfig+0x98>
 8002942:	4b7b      	ldr	r3, [pc, #492]	; (8002b30 <HAL_RCC_OscConfig+0x26c>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4a7a      	ldr	r2, [pc, #488]	; (8002b30 <HAL_RCC_OscConfig+0x26c>)
 8002948:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800294c:	6013      	str	r3, [r2, #0]
 800294e:	4b78      	ldr	r3, [pc, #480]	; (8002b30 <HAL_RCC_OscConfig+0x26c>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	4a77      	ldr	r2, [pc, #476]	; (8002b30 <HAL_RCC_OscConfig+0x26c>)
 8002954:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002958:	6013      	str	r3, [r2, #0]
 800295a:	e01d      	b.n	8002998 <HAL_RCC_OscConfig+0xd4>
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	685b      	ldr	r3, [r3, #4]
 8002960:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002964:	d10c      	bne.n	8002980 <HAL_RCC_OscConfig+0xbc>
 8002966:	4b72      	ldr	r3, [pc, #456]	; (8002b30 <HAL_RCC_OscConfig+0x26c>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4a71      	ldr	r2, [pc, #452]	; (8002b30 <HAL_RCC_OscConfig+0x26c>)
 800296c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002970:	6013      	str	r3, [r2, #0]
 8002972:	4b6f      	ldr	r3, [pc, #444]	; (8002b30 <HAL_RCC_OscConfig+0x26c>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4a6e      	ldr	r2, [pc, #440]	; (8002b30 <HAL_RCC_OscConfig+0x26c>)
 8002978:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800297c:	6013      	str	r3, [r2, #0]
 800297e:	e00b      	b.n	8002998 <HAL_RCC_OscConfig+0xd4>
 8002980:	4b6b      	ldr	r3, [pc, #428]	; (8002b30 <HAL_RCC_OscConfig+0x26c>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a6a      	ldr	r2, [pc, #424]	; (8002b30 <HAL_RCC_OscConfig+0x26c>)
 8002986:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800298a:	6013      	str	r3, [r2, #0]
 800298c:	4b68      	ldr	r3, [pc, #416]	; (8002b30 <HAL_RCC_OscConfig+0x26c>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4a67      	ldr	r2, [pc, #412]	; (8002b30 <HAL_RCC_OscConfig+0x26c>)
 8002992:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002996:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d013      	beq.n	80029c8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029a0:	f7fd ffba 	bl	8000918 <HAL_GetTick>
 80029a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029a6:	e008      	b.n	80029ba <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029a8:	f7fd ffb6 	bl	8000918 <HAL_GetTick>
 80029ac:	4602      	mov	r2, r0
 80029ae:	693b      	ldr	r3, [r7, #16]
 80029b0:	1ad3      	subs	r3, r2, r3
 80029b2:	2b64      	cmp	r3, #100	; 0x64
 80029b4:	d901      	bls.n	80029ba <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80029b6:	2303      	movs	r3, #3
 80029b8:	e200      	b.n	8002dbc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029ba:	4b5d      	ldr	r3, [pc, #372]	; (8002b30 <HAL_RCC_OscConfig+0x26c>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d0f0      	beq.n	80029a8 <HAL_RCC_OscConfig+0xe4>
 80029c6:	e014      	b.n	80029f2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029c8:	f7fd ffa6 	bl	8000918 <HAL_GetTick>
 80029cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029ce:	e008      	b.n	80029e2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029d0:	f7fd ffa2 	bl	8000918 <HAL_GetTick>
 80029d4:	4602      	mov	r2, r0
 80029d6:	693b      	ldr	r3, [r7, #16]
 80029d8:	1ad3      	subs	r3, r2, r3
 80029da:	2b64      	cmp	r3, #100	; 0x64
 80029dc:	d901      	bls.n	80029e2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80029de:	2303      	movs	r3, #3
 80029e0:	e1ec      	b.n	8002dbc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029e2:	4b53      	ldr	r3, [pc, #332]	; (8002b30 <HAL_RCC_OscConfig+0x26c>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d1f0      	bne.n	80029d0 <HAL_RCC_OscConfig+0x10c>
 80029ee:	e000      	b.n	80029f2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f003 0302 	and.w	r3, r3, #2
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d063      	beq.n	8002ac6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80029fe:	4b4c      	ldr	r3, [pc, #304]	; (8002b30 <HAL_RCC_OscConfig+0x26c>)
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	f003 030c 	and.w	r3, r3, #12
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d00b      	beq.n	8002a22 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002a0a:	4b49      	ldr	r3, [pc, #292]	; (8002b30 <HAL_RCC_OscConfig+0x26c>)
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	f003 030c 	and.w	r3, r3, #12
 8002a12:	2b08      	cmp	r3, #8
 8002a14:	d11c      	bne.n	8002a50 <HAL_RCC_OscConfig+0x18c>
 8002a16:	4b46      	ldr	r3, [pc, #280]	; (8002b30 <HAL_RCC_OscConfig+0x26c>)
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d116      	bne.n	8002a50 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a22:	4b43      	ldr	r3, [pc, #268]	; (8002b30 <HAL_RCC_OscConfig+0x26c>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f003 0302 	and.w	r3, r3, #2
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d005      	beq.n	8002a3a <HAL_RCC_OscConfig+0x176>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	691b      	ldr	r3, [r3, #16]
 8002a32:	2b01      	cmp	r3, #1
 8002a34:	d001      	beq.n	8002a3a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002a36:	2301      	movs	r3, #1
 8002a38:	e1c0      	b.n	8002dbc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a3a:	4b3d      	ldr	r3, [pc, #244]	; (8002b30 <HAL_RCC_OscConfig+0x26c>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	695b      	ldr	r3, [r3, #20]
 8002a46:	00db      	lsls	r3, r3, #3
 8002a48:	4939      	ldr	r1, [pc, #228]	; (8002b30 <HAL_RCC_OscConfig+0x26c>)
 8002a4a:	4313      	orrs	r3, r2
 8002a4c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a4e:	e03a      	b.n	8002ac6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	691b      	ldr	r3, [r3, #16]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d020      	beq.n	8002a9a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a58:	4b36      	ldr	r3, [pc, #216]	; (8002b34 <HAL_RCC_OscConfig+0x270>)
 8002a5a:	2201      	movs	r2, #1
 8002a5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a5e:	f7fd ff5b 	bl	8000918 <HAL_GetTick>
 8002a62:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a64:	e008      	b.n	8002a78 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a66:	f7fd ff57 	bl	8000918 <HAL_GetTick>
 8002a6a:	4602      	mov	r2, r0
 8002a6c:	693b      	ldr	r3, [r7, #16]
 8002a6e:	1ad3      	subs	r3, r2, r3
 8002a70:	2b02      	cmp	r3, #2
 8002a72:	d901      	bls.n	8002a78 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002a74:	2303      	movs	r3, #3
 8002a76:	e1a1      	b.n	8002dbc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a78:	4b2d      	ldr	r3, [pc, #180]	; (8002b30 <HAL_RCC_OscConfig+0x26c>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f003 0302 	and.w	r3, r3, #2
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d0f0      	beq.n	8002a66 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a84:	4b2a      	ldr	r3, [pc, #168]	; (8002b30 <HAL_RCC_OscConfig+0x26c>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	695b      	ldr	r3, [r3, #20]
 8002a90:	00db      	lsls	r3, r3, #3
 8002a92:	4927      	ldr	r1, [pc, #156]	; (8002b30 <HAL_RCC_OscConfig+0x26c>)
 8002a94:	4313      	orrs	r3, r2
 8002a96:	600b      	str	r3, [r1, #0]
 8002a98:	e015      	b.n	8002ac6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a9a:	4b26      	ldr	r3, [pc, #152]	; (8002b34 <HAL_RCC_OscConfig+0x270>)
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002aa0:	f7fd ff3a 	bl	8000918 <HAL_GetTick>
 8002aa4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002aa6:	e008      	b.n	8002aba <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002aa8:	f7fd ff36 	bl	8000918 <HAL_GetTick>
 8002aac:	4602      	mov	r2, r0
 8002aae:	693b      	ldr	r3, [r7, #16]
 8002ab0:	1ad3      	subs	r3, r2, r3
 8002ab2:	2b02      	cmp	r3, #2
 8002ab4:	d901      	bls.n	8002aba <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002ab6:	2303      	movs	r3, #3
 8002ab8:	e180      	b.n	8002dbc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002aba:	4b1d      	ldr	r3, [pc, #116]	; (8002b30 <HAL_RCC_OscConfig+0x26c>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f003 0302 	and.w	r3, r3, #2
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d1f0      	bne.n	8002aa8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f003 0308 	and.w	r3, r3, #8
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d03a      	beq.n	8002b48 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	699b      	ldr	r3, [r3, #24]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d019      	beq.n	8002b0e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ada:	4b17      	ldr	r3, [pc, #92]	; (8002b38 <HAL_RCC_OscConfig+0x274>)
 8002adc:	2201      	movs	r2, #1
 8002ade:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ae0:	f7fd ff1a 	bl	8000918 <HAL_GetTick>
 8002ae4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ae6:	e008      	b.n	8002afa <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ae8:	f7fd ff16 	bl	8000918 <HAL_GetTick>
 8002aec:	4602      	mov	r2, r0
 8002aee:	693b      	ldr	r3, [r7, #16]
 8002af0:	1ad3      	subs	r3, r2, r3
 8002af2:	2b02      	cmp	r3, #2
 8002af4:	d901      	bls.n	8002afa <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002af6:	2303      	movs	r3, #3
 8002af8:	e160      	b.n	8002dbc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002afa:	4b0d      	ldr	r3, [pc, #52]	; (8002b30 <HAL_RCC_OscConfig+0x26c>)
 8002afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002afe:	f003 0302 	and.w	r3, r3, #2
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d0f0      	beq.n	8002ae8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002b06:	2001      	movs	r0, #1
 8002b08:	f000 fada 	bl	80030c0 <RCC_Delay>
 8002b0c:	e01c      	b.n	8002b48 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b0e:	4b0a      	ldr	r3, [pc, #40]	; (8002b38 <HAL_RCC_OscConfig+0x274>)
 8002b10:	2200      	movs	r2, #0
 8002b12:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b14:	f7fd ff00 	bl	8000918 <HAL_GetTick>
 8002b18:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b1a:	e00f      	b.n	8002b3c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b1c:	f7fd fefc 	bl	8000918 <HAL_GetTick>
 8002b20:	4602      	mov	r2, r0
 8002b22:	693b      	ldr	r3, [r7, #16]
 8002b24:	1ad3      	subs	r3, r2, r3
 8002b26:	2b02      	cmp	r3, #2
 8002b28:	d908      	bls.n	8002b3c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002b2a:	2303      	movs	r3, #3
 8002b2c:	e146      	b.n	8002dbc <HAL_RCC_OscConfig+0x4f8>
 8002b2e:	bf00      	nop
 8002b30:	40021000 	.word	0x40021000
 8002b34:	42420000 	.word	0x42420000
 8002b38:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b3c:	4b92      	ldr	r3, [pc, #584]	; (8002d88 <HAL_RCC_OscConfig+0x4c4>)
 8002b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b40:	f003 0302 	and.w	r3, r3, #2
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d1e9      	bne.n	8002b1c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f003 0304 	and.w	r3, r3, #4
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	f000 80a6 	beq.w	8002ca2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b56:	2300      	movs	r3, #0
 8002b58:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b5a:	4b8b      	ldr	r3, [pc, #556]	; (8002d88 <HAL_RCC_OscConfig+0x4c4>)
 8002b5c:	69db      	ldr	r3, [r3, #28]
 8002b5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d10d      	bne.n	8002b82 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b66:	4b88      	ldr	r3, [pc, #544]	; (8002d88 <HAL_RCC_OscConfig+0x4c4>)
 8002b68:	69db      	ldr	r3, [r3, #28]
 8002b6a:	4a87      	ldr	r2, [pc, #540]	; (8002d88 <HAL_RCC_OscConfig+0x4c4>)
 8002b6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b70:	61d3      	str	r3, [r2, #28]
 8002b72:	4b85      	ldr	r3, [pc, #532]	; (8002d88 <HAL_RCC_OscConfig+0x4c4>)
 8002b74:	69db      	ldr	r3, [r3, #28]
 8002b76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b7a:	60bb      	str	r3, [r7, #8]
 8002b7c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b7e:	2301      	movs	r3, #1
 8002b80:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b82:	4b82      	ldr	r3, [pc, #520]	; (8002d8c <HAL_RCC_OscConfig+0x4c8>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d118      	bne.n	8002bc0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b8e:	4b7f      	ldr	r3, [pc, #508]	; (8002d8c <HAL_RCC_OscConfig+0x4c8>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	4a7e      	ldr	r2, [pc, #504]	; (8002d8c <HAL_RCC_OscConfig+0x4c8>)
 8002b94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b98:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b9a:	f7fd febd 	bl	8000918 <HAL_GetTick>
 8002b9e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ba0:	e008      	b.n	8002bb4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ba2:	f7fd feb9 	bl	8000918 <HAL_GetTick>
 8002ba6:	4602      	mov	r2, r0
 8002ba8:	693b      	ldr	r3, [r7, #16]
 8002baa:	1ad3      	subs	r3, r2, r3
 8002bac:	2b64      	cmp	r3, #100	; 0x64
 8002bae:	d901      	bls.n	8002bb4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002bb0:	2303      	movs	r3, #3
 8002bb2:	e103      	b.n	8002dbc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bb4:	4b75      	ldr	r3, [pc, #468]	; (8002d8c <HAL_RCC_OscConfig+0x4c8>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d0f0      	beq.n	8002ba2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	68db      	ldr	r3, [r3, #12]
 8002bc4:	2b01      	cmp	r3, #1
 8002bc6:	d106      	bne.n	8002bd6 <HAL_RCC_OscConfig+0x312>
 8002bc8:	4b6f      	ldr	r3, [pc, #444]	; (8002d88 <HAL_RCC_OscConfig+0x4c4>)
 8002bca:	6a1b      	ldr	r3, [r3, #32]
 8002bcc:	4a6e      	ldr	r2, [pc, #440]	; (8002d88 <HAL_RCC_OscConfig+0x4c4>)
 8002bce:	f043 0301 	orr.w	r3, r3, #1
 8002bd2:	6213      	str	r3, [r2, #32]
 8002bd4:	e02d      	b.n	8002c32 <HAL_RCC_OscConfig+0x36e>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	68db      	ldr	r3, [r3, #12]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d10c      	bne.n	8002bf8 <HAL_RCC_OscConfig+0x334>
 8002bde:	4b6a      	ldr	r3, [pc, #424]	; (8002d88 <HAL_RCC_OscConfig+0x4c4>)
 8002be0:	6a1b      	ldr	r3, [r3, #32]
 8002be2:	4a69      	ldr	r2, [pc, #420]	; (8002d88 <HAL_RCC_OscConfig+0x4c4>)
 8002be4:	f023 0301 	bic.w	r3, r3, #1
 8002be8:	6213      	str	r3, [r2, #32]
 8002bea:	4b67      	ldr	r3, [pc, #412]	; (8002d88 <HAL_RCC_OscConfig+0x4c4>)
 8002bec:	6a1b      	ldr	r3, [r3, #32]
 8002bee:	4a66      	ldr	r2, [pc, #408]	; (8002d88 <HAL_RCC_OscConfig+0x4c4>)
 8002bf0:	f023 0304 	bic.w	r3, r3, #4
 8002bf4:	6213      	str	r3, [r2, #32]
 8002bf6:	e01c      	b.n	8002c32 <HAL_RCC_OscConfig+0x36e>
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	68db      	ldr	r3, [r3, #12]
 8002bfc:	2b05      	cmp	r3, #5
 8002bfe:	d10c      	bne.n	8002c1a <HAL_RCC_OscConfig+0x356>
 8002c00:	4b61      	ldr	r3, [pc, #388]	; (8002d88 <HAL_RCC_OscConfig+0x4c4>)
 8002c02:	6a1b      	ldr	r3, [r3, #32]
 8002c04:	4a60      	ldr	r2, [pc, #384]	; (8002d88 <HAL_RCC_OscConfig+0x4c4>)
 8002c06:	f043 0304 	orr.w	r3, r3, #4
 8002c0a:	6213      	str	r3, [r2, #32]
 8002c0c:	4b5e      	ldr	r3, [pc, #376]	; (8002d88 <HAL_RCC_OscConfig+0x4c4>)
 8002c0e:	6a1b      	ldr	r3, [r3, #32]
 8002c10:	4a5d      	ldr	r2, [pc, #372]	; (8002d88 <HAL_RCC_OscConfig+0x4c4>)
 8002c12:	f043 0301 	orr.w	r3, r3, #1
 8002c16:	6213      	str	r3, [r2, #32]
 8002c18:	e00b      	b.n	8002c32 <HAL_RCC_OscConfig+0x36e>
 8002c1a:	4b5b      	ldr	r3, [pc, #364]	; (8002d88 <HAL_RCC_OscConfig+0x4c4>)
 8002c1c:	6a1b      	ldr	r3, [r3, #32]
 8002c1e:	4a5a      	ldr	r2, [pc, #360]	; (8002d88 <HAL_RCC_OscConfig+0x4c4>)
 8002c20:	f023 0301 	bic.w	r3, r3, #1
 8002c24:	6213      	str	r3, [r2, #32]
 8002c26:	4b58      	ldr	r3, [pc, #352]	; (8002d88 <HAL_RCC_OscConfig+0x4c4>)
 8002c28:	6a1b      	ldr	r3, [r3, #32]
 8002c2a:	4a57      	ldr	r2, [pc, #348]	; (8002d88 <HAL_RCC_OscConfig+0x4c4>)
 8002c2c:	f023 0304 	bic.w	r3, r3, #4
 8002c30:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	68db      	ldr	r3, [r3, #12]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d015      	beq.n	8002c66 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c3a:	f7fd fe6d 	bl	8000918 <HAL_GetTick>
 8002c3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c40:	e00a      	b.n	8002c58 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c42:	f7fd fe69 	bl	8000918 <HAL_GetTick>
 8002c46:	4602      	mov	r2, r0
 8002c48:	693b      	ldr	r3, [r7, #16]
 8002c4a:	1ad3      	subs	r3, r2, r3
 8002c4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c50:	4293      	cmp	r3, r2
 8002c52:	d901      	bls.n	8002c58 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002c54:	2303      	movs	r3, #3
 8002c56:	e0b1      	b.n	8002dbc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c58:	4b4b      	ldr	r3, [pc, #300]	; (8002d88 <HAL_RCC_OscConfig+0x4c4>)
 8002c5a:	6a1b      	ldr	r3, [r3, #32]
 8002c5c:	f003 0302 	and.w	r3, r3, #2
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d0ee      	beq.n	8002c42 <HAL_RCC_OscConfig+0x37e>
 8002c64:	e014      	b.n	8002c90 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c66:	f7fd fe57 	bl	8000918 <HAL_GetTick>
 8002c6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c6c:	e00a      	b.n	8002c84 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c6e:	f7fd fe53 	bl	8000918 <HAL_GetTick>
 8002c72:	4602      	mov	r2, r0
 8002c74:	693b      	ldr	r3, [r7, #16]
 8002c76:	1ad3      	subs	r3, r2, r3
 8002c78:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c7c:	4293      	cmp	r3, r2
 8002c7e:	d901      	bls.n	8002c84 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002c80:	2303      	movs	r3, #3
 8002c82:	e09b      	b.n	8002dbc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c84:	4b40      	ldr	r3, [pc, #256]	; (8002d88 <HAL_RCC_OscConfig+0x4c4>)
 8002c86:	6a1b      	ldr	r3, [r3, #32]
 8002c88:	f003 0302 	and.w	r3, r3, #2
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d1ee      	bne.n	8002c6e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002c90:	7dfb      	ldrb	r3, [r7, #23]
 8002c92:	2b01      	cmp	r3, #1
 8002c94:	d105      	bne.n	8002ca2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c96:	4b3c      	ldr	r3, [pc, #240]	; (8002d88 <HAL_RCC_OscConfig+0x4c4>)
 8002c98:	69db      	ldr	r3, [r3, #28]
 8002c9a:	4a3b      	ldr	r2, [pc, #236]	; (8002d88 <HAL_RCC_OscConfig+0x4c4>)
 8002c9c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ca0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	69db      	ldr	r3, [r3, #28]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	f000 8087 	beq.w	8002dba <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002cac:	4b36      	ldr	r3, [pc, #216]	; (8002d88 <HAL_RCC_OscConfig+0x4c4>)
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	f003 030c 	and.w	r3, r3, #12
 8002cb4:	2b08      	cmp	r3, #8
 8002cb6:	d061      	beq.n	8002d7c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	69db      	ldr	r3, [r3, #28]
 8002cbc:	2b02      	cmp	r3, #2
 8002cbe:	d146      	bne.n	8002d4e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cc0:	4b33      	ldr	r3, [pc, #204]	; (8002d90 <HAL_RCC_OscConfig+0x4cc>)
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cc6:	f7fd fe27 	bl	8000918 <HAL_GetTick>
 8002cca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ccc:	e008      	b.n	8002ce0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cce:	f7fd fe23 	bl	8000918 <HAL_GetTick>
 8002cd2:	4602      	mov	r2, r0
 8002cd4:	693b      	ldr	r3, [r7, #16]
 8002cd6:	1ad3      	subs	r3, r2, r3
 8002cd8:	2b02      	cmp	r3, #2
 8002cda:	d901      	bls.n	8002ce0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002cdc:	2303      	movs	r3, #3
 8002cde:	e06d      	b.n	8002dbc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ce0:	4b29      	ldr	r3, [pc, #164]	; (8002d88 <HAL_RCC_OscConfig+0x4c4>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d1f0      	bne.n	8002cce <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6a1b      	ldr	r3, [r3, #32]
 8002cf0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cf4:	d108      	bne.n	8002d08 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002cf6:	4b24      	ldr	r3, [pc, #144]	; (8002d88 <HAL_RCC_OscConfig+0x4c4>)
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	689b      	ldr	r3, [r3, #8]
 8002d02:	4921      	ldr	r1, [pc, #132]	; (8002d88 <HAL_RCC_OscConfig+0x4c4>)
 8002d04:	4313      	orrs	r3, r2
 8002d06:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d08:	4b1f      	ldr	r3, [pc, #124]	; (8002d88 <HAL_RCC_OscConfig+0x4c4>)
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6a19      	ldr	r1, [r3, #32]
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d18:	430b      	orrs	r3, r1
 8002d1a:	491b      	ldr	r1, [pc, #108]	; (8002d88 <HAL_RCC_OscConfig+0x4c4>)
 8002d1c:	4313      	orrs	r3, r2
 8002d1e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d20:	4b1b      	ldr	r3, [pc, #108]	; (8002d90 <HAL_RCC_OscConfig+0x4cc>)
 8002d22:	2201      	movs	r2, #1
 8002d24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d26:	f7fd fdf7 	bl	8000918 <HAL_GetTick>
 8002d2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002d2c:	e008      	b.n	8002d40 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d2e:	f7fd fdf3 	bl	8000918 <HAL_GetTick>
 8002d32:	4602      	mov	r2, r0
 8002d34:	693b      	ldr	r3, [r7, #16]
 8002d36:	1ad3      	subs	r3, r2, r3
 8002d38:	2b02      	cmp	r3, #2
 8002d3a:	d901      	bls.n	8002d40 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002d3c:	2303      	movs	r3, #3
 8002d3e:	e03d      	b.n	8002dbc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002d40:	4b11      	ldr	r3, [pc, #68]	; (8002d88 <HAL_RCC_OscConfig+0x4c4>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d0f0      	beq.n	8002d2e <HAL_RCC_OscConfig+0x46a>
 8002d4c:	e035      	b.n	8002dba <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d4e:	4b10      	ldr	r3, [pc, #64]	; (8002d90 <HAL_RCC_OscConfig+0x4cc>)
 8002d50:	2200      	movs	r2, #0
 8002d52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d54:	f7fd fde0 	bl	8000918 <HAL_GetTick>
 8002d58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d5a:	e008      	b.n	8002d6e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d5c:	f7fd fddc 	bl	8000918 <HAL_GetTick>
 8002d60:	4602      	mov	r2, r0
 8002d62:	693b      	ldr	r3, [r7, #16]
 8002d64:	1ad3      	subs	r3, r2, r3
 8002d66:	2b02      	cmp	r3, #2
 8002d68:	d901      	bls.n	8002d6e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002d6a:	2303      	movs	r3, #3
 8002d6c:	e026      	b.n	8002dbc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d6e:	4b06      	ldr	r3, [pc, #24]	; (8002d88 <HAL_RCC_OscConfig+0x4c4>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d1f0      	bne.n	8002d5c <HAL_RCC_OscConfig+0x498>
 8002d7a:	e01e      	b.n	8002dba <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	69db      	ldr	r3, [r3, #28]
 8002d80:	2b01      	cmp	r3, #1
 8002d82:	d107      	bne.n	8002d94 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002d84:	2301      	movs	r3, #1
 8002d86:	e019      	b.n	8002dbc <HAL_RCC_OscConfig+0x4f8>
 8002d88:	40021000 	.word	0x40021000
 8002d8c:	40007000 	.word	0x40007000
 8002d90:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002d94:	4b0b      	ldr	r3, [pc, #44]	; (8002dc4 <HAL_RCC_OscConfig+0x500>)
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6a1b      	ldr	r3, [r3, #32]
 8002da4:	429a      	cmp	r2, r3
 8002da6:	d106      	bne.n	8002db6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002db2:	429a      	cmp	r2, r3
 8002db4:	d001      	beq.n	8002dba <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002db6:	2301      	movs	r3, #1
 8002db8:	e000      	b.n	8002dbc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002dba:	2300      	movs	r3, #0
}
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	3718      	adds	r7, #24
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	bd80      	pop	{r7, pc}
 8002dc4:	40021000 	.word	0x40021000

08002dc8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b084      	sub	sp, #16
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
 8002dd0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d101      	bne.n	8002ddc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002dd8:	2301      	movs	r3, #1
 8002dda:	e0d0      	b.n	8002f7e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002ddc:	4b6a      	ldr	r3, [pc, #424]	; (8002f88 <HAL_RCC_ClockConfig+0x1c0>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f003 0307 	and.w	r3, r3, #7
 8002de4:	683a      	ldr	r2, [r7, #0]
 8002de6:	429a      	cmp	r2, r3
 8002de8:	d910      	bls.n	8002e0c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dea:	4b67      	ldr	r3, [pc, #412]	; (8002f88 <HAL_RCC_ClockConfig+0x1c0>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f023 0207 	bic.w	r2, r3, #7
 8002df2:	4965      	ldr	r1, [pc, #404]	; (8002f88 <HAL_RCC_ClockConfig+0x1c0>)
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	4313      	orrs	r3, r2
 8002df8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dfa:	4b63      	ldr	r3, [pc, #396]	; (8002f88 <HAL_RCC_ClockConfig+0x1c0>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f003 0307 	and.w	r3, r3, #7
 8002e02:	683a      	ldr	r2, [r7, #0]
 8002e04:	429a      	cmp	r2, r3
 8002e06:	d001      	beq.n	8002e0c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002e08:	2301      	movs	r3, #1
 8002e0a:	e0b8      	b.n	8002f7e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f003 0302 	and.w	r3, r3, #2
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d020      	beq.n	8002e5a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f003 0304 	and.w	r3, r3, #4
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d005      	beq.n	8002e30 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002e24:	4b59      	ldr	r3, [pc, #356]	; (8002f8c <HAL_RCC_ClockConfig+0x1c4>)
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	4a58      	ldr	r2, [pc, #352]	; (8002f8c <HAL_RCC_ClockConfig+0x1c4>)
 8002e2a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002e2e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f003 0308 	and.w	r3, r3, #8
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d005      	beq.n	8002e48 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002e3c:	4b53      	ldr	r3, [pc, #332]	; (8002f8c <HAL_RCC_ClockConfig+0x1c4>)
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	4a52      	ldr	r2, [pc, #328]	; (8002f8c <HAL_RCC_ClockConfig+0x1c4>)
 8002e42:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002e46:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e48:	4b50      	ldr	r3, [pc, #320]	; (8002f8c <HAL_RCC_ClockConfig+0x1c4>)
 8002e4a:	685b      	ldr	r3, [r3, #4]
 8002e4c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	689b      	ldr	r3, [r3, #8]
 8002e54:	494d      	ldr	r1, [pc, #308]	; (8002f8c <HAL_RCC_ClockConfig+0x1c4>)
 8002e56:	4313      	orrs	r3, r2
 8002e58:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f003 0301 	and.w	r3, r3, #1
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d040      	beq.n	8002ee8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	2b01      	cmp	r3, #1
 8002e6c:	d107      	bne.n	8002e7e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e6e:	4b47      	ldr	r3, [pc, #284]	; (8002f8c <HAL_RCC_ClockConfig+0x1c4>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d115      	bne.n	8002ea6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	e07f      	b.n	8002f7e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	685b      	ldr	r3, [r3, #4]
 8002e82:	2b02      	cmp	r3, #2
 8002e84:	d107      	bne.n	8002e96 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e86:	4b41      	ldr	r3, [pc, #260]	; (8002f8c <HAL_RCC_ClockConfig+0x1c4>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d109      	bne.n	8002ea6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e92:	2301      	movs	r3, #1
 8002e94:	e073      	b.n	8002f7e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e96:	4b3d      	ldr	r3, [pc, #244]	; (8002f8c <HAL_RCC_ClockConfig+0x1c4>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f003 0302 	and.w	r3, r3, #2
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d101      	bne.n	8002ea6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	e06b      	b.n	8002f7e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ea6:	4b39      	ldr	r3, [pc, #228]	; (8002f8c <HAL_RCC_ClockConfig+0x1c4>)
 8002ea8:	685b      	ldr	r3, [r3, #4]
 8002eaa:	f023 0203 	bic.w	r2, r3, #3
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	4936      	ldr	r1, [pc, #216]	; (8002f8c <HAL_RCC_ClockConfig+0x1c4>)
 8002eb4:	4313      	orrs	r3, r2
 8002eb6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002eb8:	f7fd fd2e 	bl	8000918 <HAL_GetTick>
 8002ebc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ebe:	e00a      	b.n	8002ed6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ec0:	f7fd fd2a 	bl	8000918 <HAL_GetTick>
 8002ec4:	4602      	mov	r2, r0
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	1ad3      	subs	r3, r2, r3
 8002eca:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d901      	bls.n	8002ed6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002ed2:	2303      	movs	r3, #3
 8002ed4:	e053      	b.n	8002f7e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ed6:	4b2d      	ldr	r3, [pc, #180]	; (8002f8c <HAL_RCC_ClockConfig+0x1c4>)
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	f003 020c 	and.w	r2, r3, #12
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	685b      	ldr	r3, [r3, #4]
 8002ee2:	009b      	lsls	r3, r3, #2
 8002ee4:	429a      	cmp	r2, r3
 8002ee6:	d1eb      	bne.n	8002ec0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002ee8:	4b27      	ldr	r3, [pc, #156]	; (8002f88 <HAL_RCC_ClockConfig+0x1c0>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f003 0307 	and.w	r3, r3, #7
 8002ef0:	683a      	ldr	r2, [r7, #0]
 8002ef2:	429a      	cmp	r2, r3
 8002ef4:	d210      	bcs.n	8002f18 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ef6:	4b24      	ldr	r3, [pc, #144]	; (8002f88 <HAL_RCC_ClockConfig+0x1c0>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f023 0207 	bic.w	r2, r3, #7
 8002efe:	4922      	ldr	r1, [pc, #136]	; (8002f88 <HAL_RCC_ClockConfig+0x1c0>)
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	4313      	orrs	r3, r2
 8002f04:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f06:	4b20      	ldr	r3, [pc, #128]	; (8002f88 <HAL_RCC_ClockConfig+0x1c0>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f003 0307 	and.w	r3, r3, #7
 8002f0e:	683a      	ldr	r2, [r7, #0]
 8002f10:	429a      	cmp	r2, r3
 8002f12:	d001      	beq.n	8002f18 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002f14:	2301      	movs	r3, #1
 8002f16:	e032      	b.n	8002f7e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f003 0304 	and.w	r3, r3, #4
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d008      	beq.n	8002f36 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f24:	4b19      	ldr	r3, [pc, #100]	; (8002f8c <HAL_RCC_ClockConfig+0x1c4>)
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	68db      	ldr	r3, [r3, #12]
 8002f30:	4916      	ldr	r1, [pc, #88]	; (8002f8c <HAL_RCC_ClockConfig+0x1c4>)
 8002f32:	4313      	orrs	r3, r2
 8002f34:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f003 0308 	and.w	r3, r3, #8
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d009      	beq.n	8002f56 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002f42:	4b12      	ldr	r3, [pc, #72]	; (8002f8c <HAL_RCC_ClockConfig+0x1c4>)
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	691b      	ldr	r3, [r3, #16]
 8002f4e:	00db      	lsls	r3, r3, #3
 8002f50:	490e      	ldr	r1, [pc, #56]	; (8002f8c <HAL_RCC_ClockConfig+0x1c4>)
 8002f52:	4313      	orrs	r3, r2
 8002f54:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002f56:	f000 f821 	bl	8002f9c <HAL_RCC_GetSysClockFreq>
 8002f5a:	4602      	mov	r2, r0
 8002f5c:	4b0b      	ldr	r3, [pc, #44]	; (8002f8c <HAL_RCC_ClockConfig+0x1c4>)
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	091b      	lsrs	r3, r3, #4
 8002f62:	f003 030f 	and.w	r3, r3, #15
 8002f66:	490a      	ldr	r1, [pc, #40]	; (8002f90 <HAL_RCC_ClockConfig+0x1c8>)
 8002f68:	5ccb      	ldrb	r3, [r1, r3]
 8002f6a:	fa22 f303 	lsr.w	r3, r2, r3
 8002f6e:	4a09      	ldr	r2, [pc, #36]	; (8002f94 <HAL_RCC_ClockConfig+0x1cc>)
 8002f70:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002f72:	4b09      	ldr	r3, [pc, #36]	; (8002f98 <HAL_RCC_ClockConfig+0x1d0>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4618      	mov	r0, r3
 8002f78:	f7fd fc8c 	bl	8000894 <HAL_InitTick>

  return HAL_OK;
 8002f7c:	2300      	movs	r3, #0
}
 8002f7e:	4618      	mov	r0, r3
 8002f80:	3710      	adds	r7, #16
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bd80      	pop	{r7, pc}
 8002f86:	bf00      	nop
 8002f88:	40022000 	.word	0x40022000
 8002f8c:	40021000 	.word	0x40021000
 8002f90:	08008bc0 	.word	0x08008bc0
 8002f94:	20000000 	.word	0x20000000
 8002f98:	20000004 	.word	0x20000004

08002f9c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f9c:	b490      	push	{r4, r7}
 8002f9e:	b08a      	sub	sp, #40	; 0x28
 8002fa0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002fa2:	4b29      	ldr	r3, [pc, #164]	; (8003048 <HAL_RCC_GetSysClockFreq+0xac>)
 8002fa4:	1d3c      	adds	r4, r7, #4
 8002fa6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002fa8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002fac:	f240 2301 	movw	r3, #513	; 0x201
 8002fb0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	61fb      	str	r3, [r7, #28]
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	61bb      	str	r3, [r7, #24]
 8002fba:	2300      	movs	r3, #0
 8002fbc:	627b      	str	r3, [r7, #36]	; 0x24
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002fc6:	4b21      	ldr	r3, [pc, #132]	; (800304c <HAL_RCC_GetSysClockFreq+0xb0>)
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002fcc:	69fb      	ldr	r3, [r7, #28]
 8002fce:	f003 030c 	and.w	r3, r3, #12
 8002fd2:	2b04      	cmp	r3, #4
 8002fd4:	d002      	beq.n	8002fdc <HAL_RCC_GetSysClockFreq+0x40>
 8002fd6:	2b08      	cmp	r3, #8
 8002fd8:	d003      	beq.n	8002fe2 <HAL_RCC_GetSysClockFreq+0x46>
 8002fda:	e02b      	b.n	8003034 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002fdc:	4b1c      	ldr	r3, [pc, #112]	; (8003050 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002fde:	623b      	str	r3, [r7, #32]
      break;
 8002fe0:	e02b      	b.n	800303a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002fe2:	69fb      	ldr	r3, [r7, #28]
 8002fe4:	0c9b      	lsrs	r3, r3, #18
 8002fe6:	f003 030f 	and.w	r3, r3, #15
 8002fea:	3328      	adds	r3, #40	; 0x28
 8002fec:	443b      	add	r3, r7
 8002fee:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002ff2:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002ff4:	69fb      	ldr	r3, [r7, #28]
 8002ff6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d012      	beq.n	8003024 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002ffe:	4b13      	ldr	r3, [pc, #76]	; (800304c <HAL_RCC_GetSysClockFreq+0xb0>)
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	0c5b      	lsrs	r3, r3, #17
 8003004:	f003 0301 	and.w	r3, r3, #1
 8003008:	3328      	adds	r3, #40	; 0x28
 800300a:	443b      	add	r3, r7
 800300c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003010:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003012:	697b      	ldr	r3, [r7, #20]
 8003014:	4a0e      	ldr	r2, [pc, #56]	; (8003050 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003016:	fb03 f202 	mul.w	r2, r3, r2
 800301a:	69bb      	ldr	r3, [r7, #24]
 800301c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003020:	627b      	str	r3, [r7, #36]	; 0x24
 8003022:	e004      	b.n	800302e <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003024:	697b      	ldr	r3, [r7, #20]
 8003026:	4a0b      	ldr	r2, [pc, #44]	; (8003054 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003028:	fb02 f303 	mul.w	r3, r2, r3
 800302c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800302e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003030:	623b      	str	r3, [r7, #32]
      break;
 8003032:	e002      	b.n	800303a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003034:	4b08      	ldr	r3, [pc, #32]	; (8003058 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003036:	623b      	str	r3, [r7, #32]
      break;
 8003038:	bf00      	nop
    }
  }
  return sysclockfreq;
 800303a:	6a3b      	ldr	r3, [r7, #32]
}
 800303c:	4618      	mov	r0, r3
 800303e:	3728      	adds	r7, #40	; 0x28
 8003040:	46bd      	mov	sp, r7
 8003042:	bc90      	pop	{r4, r7}
 8003044:	4770      	bx	lr
 8003046:	bf00      	nop
 8003048:	08008b68 	.word	0x08008b68
 800304c:	40021000 	.word	0x40021000
 8003050:	00f42400 	.word	0x00f42400
 8003054:	003d0900 	.word	0x003d0900
 8003058:	007a1200 	.word	0x007a1200

0800305c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800305c:	b480      	push	{r7}
 800305e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003060:	4b02      	ldr	r3, [pc, #8]	; (800306c <HAL_RCC_GetHCLKFreq+0x10>)
 8003062:	681b      	ldr	r3, [r3, #0]
}
 8003064:	4618      	mov	r0, r3
 8003066:	46bd      	mov	sp, r7
 8003068:	bc80      	pop	{r7}
 800306a:	4770      	bx	lr
 800306c:	20000000 	.word	0x20000000

08003070 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003074:	f7ff fff2 	bl	800305c <HAL_RCC_GetHCLKFreq>
 8003078:	4602      	mov	r2, r0
 800307a:	4b05      	ldr	r3, [pc, #20]	; (8003090 <HAL_RCC_GetPCLK1Freq+0x20>)
 800307c:	685b      	ldr	r3, [r3, #4]
 800307e:	0a1b      	lsrs	r3, r3, #8
 8003080:	f003 0307 	and.w	r3, r3, #7
 8003084:	4903      	ldr	r1, [pc, #12]	; (8003094 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003086:	5ccb      	ldrb	r3, [r1, r3]
 8003088:	fa22 f303 	lsr.w	r3, r2, r3
}
 800308c:	4618      	mov	r0, r3
 800308e:	bd80      	pop	{r7, pc}
 8003090:	40021000 	.word	0x40021000
 8003094:	08008bd0 	.word	0x08008bd0

08003098 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800309c:	f7ff ffde 	bl	800305c <HAL_RCC_GetHCLKFreq>
 80030a0:	4602      	mov	r2, r0
 80030a2:	4b05      	ldr	r3, [pc, #20]	; (80030b8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80030a4:	685b      	ldr	r3, [r3, #4]
 80030a6:	0adb      	lsrs	r3, r3, #11
 80030a8:	f003 0307 	and.w	r3, r3, #7
 80030ac:	4903      	ldr	r1, [pc, #12]	; (80030bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80030ae:	5ccb      	ldrb	r3, [r1, r3]
 80030b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030b4:	4618      	mov	r0, r3
 80030b6:	bd80      	pop	{r7, pc}
 80030b8:	40021000 	.word	0x40021000
 80030bc:	08008bd0 	.word	0x08008bd0

080030c0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80030c0:	b480      	push	{r7}
 80030c2:	b085      	sub	sp, #20
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80030c8:	4b0a      	ldr	r3, [pc, #40]	; (80030f4 <RCC_Delay+0x34>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4a0a      	ldr	r2, [pc, #40]	; (80030f8 <RCC_Delay+0x38>)
 80030ce:	fba2 2303 	umull	r2, r3, r2, r3
 80030d2:	0a5b      	lsrs	r3, r3, #9
 80030d4:	687a      	ldr	r2, [r7, #4]
 80030d6:	fb02 f303 	mul.w	r3, r2, r3
 80030da:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80030dc:	bf00      	nop
  }
  while (Delay --);
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	1e5a      	subs	r2, r3, #1
 80030e2:	60fa      	str	r2, [r7, #12]
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d1f9      	bne.n	80030dc <RCC_Delay+0x1c>
}
 80030e8:	bf00      	nop
 80030ea:	bf00      	nop
 80030ec:	3714      	adds	r7, #20
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bc80      	pop	{r7}
 80030f2:	4770      	bx	lr
 80030f4:	20000000 	.word	0x20000000
 80030f8:	10624dd3 	.word	0x10624dd3

080030fc <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b086      	sub	sp, #24
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003104:	2300      	movs	r3, #0
 8003106:	613b      	str	r3, [r7, #16]
 8003108:	2300      	movs	r3, #0
 800310a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f003 0301 	and.w	r3, r3, #1
 8003114:	2b00      	cmp	r3, #0
 8003116:	d07d      	beq.n	8003214 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003118:	2300      	movs	r3, #0
 800311a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800311c:	4b4f      	ldr	r3, [pc, #316]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800311e:	69db      	ldr	r3, [r3, #28]
 8003120:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003124:	2b00      	cmp	r3, #0
 8003126:	d10d      	bne.n	8003144 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003128:	4b4c      	ldr	r3, [pc, #304]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800312a:	69db      	ldr	r3, [r3, #28]
 800312c:	4a4b      	ldr	r2, [pc, #300]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800312e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003132:	61d3      	str	r3, [r2, #28]
 8003134:	4b49      	ldr	r3, [pc, #292]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003136:	69db      	ldr	r3, [r3, #28]
 8003138:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800313c:	60bb      	str	r3, [r7, #8]
 800313e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003140:	2301      	movs	r3, #1
 8003142:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003144:	4b46      	ldr	r3, [pc, #280]	; (8003260 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800314c:	2b00      	cmp	r3, #0
 800314e:	d118      	bne.n	8003182 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003150:	4b43      	ldr	r3, [pc, #268]	; (8003260 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4a42      	ldr	r2, [pc, #264]	; (8003260 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003156:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800315a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800315c:	f7fd fbdc 	bl	8000918 <HAL_GetTick>
 8003160:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003162:	e008      	b.n	8003176 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003164:	f7fd fbd8 	bl	8000918 <HAL_GetTick>
 8003168:	4602      	mov	r2, r0
 800316a:	693b      	ldr	r3, [r7, #16]
 800316c:	1ad3      	subs	r3, r2, r3
 800316e:	2b64      	cmp	r3, #100	; 0x64
 8003170:	d901      	bls.n	8003176 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003172:	2303      	movs	r3, #3
 8003174:	e06d      	b.n	8003252 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003176:	4b3a      	ldr	r3, [pc, #232]	; (8003260 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800317e:	2b00      	cmp	r3, #0
 8003180:	d0f0      	beq.n	8003164 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003182:	4b36      	ldr	r3, [pc, #216]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003184:	6a1b      	ldr	r3, [r3, #32]
 8003186:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800318a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d02e      	beq.n	80031f0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	685b      	ldr	r3, [r3, #4]
 8003196:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800319a:	68fa      	ldr	r2, [r7, #12]
 800319c:	429a      	cmp	r2, r3
 800319e:	d027      	beq.n	80031f0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80031a0:	4b2e      	ldr	r3, [pc, #184]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031a2:	6a1b      	ldr	r3, [r3, #32]
 80031a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031a8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80031aa:	4b2e      	ldr	r3, [pc, #184]	; (8003264 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80031ac:	2201      	movs	r2, #1
 80031ae:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80031b0:	4b2c      	ldr	r3, [pc, #176]	; (8003264 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80031b2:	2200      	movs	r2, #0
 80031b4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80031b6:	4a29      	ldr	r2, [pc, #164]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	f003 0301 	and.w	r3, r3, #1
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d014      	beq.n	80031f0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031c6:	f7fd fba7 	bl	8000918 <HAL_GetTick>
 80031ca:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031cc:	e00a      	b.n	80031e4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031ce:	f7fd fba3 	bl	8000918 <HAL_GetTick>
 80031d2:	4602      	mov	r2, r0
 80031d4:	693b      	ldr	r3, [r7, #16]
 80031d6:	1ad3      	subs	r3, r2, r3
 80031d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80031dc:	4293      	cmp	r3, r2
 80031de:	d901      	bls.n	80031e4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80031e0:	2303      	movs	r3, #3
 80031e2:	e036      	b.n	8003252 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031e4:	4b1d      	ldr	r3, [pc, #116]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031e6:	6a1b      	ldr	r3, [r3, #32]
 80031e8:	f003 0302 	and.w	r3, r3, #2
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d0ee      	beq.n	80031ce <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80031f0:	4b1a      	ldr	r3, [pc, #104]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031f2:	6a1b      	ldr	r3, [r3, #32]
 80031f4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	4917      	ldr	r1, [pc, #92]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031fe:	4313      	orrs	r3, r2
 8003200:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003202:	7dfb      	ldrb	r3, [r7, #23]
 8003204:	2b01      	cmp	r3, #1
 8003206:	d105      	bne.n	8003214 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003208:	4b14      	ldr	r3, [pc, #80]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800320a:	69db      	ldr	r3, [r3, #28]
 800320c:	4a13      	ldr	r2, [pc, #76]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800320e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003212:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f003 0302 	and.w	r3, r3, #2
 800321c:	2b00      	cmp	r3, #0
 800321e:	d008      	beq.n	8003232 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003220:	4b0e      	ldr	r3, [pc, #56]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	689b      	ldr	r3, [r3, #8]
 800322c:	490b      	ldr	r1, [pc, #44]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800322e:	4313      	orrs	r3, r2
 8003230:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f003 0310 	and.w	r3, r3, #16
 800323a:	2b00      	cmp	r3, #0
 800323c:	d008      	beq.n	8003250 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800323e:	4b07      	ldr	r3, [pc, #28]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003240:	685b      	ldr	r3, [r3, #4]
 8003242:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	68db      	ldr	r3, [r3, #12]
 800324a:	4904      	ldr	r1, [pc, #16]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800324c:	4313      	orrs	r3, r2
 800324e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003250:	2300      	movs	r3, #0
}
 8003252:	4618      	mov	r0, r3
 8003254:	3718      	adds	r7, #24
 8003256:	46bd      	mov	sp, r7
 8003258:	bd80      	pop	{r7, pc}
 800325a:	bf00      	nop
 800325c:	40021000 	.word	0x40021000
 8003260:	40007000 	.word	0x40007000
 8003264:	42420440 	.word	0x42420440

08003268 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b082      	sub	sp, #8
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d101      	bne.n	800327a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003276:	2301      	movs	r3, #1
 8003278:	e076      	b.n	8003368 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800327e:	2b00      	cmp	r3, #0
 8003280:	d108      	bne.n	8003294 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800328a:	d009      	beq.n	80032a0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2200      	movs	r2, #0
 8003290:	61da      	str	r2, [r3, #28]
 8003292:	e005      	b.n	80032a0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2200      	movs	r2, #0
 8003298:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2200      	movs	r2, #0
 800329e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2200      	movs	r2, #0
 80032a4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80032ac:	b2db      	uxtb	r3, r3
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d106      	bne.n	80032c0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2200      	movs	r2, #0
 80032b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80032ba:	6878      	ldr	r0, [r7, #4]
 80032bc:	f7fd f9a4 	bl	8000608 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2202      	movs	r2, #2
 80032c4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	681a      	ldr	r2, [r3, #0]
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80032d6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	689b      	ldr	r3, [r3, #8]
 80032e4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80032e8:	431a      	orrs	r2, r3
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	68db      	ldr	r3, [r3, #12]
 80032ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80032f2:	431a      	orrs	r2, r3
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	691b      	ldr	r3, [r3, #16]
 80032f8:	f003 0302 	and.w	r3, r3, #2
 80032fc:	431a      	orrs	r2, r3
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	695b      	ldr	r3, [r3, #20]
 8003302:	f003 0301 	and.w	r3, r3, #1
 8003306:	431a      	orrs	r2, r3
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	699b      	ldr	r3, [r3, #24]
 800330c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003310:	431a      	orrs	r2, r3
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	69db      	ldr	r3, [r3, #28]
 8003316:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800331a:	431a      	orrs	r2, r3
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6a1b      	ldr	r3, [r3, #32]
 8003320:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003324:	ea42 0103 	orr.w	r1, r2, r3
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800332c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	430a      	orrs	r2, r1
 8003336:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	699b      	ldr	r3, [r3, #24]
 800333c:	0c1a      	lsrs	r2, r3, #16
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f002 0204 	and.w	r2, r2, #4
 8003346:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	69da      	ldr	r2, [r3, #28]
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003356:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2200      	movs	r2, #0
 800335c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2201      	movs	r2, #1
 8003362:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003366:	2300      	movs	r3, #0
}
 8003368:	4618      	mov	r0, r3
 800336a:	3708      	adds	r7, #8
 800336c:	46bd      	mov	sp, r7
 800336e:	bd80      	pop	{r7, pc}

08003370 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b082      	sub	sp, #8
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d101      	bne.n	8003382 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800337e:	2301      	movs	r3, #1
 8003380:	e03f      	b.n	8003402 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003388:	b2db      	uxtb	r3, r3
 800338a:	2b00      	cmp	r3, #0
 800338c:	d106      	bne.n	800339c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2200      	movs	r2, #0
 8003392:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003396:	6878      	ldr	r0, [r7, #4]
 8003398:	f7fd f980 	bl	800069c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2224      	movs	r2, #36	; 0x24
 80033a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	68da      	ldr	r2, [r3, #12]
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80033b2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80033b4:	6878      	ldr	r0, [r7, #4]
 80033b6:	f000 f829 	bl	800340c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	691a      	ldr	r2, [r3, #16]
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80033c8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	695a      	ldr	r2, [r3, #20]
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80033d8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	68da      	ldr	r2, [r3, #12]
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80033e8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2200      	movs	r2, #0
 80033ee:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2220      	movs	r2, #32
 80033f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2220      	movs	r2, #32
 80033fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003400:	2300      	movs	r3, #0
}
 8003402:	4618      	mov	r0, r3
 8003404:	3708      	adds	r7, #8
 8003406:	46bd      	mov	sp, r7
 8003408:	bd80      	pop	{r7, pc}
	...

0800340c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b084      	sub	sp, #16
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	691b      	ldr	r3, [r3, #16]
 800341a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	68da      	ldr	r2, [r3, #12]
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	430a      	orrs	r2, r1
 8003428:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	689a      	ldr	r2, [r3, #8]
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	691b      	ldr	r3, [r3, #16]
 8003432:	431a      	orrs	r2, r3
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	695b      	ldr	r3, [r3, #20]
 8003438:	4313      	orrs	r3, r2
 800343a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	68db      	ldr	r3, [r3, #12]
 8003442:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003446:	f023 030c 	bic.w	r3, r3, #12
 800344a:	687a      	ldr	r2, [r7, #4]
 800344c:	6812      	ldr	r2, [r2, #0]
 800344e:	68b9      	ldr	r1, [r7, #8]
 8003450:	430b      	orrs	r3, r1
 8003452:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	695b      	ldr	r3, [r3, #20]
 800345a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	699a      	ldr	r2, [r3, #24]
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	430a      	orrs	r2, r1
 8003468:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4a2c      	ldr	r2, [pc, #176]	; (8003520 <UART_SetConfig+0x114>)
 8003470:	4293      	cmp	r3, r2
 8003472:	d103      	bne.n	800347c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003474:	f7ff fe10 	bl	8003098 <HAL_RCC_GetPCLK2Freq>
 8003478:	60f8      	str	r0, [r7, #12]
 800347a:	e002      	b.n	8003482 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800347c:	f7ff fdf8 	bl	8003070 <HAL_RCC_GetPCLK1Freq>
 8003480:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003482:	68fa      	ldr	r2, [r7, #12]
 8003484:	4613      	mov	r3, r2
 8003486:	009b      	lsls	r3, r3, #2
 8003488:	4413      	add	r3, r2
 800348a:	009a      	lsls	r2, r3, #2
 800348c:	441a      	add	r2, r3
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	685b      	ldr	r3, [r3, #4]
 8003492:	009b      	lsls	r3, r3, #2
 8003494:	fbb2 f3f3 	udiv	r3, r2, r3
 8003498:	4a22      	ldr	r2, [pc, #136]	; (8003524 <UART_SetConfig+0x118>)
 800349a:	fba2 2303 	umull	r2, r3, r2, r3
 800349e:	095b      	lsrs	r3, r3, #5
 80034a0:	0119      	lsls	r1, r3, #4
 80034a2:	68fa      	ldr	r2, [r7, #12]
 80034a4:	4613      	mov	r3, r2
 80034a6:	009b      	lsls	r3, r3, #2
 80034a8:	4413      	add	r3, r2
 80034aa:	009a      	lsls	r2, r3, #2
 80034ac:	441a      	add	r2, r3
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	685b      	ldr	r3, [r3, #4]
 80034b2:	009b      	lsls	r3, r3, #2
 80034b4:	fbb2 f2f3 	udiv	r2, r2, r3
 80034b8:	4b1a      	ldr	r3, [pc, #104]	; (8003524 <UART_SetConfig+0x118>)
 80034ba:	fba3 0302 	umull	r0, r3, r3, r2
 80034be:	095b      	lsrs	r3, r3, #5
 80034c0:	2064      	movs	r0, #100	; 0x64
 80034c2:	fb00 f303 	mul.w	r3, r0, r3
 80034c6:	1ad3      	subs	r3, r2, r3
 80034c8:	011b      	lsls	r3, r3, #4
 80034ca:	3332      	adds	r3, #50	; 0x32
 80034cc:	4a15      	ldr	r2, [pc, #84]	; (8003524 <UART_SetConfig+0x118>)
 80034ce:	fba2 2303 	umull	r2, r3, r2, r3
 80034d2:	095b      	lsrs	r3, r3, #5
 80034d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80034d8:	4419      	add	r1, r3
 80034da:	68fa      	ldr	r2, [r7, #12]
 80034dc:	4613      	mov	r3, r2
 80034de:	009b      	lsls	r3, r3, #2
 80034e0:	4413      	add	r3, r2
 80034e2:	009a      	lsls	r2, r3, #2
 80034e4:	441a      	add	r2, r3
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	685b      	ldr	r3, [r3, #4]
 80034ea:	009b      	lsls	r3, r3, #2
 80034ec:	fbb2 f2f3 	udiv	r2, r2, r3
 80034f0:	4b0c      	ldr	r3, [pc, #48]	; (8003524 <UART_SetConfig+0x118>)
 80034f2:	fba3 0302 	umull	r0, r3, r3, r2
 80034f6:	095b      	lsrs	r3, r3, #5
 80034f8:	2064      	movs	r0, #100	; 0x64
 80034fa:	fb00 f303 	mul.w	r3, r0, r3
 80034fe:	1ad3      	subs	r3, r2, r3
 8003500:	011b      	lsls	r3, r3, #4
 8003502:	3332      	adds	r3, #50	; 0x32
 8003504:	4a07      	ldr	r2, [pc, #28]	; (8003524 <UART_SetConfig+0x118>)
 8003506:	fba2 2303 	umull	r2, r3, r2, r3
 800350a:	095b      	lsrs	r3, r3, #5
 800350c:	f003 020f 	and.w	r2, r3, #15
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	440a      	add	r2, r1
 8003516:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003518:	bf00      	nop
 800351a:	3710      	adds	r7, #16
 800351c:	46bd      	mov	sp, r7
 800351e:	bd80      	pop	{r7, pc}
 8003520:	40013800 	.word	0x40013800
 8003524:	51eb851f 	.word	0x51eb851f

08003528 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003528:	b084      	sub	sp, #16
 800352a:	b480      	push	{r7}
 800352c:	b083      	sub	sp, #12
 800352e:	af00      	add	r7, sp, #0
 8003530:	6078      	str	r0, [r7, #4]
 8003532:	f107 0014 	add.w	r0, r7, #20
 8003536:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800353a:	2300      	movs	r3, #0
}
 800353c:	4618      	mov	r0, r3
 800353e:	370c      	adds	r7, #12
 8003540:	46bd      	mov	sp, r7
 8003542:	bc80      	pop	{r7}
 8003544:	b004      	add	sp, #16
 8003546:	4770      	bx	lr

08003548 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8003548:	b480      	push	{r7}
 800354a:	b085      	sub	sp, #20
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2200      	movs	r2, #0
 8003554:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003558:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800355c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	b29a      	uxth	r2, r3
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003568:	2300      	movs	r3, #0
}
 800356a:	4618      	mov	r0, r3
 800356c:	3714      	adds	r7, #20
 800356e:	46bd      	mov	sp, r7
 8003570:	bc80      	pop	{r7}
 8003572:	4770      	bx	lr

08003574 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8003574:	b480      	push	{r7}
 8003576:	b085      	sub	sp, #20
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800357c:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8003580:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003588:	b29a      	uxth	r2, r3
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	b29b      	uxth	r3, r3
 800358e:	43db      	mvns	r3, r3
 8003590:	b29b      	uxth	r3, r3
 8003592:	4013      	ands	r3, r2
 8003594:	b29a      	uxth	r2, r3
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800359c:	2300      	movs	r3, #0
}
 800359e:	4618      	mov	r0, r3
 80035a0:	3714      	adds	r7, #20
 80035a2:	46bd      	mov	sp, r7
 80035a4:	bc80      	pop	{r7}
 80035a6:	4770      	bx	lr

080035a8 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 80035a8:	b480      	push	{r7}
 80035aa:	b083      	sub	sp, #12
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
 80035b0:	460b      	mov	r3, r1
 80035b2:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80035b4:	2300      	movs	r3, #0
}
 80035b6:	4618      	mov	r0, r3
 80035b8:	370c      	adds	r7, #12
 80035ba:	46bd      	mov	sp, r7
 80035bc:	bc80      	pop	{r7}
 80035be:	4770      	bx	lr

080035c0 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80035c0:	b084      	sub	sp, #16
 80035c2:	b480      	push	{r7}
 80035c4:	b083      	sub	sp, #12
 80035c6:	af00      	add	r7, sp, #0
 80035c8:	6078      	str	r0, [r7, #4]
 80035ca:	f107 0014 	add.w	r0, r7, #20
 80035ce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2201      	movs	r2, #1
 80035d6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2200      	movs	r2, #0
 80035de:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2200      	movs	r2, #0
 80035e6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2200      	movs	r2, #0
 80035ee:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80035f2:	2300      	movs	r3, #0
}
 80035f4:	4618      	mov	r0, r3
 80035f6:	370c      	adds	r7, #12
 80035f8:	46bd      	mov	sp, r7
 80035fa:	bc80      	pop	{r7}
 80035fc:	b004      	add	sp, #16
 80035fe:	4770      	bx	lr

08003600 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003600:	b480      	push	{r7}
 8003602:	b09b      	sub	sp, #108	; 0x6c
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
 8003608:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800360a:	2300      	movs	r3, #0
 800360c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8003610:	687a      	ldr	r2, [r7, #4]
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	781b      	ldrb	r3, [r3, #0]
 8003616:	009b      	lsls	r3, r3, #2
 8003618:	4413      	add	r3, r2
 800361a:	881b      	ldrh	r3, [r3, #0]
 800361c:	b29b      	uxth	r3, r3
 800361e:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8003622:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003626:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	78db      	ldrb	r3, [r3, #3]
 800362e:	2b03      	cmp	r3, #3
 8003630:	d81f      	bhi.n	8003672 <USB_ActivateEndpoint+0x72>
 8003632:	a201      	add	r2, pc, #4	; (adr r2, 8003638 <USB_ActivateEndpoint+0x38>)
 8003634:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003638:	08003649 	.word	0x08003649
 800363c:	08003665 	.word	0x08003665
 8003640:	0800367b 	.word	0x0800367b
 8003644:	08003657 	.word	0x08003657
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8003648:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800364c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003650:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8003654:	e012      	b.n	800367c <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8003656:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800365a:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800365e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8003662:	e00b      	b.n	800367c <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8003664:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003668:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800366c:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8003670:	e004      	b.n	800367c <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8003672:	2301      	movs	r3, #1
 8003674:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8003678:	e000      	b.n	800367c <USB_ActivateEndpoint+0x7c>
      break;
 800367a:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800367c:	687a      	ldr	r2, [r7, #4]
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	781b      	ldrb	r3, [r3, #0]
 8003682:	009b      	lsls	r3, r3, #2
 8003684:	441a      	add	r2, r3
 8003686:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800368a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800368e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003692:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003696:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800369a:	b29b      	uxth	r3, r3
 800369c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800369e:	687a      	ldr	r2, [r7, #4]
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	781b      	ldrb	r3, [r3, #0]
 80036a4:	009b      	lsls	r3, r3, #2
 80036a6:	4413      	add	r3, r2
 80036a8:	881b      	ldrh	r3, [r3, #0]
 80036aa:	b29b      	uxth	r3, r3
 80036ac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80036b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036b4:	b29a      	uxth	r2, r3
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	781b      	ldrb	r3, [r3, #0]
 80036ba:	b29b      	uxth	r3, r3
 80036bc:	4313      	orrs	r3, r2
 80036be:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 80036c2:	687a      	ldr	r2, [r7, #4]
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	781b      	ldrb	r3, [r3, #0]
 80036c8:	009b      	lsls	r3, r3, #2
 80036ca:	441a      	add	r2, r3
 80036cc:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80036d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80036d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80036d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80036dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80036e0:	b29b      	uxth	r3, r3
 80036e2:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	7b1b      	ldrb	r3, [r3, #12]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	f040 8149 	bne.w	8003980 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	785b      	ldrb	r3, [r3, #1]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	f000 8084 	beq.w	8003800 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	617b      	str	r3, [r7, #20]
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003702:	b29b      	uxth	r3, r3
 8003704:	461a      	mov	r2, r3
 8003706:	697b      	ldr	r3, [r7, #20]
 8003708:	4413      	add	r3, r2
 800370a:	617b      	str	r3, [r7, #20]
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	781b      	ldrb	r3, [r3, #0]
 8003710:	011a      	lsls	r2, r3, #4
 8003712:	697b      	ldr	r3, [r7, #20]
 8003714:	4413      	add	r3, r2
 8003716:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800371a:	613b      	str	r3, [r7, #16]
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	88db      	ldrh	r3, [r3, #6]
 8003720:	085b      	lsrs	r3, r3, #1
 8003722:	b29b      	uxth	r3, r3
 8003724:	005b      	lsls	r3, r3, #1
 8003726:	b29a      	uxth	r2, r3
 8003728:	693b      	ldr	r3, [r7, #16]
 800372a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800372c:	687a      	ldr	r2, [r7, #4]
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	781b      	ldrb	r3, [r3, #0]
 8003732:	009b      	lsls	r3, r3, #2
 8003734:	4413      	add	r3, r2
 8003736:	881b      	ldrh	r3, [r3, #0]
 8003738:	81fb      	strh	r3, [r7, #14]
 800373a:	89fb      	ldrh	r3, [r7, #14]
 800373c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003740:	2b00      	cmp	r3, #0
 8003742:	d01b      	beq.n	800377c <USB_ActivateEndpoint+0x17c>
 8003744:	687a      	ldr	r2, [r7, #4]
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	781b      	ldrb	r3, [r3, #0]
 800374a:	009b      	lsls	r3, r3, #2
 800374c:	4413      	add	r3, r2
 800374e:	881b      	ldrh	r3, [r3, #0]
 8003750:	b29b      	uxth	r3, r3
 8003752:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003756:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800375a:	81bb      	strh	r3, [r7, #12]
 800375c:	687a      	ldr	r2, [r7, #4]
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	781b      	ldrb	r3, [r3, #0]
 8003762:	009b      	lsls	r3, r3, #2
 8003764:	441a      	add	r2, r3
 8003766:	89bb      	ldrh	r3, [r7, #12]
 8003768:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800376c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003770:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003774:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003778:	b29b      	uxth	r3, r3
 800377a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	78db      	ldrb	r3, [r3, #3]
 8003780:	2b01      	cmp	r3, #1
 8003782:	d020      	beq.n	80037c6 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003784:	687a      	ldr	r2, [r7, #4]
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	781b      	ldrb	r3, [r3, #0]
 800378a:	009b      	lsls	r3, r3, #2
 800378c:	4413      	add	r3, r2
 800378e:	881b      	ldrh	r3, [r3, #0]
 8003790:	b29b      	uxth	r3, r3
 8003792:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003796:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800379a:	813b      	strh	r3, [r7, #8]
 800379c:	893b      	ldrh	r3, [r7, #8]
 800379e:	f083 0320 	eor.w	r3, r3, #32
 80037a2:	813b      	strh	r3, [r7, #8]
 80037a4:	687a      	ldr	r2, [r7, #4]
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	781b      	ldrb	r3, [r3, #0]
 80037aa:	009b      	lsls	r3, r3, #2
 80037ac:	441a      	add	r2, r3
 80037ae:	893b      	ldrh	r3, [r7, #8]
 80037b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80037b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80037b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80037bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80037c0:	b29b      	uxth	r3, r3
 80037c2:	8013      	strh	r3, [r2, #0]
 80037c4:	e27f      	b.n	8003cc6 <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80037c6:	687a      	ldr	r2, [r7, #4]
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	781b      	ldrb	r3, [r3, #0]
 80037cc:	009b      	lsls	r3, r3, #2
 80037ce:	4413      	add	r3, r2
 80037d0:	881b      	ldrh	r3, [r3, #0]
 80037d2:	b29b      	uxth	r3, r3
 80037d4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80037d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80037dc:	817b      	strh	r3, [r7, #10]
 80037de:	687a      	ldr	r2, [r7, #4]
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	781b      	ldrb	r3, [r3, #0]
 80037e4:	009b      	lsls	r3, r3, #2
 80037e6:	441a      	add	r2, r3
 80037e8:	897b      	ldrh	r3, [r7, #10]
 80037ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80037ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80037f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80037f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80037fa:	b29b      	uxth	r3, r3
 80037fc:	8013      	strh	r3, [r2, #0]
 80037fe:	e262      	b.n	8003cc6 <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800380a:	b29b      	uxth	r3, r3
 800380c:	461a      	mov	r2, r3
 800380e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003810:	4413      	add	r3, r2
 8003812:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	781b      	ldrb	r3, [r3, #0]
 8003818:	011a      	lsls	r2, r3, #4
 800381a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800381c:	4413      	add	r3, r2
 800381e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8003822:	62bb      	str	r3, [r7, #40]	; 0x28
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	88db      	ldrh	r3, [r3, #6]
 8003828:	085b      	lsrs	r3, r3, #1
 800382a:	b29b      	uxth	r3, r3
 800382c:	005b      	lsls	r3, r3, #1
 800382e:	b29a      	uxth	r2, r3
 8003830:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003832:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	627b      	str	r3, [r7, #36]	; 0x24
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800383e:	b29b      	uxth	r3, r3
 8003840:	461a      	mov	r2, r3
 8003842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003844:	4413      	add	r3, r2
 8003846:	627b      	str	r3, [r7, #36]	; 0x24
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	781b      	ldrb	r3, [r3, #0]
 800384c:	011a      	lsls	r2, r3, #4
 800384e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003850:	4413      	add	r3, r2
 8003852:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003856:	623b      	str	r3, [r7, #32]
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	691b      	ldr	r3, [r3, #16]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d112      	bne.n	8003886 <USB_ActivateEndpoint+0x286>
 8003860:	6a3b      	ldr	r3, [r7, #32]
 8003862:	881b      	ldrh	r3, [r3, #0]
 8003864:	b29b      	uxth	r3, r3
 8003866:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800386a:	b29a      	uxth	r2, r3
 800386c:	6a3b      	ldr	r3, [r7, #32]
 800386e:	801a      	strh	r2, [r3, #0]
 8003870:	6a3b      	ldr	r3, [r7, #32]
 8003872:	881b      	ldrh	r3, [r3, #0]
 8003874:	b29b      	uxth	r3, r3
 8003876:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800387a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800387e:	b29a      	uxth	r2, r3
 8003880:	6a3b      	ldr	r3, [r7, #32]
 8003882:	801a      	strh	r2, [r3, #0]
 8003884:	e02f      	b.n	80038e6 <USB_ActivateEndpoint+0x2e6>
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	691b      	ldr	r3, [r3, #16]
 800388a:	2b3e      	cmp	r3, #62	; 0x3e
 800388c:	d813      	bhi.n	80038b6 <USB_ActivateEndpoint+0x2b6>
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	691b      	ldr	r3, [r3, #16]
 8003892:	085b      	lsrs	r3, r3, #1
 8003894:	663b      	str	r3, [r7, #96]	; 0x60
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	691b      	ldr	r3, [r3, #16]
 800389a:	f003 0301 	and.w	r3, r3, #1
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d002      	beq.n	80038a8 <USB_ActivateEndpoint+0x2a8>
 80038a2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80038a4:	3301      	adds	r3, #1
 80038a6:	663b      	str	r3, [r7, #96]	; 0x60
 80038a8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80038aa:	b29b      	uxth	r3, r3
 80038ac:	029b      	lsls	r3, r3, #10
 80038ae:	b29a      	uxth	r2, r3
 80038b0:	6a3b      	ldr	r3, [r7, #32]
 80038b2:	801a      	strh	r2, [r3, #0]
 80038b4:	e017      	b.n	80038e6 <USB_ActivateEndpoint+0x2e6>
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	691b      	ldr	r3, [r3, #16]
 80038ba:	095b      	lsrs	r3, r3, #5
 80038bc:	663b      	str	r3, [r7, #96]	; 0x60
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	691b      	ldr	r3, [r3, #16]
 80038c2:	f003 031f 	and.w	r3, r3, #31
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d102      	bne.n	80038d0 <USB_ActivateEndpoint+0x2d0>
 80038ca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80038cc:	3b01      	subs	r3, #1
 80038ce:	663b      	str	r3, [r7, #96]	; 0x60
 80038d0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80038d2:	b29b      	uxth	r3, r3
 80038d4:	029b      	lsls	r3, r3, #10
 80038d6:	b29b      	uxth	r3, r3
 80038d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80038dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80038e0:	b29a      	uxth	r2, r3
 80038e2:	6a3b      	ldr	r3, [r7, #32]
 80038e4:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80038e6:	687a      	ldr	r2, [r7, #4]
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	781b      	ldrb	r3, [r3, #0]
 80038ec:	009b      	lsls	r3, r3, #2
 80038ee:	4413      	add	r3, r2
 80038f0:	881b      	ldrh	r3, [r3, #0]
 80038f2:	83fb      	strh	r3, [r7, #30]
 80038f4:	8bfb      	ldrh	r3, [r7, #30]
 80038f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d01b      	beq.n	8003936 <USB_ActivateEndpoint+0x336>
 80038fe:	687a      	ldr	r2, [r7, #4]
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	781b      	ldrb	r3, [r3, #0]
 8003904:	009b      	lsls	r3, r3, #2
 8003906:	4413      	add	r3, r2
 8003908:	881b      	ldrh	r3, [r3, #0]
 800390a:	b29b      	uxth	r3, r3
 800390c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003910:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003914:	83bb      	strh	r3, [r7, #28]
 8003916:	687a      	ldr	r2, [r7, #4]
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	781b      	ldrb	r3, [r3, #0]
 800391c:	009b      	lsls	r3, r3, #2
 800391e:	441a      	add	r2, r3
 8003920:	8bbb      	ldrh	r3, [r7, #28]
 8003922:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003926:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800392a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800392e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003932:	b29b      	uxth	r3, r3
 8003934:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003936:	687a      	ldr	r2, [r7, #4]
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	781b      	ldrb	r3, [r3, #0]
 800393c:	009b      	lsls	r3, r3, #2
 800393e:	4413      	add	r3, r2
 8003940:	881b      	ldrh	r3, [r3, #0]
 8003942:	b29b      	uxth	r3, r3
 8003944:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003948:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800394c:	837b      	strh	r3, [r7, #26]
 800394e:	8b7b      	ldrh	r3, [r7, #26]
 8003950:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003954:	837b      	strh	r3, [r7, #26]
 8003956:	8b7b      	ldrh	r3, [r7, #26]
 8003958:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800395c:	837b      	strh	r3, [r7, #26]
 800395e:	687a      	ldr	r2, [r7, #4]
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	781b      	ldrb	r3, [r3, #0]
 8003964:	009b      	lsls	r3, r3, #2
 8003966:	441a      	add	r2, r3
 8003968:	8b7b      	ldrh	r3, [r7, #26]
 800396a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800396e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003972:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003976:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800397a:	b29b      	uxth	r3, r3
 800397c:	8013      	strh	r3, [r2, #0]
 800397e:	e1a2      	b.n	8003cc6 <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8003980:	687a      	ldr	r2, [r7, #4]
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	781b      	ldrb	r3, [r3, #0]
 8003986:	009b      	lsls	r3, r3, #2
 8003988:	4413      	add	r3, r2
 800398a:	881b      	ldrh	r3, [r3, #0]
 800398c:	b29b      	uxth	r3, r3
 800398e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003992:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003996:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 800399a:	687a      	ldr	r2, [r7, #4]
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	781b      	ldrb	r3, [r3, #0]
 80039a0:	009b      	lsls	r3, r3, #2
 80039a2:	441a      	add	r2, r3
 80039a4:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80039a8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80039ac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80039b0:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80039b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80039b8:	b29b      	uxth	r3, r3
 80039ba:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	65bb      	str	r3, [r7, #88]	; 0x58
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80039c6:	b29b      	uxth	r3, r3
 80039c8:	461a      	mov	r2, r3
 80039ca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80039cc:	4413      	add	r3, r2
 80039ce:	65bb      	str	r3, [r7, #88]	; 0x58
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	781b      	ldrb	r3, [r3, #0]
 80039d4:	011a      	lsls	r2, r3, #4
 80039d6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80039d8:	4413      	add	r3, r2
 80039da:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80039de:	657b      	str	r3, [r7, #84]	; 0x54
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	891b      	ldrh	r3, [r3, #8]
 80039e4:	085b      	lsrs	r3, r3, #1
 80039e6:	b29b      	uxth	r3, r3
 80039e8:	005b      	lsls	r3, r3, #1
 80039ea:	b29a      	uxth	r2, r3
 80039ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80039ee:	801a      	strh	r2, [r3, #0]
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	653b      	str	r3, [r7, #80]	; 0x50
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80039fa:	b29b      	uxth	r3, r3
 80039fc:	461a      	mov	r2, r3
 80039fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a00:	4413      	add	r3, r2
 8003a02:	653b      	str	r3, [r7, #80]	; 0x50
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	781b      	ldrb	r3, [r3, #0]
 8003a08:	011a      	lsls	r2, r3, #4
 8003a0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a0c:	4413      	add	r3, r2
 8003a0e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8003a12:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	895b      	ldrh	r3, [r3, #10]
 8003a18:	085b      	lsrs	r3, r3, #1
 8003a1a:	b29b      	uxth	r3, r3
 8003a1c:	005b      	lsls	r3, r3, #1
 8003a1e:	b29a      	uxth	r2, r3
 8003a20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a22:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	785b      	ldrb	r3, [r3, #1]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	f040 8091 	bne.w	8003b50 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003a2e:	687a      	ldr	r2, [r7, #4]
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	781b      	ldrb	r3, [r3, #0]
 8003a34:	009b      	lsls	r3, r3, #2
 8003a36:	4413      	add	r3, r2
 8003a38:	881b      	ldrh	r3, [r3, #0]
 8003a3a:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8003a3c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8003a3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d01b      	beq.n	8003a7e <USB_ActivateEndpoint+0x47e>
 8003a46:	687a      	ldr	r2, [r7, #4]
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	781b      	ldrb	r3, [r3, #0]
 8003a4c:	009b      	lsls	r3, r3, #2
 8003a4e:	4413      	add	r3, r2
 8003a50:	881b      	ldrh	r3, [r3, #0]
 8003a52:	b29b      	uxth	r3, r3
 8003a54:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a5c:	877b      	strh	r3, [r7, #58]	; 0x3a
 8003a5e:	687a      	ldr	r2, [r7, #4]
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	781b      	ldrb	r3, [r3, #0]
 8003a64:	009b      	lsls	r3, r3, #2
 8003a66:	441a      	add	r2, r3
 8003a68:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8003a6a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003a6e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003a72:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003a76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a7a:	b29b      	uxth	r3, r3
 8003a7c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003a7e:	687a      	ldr	r2, [r7, #4]
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	781b      	ldrb	r3, [r3, #0]
 8003a84:	009b      	lsls	r3, r3, #2
 8003a86:	4413      	add	r3, r2
 8003a88:	881b      	ldrh	r3, [r3, #0]
 8003a8a:	873b      	strh	r3, [r7, #56]	; 0x38
 8003a8c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8003a8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d01b      	beq.n	8003ace <USB_ActivateEndpoint+0x4ce>
 8003a96:	687a      	ldr	r2, [r7, #4]
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	781b      	ldrb	r3, [r3, #0]
 8003a9c:	009b      	lsls	r3, r3, #2
 8003a9e:	4413      	add	r3, r2
 8003aa0:	881b      	ldrh	r3, [r3, #0]
 8003aa2:	b29b      	uxth	r3, r3
 8003aa4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003aa8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003aac:	86fb      	strh	r3, [r7, #54]	; 0x36
 8003aae:	687a      	ldr	r2, [r7, #4]
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	781b      	ldrb	r3, [r3, #0]
 8003ab4:	009b      	lsls	r3, r3, #2
 8003ab6:	441a      	add	r2, r3
 8003ab8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003aba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003abe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003ac2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ac6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003aca:	b29b      	uxth	r3, r3
 8003acc:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003ace:	687a      	ldr	r2, [r7, #4]
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	781b      	ldrb	r3, [r3, #0]
 8003ad4:	009b      	lsls	r3, r3, #2
 8003ad6:	4413      	add	r3, r2
 8003ad8:	881b      	ldrh	r3, [r3, #0]
 8003ada:	b29b      	uxth	r3, r3
 8003adc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003ae0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ae4:	86bb      	strh	r3, [r7, #52]	; 0x34
 8003ae6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8003ae8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003aec:	86bb      	strh	r3, [r7, #52]	; 0x34
 8003aee:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8003af0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003af4:	86bb      	strh	r3, [r7, #52]	; 0x34
 8003af6:	687a      	ldr	r2, [r7, #4]
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	781b      	ldrb	r3, [r3, #0]
 8003afc:	009b      	lsls	r3, r3, #2
 8003afe:	441a      	add	r2, r3
 8003b00:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8003b02:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003b06:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003b0a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b12:	b29b      	uxth	r3, r3
 8003b14:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003b16:	687a      	ldr	r2, [r7, #4]
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	781b      	ldrb	r3, [r3, #0]
 8003b1c:	009b      	lsls	r3, r3, #2
 8003b1e:	4413      	add	r3, r2
 8003b20:	881b      	ldrh	r3, [r3, #0]
 8003b22:	b29b      	uxth	r3, r3
 8003b24:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b28:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b2c:	867b      	strh	r3, [r7, #50]	; 0x32
 8003b2e:	687a      	ldr	r2, [r7, #4]
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	781b      	ldrb	r3, [r3, #0]
 8003b34:	009b      	lsls	r3, r3, #2
 8003b36:	441a      	add	r2, r3
 8003b38:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8003b3a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003b3e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003b42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b4a:	b29b      	uxth	r3, r3
 8003b4c:	8013      	strh	r3, [r2, #0]
 8003b4e:	e0ba      	b.n	8003cc6 <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003b50:	687a      	ldr	r2, [r7, #4]
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	781b      	ldrb	r3, [r3, #0]
 8003b56:	009b      	lsls	r3, r3, #2
 8003b58:	4413      	add	r3, r2
 8003b5a:	881b      	ldrh	r3, [r3, #0]
 8003b5c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8003b60:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003b64:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d01d      	beq.n	8003ba8 <USB_ActivateEndpoint+0x5a8>
 8003b6c:	687a      	ldr	r2, [r7, #4]
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	781b      	ldrb	r3, [r3, #0]
 8003b72:	009b      	lsls	r3, r3, #2
 8003b74:	4413      	add	r3, r2
 8003b76:	881b      	ldrh	r3, [r3, #0]
 8003b78:	b29b      	uxth	r3, r3
 8003b7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b82:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8003b86:	687a      	ldr	r2, [r7, #4]
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	781b      	ldrb	r3, [r3, #0]
 8003b8c:	009b      	lsls	r3, r3, #2
 8003b8e:	441a      	add	r2, r3
 8003b90:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003b94:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003b98:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003b9c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003ba0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ba4:	b29b      	uxth	r3, r3
 8003ba6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003ba8:	687a      	ldr	r2, [r7, #4]
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	781b      	ldrb	r3, [r3, #0]
 8003bae:	009b      	lsls	r3, r3, #2
 8003bb0:	4413      	add	r3, r2
 8003bb2:	881b      	ldrh	r3, [r3, #0]
 8003bb4:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8003bb8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8003bbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d01d      	beq.n	8003c00 <USB_ActivateEndpoint+0x600>
 8003bc4:	687a      	ldr	r2, [r7, #4]
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	781b      	ldrb	r3, [r3, #0]
 8003bca:	009b      	lsls	r3, r3, #2
 8003bcc:	4413      	add	r3, r2
 8003bce:	881b      	ldrh	r3, [r3, #0]
 8003bd0:	b29b      	uxth	r3, r3
 8003bd2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003bd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bda:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8003bde:	687a      	ldr	r2, [r7, #4]
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	781b      	ldrb	r3, [r3, #0]
 8003be4:	009b      	lsls	r3, r3, #2
 8003be6:	441a      	add	r2, r3
 8003be8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003bec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003bf0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003bf4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003bf8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003bfc:	b29b      	uxth	r3, r3
 8003bfe:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	78db      	ldrb	r3, [r3, #3]
 8003c04:	2b01      	cmp	r3, #1
 8003c06:	d024      	beq.n	8003c52 <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003c08:	687a      	ldr	r2, [r7, #4]
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	781b      	ldrb	r3, [r3, #0]
 8003c0e:	009b      	lsls	r3, r3, #2
 8003c10:	4413      	add	r3, r2
 8003c12:	881b      	ldrh	r3, [r3, #0]
 8003c14:	b29b      	uxth	r3, r3
 8003c16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c1a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c1e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8003c22:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003c26:	f083 0320 	eor.w	r3, r3, #32
 8003c2a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8003c2e:	687a      	ldr	r2, [r7, #4]
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	781b      	ldrb	r3, [r3, #0]
 8003c34:	009b      	lsls	r3, r3, #2
 8003c36:	441a      	add	r2, r3
 8003c38:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003c3c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003c40:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003c44:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c4c:	b29b      	uxth	r3, r3
 8003c4e:	8013      	strh	r3, [r2, #0]
 8003c50:	e01d      	b.n	8003c8e <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003c52:	687a      	ldr	r2, [r7, #4]
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	781b      	ldrb	r3, [r3, #0]
 8003c58:	009b      	lsls	r3, r3, #2
 8003c5a:	4413      	add	r3, r2
 8003c5c:	881b      	ldrh	r3, [r3, #0]
 8003c5e:	b29b      	uxth	r3, r3
 8003c60:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c64:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c68:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8003c6c:	687a      	ldr	r2, [r7, #4]
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	781b      	ldrb	r3, [r3, #0]
 8003c72:	009b      	lsls	r3, r3, #2
 8003c74:	441a      	add	r2, r3
 8003c76:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8003c7a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003c7e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003c82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c8a:	b29b      	uxth	r3, r3
 8003c8c:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003c8e:	687a      	ldr	r2, [r7, #4]
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	781b      	ldrb	r3, [r3, #0]
 8003c94:	009b      	lsls	r3, r3, #2
 8003c96:	4413      	add	r3, r2
 8003c98:	881b      	ldrh	r3, [r3, #0]
 8003c9a:	b29b      	uxth	r3, r3
 8003c9c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003ca0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ca4:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8003ca6:	687a      	ldr	r2, [r7, #4]
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	781b      	ldrb	r3, [r3, #0]
 8003cac:	009b      	lsls	r3, r3, #2
 8003cae:	441a      	add	r2, r3
 8003cb0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8003cb2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003cb6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003cba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003cbe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003cc2:	b29b      	uxth	r3, r3
 8003cc4:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8003cc6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8003cca:	4618      	mov	r0, r3
 8003ccc:	376c      	adds	r7, #108	; 0x6c
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	bc80      	pop	{r7}
 8003cd2:	4770      	bx	lr

08003cd4 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003cd4:	b480      	push	{r7}
 8003cd6:	b08d      	sub	sp, #52	; 0x34
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
 8003cdc:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	7b1b      	ldrb	r3, [r3, #12]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	f040 808e 	bne.w	8003e04 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	785b      	ldrb	r3, [r3, #1]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d044      	beq.n	8003d7a <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003cf0:	687a      	ldr	r2, [r7, #4]
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	781b      	ldrb	r3, [r3, #0]
 8003cf6:	009b      	lsls	r3, r3, #2
 8003cf8:	4413      	add	r3, r2
 8003cfa:	881b      	ldrh	r3, [r3, #0]
 8003cfc:	81bb      	strh	r3, [r7, #12]
 8003cfe:	89bb      	ldrh	r3, [r7, #12]
 8003d00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d01b      	beq.n	8003d40 <USB_DeactivateEndpoint+0x6c>
 8003d08:	687a      	ldr	r2, [r7, #4]
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	781b      	ldrb	r3, [r3, #0]
 8003d0e:	009b      	lsls	r3, r3, #2
 8003d10:	4413      	add	r3, r2
 8003d12:	881b      	ldrh	r3, [r3, #0]
 8003d14:	b29b      	uxth	r3, r3
 8003d16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d1e:	817b      	strh	r3, [r7, #10]
 8003d20:	687a      	ldr	r2, [r7, #4]
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	781b      	ldrb	r3, [r3, #0]
 8003d26:	009b      	lsls	r3, r3, #2
 8003d28:	441a      	add	r2, r3
 8003d2a:	897b      	ldrh	r3, [r7, #10]
 8003d2c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003d30:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003d34:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d38:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003d3c:	b29b      	uxth	r3, r3
 8003d3e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003d40:	687a      	ldr	r2, [r7, #4]
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	781b      	ldrb	r3, [r3, #0]
 8003d46:	009b      	lsls	r3, r3, #2
 8003d48:	4413      	add	r3, r2
 8003d4a:	881b      	ldrh	r3, [r3, #0]
 8003d4c:	b29b      	uxth	r3, r3
 8003d4e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d52:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d56:	813b      	strh	r3, [r7, #8]
 8003d58:	687a      	ldr	r2, [r7, #4]
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	781b      	ldrb	r3, [r3, #0]
 8003d5e:	009b      	lsls	r3, r3, #2
 8003d60:	441a      	add	r2, r3
 8003d62:	893b      	ldrh	r3, [r7, #8]
 8003d64:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003d68:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003d6c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d74:	b29b      	uxth	r3, r3
 8003d76:	8013      	strh	r3, [r2, #0]
 8003d78:	e192      	b.n	80040a0 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003d7a:	687a      	ldr	r2, [r7, #4]
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	781b      	ldrb	r3, [r3, #0]
 8003d80:	009b      	lsls	r3, r3, #2
 8003d82:	4413      	add	r3, r2
 8003d84:	881b      	ldrh	r3, [r3, #0]
 8003d86:	827b      	strh	r3, [r7, #18]
 8003d88:	8a7b      	ldrh	r3, [r7, #18]
 8003d8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d01b      	beq.n	8003dca <USB_DeactivateEndpoint+0xf6>
 8003d92:	687a      	ldr	r2, [r7, #4]
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	781b      	ldrb	r3, [r3, #0]
 8003d98:	009b      	lsls	r3, r3, #2
 8003d9a:	4413      	add	r3, r2
 8003d9c:	881b      	ldrh	r3, [r3, #0]
 8003d9e:	b29b      	uxth	r3, r3
 8003da0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003da4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003da8:	823b      	strh	r3, [r7, #16]
 8003daa:	687a      	ldr	r2, [r7, #4]
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	781b      	ldrb	r3, [r3, #0]
 8003db0:	009b      	lsls	r3, r3, #2
 8003db2:	441a      	add	r2, r3
 8003db4:	8a3b      	ldrh	r3, [r7, #16]
 8003db6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003dba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003dbe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003dc2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003dc6:	b29b      	uxth	r3, r3
 8003dc8:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003dca:	687a      	ldr	r2, [r7, #4]
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	781b      	ldrb	r3, [r3, #0]
 8003dd0:	009b      	lsls	r3, r3, #2
 8003dd2:	4413      	add	r3, r2
 8003dd4:	881b      	ldrh	r3, [r3, #0]
 8003dd6:	b29b      	uxth	r3, r3
 8003dd8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003ddc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003de0:	81fb      	strh	r3, [r7, #14]
 8003de2:	687a      	ldr	r2, [r7, #4]
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	781b      	ldrb	r3, [r3, #0]
 8003de8:	009b      	lsls	r3, r3, #2
 8003dea:	441a      	add	r2, r3
 8003dec:	89fb      	ldrh	r3, [r7, #14]
 8003dee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003df2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003df6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003dfa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003dfe:	b29b      	uxth	r3, r3
 8003e00:	8013      	strh	r3, [r2, #0]
 8003e02:	e14d      	b.n	80040a0 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	785b      	ldrb	r3, [r3, #1]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	f040 80a5 	bne.w	8003f58 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003e0e:	687a      	ldr	r2, [r7, #4]
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	781b      	ldrb	r3, [r3, #0]
 8003e14:	009b      	lsls	r3, r3, #2
 8003e16:	4413      	add	r3, r2
 8003e18:	881b      	ldrh	r3, [r3, #0]
 8003e1a:	843b      	strh	r3, [r7, #32]
 8003e1c:	8c3b      	ldrh	r3, [r7, #32]
 8003e1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d01b      	beq.n	8003e5e <USB_DeactivateEndpoint+0x18a>
 8003e26:	687a      	ldr	r2, [r7, #4]
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	781b      	ldrb	r3, [r3, #0]
 8003e2c:	009b      	lsls	r3, r3, #2
 8003e2e:	4413      	add	r3, r2
 8003e30:	881b      	ldrh	r3, [r3, #0]
 8003e32:	b29b      	uxth	r3, r3
 8003e34:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e3c:	83fb      	strh	r3, [r7, #30]
 8003e3e:	687a      	ldr	r2, [r7, #4]
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	781b      	ldrb	r3, [r3, #0]
 8003e44:	009b      	lsls	r3, r3, #2
 8003e46:	441a      	add	r2, r3
 8003e48:	8bfb      	ldrh	r3, [r7, #30]
 8003e4a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003e4e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003e52:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003e56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e5a:	b29b      	uxth	r3, r3
 8003e5c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003e5e:	687a      	ldr	r2, [r7, #4]
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	781b      	ldrb	r3, [r3, #0]
 8003e64:	009b      	lsls	r3, r3, #2
 8003e66:	4413      	add	r3, r2
 8003e68:	881b      	ldrh	r3, [r3, #0]
 8003e6a:	83bb      	strh	r3, [r7, #28]
 8003e6c:	8bbb      	ldrh	r3, [r7, #28]
 8003e6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d01b      	beq.n	8003eae <USB_DeactivateEndpoint+0x1da>
 8003e76:	687a      	ldr	r2, [r7, #4]
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	781b      	ldrb	r3, [r3, #0]
 8003e7c:	009b      	lsls	r3, r3, #2
 8003e7e:	4413      	add	r3, r2
 8003e80:	881b      	ldrh	r3, [r3, #0]
 8003e82:	b29b      	uxth	r3, r3
 8003e84:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e8c:	837b      	strh	r3, [r7, #26]
 8003e8e:	687a      	ldr	r2, [r7, #4]
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	781b      	ldrb	r3, [r3, #0]
 8003e94:	009b      	lsls	r3, r3, #2
 8003e96:	441a      	add	r2, r3
 8003e98:	8b7b      	ldrh	r3, [r7, #26]
 8003e9a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003e9e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003ea2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ea6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003eaa:	b29b      	uxth	r3, r3
 8003eac:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8003eae:	687a      	ldr	r2, [r7, #4]
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	781b      	ldrb	r3, [r3, #0]
 8003eb4:	009b      	lsls	r3, r3, #2
 8003eb6:	4413      	add	r3, r2
 8003eb8:	881b      	ldrh	r3, [r3, #0]
 8003eba:	b29b      	uxth	r3, r3
 8003ebc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ec0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ec4:	833b      	strh	r3, [r7, #24]
 8003ec6:	687a      	ldr	r2, [r7, #4]
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	781b      	ldrb	r3, [r3, #0]
 8003ecc:	009b      	lsls	r3, r3, #2
 8003ece:	441a      	add	r2, r3
 8003ed0:	8b3b      	ldrh	r3, [r7, #24]
 8003ed2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003ed6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003eda:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ede:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003ee2:	b29b      	uxth	r3, r3
 8003ee4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003ee6:	687a      	ldr	r2, [r7, #4]
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	781b      	ldrb	r3, [r3, #0]
 8003eec:	009b      	lsls	r3, r3, #2
 8003eee:	4413      	add	r3, r2
 8003ef0:	881b      	ldrh	r3, [r3, #0]
 8003ef2:	b29b      	uxth	r3, r3
 8003ef4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003ef8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003efc:	82fb      	strh	r3, [r7, #22]
 8003efe:	687a      	ldr	r2, [r7, #4]
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	781b      	ldrb	r3, [r3, #0]
 8003f04:	009b      	lsls	r3, r3, #2
 8003f06:	441a      	add	r2, r3
 8003f08:	8afb      	ldrh	r3, [r7, #22]
 8003f0a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003f0e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003f12:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f1a:	b29b      	uxth	r3, r3
 8003f1c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003f1e:	687a      	ldr	r2, [r7, #4]
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	781b      	ldrb	r3, [r3, #0]
 8003f24:	009b      	lsls	r3, r3, #2
 8003f26:	4413      	add	r3, r2
 8003f28:	881b      	ldrh	r3, [r3, #0]
 8003f2a:	b29b      	uxth	r3, r3
 8003f2c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f30:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f34:	82bb      	strh	r3, [r7, #20]
 8003f36:	687a      	ldr	r2, [r7, #4]
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	781b      	ldrb	r3, [r3, #0]
 8003f3c:	009b      	lsls	r3, r3, #2
 8003f3e:	441a      	add	r2, r3
 8003f40:	8abb      	ldrh	r3, [r7, #20]
 8003f42:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003f46:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003f4a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f52:	b29b      	uxth	r3, r3
 8003f54:	8013      	strh	r3, [r2, #0]
 8003f56:	e0a3      	b.n	80040a0 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003f58:	687a      	ldr	r2, [r7, #4]
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	781b      	ldrb	r3, [r3, #0]
 8003f5e:	009b      	lsls	r3, r3, #2
 8003f60:	4413      	add	r3, r2
 8003f62:	881b      	ldrh	r3, [r3, #0]
 8003f64:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8003f66:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003f68:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d01b      	beq.n	8003fa8 <USB_DeactivateEndpoint+0x2d4>
 8003f70:	687a      	ldr	r2, [r7, #4]
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	781b      	ldrb	r3, [r3, #0]
 8003f76:	009b      	lsls	r3, r3, #2
 8003f78:	4413      	add	r3, r2
 8003f7a:	881b      	ldrh	r3, [r3, #0]
 8003f7c:	b29b      	uxth	r3, r3
 8003f7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f86:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8003f88:	687a      	ldr	r2, [r7, #4]
 8003f8a:	683b      	ldr	r3, [r7, #0]
 8003f8c:	781b      	ldrb	r3, [r3, #0]
 8003f8e:	009b      	lsls	r3, r3, #2
 8003f90:	441a      	add	r2, r3
 8003f92:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8003f94:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003f98:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003f9c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003fa0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003fa4:	b29b      	uxth	r3, r3
 8003fa6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003fa8:	687a      	ldr	r2, [r7, #4]
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	781b      	ldrb	r3, [r3, #0]
 8003fae:	009b      	lsls	r3, r3, #2
 8003fb0:	4413      	add	r3, r2
 8003fb2:	881b      	ldrh	r3, [r3, #0]
 8003fb4:	857b      	strh	r3, [r7, #42]	; 0x2a
 8003fb6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003fb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d01b      	beq.n	8003ff8 <USB_DeactivateEndpoint+0x324>
 8003fc0:	687a      	ldr	r2, [r7, #4]
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	781b      	ldrb	r3, [r3, #0]
 8003fc6:	009b      	lsls	r3, r3, #2
 8003fc8:	4413      	add	r3, r2
 8003fca:	881b      	ldrh	r3, [r3, #0]
 8003fcc:	b29b      	uxth	r3, r3
 8003fce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003fd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fd6:	853b      	strh	r3, [r7, #40]	; 0x28
 8003fd8:	687a      	ldr	r2, [r7, #4]
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	781b      	ldrb	r3, [r3, #0]
 8003fde:	009b      	lsls	r3, r3, #2
 8003fe0:	441a      	add	r2, r3
 8003fe2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003fe4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003fe8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003fec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ff0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003ff4:	b29b      	uxth	r3, r3
 8003ff6:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8003ff8:	687a      	ldr	r2, [r7, #4]
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	781b      	ldrb	r3, [r3, #0]
 8003ffe:	009b      	lsls	r3, r3, #2
 8004000:	4413      	add	r3, r2
 8004002:	881b      	ldrh	r3, [r3, #0]
 8004004:	b29b      	uxth	r3, r3
 8004006:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800400a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800400e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004010:	687a      	ldr	r2, [r7, #4]
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	781b      	ldrb	r3, [r3, #0]
 8004016:	009b      	lsls	r3, r3, #2
 8004018:	441a      	add	r2, r3
 800401a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800401c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004020:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004024:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004028:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800402c:	b29b      	uxth	r3, r3
 800402e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004030:	687a      	ldr	r2, [r7, #4]
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	781b      	ldrb	r3, [r3, #0]
 8004036:	009b      	lsls	r3, r3, #2
 8004038:	4413      	add	r3, r2
 800403a:	881b      	ldrh	r3, [r3, #0]
 800403c:	b29b      	uxth	r3, r3
 800403e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004042:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004046:	84bb      	strh	r3, [r7, #36]	; 0x24
 8004048:	687a      	ldr	r2, [r7, #4]
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	781b      	ldrb	r3, [r3, #0]
 800404e:	009b      	lsls	r3, r3, #2
 8004050:	441a      	add	r2, r3
 8004052:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004054:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004058:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800405c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004060:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004064:	b29b      	uxth	r3, r3
 8004066:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004068:	687a      	ldr	r2, [r7, #4]
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	781b      	ldrb	r3, [r3, #0]
 800406e:	009b      	lsls	r3, r3, #2
 8004070:	4413      	add	r3, r2
 8004072:	881b      	ldrh	r3, [r3, #0]
 8004074:	b29b      	uxth	r3, r3
 8004076:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800407a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800407e:	847b      	strh	r3, [r7, #34]	; 0x22
 8004080:	687a      	ldr	r2, [r7, #4]
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	781b      	ldrb	r3, [r3, #0]
 8004086:	009b      	lsls	r3, r3, #2
 8004088:	441a      	add	r2, r3
 800408a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800408c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004090:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004094:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004098:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800409c:	b29b      	uxth	r3, r3
 800409e:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80040a0:	2300      	movs	r3, #0
}
 80040a2:	4618      	mov	r0, r3
 80040a4:	3734      	adds	r7, #52	; 0x34
 80040a6:	46bd      	mov	sp, r7
 80040a8:	bc80      	pop	{r7}
 80040aa:	4770      	bx	lr

080040ac <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b0cc      	sub	sp, #304	; 0x130
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80040b6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80040ba:	6018      	str	r0, [r3, #0]
 80040bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80040c0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80040c4:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80040c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80040ca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	785b      	ldrb	r3, [r3, #1]
 80040d2:	2b01      	cmp	r3, #1
 80040d4:	f041 817d 	bne.w	80053d2 <USB_EPStartXfer+0x1326>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80040d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80040dc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	699a      	ldr	r2, [r3, #24]
 80040e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80040e8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	691b      	ldr	r3, [r3, #16]
 80040f0:	429a      	cmp	r2, r3
 80040f2:	d908      	bls.n	8004106 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 80040f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80040f8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	691b      	ldr	r3, [r3, #16]
 8004100:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8004104:	e007      	b.n	8004116 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8004106:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800410a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	699b      	ldr	r3, [r3, #24]
 8004112:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8004116:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800411a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	7b1b      	ldrb	r3, [r3, #12]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d152      	bne.n	80041cc <USB_EPStartXfer+0x120>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8004126:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800412a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	6959      	ldr	r1, [r3, #20]
 8004132:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004136:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	88da      	ldrh	r2, [r3, #6]
 800413e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004142:	b29b      	uxth	r3, r3
 8004144:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8004148:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800414c:	6800      	ldr	r0, [r0, #0]
 800414e:	f001 ff23 	bl	8005f98 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004152:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004156:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800415a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800415e:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8004162:	6812      	ldr	r2, [r2, #0]
 8004164:	601a      	str	r2, [r3, #0]
 8004166:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800416a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004174:	b29b      	uxth	r3, r3
 8004176:	4619      	mov	r1, r3
 8004178:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800417c:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004180:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004184:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 8004188:	6812      	ldr	r2, [r2, #0]
 800418a:	440a      	add	r2, r1
 800418c:	601a      	str	r2, [r3, #0]
 800418e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004192:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	781b      	ldrb	r3, [r3, #0]
 800419a:	011a      	lsls	r2, r3, #4
 800419c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80041a0:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	4413      	add	r3, r2
 80041a8:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80041ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80041b0:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80041b4:	601a      	str	r2, [r3, #0]
 80041b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80041ba:	b29a      	uxth	r2, r3
 80041bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80041c0:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	801a      	strh	r2, [r3, #0]
 80041c8:	f001 b8b5 	b.w	8005336 <USB_EPStartXfer+0x128a>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80041cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80041d0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	78db      	ldrb	r3, [r3, #3]
 80041d8:	2b02      	cmp	r3, #2
 80041da:	f040 84c6 	bne.w	8004b6a <USB_EPStartXfer+0xabe>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80041de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80041e2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	6a1a      	ldr	r2, [r3, #32]
 80041ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80041ee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	691b      	ldr	r3, [r3, #16]
 80041f6:	429a      	cmp	r2, r3
 80041f8:	f240 8443 	bls.w	8004a82 <USB_EPStartXfer+0x9d6>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 80041fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004200:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004204:	681a      	ldr	r2, [r3, #0]
 8004206:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800420a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	781b      	ldrb	r3, [r3, #0]
 8004212:	009b      	lsls	r3, r3, #2
 8004214:	4413      	add	r3, r2
 8004216:	881b      	ldrh	r3, [r3, #0]
 8004218:	b29b      	uxth	r3, r3
 800421a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800421e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004222:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8004226:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800422a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800422e:	681a      	ldr	r2, [r3, #0]
 8004230:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004234:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	781b      	ldrb	r3, [r3, #0]
 800423c:	009b      	lsls	r3, r3, #2
 800423e:	441a      	add	r2, r3
 8004240:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8004244:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004248:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800424c:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004250:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004254:	b29b      	uxth	r3, r3
 8004256:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8004258:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800425c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	6a1a      	ldr	r2, [r3, #32]
 8004264:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004268:	1ad2      	subs	r2, r2, r3
 800426a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800426e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004276:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800427a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800427e:	681a      	ldr	r2, [r3, #0]
 8004280:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004284:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	781b      	ldrb	r3, [r3, #0]
 800428c:	009b      	lsls	r3, r3, #2
 800428e:	4413      	add	r3, r2
 8004290:	881b      	ldrh	r3, [r3, #0]
 8004292:	b29b      	uxth	r3, r3
 8004294:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004298:	2b00      	cmp	r3, #0
 800429a:	f000 823e 	beq.w	800471a <USB_EPStartXfer+0x66e>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800429e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80042a2:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80042a6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80042aa:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80042ae:	6812      	ldr	r2, [r2, #0]
 80042b0:	601a      	str	r2, [r3, #0]
 80042b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80042b6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	785b      	ldrb	r3, [r3, #1]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	f040 809a 	bne.w	80043f8 <USB_EPStartXfer+0x34c>
 80042c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80042c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80042cc:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80042d0:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80042d4:	6812      	ldr	r2, [r2, #0]
 80042d6:	601a      	str	r2, [r3, #0]
 80042d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80042dc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80042e6:	b29b      	uxth	r3, r3
 80042e8:	4619      	mov	r1, r3
 80042ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80042ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80042f2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80042f6:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 80042fa:	6812      	ldr	r2, [r2, #0]
 80042fc:	440a      	add	r2, r1
 80042fe:	601a      	str	r2, [r3, #0]
 8004300:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004304:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	781b      	ldrb	r3, [r3, #0]
 800430c:	011a      	lsls	r2, r3, #4
 800430e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004312:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	4413      	add	r3, r2
 800431a:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 800431e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004322:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004326:	601a      	str	r2, [r3, #0]
 8004328:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800432c:	2b00      	cmp	r3, #0
 800432e:	d122      	bne.n	8004376 <USB_EPStartXfer+0x2ca>
 8004330:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004334:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	881b      	ldrh	r3, [r3, #0]
 800433c:	b29b      	uxth	r3, r3
 800433e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004342:	b29a      	uxth	r2, r3
 8004344:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004348:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	801a      	strh	r2, [r3, #0]
 8004350:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004354:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	881b      	ldrh	r3, [r3, #0]
 800435c:	b29b      	uxth	r3, r3
 800435e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004362:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004366:	b29a      	uxth	r2, r3
 8004368:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800436c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	801a      	strh	r2, [r3, #0]
 8004374:	e079      	b.n	800446a <USB_EPStartXfer+0x3be>
 8004376:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800437a:	2b3e      	cmp	r3, #62	; 0x3e
 800437c:	d81b      	bhi.n	80043b6 <USB_EPStartXfer+0x30a>
 800437e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004382:	085b      	lsrs	r3, r3, #1
 8004384:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8004388:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800438c:	f003 0301 	and.w	r3, r3, #1
 8004390:	2b00      	cmp	r3, #0
 8004392:	d004      	beq.n	800439e <USB_EPStartXfer+0x2f2>
 8004394:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004398:	3301      	adds	r3, #1
 800439a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800439e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80043a2:	b29b      	uxth	r3, r3
 80043a4:	029b      	lsls	r3, r3, #10
 80043a6:	b29a      	uxth	r2, r3
 80043a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80043ac:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	801a      	strh	r2, [r3, #0]
 80043b4:	e059      	b.n	800446a <USB_EPStartXfer+0x3be>
 80043b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80043ba:	095b      	lsrs	r3, r3, #5
 80043bc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80043c0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80043c4:	f003 031f 	and.w	r3, r3, #31
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d104      	bne.n	80043d6 <USB_EPStartXfer+0x32a>
 80043cc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80043d0:	3b01      	subs	r3, #1
 80043d2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80043d6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80043da:	b29b      	uxth	r3, r3
 80043dc:	029b      	lsls	r3, r3, #10
 80043de:	b29b      	uxth	r3, r3
 80043e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80043e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80043e8:	b29a      	uxth	r2, r3
 80043ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80043ee:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	801a      	strh	r2, [r3, #0]
 80043f6:	e038      	b.n	800446a <USB_EPStartXfer+0x3be>
 80043f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80043fc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	785b      	ldrb	r3, [r3, #1]
 8004404:	2b01      	cmp	r3, #1
 8004406:	d130      	bne.n	800446a <USB_EPStartXfer+0x3be>
 8004408:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800440c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004416:	b29b      	uxth	r3, r3
 8004418:	4619      	mov	r1, r3
 800441a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800441e:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004422:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004426:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 800442a:	6812      	ldr	r2, [r2, #0]
 800442c:	440a      	add	r2, r1
 800442e:	601a      	str	r2, [r3, #0]
 8004430:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004434:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	781b      	ldrb	r3, [r3, #0]
 800443c:	011a      	lsls	r2, r3, #4
 800443e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004442:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	4413      	add	r3, r2
 800444a:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 800444e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004452:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004456:	601a      	str	r2, [r3, #0]
 8004458:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800445c:	b29a      	uxth	r2, r3
 800445e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004462:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800446a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800446e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	895b      	ldrh	r3, [r3, #10]
 8004476:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800447a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800447e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	6959      	ldr	r1, [r3, #20]
 8004486:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800448a:	b29b      	uxth	r3, r3
 800448c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004490:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8004494:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8004498:	6800      	ldr	r0, [r0, #0]
 800449a:	f001 fd7d 	bl	8005f98 <USB_WritePMA>
            ep->xfer_buff += len;
 800449e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80044a2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	695a      	ldr	r2, [r3, #20]
 80044aa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80044ae:	441a      	add	r2, r3
 80044b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80044b4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80044bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80044c0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	6a1a      	ldr	r2, [r3, #32]
 80044c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80044cc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	691b      	ldr	r3, [r3, #16]
 80044d4:	429a      	cmp	r2, r3
 80044d6:	d90f      	bls.n	80044f8 <USB_EPStartXfer+0x44c>
            {
              ep->xfer_len_db -= len;
 80044d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80044dc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	6a1a      	ldr	r2, [r3, #32]
 80044e4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80044e8:	1ad2      	subs	r2, r2, r3
 80044ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80044ee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	621a      	str	r2, [r3, #32]
 80044f6:	e00e      	b.n	8004516 <USB_EPStartXfer+0x46a>
            }
            else
            {
              len = ep->xfer_len_db;
 80044f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80044fc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	6a1b      	ldr	r3, [r3, #32]
 8004504:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8004508:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800450c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	2200      	movs	r2, #0
 8004514:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004516:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800451a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	785b      	ldrb	r3, [r3, #1]
 8004522:	2b00      	cmp	r3, #0
 8004524:	f040 809a 	bne.w	800465c <USB_EPStartXfer+0x5b0>
 8004528:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800452c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004530:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004534:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8004538:	6812      	ldr	r2, [r2, #0]
 800453a:	601a      	str	r2, [r3, #0]
 800453c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004540:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800454a:	b29b      	uxth	r3, r3
 800454c:	4619      	mov	r1, r3
 800454e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004552:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004556:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800455a:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 800455e:	6812      	ldr	r2, [r2, #0]
 8004560:	440a      	add	r2, r1
 8004562:	601a      	str	r2, [r3, #0]
 8004564:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004568:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	781b      	ldrb	r3, [r3, #0]
 8004570:	011a      	lsls	r2, r3, #4
 8004572:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004576:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	4413      	add	r3, r2
 800457e:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8004582:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004586:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800458a:	601a      	str	r2, [r3, #0]
 800458c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004590:	2b00      	cmp	r3, #0
 8004592:	d122      	bne.n	80045da <USB_EPStartXfer+0x52e>
 8004594:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004598:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	881b      	ldrh	r3, [r3, #0]
 80045a0:	b29b      	uxth	r3, r3
 80045a2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80045a6:	b29a      	uxth	r2, r3
 80045a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80045ac:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	801a      	strh	r2, [r3, #0]
 80045b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80045b8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	881b      	ldrh	r3, [r3, #0]
 80045c0:	b29b      	uxth	r3, r3
 80045c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80045c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80045ca:	b29a      	uxth	r2, r3
 80045cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80045d0:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	801a      	strh	r2, [r3, #0]
 80045d8:	e083      	b.n	80046e2 <USB_EPStartXfer+0x636>
 80045da:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80045de:	2b3e      	cmp	r3, #62	; 0x3e
 80045e0:	d81b      	bhi.n	800461a <USB_EPStartXfer+0x56e>
 80045e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80045e6:	085b      	lsrs	r3, r3, #1
 80045e8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80045ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80045f0:	f003 0301 	and.w	r3, r3, #1
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d004      	beq.n	8004602 <USB_EPStartXfer+0x556>
 80045f8:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80045fc:	3301      	adds	r3, #1
 80045fe:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004602:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004606:	b29b      	uxth	r3, r3
 8004608:	029b      	lsls	r3, r3, #10
 800460a:	b29a      	uxth	r2, r3
 800460c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004610:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	801a      	strh	r2, [r3, #0]
 8004618:	e063      	b.n	80046e2 <USB_EPStartXfer+0x636>
 800461a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800461e:	095b      	lsrs	r3, r3, #5
 8004620:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004624:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004628:	f003 031f 	and.w	r3, r3, #31
 800462c:	2b00      	cmp	r3, #0
 800462e:	d104      	bne.n	800463a <USB_EPStartXfer+0x58e>
 8004630:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004634:	3b01      	subs	r3, #1
 8004636:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800463a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800463e:	b29b      	uxth	r3, r3
 8004640:	029b      	lsls	r3, r3, #10
 8004642:	b29b      	uxth	r3, r3
 8004644:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004648:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800464c:	b29a      	uxth	r2, r3
 800464e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004652:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	801a      	strh	r2, [r3, #0]
 800465a:	e042      	b.n	80046e2 <USB_EPStartXfer+0x636>
 800465c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004660:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	785b      	ldrb	r3, [r3, #1]
 8004668:	2b01      	cmp	r3, #1
 800466a:	d13a      	bne.n	80046e2 <USB_EPStartXfer+0x636>
 800466c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004670:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004674:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004678:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800467c:	6812      	ldr	r2, [r2, #0]
 800467e:	601a      	str	r2, [r3, #0]
 8004680:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004684:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800468e:	b29b      	uxth	r3, r3
 8004690:	4619      	mov	r1, r3
 8004692:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004696:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800469a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800469e:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 80046a2:	6812      	ldr	r2, [r2, #0]
 80046a4:	440a      	add	r2, r1
 80046a6:	601a      	str	r2, [r3, #0]
 80046a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80046ac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	781b      	ldrb	r3, [r3, #0]
 80046b4:	011a      	lsls	r2, r3, #4
 80046b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80046ba:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	4413      	add	r3, r2
 80046c2:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80046c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80046ca:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80046ce:	601a      	str	r2, [r3, #0]
 80046d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80046d4:	b29a      	uxth	r2, r3
 80046d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80046da:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80046e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80046e6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	891b      	ldrh	r3, [r3, #8]
 80046ee:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80046f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80046f6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	6959      	ldr	r1, [r3, #20]
 80046fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004702:	b29b      	uxth	r3, r3
 8004704:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004708:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800470c:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8004710:	6800      	ldr	r0, [r0, #0]
 8004712:	f001 fc41 	bl	8005f98 <USB_WritePMA>
 8004716:	f000 be0e 	b.w	8005336 <USB_EPStartXfer+0x128a>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800471a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800471e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	785b      	ldrb	r3, [r3, #1]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d16d      	bne.n	8004806 <USB_EPStartXfer+0x75a>
 800472a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800472e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	64bb      	str	r3, [r7, #72]	; 0x48
 8004736:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800473a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004744:	b29b      	uxth	r3, r3
 8004746:	461a      	mov	r2, r3
 8004748:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800474a:	4413      	add	r3, r2
 800474c:	64bb      	str	r3, [r7, #72]	; 0x48
 800474e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004752:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	781b      	ldrb	r3, [r3, #0]
 800475a:	011a      	lsls	r2, r3, #4
 800475c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800475e:	4413      	add	r3, r2
 8004760:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004764:	647b      	str	r3, [r7, #68]	; 0x44
 8004766:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800476a:	2b00      	cmp	r3, #0
 800476c:	d112      	bne.n	8004794 <USB_EPStartXfer+0x6e8>
 800476e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004770:	881b      	ldrh	r3, [r3, #0]
 8004772:	b29b      	uxth	r3, r3
 8004774:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004778:	b29a      	uxth	r2, r3
 800477a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800477c:	801a      	strh	r2, [r3, #0]
 800477e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004780:	881b      	ldrh	r3, [r3, #0]
 8004782:	b29b      	uxth	r3, r3
 8004784:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004788:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800478c:	b29a      	uxth	r2, r3
 800478e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004790:	801a      	strh	r2, [r3, #0]
 8004792:	e063      	b.n	800485c <USB_EPStartXfer+0x7b0>
 8004794:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004798:	2b3e      	cmp	r3, #62	; 0x3e
 800479a:	d817      	bhi.n	80047cc <USB_EPStartXfer+0x720>
 800479c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80047a0:	085b      	lsrs	r3, r3, #1
 80047a2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80047a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80047aa:	f003 0301 	and.w	r3, r3, #1
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d004      	beq.n	80047bc <USB_EPStartXfer+0x710>
 80047b2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80047b6:	3301      	adds	r3, #1
 80047b8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80047bc:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80047c0:	b29b      	uxth	r3, r3
 80047c2:	029b      	lsls	r3, r3, #10
 80047c4:	b29a      	uxth	r2, r3
 80047c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80047c8:	801a      	strh	r2, [r3, #0]
 80047ca:	e047      	b.n	800485c <USB_EPStartXfer+0x7b0>
 80047cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80047d0:	095b      	lsrs	r3, r3, #5
 80047d2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80047d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80047da:	f003 031f 	and.w	r3, r3, #31
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d104      	bne.n	80047ec <USB_EPStartXfer+0x740>
 80047e2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80047e6:	3b01      	subs	r3, #1
 80047e8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80047ec:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80047f0:	b29b      	uxth	r3, r3
 80047f2:	029b      	lsls	r3, r3, #10
 80047f4:	b29b      	uxth	r3, r3
 80047f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80047fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80047fe:	b29a      	uxth	r2, r3
 8004800:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004802:	801a      	strh	r2, [r3, #0]
 8004804:	e02a      	b.n	800485c <USB_EPStartXfer+0x7b0>
 8004806:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800480a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	785b      	ldrb	r3, [r3, #1]
 8004812:	2b01      	cmp	r3, #1
 8004814:	d122      	bne.n	800485c <USB_EPStartXfer+0x7b0>
 8004816:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800481a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	653b      	str	r3, [r7, #80]	; 0x50
 8004822:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004826:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004830:	b29b      	uxth	r3, r3
 8004832:	461a      	mov	r2, r3
 8004834:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004836:	4413      	add	r3, r2
 8004838:	653b      	str	r3, [r7, #80]	; 0x50
 800483a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800483e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	781b      	ldrb	r3, [r3, #0]
 8004846:	011a      	lsls	r2, r3, #4
 8004848:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800484a:	4413      	add	r3, r2
 800484c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004850:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004852:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004856:	b29a      	uxth	r2, r3
 8004858:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800485a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800485c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004860:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	891b      	ldrh	r3, [r3, #8]
 8004868:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800486c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004870:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	6959      	ldr	r1, [r3, #20]
 8004878:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800487c:	b29b      	uxth	r3, r3
 800487e:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004882:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8004886:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800488a:	6800      	ldr	r0, [r0, #0]
 800488c:	f001 fb84 	bl	8005f98 <USB_WritePMA>
            ep->xfer_buff += len;
 8004890:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004894:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	695a      	ldr	r2, [r3, #20]
 800489c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80048a0:	441a      	add	r2, r3
 80048a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80048a6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80048ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80048b2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	6a1a      	ldr	r2, [r3, #32]
 80048ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80048be:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	691b      	ldr	r3, [r3, #16]
 80048c6:	429a      	cmp	r2, r3
 80048c8:	d90f      	bls.n	80048ea <USB_EPStartXfer+0x83e>
            {
              ep->xfer_len_db -= len;
 80048ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80048ce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	6a1a      	ldr	r2, [r3, #32]
 80048d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80048da:	1ad2      	subs	r2, r2, r3
 80048dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80048e0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	621a      	str	r2, [r3, #32]
 80048e8:	e00e      	b.n	8004908 <USB_EPStartXfer+0x85c>
            }
            else
            {
              len = ep->xfer_len_db;
 80048ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80048ee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	6a1b      	ldr	r3, [r3, #32]
 80048f6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 80048fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80048fe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	2200      	movs	r2, #0
 8004906:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004908:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800490c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	643b      	str	r3, [r7, #64]	; 0x40
 8004914:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004918:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	785b      	ldrb	r3, [r3, #1]
 8004920:	2b00      	cmp	r3, #0
 8004922:	d16d      	bne.n	8004a00 <USB_EPStartXfer+0x954>
 8004924:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004928:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004930:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004934:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800493e:	b29b      	uxth	r3, r3
 8004940:	461a      	mov	r2, r3
 8004942:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004944:	4413      	add	r3, r2
 8004946:	63bb      	str	r3, [r7, #56]	; 0x38
 8004948:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800494c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	781b      	ldrb	r3, [r3, #0]
 8004954:	011a      	lsls	r2, r3, #4
 8004956:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004958:	4413      	add	r3, r2
 800495a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800495e:	637b      	str	r3, [r7, #52]	; 0x34
 8004960:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004964:	2b00      	cmp	r3, #0
 8004966:	d112      	bne.n	800498e <USB_EPStartXfer+0x8e2>
 8004968:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800496a:	881b      	ldrh	r3, [r3, #0]
 800496c:	b29b      	uxth	r3, r3
 800496e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004972:	b29a      	uxth	r2, r3
 8004974:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004976:	801a      	strh	r2, [r3, #0]
 8004978:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800497a:	881b      	ldrh	r3, [r3, #0]
 800497c:	b29b      	uxth	r3, r3
 800497e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004982:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004986:	b29a      	uxth	r2, r3
 8004988:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800498a:	801a      	strh	r2, [r3, #0]
 800498c:	e05d      	b.n	8004a4a <USB_EPStartXfer+0x99e>
 800498e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004992:	2b3e      	cmp	r3, #62	; 0x3e
 8004994:	d817      	bhi.n	80049c6 <USB_EPStartXfer+0x91a>
 8004996:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800499a:	085b      	lsrs	r3, r3, #1
 800499c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80049a0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80049a4:	f003 0301 	and.w	r3, r3, #1
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d004      	beq.n	80049b6 <USB_EPStartXfer+0x90a>
 80049ac:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80049b0:	3301      	adds	r3, #1
 80049b2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80049b6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80049ba:	b29b      	uxth	r3, r3
 80049bc:	029b      	lsls	r3, r3, #10
 80049be:	b29a      	uxth	r2, r3
 80049c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049c2:	801a      	strh	r2, [r3, #0]
 80049c4:	e041      	b.n	8004a4a <USB_EPStartXfer+0x99e>
 80049c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80049ca:	095b      	lsrs	r3, r3, #5
 80049cc:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80049d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80049d4:	f003 031f 	and.w	r3, r3, #31
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d104      	bne.n	80049e6 <USB_EPStartXfer+0x93a>
 80049dc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80049e0:	3b01      	subs	r3, #1
 80049e2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80049e6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80049ea:	b29b      	uxth	r3, r3
 80049ec:	029b      	lsls	r3, r3, #10
 80049ee:	b29b      	uxth	r3, r3
 80049f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80049f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80049f8:	b29a      	uxth	r2, r3
 80049fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049fc:	801a      	strh	r2, [r3, #0]
 80049fe:	e024      	b.n	8004a4a <USB_EPStartXfer+0x99e>
 8004a00:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a04:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	785b      	ldrb	r3, [r3, #1]
 8004a0c:	2b01      	cmp	r3, #1
 8004a0e:	d11c      	bne.n	8004a4a <USB_EPStartXfer+0x99e>
 8004a10:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a14:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a1e:	b29b      	uxth	r3, r3
 8004a20:	461a      	mov	r2, r3
 8004a22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a24:	4413      	add	r3, r2
 8004a26:	643b      	str	r3, [r7, #64]	; 0x40
 8004a28:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a2c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	781b      	ldrb	r3, [r3, #0]
 8004a34:	011a      	lsls	r2, r3, #4
 8004a36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a38:	4413      	add	r3, r2
 8004a3a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004a3e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a40:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004a44:	b29a      	uxth	r2, r3
 8004a46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a48:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8004a4a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a4e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	895b      	ldrh	r3, [r3, #10]
 8004a56:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004a5a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a5e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	6959      	ldr	r1, [r3, #20]
 8004a66:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004a6a:	b29b      	uxth	r3, r3
 8004a6c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004a70:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8004a74:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8004a78:	6800      	ldr	r0, [r0, #0]
 8004a7a:	f001 fa8d 	bl	8005f98 <USB_WritePMA>
 8004a7e:	f000 bc5a 	b.w	8005336 <USB_EPStartXfer+0x128a>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8004a82:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a86:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	6a1b      	ldr	r3, [r3, #32]
 8004a8e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8004a92:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a96:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004a9a:	681a      	ldr	r2, [r3, #0]
 8004a9c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004aa0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	781b      	ldrb	r3, [r3, #0]
 8004aa8:	009b      	lsls	r3, r3, #2
 8004aaa:	4413      	add	r3, r2
 8004aac:	881b      	ldrh	r3, [r3, #0]
 8004aae:	b29b      	uxth	r3, r3
 8004ab0:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8004ab4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ab8:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8004abc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ac0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004ac4:	681a      	ldr	r2, [r3, #0]
 8004ac6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004aca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	781b      	ldrb	r3, [r3, #0]
 8004ad2:	009b      	lsls	r3, r3, #2
 8004ad4:	441a      	add	r2, r3
 8004ad6:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8004ada:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ade:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ae2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ae6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004aea:	b29b      	uxth	r3, r3
 8004aec:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004aee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004af2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004afa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004afe:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b08:	b29b      	uxth	r3, r3
 8004b0a:	461a      	mov	r2, r3
 8004b0c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b0e:	4413      	add	r3, r2
 8004b10:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004b12:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b16:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	781b      	ldrb	r3, [r3, #0]
 8004b1e:	011a      	lsls	r2, r3, #4
 8004b20:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b22:	4413      	add	r3, r2
 8004b24:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004b28:	65bb      	str	r3, [r7, #88]	; 0x58
 8004b2a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004b2e:	b29a      	uxth	r2, r3
 8004b30:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004b32:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8004b34:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b38:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	891b      	ldrh	r3, [r3, #8]
 8004b40:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004b44:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b48:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	6959      	ldr	r1, [r3, #20]
 8004b50:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004b54:	b29b      	uxth	r3, r3
 8004b56:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004b5a:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8004b5e:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8004b62:	6800      	ldr	r0, [r0, #0]
 8004b64:	f001 fa18 	bl	8005f98 <USB_WritePMA>
 8004b68:	e3e5      	b.n	8005336 <USB_EPStartXfer+0x128a>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 8004b6a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b6e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004b72:	681a      	ldr	r2, [r3, #0]
 8004b74:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b78:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	781b      	ldrb	r3, [r3, #0]
 8004b80:	009b      	lsls	r3, r3, #2
 8004b82:	4413      	add	r3, r2
 8004b84:	881b      	ldrh	r3, [r3, #0]
 8004b86:	b29b      	uxth	r3, r3
 8004b88:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b90:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 8004b94:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b98:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004b9c:	681a      	ldr	r2, [r3, #0]
 8004b9e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ba2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	781b      	ldrb	r3, [r3, #0]
 8004baa:	009b      	lsls	r3, r3, #2
 8004bac:	441a      	add	r2, r3
 8004bae:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8004bb2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004bb6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004bba:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004bbe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004bc2:	b29b      	uxth	r3, r3
 8004bc4:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8004bc6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004bca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	6a1a      	ldr	r2, [r3, #32]
 8004bd2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004bd6:	1ad2      	subs	r2, r2, r3
 8004bd8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004bdc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004be4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004be8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004bec:	681a      	ldr	r2, [r3, #0]
 8004bee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004bf2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	781b      	ldrb	r3, [r3, #0]
 8004bfa:	009b      	lsls	r3, r3, #2
 8004bfc:	4413      	add	r3, r2
 8004bfe:	881b      	ldrh	r3, [r3, #0]
 8004c00:	b29b      	uxth	r3, r3
 8004c02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	f000 81bc 	beq.w	8004f84 <USB_EPStartXfer+0xed8>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004c0c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c10:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004c1a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c1e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	785b      	ldrb	r3, [r3, #1]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d16d      	bne.n	8004d06 <USB_EPStartXfer+0xc5a>
 8004c2a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c2e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	67bb      	str	r3, [r7, #120]	; 0x78
 8004c36:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c3a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c44:	b29b      	uxth	r3, r3
 8004c46:	461a      	mov	r2, r3
 8004c48:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004c4a:	4413      	add	r3, r2
 8004c4c:	67bb      	str	r3, [r7, #120]	; 0x78
 8004c4e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c52:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	781b      	ldrb	r3, [r3, #0]
 8004c5a:	011a      	lsls	r2, r3, #4
 8004c5c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004c5e:	4413      	add	r3, r2
 8004c60:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004c64:	677b      	str	r3, [r7, #116]	; 0x74
 8004c66:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d112      	bne.n	8004c94 <USB_EPStartXfer+0xbe8>
 8004c6e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004c70:	881b      	ldrh	r3, [r3, #0]
 8004c72:	b29b      	uxth	r3, r3
 8004c74:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004c78:	b29a      	uxth	r2, r3
 8004c7a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004c7c:	801a      	strh	r2, [r3, #0]
 8004c7e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004c80:	881b      	ldrh	r3, [r3, #0]
 8004c82:	b29b      	uxth	r3, r3
 8004c84:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004c88:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004c8c:	b29a      	uxth	r2, r3
 8004c8e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004c90:	801a      	strh	r2, [r3, #0]
 8004c92:	e060      	b.n	8004d56 <USB_EPStartXfer+0xcaa>
 8004c94:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004c98:	2b3e      	cmp	r3, #62	; 0x3e
 8004c9a:	d817      	bhi.n	8004ccc <USB_EPStartXfer+0xc20>
 8004c9c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004ca0:	085b      	lsrs	r3, r3, #1
 8004ca2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8004ca6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004caa:	f003 0301 	and.w	r3, r3, #1
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d004      	beq.n	8004cbc <USB_EPStartXfer+0xc10>
 8004cb2:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8004cb6:	3301      	adds	r3, #1
 8004cb8:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8004cbc:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8004cc0:	b29b      	uxth	r3, r3
 8004cc2:	029b      	lsls	r3, r3, #10
 8004cc4:	b29a      	uxth	r2, r3
 8004cc6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004cc8:	801a      	strh	r2, [r3, #0]
 8004cca:	e044      	b.n	8004d56 <USB_EPStartXfer+0xcaa>
 8004ccc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004cd0:	095b      	lsrs	r3, r3, #5
 8004cd2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8004cd6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004cda:	f003 031f 	and.w	r3, r3, #31
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d104      	bne.n	8004cec <USB_EPStartXfer+0xc40>
 8004ce2:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8004ce6:	3b01      	subs	r3, #1
 8004ce8:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8004cec:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8004cf0:	b29b      	uxth	r3, r3
 8004cf2:	029b      	lsls	r3, r3, #10
 8004cf4:	b29b      	uxth	r3, r3
 8004cf6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004cfa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004cfe:	b29a      	uxth	r2, r3
 8004d00:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004d02:	801a      	strh	r2, [r3, #0]
 8004d04:	e027      	b.n	8004d56 <USB_EPStartXfer+0xcaa>
 8004d06:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d0a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	785b      	ldrb	r3, [r3, #1]
 8004d12:	2b01      	cmp	r3, #1
 8004d14:	d11f      	bne.n	8004d56 <USB_EPStartXfer+0xcaa>
 8004d16:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d1a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d24:	b29b      	uxth	r3, r3
 8004d26:	461a      	mov	r2, r3
 8004d28:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004d2c:	4413      	add	r3, r2
 8004d2e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004d32:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d36:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	781b      	ldrb	r3, [r3, #0]
 8004d3e:	011a      	lsls	r2, r3, #4
 8004d40:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004d44:	4413      	add	r3, r2
 8004d46:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004d4a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004d4c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004d50:	b29a      	uxth	r2, r3
 8004d52:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004d54:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8004d56:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d5a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	895b      	ldrh	r3, [r3, #10]
 8004d62:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004d66:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d6a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	6959      	ldr	r1, [r3, #20]
 8004d72:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004d76:	b29b      	uxth	r3, r3
 8004d78:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004d7c:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8004d80:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8004d84:	6800      	ldr	r0, [r0, #0]
 8004d86:	f001 f907 	bl	8005f98 <USB_WritePMA>
          ep->xfer_buff += len;
 8004d8a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d8e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	695a      	ldr	r2, [r3, #20]
 8004d96:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004d9a:	441a      	add	r2, r3
 8004d9c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004da0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8004da8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004dac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	6a1a      	ldr	r2, [r3, #32]
 8004db4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004db8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	691b      	ldr	r3, [r3, #16]
 8004dc0:	429a      	cmp	r2, r3
 8004dc2:	d90f      	bls.n	8004de4 <USB_EPStartXfer+0xd38>
          {
            ep->xfer_len_db -= len;
 8004dc4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004dc8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	6a1a      	ldr	r2, [r3, #32]
 8004dd0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004dd4:	1ad2      	subs	r2, r2, r3
 8004dd6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004dda:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	621a      	str	r2, [r3, #32]
 8004de2:	e00e      	b.n	8004e02 <USB_EPStartXfer+0xd56>
          }
          else
          {
            len = ep->xfer_len_db;
 8004de4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004de8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	6a1b      	ldr	r3, [r3, #32]
 8004df0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8004df4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004df8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	2200      	movs	r2, #0
 8004e00:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8004e02:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	f000 8295 	beq.w	8005336 <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004e0c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e10:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	785b      	ldrb	r3, [r3, #1]
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d16d      	bne.n	8004ef8 <USB_EPStartXfer+0xe4c>
 8004e1c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e20:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	66bb      	str	r3, [r7, #104]	; 0x68
 8004e28:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e2c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e36:	b29b      	uxth	r3, r3
 8004e38:	461a      	mov	r2, r3
 8004e3a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004e3c:	4413      	add	r3, r2
 8004e3e:	66bb      	str	r3, [r7, #104]	; 0x68
 8004e40:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e44:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	781b      	ldrb	r3, [r3, #0]
 8004e4c:	011a      	lsls	r2, r3, #4
 8004e4e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004e50:	4413      	add	r3, r2
 8004e52:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004e56:	667b      	str	r3, [r7, #100]	; 0x64
 8004e58:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d112      	bne.n	8004e86 <USB_EPStartXfer+0xdda>
 8004e60:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004e62:	881b      	ldrh	r3, [r3, #0]
 8004e64:	b29b      	uxth	r3, r3
 8004e66:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004e6a:	b29a      	uxth	r2, r3
 8004e6c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004e6e:	801a      	strh	r2, [r3, #0]
 8004e70:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004e72:	881b      	ldrh	r3, [r3, #0]
 8004e74:	b29b      	uxth	r3, r3
 8004e76:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e7a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e7e:	b29a      	uxth	r2, r3
 8004e80:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004e82:	801a      	strh	r2, [r3, #0]
 8004e84:	e063      	b.n	8004f4e <USB_EPStartXfer+0xea2>
 8004e86:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004e8a:	2b3e      	cmp	r3, #62	; 0x3e
 8004e8c:	d817      	bhi.n	8004ebe <USB_EPStartXfer+0xe12>
 8004e8e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004e92:	085b      	lsrs	r3, r3, #1
 8004e94:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8004e98:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004e9c:	f003 0301 	and.w	r3, r3, #1
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d004      	beq.n	8004eae <USB_EPStartXfer+0xe02>
 8004ea4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004ea8:	3301      	adds	r3, #1
 8004eaa:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8004eae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004eb2:	b29b      	uxth	r3, r3
 8004eb4:	029b      	lsls	r3, r3, #10
 8004eb6:	b29a      	uxth	r2, r3
 8004eb8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004eba:	801a      	strh	r2, [r3, #0]
 8004ebc:	e047      	b.n	8004f4e <USB_EPStartXfer+0xea2>
 8004ebe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004ec2:	095b      	lsrs	r3, r3, #5
 8004ec4:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8004ec8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004ecc:	f003 031f 	and.w	r3, r3, #31
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d104      	bne.n	8004ede <USB_EPStartXfer+0xe32>
 8004ed4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004ed8:	3b01      	subs	r3, #1
 8004eda:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8004ede:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004ee2:	b29b      	uxth	r3, r3
 8004ee4:	029b      	lsls	r3, r3, #10
 8004ee6:	b29b      	uxth	r3, r3
 8004ee8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004eec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004ef0:	b29a      	uxth	r2, r3
 8004ef2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004ef4:	801a      	strh	r2, [r3, #0]
 8004ef6:	e02a      	b.n	8004f4e <USB_EPStartXfer+0xea2>
 8004ef8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004efc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	785b      	ldrb	r3, [r3, #1]
 8004f04:	2b01      	cmp	r3, #1
 8004f06:	d122      	bne.n	8004f4e <USB_EPStartXfer+0xea2>
 8004f08:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f0c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	673b      	str	r3, [r7, #112]	; 0x70
 8004f14:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f18:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f22:	b29b      	uxth	r3, r3
 8004f24:	461a      	mov	r2, r3
 8004f26:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004f28:	4413      	add	r3, r2
 8004f2a:	673b      	str	r3, [r7, #112]	; 0x70
 8004f2c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f30:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	781b      	ldrb	r3, [r3, #0]
 8004f38:	011a      	lsls	r2, r3, #4
 8004f3a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004f3c:	4413      	add	r3, r2
 8004f3e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004f42:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004f44:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004f48:	b29a      	uxth	r2, r3
 8004f4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f4c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8004f4e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f52:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	891b      	ldrh	r3, [r3, #8]
 8004f5a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004f5e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f62:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	6959      	ldr	r1, [r3, #20]
 8004f6a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004f6e:	b29b      	uxth	r3, r3
 8004f70:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004f74:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8004f78:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8004f7c:	6800      	ldr	r0, [r0, #0]
 8004f7e:	f001 f80b 	bl	8005f98 <USB_WritePMA>
 8004f82:	e1d8      	b.n	8005336 <USB_EPStartXfer+0x128a>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004f84:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f88:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	785b      	ldrb	r3, [r3, #1]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d178      	bne.n	8005086 <USB_EPStartXfer+0xfda>
 8004f94:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f98:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004fa2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004fa6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004fb0:	b29b      	uxth	r3, r3
 8004fb2:	461a      	mov	r2, r3
 8004fb4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004fb8:	4413      	add	r3, r2
 8004fba:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004fbe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004fc2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	781b      	ldrb	r3, [r3, #0]
 8004fca:	011a      	lsls	r2, r3, #4
 8004fcc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004fd0:	4413      	add	r3, r2
 8004fd2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004fd6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004fda:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d116      	bne.n	8005010 <USB_EPStartXfer+0xf64>
 8004fe2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004fe6:	881b      	ldrh	r3, [r3, #0]
 8004fe8:	b29b      	uxth	r3, r3
 8004fea:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004fee:	b29a      	uxth	r2, r3
 8004ff0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004ff4:	801a      	strh	r2, [r3, #0]
 8004ff6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004ffa:	881b      	ldrh	r3, [r3, #0]
 8004ffc:	b29b      	uxth	r3, r3
 8004ffe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005002:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005006:	b29a      	uxth	r2, r3
 8005008:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800500c:	801a      	strh	r2, [r3, #0]
 800500e:	e06b      	b.n	80050e8 <USB_EPStartXfer+0x103c>
 8005010:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005014:	2b3e      	cmp	r3, #62	; 0x3e
 8005016:	d818      	bhi.n	800504a <USB_EPStartXfer+0xf9e>
 8005018:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800501c:	085b      	lsrs	r3, r3, #1
 800501e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8005022:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005026:	f003 0301 	and.w	r3, r3, #1
 800502a:	2b00      	cmp	r3, #0
 800502c:	d004      	beq.n	8005038 <USB_EPStartXfer+0xf8c>
 800502e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005032:	3301      	adds	r3, #1
 8005034:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8005038:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800503c:	b29b      	uxth	r3, r3
 800503e:	029b      	lsls	r3, r3, #10
 8005040:	b29a      	uxth	r2, r3
 8005042:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005046:	801a      	strh	r2, [r3, #0]
 8005048:	e04e      	b.n	80050e8 <USB_EPStartXfer+0x103c>
 800504a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800504e:	095b      	lsrs	r3, r3, #5
 8005050:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8005054:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005058:	f003 031f 	and.w	r3, r3, #31
 800505c:	2b00      	cmp	r3, #0
 800505e:	d104      	bne.n	800506a <USB_EPStartXfer+0xfbe>
 8005060:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005064:	3b01      	subs	r3, #1
 8005066:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800506a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800506e:	b29b      	uxth	r3, r3
 8005070:	029b      	lsls	r3, r3, #10
 8005072:	b29b      	uxth	r3, r3
 8005074:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005078:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800507c:	b29a      	uxth	r2, r3
 800507e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005082:	801a      	strh	r2, [r3, #0]
 8005084:	e030      	b.n	80050e8 <USB_EPStartXfer+0x103c>
 8005086:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800508a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	785b      	ldrb	r3, [r3, #1]
 8005092:	2b01      	cmp	r3, #1
 8005094:	d128      	bne.n	80050e8 <USB_EPStartXfer+0x103c>
 8005096:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800509a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80050a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80050a8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80050b2:	b29b      	uxth	r3, r3
 80050b4:	461a      	mov	r2, r3
 80050b6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80050ba:	4413      	add	r3, r2
 80050bc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80050c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80050c4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	781b      	ldrb	r3, [r3, #0]
 80050cc:	011a      	lsls	r2, r3, #4
 80050ce:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80050d2:	4413      	add	r3, r2
 80050d4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80050d8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80050dc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80050e0:	b29a      	uxth	r2, r3
 80050e2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80050e6:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80050e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80050ec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	891b      	ldrh	r3, [r3, #8]
 80050f4:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80050f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80050fc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	6959      	ldr	r1, [r3, #20]
 8005104:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005108:	b29b      	uxth	r3, r3
 800510a:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800510e:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005112:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005116:	6800      	ldr	r0, [r0, #0]
 8005118:	f000 ff3e 	bl	8005f98 <USB_WritePMA>
          ep->xfer_buff += len;
 800511c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005120:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	695a      	ldr	r2, [r3, #20]
 8005128:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800512c:	441a      	add	r2, r3
 800512e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005132:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 800513a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800513e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	6a1a      	ldr	r2, [r3, #32]
 8005146:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800514a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	691b      	ldr	r3, [r3, #16]
 8005152:	429a      	cmp	r2, r3
 8005154:	d90f      	bls.n	8005176 <USB_EPStartXfer+0x10ca>
          {
            ep->xfer_len_db -= len;
 8005156:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800515a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	6a1a      	ldr	r2, [r3, #32]
 8005162:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005166:	1ad2      	subs	r2, r2, r3
 8005168:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800516c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	621a      	str	r2, [r3, #32]
 8005174:	e00e      	b.n	8005194 <USB_EPStartXfer+0x10e8>
          }
          else
          {
            len = ep->xfer_len_db;
 8005176:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800517a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	6a1b      	ldr	r3, [r3, #32]
 8005182:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8005186:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800518a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	2200      	movs	r2, #0
 8005192:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8005194:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005198:	2b00      	cmp	r3, #0
 800519a:	f000 80cc 	beq.w	8005336 <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800519e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051a2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80051ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051b0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	785b      	ldrb	r3, [r3, #1]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d178      	bne.n	80052ae <USB_EPStartXfer+0x1202>
 80051bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051c0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80051ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051ce:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80051d8:	b29b      	uxth	r3, r3
 80051da:	461a      	mov	r2, r3
 80051dc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80051e0:	4413      	add	r3, r2
 80051e2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80051e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051ea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	781b      	ldrb	r3, [r3, #0]
 80051f2:	011a      	lsls	r2, r3, #4
 80051f4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80051f8:	4413      	add	r3, r2
 80051fa:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80051fe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005202:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005206:	2b00      	cmp	r3, #0
 8005208:	d116      	bne.n	8005238 <USB_EPStartXfer+0x118c>
 800520a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800520e:	881b      	ldrh	r3, [r3, #0]
 8005210:	b29b      	uxth	r3, r3
 8005212:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005216:	b29a      	uxth	r2, r3
 8005218:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800521c:	801a      	strh	r2, [r3, #0]
 800521e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005222:	881b      	ldrh	r3, [r3, #0]
 8005224:	b29b      	uxth	r3, r3
 8005226:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800522a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800522e:	b29a      	uxth	r2, r3
 8005230:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005234:	801a      	strh	r2, [r3, #0]
 8005236:	e064      	b.n	8005302 <USB_EPStartXfer+0x1256>
 8005238:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800523c:	2b3e      	cmp	r3, #62	; 0x3e
 800523e:	d818      	bhi.n	8005272 <USB_EPStartXfer+0x11c6>
 8005240:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005244:	085b      	lsrs	r3, r3, #1
 8005246:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800524a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800524e:	f003 0301 	and.w	r3, r3, #1
 8005252:	2b00      	cmp	r3, #0
 8005254:	d004      	beq.n	8005260 <USB_EPStartXfer+0x11b4>
 8005256:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800525a:	3301      	adds	r3, #1
 800525c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005260:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005264:	b29b      	uxth	r3, r3
 8005266:	029b      	lsls	r3, r3, #10
 8005268:	b29a      	uxth	r2, r3
 800526a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800526e:	801a      	strh	r2, [r3, #0]
 8005270:	e047      	b.n	8005302 <USB_EPStartXfer+0x1256>
 8005272:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005276:	095b      	lsrs	r3, r3, #5
 8005278:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800527c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005280:	f003 031f 	and.w	r3, r3, #31
 8005284:	2b00      	cmp	r3, #0
 8005286:	d104      	bne.n	8005292 <USB_EPStartXfer+0x11e6>
 8005288:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800528c:	3b01      	subs	r3, #1
 800528e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005292:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005296:	b29b      	uxth	r3, r3
 8005298:	029b      	lsls	r3, r3, #10
 800529a:	b29b      	uxth	r3, r3
 800529c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80052a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80052a4:	b29a      	uxth	r2, r3
 80052a6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80052aa:	801a      	strh	r2, [r3, #0]
 80052ac:	e029      	b.n	8005302 <USB_EPStartXfer+0x1256>
 80052ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80052b2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	785b      	ldrb	r3, [r3, #1]
 80052ba:	2b01      	cmp	r3, #1
 80052bc:	d121      	bne.n	8005302 <USB_EPStartXfer+0x1256>
 80052be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80052c2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80052cc:	b29b      	uxth	r3, r3
 80052ce:	461a      	mov	r2, r3
 80052d0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80052d4:	4413      	add	r3, r2
 80052d6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80052da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80052de:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	781b      	ldrb	r3, [r3, #0]
 80052e6:	011a      	lsls	r2, r3, #4
 80052e8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80052ec:	4413      	add	r3, r2
 80052ee:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80052f2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80052f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80052fa:	b29a      	uxth	r2, r3
 80052fc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005300:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005302:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005306:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	895b      	ldrh	r3, [r3, #10]
 800530e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005312:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005316:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	6959      	ldr	r1, [r3, #20]
 800531e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005322:	b29b      	uxth	r3, r3
 8005324:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005328:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800532c:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005330:	6800      	ldr	r0, [r0, #0]
 8005332:	f000 fe31 	bl	8005f98 <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8005336:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800533a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800533e:	681a      	ldr	r2, [r3, #0]
 8005340:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005344:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	781b      	ldrb	r3, [r3, #0]
 800534c:	009b      	lsls	r3, r3, #2
 800534e:	4413      	add	r3, r2
 8005350:	881b      	ldrh	r3, [r3, #0]
 8005352:	b29b      	uxth	r3, r3
 8005354:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005358:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 800535c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005360:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005364:	8013      	strh	r3, [r2, #0]
 8005366:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800536a:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 800536e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005372:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8005376:	8812      	ldrh	r2, [r2, #0]
 8005378:	f082 0210 	eor.w	r2, r2, #16
 800537c:	801a      	strh	r2, [r3, #0]
 800537e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005382:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8005386:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800538a:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 800538e:	8812      	ldrh	r2, [r2, #0]
 8005390:	f082 0220 	eor.w	r2, r2, #32
 8005394:	801a      	strh	r2, [r3, #0]
 8005396:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800539a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800539e:	681a      	ldr	r2, [r3, #0]
 80053a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053a4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	781b      	ldrb	r3, [r3, #0]
 80053ac:	009b      	lsls	r3, r3, #2
 80053ae:	441a      	add	r2, r3
 80053b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053b4:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 80053b8:	881b      	ldrh	r3, [r3, #0]
 80053ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80053be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80053c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80053c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80053ca:	b29b      	uxth	r3, r3
 80053cc:	8013      	strh	r3, [r2, #0]
 80053ce:	f000 bc9f 	b.w	8005d10 <USB_EPStartXfer+0x1c64>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80053d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053d6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	7b1b      	ldrb	r3, [r3, #12]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	f040 80ae 	bne.w	8005540 <USB_EPStartXfer+0x1494>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80053e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053e8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	699a      	ldr	r2, [r3, #24]
 80053f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053f4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	691b      	ldr	r3, [r3, #16]
 80053fc:	429a      	cmp	r2, r3
 80053fe:	d917      	bls.n	8005430 <USB_EPStartXfer+0x1384>
      {
        len = ep->maxpacket;
 8005400:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005404:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	691b      	ldr	r3, [r3, #16]
 800540c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 8005410:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005414:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	699a      	ldr	r2, [r3, #24]
 800541c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005420:	1ad2      	subs	r2, r2, r3
 8005422:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005426:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	619a      	str	r2, [r3, #24]
 800542e:	e00e      	b.n	800544e <USB_EPStartXfer+0x13a2>
      }
      else
      {
        len = ep->xfer_len;
 8005430:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005434:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	699b      	ldr	r3, [r3, #24]
 800543c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 8005440:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005444:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	2200      	movs	r2, #0
 800544c:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800544e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005452:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800545c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005460:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800546a:	b29b      	uxth	r3, r3
 800546c:	461a      	mov	r2, r3
 800546e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005472:	4413      	add	r3, r2
 8005474:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005478:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800547c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	781b      	ldrb	r3, [r3, #0]
 8005484:	011a      	lsls	r2, r3, #4
 8005486:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800548a:	4413      	add	r3, r2
 800548c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005490:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005494:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005498:	2b00      	cmp	r3, #0
 800549a:	d116      	bne.n	80054ca <USB_EPStartXfer+0x141e>
 800549c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80054a0:	881b      	ldrh	r3, [r3, #0]
 80054a2:	b29b      	uxth	r3, r3
 80054a4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80054a8:	b29a      	uxth	r2, r3
 80054aa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80054ae:	801a      	strh	r2, [r3, #0]
 80054b0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80054b4:	881b      	ldrh	r3, [r3, #0]
 80054b6:	b29b      	uxth	r3, r3
 80054b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80054bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80054c0:	b29a      	uxth	r2, r3
 80054c2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80054c6:	801a      	strh	r2, [r3, #0]
 80054c8:	e3e8      	b.n	8005c9c <USB_EPStartXfer+0x1bf0>
 80054ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80054ce:	2b3e      	cmp	r3, #62	; 0x3e
 80054d0:	d818      	bhi.n	8005504 <USB_EPStartXfer+0x1458>
 80054d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80054d6:	085b      	lsrs	r3, r3, #1
 80054d8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80054dc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80054e0:	f003 0301 	and.w	r3, r3, #1
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d004      	beq.n	80054f2 <USB_EPStartXfer+0x1446>
 80054e8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80054ec:	3301      	adds	r3, #1
 80054ee:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80054f2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80054f6:	b29b      	uxth	r3, r3
 80054f8:	029b      	lsls	r3, r3, #10
 80054fa:	b29a      	uxth	r2, r3
 80054fc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005500:	801a      	strh	r2, [r3, #0]
 8005502:	e3cb      	b.n	8005c9c <USB_EPStartXfer+0x1bf0>
 8005504:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005508:	095b      	lsrs	r3, r3, #5
 800550a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800550e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005512:	f003 031f 	and.w	r3, r3, #31
 8005516:	2b00      	cmp	r3, #0
 8005518:	d104      	bne.n	8005524 <USB_EPStartXfer+0x1478>
 800551a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800551e:	3b01      	subs	r3, #1
 8005520:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8005524:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005528:	b29b      	uxth	r3, r3
 800552a:	029b      	lsls	r3, r3, #10
 800552c:	b29b      	uxth	r3, r3
 800552e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005532:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005536:	b29a      	uxth	r2, r3
 8005538:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800553c:	801a      	strh	r2, [r3, #0]
 800553e:	e3ad      	b.n	8005c9c <USB_EPStartXfer+0x1bf0>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8005540:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005544:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	78db      	ldrb	r3, [r3, #3]
 800554c:	2b02      	cmp	r3, #2
 800554e:	f040 8200 	bne.w	8005952 <USB_EPStartXfer+0x18a6>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8005552:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005556:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	785b      	ldrb	r3, [r3, #1]
 800555e:	2b00      	cmp	r3, #0
 8005560:	f040 8091 	bne.w	8005686 <USB_EPStartXfer+0x15da>
 8005564:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005568:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005572:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005576:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005580:	b29b      	uxth	r3, r3
 8005582:	461a      	mov	r2, r3
 8005584:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005588:	4413      	add	r3, r2
 800558a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800558e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005592:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	781b      	ldrb	r3, [r3, #0]
 800559a:	011a      	lsls	r2, r3, #4
 800559c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80055a0:	4413      	add	r3, r2
 80055a2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80055a6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80055aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80055ae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	691b      	ldr	r3, [r3, #16]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d116      	bne.n	80055e8 <USB_EPStartXfer+0x153c>
 80055ba:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80055be:	881b      	ldrh	r3, [r3, #0]
 80055c0:	b29b      	uxth	r3, r3
 80055c2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80055c6:	b29a      	uxth	r2, r3
 80055c8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80055cc:	801a      	strh	r2, [r3, #0]
 80055ce:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80055d2:	881b      	ldrh	r3, [r3, #0]
 80055d4:	b29b      	uxth	r3, r3
 80055d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80055da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80055de:	b29a      	uxth	r2, r3
 80055e0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80055e4:	801a      	strh	r2, [r3, #0]
 80055e6:	e083      	b.n	80056f0 <USB_EPStartXfer+0x1644>
 80055e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80055ec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	691b      	ldr	r3, [r3, #16]
 80055f4:	2b3e      	cmp	r3, #62	; 0x3e
 80055f6:	d820      	bhi.n	800563a <USB_EPStartXfer+0x158e>
 80055f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80055fc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	691b      	ldr	r3, [r3, #16]
 8005604:	085b      	lsrs	r3, r3, #1
 8005606:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800560a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800560e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	691b      	ldr	r3, [r3, #16]
 8005616:	f003 0301 	and.w	r3, r3, #1
 800561a:	2b00      	cmp	r3, #0
 800561c:	d004      	beq.n	8005628 <USB_EPStartXfer+0x157c>
 800561e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005622:	3301      	adds	r3, #1
 8005624:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005628:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800562c:	b29b      	uxth	r3, r3
 800562e:	029b      	lsls	r3, r3, #10
 8005630:	b29a      	uxth	r2, r3
 8005632:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005636:	801a      	strh	r2, [r3, #0]
 8005638:	e05a      	b.n	80056f0 <USB_EPStartXfer+0x1644>
 800563a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800563e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	691b      	ldr	r3, [r3, #16]
 8005646:	095b      	lsrs	r3, r3, #5
 8005648:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800564c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005650:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	691b      	ldr	r3, [r3, #16]
 8005658:	f003 031f 	and.w	r3, r3, #31
 800565c:	2b00      	cmp	r3, #0
 800565e:	d104      	bne.n	800566a <USB_EPStartXfer+0x15be>
 8005660:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005664:	3b01      	subs	r3, #1
 8005666:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800566a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800566e:	b29b      	uxth	r3, r3
 8005670:	029b      	lsls	r3, r3, #10
 8005672:	b29b      	uxth	r3, r3
 8005674:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005678:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800567c:	b29a      	uxth	r2, r3
 800567e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005682:	801a      	strh	r2, [r3, #0]
 8005684:	e034      	b.n	80056f0 <USB_EPStartXfer+0x1644>
 8005686:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800568a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	785b      	ldrb	r3, [r3, #1]
 8005692:	2b01      	cmp	r3, #1
 8005694:	d12c      	bne.n	80056f0 <USB_EPStartXfer+0x1644>
 8005696:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800569a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80056a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056a8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80056b2:	b29b      	uxth	r3, r3
 80056b4:	461a      	mov	r2, r3
 80056b6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80056ba:	4413      	add	r3, r2
 80056bc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80056c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056c4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	781b      	ldrb	r3, [r3, #0]
 80056cc:	011a      	lsls	r2, r3, #4
 80056ce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80056d2:	4413      	add	r3, r2
 80056d4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80056d8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80056dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056e0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	691b      	ldr	r3, [r3, #16]
 80056e8:	b29a      	uxth	r2, r3
 80056ea:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80056ee:	801a      	strh	r2, [r3, #0]
 80056f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056f4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80056fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005702:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	785b      	ldrb	r3, [r3, #1]
 800570a:	2b00      	cmp	r3, #0
 800570c:	f040 8091 	bne.w	8005832 <USB_EPStartXfer+0x1786>
 8005710:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005714:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800571e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005722:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800572c:	b29b      	uxth	r3, r3
 800572e:	461a      	mov	r2, r3
 8005730:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005734:	4413      	add	r3, r2
 8005736:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800573a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800573e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	781b      	ldrb	r3, [r3, #0]
 8005746:	011a      	lsls	r2, r3, #4
 8005748:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800574c:	4413      	add	r3, r2
 800574e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005752:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005756:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800575a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	691b      	ldr	r3, [r3, #16]
 8005762:	2b00      	cmp	r3, #0
 8005764:	d116      	bne.n	8005794 <USB_EPStartXfer+0x16e8>
 8005766:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800576a:	881b      	ldrh	r3, [r3, #0]
 800576c:	b29b      	uxth	r3, r3
 800576e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005772:	b29a      	uxth	r2, r3
 8005774:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005778:	801a      	strh	r2, [r3, #0]
 800577a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800577e:	881b      	ldrh	r3, [r3, #0]
 8005780:	b29b      	uxth	r3, r3
 8005782:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005786:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800578a:	b29a      	uxth	r2, r3
 800578c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005790:	801a      	strh	r2, [r3, #0]
 8005792:	e07c      	b.n	800588e <USB_EPStartXfer+0x17e2>
 8005794:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005798:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	691b      	ldr	r3, [r3, #16]
 80057a0:	2b3e      	cmp	r3, #62	; 0x3e
 80057a2:	d820      	bhi.n	80057e6 <USB_EPStartXfer+0x173a>
 80057a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057a8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	691b      	ldr	r3, [r3, #16]
 80057b0:	085b      	lsrs	r3, r3, #1
 80057b2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80057b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057ba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	691b      	ldr	r3, [r3, #16]
 80057c2:	f003 0301 	and.w	r3, r3, #1
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d004      	beq.n	80057d4 <USB_EPStartXfer+0x1728>
 80057ca:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80057ce:	3301      	adds	r3, #1
 80057d0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80057d4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80057d8:	b29b      	uxth	r3, r3
 80057da:	029b      	lsls	r3, r3, #10
 80057dc:	b29a      	uxth	r2, r3
 80057de:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80057e2:	801a      	strh	r2, [r3, #0]
 80057e4:	e053      	b.n	800588e <USB_EPStartXfer+0x17e2>
 80057e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057ea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	691b      	ldr	r3, [r3, #16]
 80057f2:	095b      	lsrs	r3, r3, #5
 80057f4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80057f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057fc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	691b      	ldr	r3, [r3, #16]
 8005804:	f003 031f 	and.w	r3, r3, #31
 8005808:	2b00      	cmp	r3, #0
 800580a:	d104      	bne.n	8005816 <USB_EPStartXfer+0x176a>
 800580c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005810:	3b01      	subs	r3, #1
 8005812:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005816:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800581a:	b29b      	uxth	r3, r3
 800581c:	029b      	lsls	r3, r3, #10
 800581e:	b29b      	uxth	r3, r3
 8005820:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005824:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005828:	b29a      	uxth	r2, r3
 800582a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800582e:	801a      	strh	r2, [r3, #0]
 8005830:	e02d      	b.n	800588e <USB_EPStartXfer+0x17e2>
 8005832:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005836:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	785b      	ldrb	r3, [r3, #1]
 800583e:	2b01      	cmp	r3, #1
 8005840:	d125      	bne.n	800588e <USB_EPStartXfer+0x17e2>
 8005842:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005846:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005850:	b29b      	uxth	r3, r3
 8005852:	461a      	mov	r2, r3
 8005854:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005858:	4413      	add	r3, r2
 800585a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800585e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005862:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	781b      	ldrb	r3, [r3, #0]
 800586a:	011a      	lsls	r2, r3, #4
 800586c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005870:	4413      	add	r3, r2
 8005872:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005876:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800587a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800587e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	691b      	ldr	r3, [r3, #16]
 8005886:	b29a      	uxth	r2, r3
 8005888:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800588c:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800588e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005892:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	69db      	ldr	r3, [r3, #28]
 800589a:	2b00      	cmp	r3, #0
 800589c:	f000 81fe 	beq.w	8005c9c <USB_EPStartXfer+0x1bf0>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80058a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058a4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80058a8:	681a      	ldr	r2, [r3, #0]
 80058aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058ae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	781b      	ldrb	r3, [r3, #0]
 80058b6:	009b      	lsls	r3, r3, #2
 80058b8:	4413      	add	r3, r2
 80058ba:	881b      	ldrh	r3, [r3, #0]
 80058bc:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80058c0:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80058c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d005      	beq.n	80058d8 <USB_EPStartXfer+0x182c>
 80058cc:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80058d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d10d      	bne.n	80058f4 <USB_EPStartXfer+0x1848>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80058d8:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80058dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	f040 81db 	bne.w	8005c9c <USB_EPStartXfer+0x1bf0>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80058e6:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80058ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	f040 81d4 	bne.w	8005c9c <USB_EPStartXfer+0x1bf0>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 80058f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058f8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80058fc:	681a      	ldr	r2, [r3, #0]
 80058fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005902:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	781b      	ldrb	r3, [r3, #0]
 800590a:	009b      	lsls	r3, r3, #2
 800590c:	4413      	add	r3, r2
 800590e:	881b      	ldrh	r3, [r3, #0]
 8005910:	b29b      	uxth	r3, r3
 8005912:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005916:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800591a:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 800591e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005922:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005926:	681a      	ldr	r2, [r3, #0]
 8005928:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800592c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	781b      	ldrb	r3, [r3, #0]
 8005934:	009b      	lsls	r3, r3, #2
 8005936:	441a      	add	r2, r3
 8005938:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 800593c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005940:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005944:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005948:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800594c:	b29b      	uxth	r3, r3
 800594e:	8013      	strh	r3, [r2, #0]
 8005950:	e1a4      	b.n	8005c9c <USB_EPStartXfer+0x1bf0>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8005952:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005956:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	78db      	ldrb	r3, [r3, #3]
 800595e:	2b01      	cmp	r3, #1
 8005960:	f040 819a 	bne.w	8005c98 <USB_EPStartXfer+0x1bec>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8005964:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005968:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	699a      	ldr	r2, [r3, #24]
 8005970:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005974:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	691b      	ldr	r3, [r3, #16]
 800597c:	429a      	cmp	r2, r3
 800597e:	d917      	bls.n	80059b0 <USB_EPStartXfer+0x1904>
        {
          len = ep->maxpacket;
 8005980:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005984:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	691b      	ldr	r3, [r3, #16]
 800598c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 8005990:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005994:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	699a      	ldr	r2, [r3, #24]
 800599c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80059a0:	1ad2      	subs	r2, r2, r3
 80059a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059a6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	619a      	str	r2, [r3, #24]
 80059ae:	e00e      	b.n	80059ce <USB_EPStartXfer+0x1922>
        }
        else
        {
          len = ep->xfer_len;
 80059b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059b4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	699b      	ldr	r3, [r3, #24]
 80059bc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 80059c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059c4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	2200      	movs	r2, #0
 80059cc:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80059ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059d2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	785b      	ldrb	r3, [r3, #1]
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d178      	bne.n	8005ad0 <USB_EPStartXfer+0x1a24>
 80059de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059e2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80059ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059f0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80059fa:	b29b      	uxth	r3, r3
 80059fc:	461a      	mov	r2, r3
 80059fe:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005a02:	4413      	add	r3, r2
 8005a04:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005a08:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a0c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	781b      	ldrb	r3, [r3, #0]
 8005a14:	011a      	lsls	r2, r3, #4
 8005a16:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005a1a:	4413      	add	r3, r2
 8005a1c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005a20:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005a24:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d116      	bne.n	8005a5a <USB_EPStartXfer+0x19ae>
 8005a2c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005a30:	881b      	ldrh	r3, [r3, #0]
 8005a32:	b29b      	uxth	r3, r3
 8005a34:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005a38:	b29a      	uxth	r2, r3
 8005a3a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005a3e:	801a      	strh	r2, [r3, #0]
 8005a40:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005a44:	881b      	ldrh	r3, [r3, #0]
 8005a46:	b29b      	uxth	r3, r3
 8005a48:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a4c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a50:	b29a      	uxth	r2, r3
 8005a52:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005a56:	801a      	strh	r2, [r3, #0]
 8005a58:	e06b      	b.n	8005b32 <USB_EPStartXfer+0x1a86>
 8005a5a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a5e:	2b3e      	cmp	r3, #62	; 0x3e
 8005a60:	d818      	bhi.n	8005a94 <USB_EPStartXfer+0x19e8>
 8005a62:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a66:	085b      	lsrs	r3, r3, #1
 8005a68:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005a6c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a70:	f003 0301 	and.w	r3, r3, #1
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d004      	beq.n	8005a82 <USB_EPStartXfer+0x19d6>
 8005a78:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005a7c:	3301      	adds	r3, #1
 8005a7e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005a82:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005a86:	b29b      	uxth	r3, r3
 8005a88:	029b      	lsls	r3, r3, #10
 8005a8a:	b29a      	uxth	r2, r3
 8005a8c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005a90:	801a      	strh	r2, [r3, #0]
 8005a92:	e04e      	b.n	8005b32 <USB_EPStartXfer+0x1a86>
 8005a94:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a98:	095b      	lsrs	r3, r3, #5
 8005a9a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005a9e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005aa2:	f003 031f 	and.w	r3, r3, #31
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d104      	bne.n	8005ab4 <USB_EPStartXfer+0x1a08>
 8005aaa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005aae:	3b01      	subs	r3, #1
 8005ab0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005ab4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005ab8:	b29b      	uxth	r3, r3
 8005aba:	029b      	lsls	r3, r3, #10
 8005abc:	b29b      	uxth	r3, r3
 8005abe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ac2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ac6:	b29a      	uxth	r2, r3
 8005ac8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005acc:	801a      	strh	r2, [r3, #0]
 8005ace:	e030      	b.n	8005b32 <USB_EPStartXfer+0x1a86>
 8005ad0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ad4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	785b      	ldrb	r3, [r3, #1]
 8005adc:	2b01      	cmp	r3, #1
 8005ade:	d128      	bne.n	8005b32 <USB_EPStartXfer+0x1a86>
 8005ae0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ae4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005aee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005af2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005afc:	b29b      	uxth	r3, r3
 8005afe:	461a      	mov	r2, r3
 8005b00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b04:	4413      	add	r3, r2
 8005b06:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005b0a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b0e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	781b      	ldrb	r3, [r3, #0]
 8005b16:	011a      	lsls	r2, r3, #4
 8005b18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b1c:	4413      	add	r3, r2
 8005b1e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005b22:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005b26:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b2a:	b29a      	uxth	r2, r3
 8005b2c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005b30:	801a      	strh	r2, [r3, #0]
 8005b32:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b36:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005b40:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b44:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	785b      	ldrb	r3, [r3, #1]
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d178      	bne.n	8005c42 <USB_EPStartXfer+0x1b96>
 8005b50:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b54:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005b5e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b62:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b6c:	b29b      	uxth	r3, r3
 8005b6e:	461a      	mov	r2, r3
 8005b70:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005b74:	4413      	add	r3, r2
 8005b76:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005b7a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b7e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	781b      	ldrb	r3, [r3, #0]
 8005b86:	011a      	lsls	r2, r3, #4
 8005b88:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005b8c:	4413      	add	r3, r2
 8005b8e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005b92:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005b96:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d116      	bne.n	8005bcc <USB_EPStartXfer+0x1b20>
 8005b9e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005ba2:	881b      	ldrh	r3, [r3, #0]
 8005ba4:	b29b      	uxth	r3, r3
 8005ba6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005baa:	b29a      	uxth	r2, r3
 8005bac:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005bb0:	801a      	strh	r2, [r3, #0]
 8005bb2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005bb6:	881b      	ldrh	r3, [r3, #0]
 8005bb8:	b29b      	uxth	r3, r3
 8005bba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005bbe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005bc2:	b29a      	uxth	r2, r3
 8005bc4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005bc8:	801a      	strh	r2, [r3, #0]
 8005bca:	e067      	b.n	8005c9c <USB_EPStartXfer+0x1bf0>
 8005bcc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005bd0:	2b3e      	cmp	r3, #62	; 0x3e
 8005bd2:	d818      	bhi.n	8005c06 <USB_EPStartXfer+0x1b5a>
 8005bd4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005bd8:	085b      	lsrs	r3, r3, #1
 8005bda:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005bde:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005be2:	f003 0301 	and.w	r3, r3, #1
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d004      	beq.n	8005bf4 <USB_EPStartXfer+0x1b48>
 8005bea:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005bee:	3301      	adds	r3, #1
 8005bf0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005bf4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005bf8:	b29b      	uxth	r3, r3
 8005bfa:	029b      	lsls	r3, r3, #10
 8005bfc:	b29a      	uxth	r2, r3
 8005bfe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005c02:	801a      	strh	r2, [r3, #0]
 8005c04:	e04a      	b.n	8005c9c <USB_EPStartXfer+0x1bf0>
 8005c06:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c0a:	095b      	lsrs	r3, r3, #5
 8005c0c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005c10:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c14:	f003 031f 	and.w	r3, r3, #31
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d104      	bne.n	8005c26 <USB_EPStartXfer+0x1b7a>
 8005c1c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005c20:	3b01      	subs	r3, #1
 8005c22:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005c26:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005c2a:	b29b      	uxth	r3, r3
 8005c2c:	029b      	lsls	r3, r3, #10
 8005c2e:	b29b      	uxth	r3, r3
 8005c30:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c34:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c38:	b29a      	uxth	r2, r3
 8005c3a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005c3e:	801a      	strh	r2, [r3, #0]
 8005c40:	e02c      	b.n	8005c9c <USB_EPStartXfer+0x1bf0>
 8005c42:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c46:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	785b      	ldrb	r3, [r3, #1]
 8005c4e:	2b01      	cmp	r3, #1
 8005c50:	d124      	bne.n	8005c9c <USB_EPStartXfer+0x1bf0>
 8005c52:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c56:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c60:	b29b      	uxth	r3, r3
 8005c62:	461a      	mov	r2, r3
 8005c64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c68:	4413      	add	r3, r2
 8005c6a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005c6e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c72:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	781b      	ldrb	r3, [r3, #0]
 8005c7a:	011a      	lsls	r2, r3, #4
 8005c7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c80:	4413      	add	r3, r2
 8005c82:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005c86:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005c8a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c8e:	b29a      	uxth	r2, r3
 8005c90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c94:	801a      	strh	r2, [r3, #0]
 8005c96:	e001      	b.n	8005c9c <USB_EPStartXfer+0x1bf0>
      }
      else
      {
        return HAL_ERROR;
 8005c98:	2301      	movs	r3, #1
 8005c9a:	e03a      	b.n	8005d12 <USB_EPStartXfer+0x1c66>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005c9c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ca0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005ca4:	681a      	ldr	r2, [r3, #0]
 8005ca6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005caa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	781b      	ldrb	r3, [r3, #0]
 8005cb2:	009b      	lsls	r3, r3, #2
 8005cb4:	4413      	add	r3, r2
 8005cb6:	881b      	ldrh	r3, [r3, #0]
 8005cb8:	b29b      	uxth	r3, r3
 8005cba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005cbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cc2:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8005cc6:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8005cca:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005cce:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8005cd2:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8005cd6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005cda:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8005cde:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ce2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005ce6:	681a      	ldr	r2, [r3, #0]
 8005ce8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005cec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	781b      	ldrb	r3, [r3, #0]
 8005cf4:	009b      	lsls	r3, r3, #2
 8005cf6:	441a      	add	r2, r3
 8005cf8:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8005cfc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d00:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d04:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d0c:	b29b      	uxth	r3, r3
 8005d0e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8005d10:	2300      	movs	r3, #0
}
 8005d12:	4618      	mov	r0, r3
 8005d14:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8005d18:	46bd      	mov	sp, r7
 8005d1a:	bd80      	pop	{r7, pc}

08005d1c <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005d1c:	b480      	push	{r7}
 8005d1e:	b085      	sub	sp, #20
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	6078      	str	r0, [r7, #4]
 8005d24:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8005d26:	683b      	ldr	r3, [r7, #0]
 8005d28:	785b      	ldrb	r3, [r3, #1]
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d020      	beq.n	8005d70 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8005d2e:	687a      	ldr	r2, [r7, #4]
 8005d30:	683b      	ldr	r3, [r7, #0]
 8005d32:	781b      	ldrb	r3, [r3, #0]
 8005d34:	009b      	lsls	r3, r3, #2
 8005d36:	4413      	add	r3, r2
 8005d38:	881b      	ldrh	r3, [r3, #0]
 8005d3a:	b29b      	uxth	r3, r3
 8005d3c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d40:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d44:	81bb      	strh	r3, [r7, #12]
 8005d46:	89bb      	ldrh	r3, [r7, #12]
 8005d48:	f083 0310 	eor.w	r3, r3, #16
 8005d4c:	81bb      	strh	r3, [r7, #12]
 8005d4e:	687a      	ldr	r2, [r7, #4]
 8005d50:	683b      	ldr	r3, [r7, #0]
 8005d52:	781b      	ldrb	r3, [r3, #0]
 8005d54:	009b      	lsls	r3, r3, #2
 8005d56:	441a      	add	r2, r3
 8005d58:	89bb      	ldrh	r3, [r7, #12]
 8005d5a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d5e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d6a:	b29b      	uxth	r3, r3
 8005d6c:	8013      	strh	r3, [r2, #0]
 8005d6e:	e01f      	b.n	8005db0 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8005d70:	687a      	ldr	r2, [r7, #4]
 8005d72:	683b      	ldr	r3, [r7, #0]
 8005d74:	781b      	ldrb	r3, [r3, #0]
 8005d76:	009b      	lsls	r3, r3, #2
 8005d78:	4413      	add	r3, r2
 8005d7a:	881b      	ldrh	r3, [r3, #0]
 8005d7c:	b29b      	uxth	r3, r3
 8005d7e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005d82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d86:	81fb      	strh	r3, [r7, #14]
 8005d88:	89fb      	ldrh	r3, [r7, #14]
 8005d8a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005d8e:	81fb      	strh	r3, [r7, #14]
 8005d90:	687a      	ldr	r2, [r7, #4]
 8005d92:	683b      	ldr	r3, [r7, #0]
 8005d94:	781b      	ldrb	r3, [r3, #0]
 8005d96:	009b      	lsls	r3, r3, #2
 8005d98:	441a      	add	r2, r3
 8005d9a:	89fb      	ldrh	r3, [r7, #14]
 8005d9c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005da0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005da4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005da8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005dac:	b29b      	uxth	r3, r3
 8005dae:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8005db0:	2300      	movs	r3, #0
}
 8005db2:	4618      	mov	r0, r3
 8005db4:	3714      	adds	r7, #20
 8005db6:	46bd      	mov	sp, r7
 8005db8:	bc80      	pop	{r7}
 8005dba:	4770      	bx	lr

08005dbc <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005dbc:	b480      	push	{r7}
 8005dbe:	b087      	sub	sp, #28
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	6078      	str	r0, [r7, #4]
 8005dc4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005dc6:	683b      	ldr	r3, [r7, #0]
 8005dc8:	7b1b      	ldrb	r3, [r3, #12]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	f040 809d 	bne.w	8005f0a <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8005dd0:	683b      	ldr	r3, [r7, #0]
 8005dd2:	785b      	ldrb	r3, [r3, #1]
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d04c      	beq.n	8005e72 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005dd8:	687a      	ldr	r2, [r7, #4]
 8005dda:	683b      	ldr	r3, [r7, #0]
 8005ddc:	781b      	ldrb	r3, [r3, #0]
 8005dde:	009b      	lsls	r3, r3, #2
 8005de0:	4413      	add	r3, r2
 8005de2:	881b      	ldrh	r3, [r3, #0]
 8005de4:	823b      	strh	r3, [r7, #16]
 8005de6:	8a3b      	ldrh	r3, [r7, #16]
 8005de8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d01b      	beq.n	8005e28 <USB_EPClearStall+0x6c>
 8005df0:	687a      	ldr	r2, [r7, #4]
 8005df2:	683b      	ldr	r3, [r7, #0]
 8005df4:	781b      	ldrb	r3, [r3, #0]
 8005df6:	009b      	lsls	r3, r3, #2
 8005df8:	4413      	add	r3, r2
 8005dfa:	881b      	ldrh	r3, [r3, #0]
 8005dfc:	b29b      	uxth	r3, r3
 8005dfe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e06:	81fb      	strh	r3, [r7, #14]
 8005e08:	687a      	ldr	r2, [r7, #4]
 8005e0a:	683b      	ldr	r3, [r7, #0]
 8005e0c:	781b      	ldrb	r3, [r3, #0]
 8005e0e:	009b      	lsls	r3, r3, #2
 8005e10:	441a      	add	r2, r3
 8005e12:	89fb      	ldrh	r3, [r7, #14]
 8005e14:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e18:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e1c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e20:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005e24:	b29b      	uxth	r3, r3
 8005e26:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005e28:	683b      	ldr	r3, [r7, #0]
 8005e2a:	78db      	ldrb	r3, [r3, #3]
 8005e2c:	2b01      	cmp	r3, #1
 8005e2e:	d06c      	beq.n	8005f0a <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005e30:	687a      	ldr	r2, [r7, #4]
 8005e32:	683b      	ldr	r3, [r7, #0]
 8005e34:	781b      	ldrb	r3, [r3, #0]
 8005e36:	009b      	lsls	r3, r3, #2
 8005e38:	4413      	add	r3, r2
 8005e3a:	881b      	ldrh	r3, [r3, #0]
 8005e3c:	b29b      	uxth	r3, r3
 8005e3e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e42:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e46:	81bb      	strh	r3, [r7, #12]
 8005e48:	89bb      	ldrh	r3, [r7, #12]
 8005e4a:	f083 0320 	eor.w	r3, r3, #32
 8005e4e:	81bb      	strh	r3, [r7, #12]
 8005e50:	687a      	ldr	r2, [r7, #4]
 8005e52:	683b      	ldr	r3, [r7, #0]
 8005e54:	781b      	ldrb	r3, [r3, #0]
 8005e56:	009b      	lsls	r3, r3, #2
 8005e58:	441a      	add	r2, r3
 8005e5a:	89bb      	ldrh	r3, [r7, #12]
 8005e5c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e60:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e64:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e6c:	b29b      	uxth	r3, r3
 8005e6e:	8013      	strh	r3, [r2, #0]
 8005e70:	e04b      	b.n	8005f0a <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005e72:	687a      	ldr	r2, [r7, #4]
 8005e74:	683b      	ldr	r3, [r7, #0]
 8005e76:	781b      	ldrb	r3, [r3, #0]
 8005e78:	009b      	lsls	r3, r3, #2
 8005e7a:	4413      	add	r3, r2
 8005e7c:	881b      	ldrh	r3, [r3, #0]
 8005e7e:	82fb      	strh	r3, [r7, #22]
 8005e80:	8afb      	ldrh	r3, [r7, #22]
 8005e82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d01b      	beq.n	8005ec2 <USB_EPClearStall+0x106>
 8005e8a:	687a      	ldr	r2, [r7, #4]
 8005e8c:	683b      	ldr	r3, [r7, #0]
 8005e8e:	781b      	ldrb	r3, [r3, #0]
 8005e90:	009b      	lsls	r3, r3, #2
 8005e92:	4413      	add	r3, r2
 8005e94:	881b      	ldrh	r3, [r3, #0]
 8005e96:	b29b      	uxth	r3, r3
 8005e98:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ea0:	82bb      	strh	r3, [r7, #20]
 8005ea2:	687a      	ldr	r2, [r7, #4]
 8005ea4:	683b      	ldr	r3, [r7, #0]
 8005ea6:	781b      	ldrb	r3, [r3, #0]
 8005ea8:	009b      	lsls	r3, r3, #2
 8005eaa:	441a      	add	r2, r3
 8005eac:	8abb      	ldrh	r3, [r7, #20]
 8005eae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005eb2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005eb6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005eba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ebe:	b29b      	uxth	r3, r3
 8005ec0:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005ec2:	687a      	ldr	r2, [r7, #4]
 8005ec4:	683b      	ldr	r3, [r7, #0]
 8005ec6:	781b      	ldrb	r3, [r3, #0]
 8005ec8:	009b      	lsls	r3, r3, #2
 8005eca:	4413      	add	r3, r2
 8005ecc:	881b      	ldrh	r3, [r3, #0]
 8005ece:	b29b      	uxth	r3, r3
 8005ed0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005ed4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ed8:	827b      	strh	r3, [r7, #18]
 8005eda:	8a7b      	ldrh	r3, [r7, #18]
 8005edc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005ee0:	827b      	strh	r3, [r7, #18]
 8005ee2:	8a7b      	ldrh	r3, [r7, #18]
 8005ee4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005ee8:	827b      	strh	r3, [r7, #18]
 8005eea:	687a      	ldr	r2, [r7, #4]
 8005eec:	683b      	ldr	r3, [r7, #0]
 8005eee:	781b      	ldrb	r3, [r3, #0]
 8005ef0:	009b      	lsls	r3, r3, #2
 8005ef2:	441a      	add	r2, r3
 8005ef4:	8a7b      	ldrh	r3, [r7, #18]
 8005ef6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005efa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005efe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f06:	b29b      	uxth	r3, r3
 8005f08:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8005f0a:	2300      	movs	r3, #0
}
 8005f0c:	4618      	mov	r0, r3
 8005f0e:	371c      	adds	r7, #28
 8005f10:	46bd      	mov	sp, r7
 8005f12:	bc80      	pop	{r7}
 8005f14:	4770      	bx	lr

08005f16 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8005f16:	b480      	push	{r7}
 8005f18:	b083      	sub	sp, #12
 8005f1a:	af00      	add	r7, sp, #0
 8005f1c:	6078      	str	r0, [r7, #4]
 8005f1e:	460b      	mov	r3, r1
 8005f20:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8005f22:	78fb      	ldrb	r3, [r7, #3]
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d103      	bne.n	8005f30 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2280      	movs	r2, #128	; 0x80
 8005f2c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8005f30:	2300      	movs	r3, #0
}
 8005f32:	4618      	mov	r0, r3
 8005f34:	370c      	adds	r7, #12
 8005f36:	46bd      	mov	sp, r7
 8005f38:	bc80      	pop	{r7}
 8005f3a:	4770      	bx	lr

08005f3c <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8005f3c:	b480      	push	{r7}
 8005f3e:	b083      	sub	sp, #12
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8005f44:	2300      	movs	r3, #0
}
 8005f46:	4618      	mov	r0, r3
 8005f48:	370c      	adds	r7, #12
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	bc80      	pop	{r7}
 8005f4e:	4770      	bx	lr

08005f50 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8005f50:	b480      	push	{r7}
 8005f52:	b083      	sub	sp, #12
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8005f58:	2300      	movs	r3, #0
}
 8005f5a:	4618      	mov	r0, r3
 8005f5c:	370c      	adds	r7, #12
 8005f5e:	46bd      	mov	sp, r7
 8005f60:	bc80      	pop	{r7}
 8005f62:	4770      	bx	lr

08005f64 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8005f64:	b480      	push	{r7}
 8005f66:	b085      	sub	sp, #20
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005f72:	b29b      	uxth	r3, r3
 8005f74:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8005f76:	68fb      	ldr	r3, [r7, #12]
}
 8005f78:	4618      	mov	r0, r3
 8005f7a:	3714      	adds	r7, #20
 8005f7c:	46bd      	mov	sp, r7
 8005f7e:	bc80      	pop	{r7}
 8005f80:	4770      	bx	lr

08005f82 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8005f82:	b480      	push	{r7}
 8005f84:	b083      	sub	sp, #12
 8005f86:	af00      	add	r7, sp, #0
 8005f88:	6078      	str	r0, [r7, #4]
 8005f8a:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8005f8c:	2300      	movs	r3, #0
}
 8005f8e:	4618      	mov	r0, r3
 8005f90:	370c      	adds	r7, #12
 8005f92:	46bd      	mov	sp, r7
 8005f94:	bc80      	pop	{r7}
 8005f96:	4770      	bx	lr

08005f98 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8005f98:	b480      	push	{r7}
 8005f9a:	b08d      	sub	sp, #52	; 0x34
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	60f8      	str	r0, [r7, #12]
 8005fa0:	60b9      	str	r1, [r7, #8]
 8005fa2:	4611      	mov	r1, r2
 8005fa4:	461a      	mov	r2, r3
 8005fa6:	460b      	mov	r3, r1
 8005fa8:	80fb      	strh	r3, [r7, #6]
 8005faa:	4613      	mov	r3, r2
 8005fac:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8005fae:	88bb      	ldrh	r3, [r7, #4]
 8005fb0:	3301      	adds	r3, #1
 8005fb2:	085b      	lsrs	r3, r3, #1
 8005fb4:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8005fba:	68bb      	ldr	r3, [r7, #8]
 8005fbc:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005fbe:	88fb      	ldrh	r3, [r7, #6]
 8005fc0:	005a      	lsls	r2, r3, #1
 8005fc2:	69fb      	ldr	r3, [r7, #28]
 8005fc4:	4413      	add	r3, r2
 8005fc6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005fca:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8005fcc:	6a3b      	ldr	r3, [r7, #32]
 8005fce:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005fd0:	e01e      	b.n	8006010 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8005fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fd4:	781b      	ldrb	r3, [r3, #0]
 8005fd6:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8005fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fda:	3301      	adds	r3, #1
 8005fdc:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8005fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fe0:	781b      	ldrb	r3, [r3, #0]
 8005fe2:	b29b      	uxth	r3, r3
 8005fe4:	021b      	lsls	r3, r3, #8
 8005fe6:	b29b      	uxth	r3, r3
 8005fe8:	461a      	mov	r2, r3
 8005fea:	69bb      	ldr	r3, [r7, #24]
 8005fec:	4313      	orrs	r3, r2
 8005fee:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8005ff0:	697b      	ldr	r3, [r7, #20]
 8005ff2:	b29a      	uxth	r2, r3
 8005ff4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ff6:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8005ff8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ffa:	3302      	adds	r3, #2
 8005ffc:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8005ffe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006000:	3302      	adds	r3, #2
 8006002:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8006004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006006:	3301      	adds	r3, #1
 8006008:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 800600a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800600c:	3b01      	subs	r3, #1
 800600e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006010:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006012:	2b00      	cmp	r3, #0
 8006014:	d1dd      	bne.n	8005fd2 <USB_WritePMA+0x3a>
  }
}
 8006016:	bf00      	nop
 8006018:	bf00      	nop
 800601a:	3734      	adds	r7, #52	; 0x34
 800601c:	46bd      	mov	sp, r7
 800601e:	bc80      	pop	{r7}
 8006020:	4770      	bx	lr

08006022 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006022:	b480      	push	{r7}
 8006024:	b08b      	sub	sp, #44	; 0x2c
 8006026:	af00      	add	r7, sp, #0
 8006028:	60f8      	str	r0, [r7, #12]
 800602a:	60b9      	str	r1, [r7, #8]
 800602c:	4611      	mov	r1, r2
 800602e:	461a      	mov	r2, r3
 8006030:	460b      	mov	r3, r1
 8006032:	80fb      	strh	r3, [r7, #6]
 8006034:	4613      	mov	r3, r2
 8006036:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8006038:	88bb      	ldrh	r3, [r7, #4]
 800603a:	085b      	lsrs	r3, r3, #1
 800603c:	b29b      	uxth	r3, r3
 800603e:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006044:	68bb      	ldr	r3, [r7, #8]
 8006046:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006048:	88fb      	ldrh	r3, [r7, #6]
 800604a:	005a      	lsls	r2, r3, #1
 800604c:	697b      	ldr	r3, [r7, #20]
 800604e:	4413      	add	r3, r2
 8006050:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006054:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8006056:	69bb      	ldr	r3, [r7, #24]
 8006058:	627b      	str	r3, [r7, #36]	; 0x24
 800605a:	e01b      	b.n	8006094 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 800605c:	6a3b      	ldr	r3, [r7, #32]
 800605e:	881b      	ldrh	r3, [r3, #0]
 8006060:	b29b      	uxth	r3, r3
 8006062:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8006064:	6a3b      	ldr	r3, [r7, #32]
 8006066:	3302      	adds	r3, #2
 8006068:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800606a:	693b      	ldr	r3, [r7, #16]
 800606c:	b2da      	uxtb	r2, r3
 800606e:	69fb      	ldr	r3, [r7, #28]
 8006070:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006072:	69fb      	ldr	r3, [r7, #28]
 8006074:	3301      	adds	r3, #1
 8006076:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8006078:	693b      	ldr	r3, [r7, #16]
 800607a:	0a1b      	lsrs	r3, r3, #8
 800607c:	b2da      	uxtb	r2, r3
 800607e:	69fb      	ldr	r3, [r7, #28]
 8006080:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006082:	69fb      	ldr	r3, [r7, #28]
 8006084:	3301      	adds	r3, #1
 8006086:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8006088:	6a3b      	ldr	r3, [r7, #32]
 800608a:	3302      	adds	r3, #2
 800608c:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 800608e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006090:	3b01      	subs	r3, #1
 8006092:	627b      	str	r3, [r7, #36]	; 0x24
 8006094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006096:	2b00      	cmp	r3, #0
 8006098:	d1e0      	bne.n	800605c <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 800609a:	88bb      	ldrh	r3, [r7, #4]
 800609c:	f003 0301 	and.w	r3, r3, #1
 80060a0:	b29b      	uxth	r3, r3
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d007      	beq.n	80060b6 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 80060a6:	6a3b      	ldr	r3, [r7, #32]
 80060a8:	881b      	ldrh	r3, [r3, #0]
 80060aa:	b29b      	uxth	r3, r3
 80060ac:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80060ae:	693b      	ldr	r3, [r7, #16]
 80060b0:	b2da      	uxtb	r2, r3
 80060b2:	69fb      	ldr	r3, [r7, #28]
 80060b4:	701a      	strb	r2, [r3, #0]
  }
}
 80060b6:	bf00      	nop
 80060b8:	372c      	adds	r7, #44	; 0x2c
 80060ba:	46bd      	mov	sp, r7
 80060bc:	bc80      	pop	{r7}
 80060be:	4770      	bx	lr

080060c0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80060c0:	b580      	push	{r7, lr}
 80060c2:	b084      	sub	sp, #16
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	6078      	str	r0, [r7, #4]
 80060c8:	460b      	mov	r3, r1
 80060ca:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80060cc:	2300      	movs	r3, #0
 80060ce:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	7c1b      	ldrb	r3, [r3, #16]
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d115      	bne.n	8006104 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80060d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80060dc:	2202      	movs	r2, #2
 80060de:	2181      	movs	r1, #129	; 0x81
 80060e0:	6878      	ldr	r0, [r7, #4]
 80060e2:	f001 feca 	bl	8007e7a <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	2201      	movs	r2, #1
 80060ea:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80060ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 80060f0:	2202      	movs	r2, #2
 80060f2:	2101      	movs	r1, #1
 80060f4:	6878      	ldr	r0, [r7, #4]
 80060f6:	f001 fec0 	bl	8007e7a <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	2201      	movs	r2, #1
 80060fe:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8006102:	e012      	b.n	800612a <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006104:	2340      	movs	r3, #64	; 0x40
 8006106:	2202      	movs	r2, #2
 8006108:	2181      	movs	r1, #129	; 0x81
 800610a:	6878      	ldr	r0, [r7, #4]
 800610c:	f001 feb5 	bl	8007e7a <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	2201      	movs	r2, #1
 8006114:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006116:	2340      	movs	r3, #64	; 0x40
 8006118:	2202      	movs	r2, #2
 800611a:	2101      	movs	r1, #1
 800611c:	6878      	ldr	r0, [r7, #4]
 800611e:	f001 feac 	bl	8007e7a <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	2201      	movs	r2, #1
 8006126:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800612a:	2308      	movs	r3, #8
 800612c:	2203      	movs	r2, #3
 800612e:	2182      	movs	r1, #130	; 0x82
 8006130:	6878      	ldr	r0, [r7, #4]
 8006132:	f001 fea2 	bl	8007e7a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	2201      	movs	r2, #1
 800613a:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800613c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006140:	f001 ffc2 	bl	80080c8 <USBD_static_malloc>
 8006144:	4602      	mov	r2, r0
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006152:	2b00      	cmp	r3, #0
 8006154:	d102      	bne.n	800615c <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8006156:	2301      	movs	r3, #1
 8006158:	73fb      	strb	r3, [r7, #15]
 800615a:	e026      	b.n	80061aa <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006162:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800616e:	68bb      	ldr	r3, [r7, #8]
 8006170:	2200      	movs	r2, #0
 8006172:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8006176:	68bb      	ldr	r3, [r7, #8]
 8006178:	2200      	movs	r2, #0
 800617a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	7c1b      	ldrb	r3, [r3, #16]
 8006182:	2b00      	cmp	r3, #0
 8006184:	d109      	bne.n	800619a <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006186:	68bb      	ldr	r3, [r7, #8]
 8006188:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800618c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006190:	2101      	movs	r1, #1
 8006192:	6878      	ldr	r0, [r7, #4]
 8006194:	f001 ff62 	bl	800805c <USBD_LL_PrepareReceive>
 8006198:	e007      	b.n	80061aa <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800619a:	68bb      	ldr	r3, [r7, #8]
 800619c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80061a0:	2340      	movs	r3, #64	; 0x40
 80061a2:	2101      	movs	r1, #1
 80061a4:	6878      	ldr	r0, [r7, #4]
 80061a6:	f001 ff59 	bl	800805c <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 80061aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80061ac:	4618      	mov	r0, r3
 80061ae:	3710      	adds	r7, #16
 80061b0:	46bd      	mov	sp, r7
 80061b2:	bd80      	pop	{r7, pc}

080061b4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80061b4:	b580      	push	{r7, lr}
 80061b6:	b084      	sub	sp, #16
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	6078      	str	r0, [r7, #4]
 80061bc:	460b      	mov	r3, r1
 80061be:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80061c0:	2300      	movs	r3, #0
 80061c2:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80061c4:	2181      	movs	r1, #129	; 0x81
 80061c6:	6878      	ldr	r0, [r7, #4]
 80061c8:	f001 fe7d 	bl	8007ec6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	2200      	movs	r2, #0
 80061d0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80061d2:	2101      	movs	r1, #1
 80061d4:	6878      	ldr	r0, [r7, #4]
 80061d6:	f001 fe76 	bl	8007ec6 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	2200      	movs	r2, #0
 80061de:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80061e2:	2182      	movs	r1, #130	; 0x82
 80061e4:	6878      	ldr	r0, [r7, #4]
 80061e6:	f001 fe6e 	bl	8007ec6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	2200      	movs	r2, #0
 80061ee:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d00e      	beq.n	8006218 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006200:	685b      	ldr	r3, [r3, #4]
 8006202:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800620a:	4618      	mov	r0, r3
 800620c:	f001 ff68 	bl	80080e0 <USBD_static_free>
    pdev->pClassData = NULL;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2200      	movs	r2, #0
 8006214:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8006218:	7bfb      	ldrb	r3, [r7, #15]
}
 800621a:	4618      	mov	r0, r3
 800621c:	3710      	adds	r7, #16
 800621e:	46bd      	mov	sp, r7
 8006220:	bd80      	pop	{r7, pc}

08006222 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8006222:	b580      	push	{r7, lr}
 8006224:	b086      	sub	sp, #24
 8006226:	af00      	add	r7, sp, #0
 8006228:	6078      	str	r0, [r7, #4]
 800622a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006232:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8006234:	2300      	movs	r3, #0
 8006236:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8006238:	2300      	movs	r3, #0
 800623a:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800623c:	2300      	movs	r3, #0
 800623e:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006240:	683b      	ldr	r3, [r7, #0]
 8006242:	781b      	ldrb	r3, [r3, #0]
 8006244:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006248:	2b00      	cmp	r3, #0
 800624a:	d039      	beq.n	80062c0 <USBD_CDC_Setup+0x9e>
 800624c:	2b20      	cmp	r3, #32
 800624e:	d17f      	bne.n	8006350 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8006250:	683b      	ldr	r3, [r7, #0]
 8006252:	88db      	ldrh	r3, [r3, #6]
 8006254:	2b00      	cmp	r3, #0
 8006256:	d029      	beq.n	80062ac <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8006258:	683b      	ldr	r3, [r7, #0]
 800625a:	781b      	ldrb	r3, [r3, #0]
 800625c:	b25b      	sxtb	r3, r3
 800625e:	2b00      	cmp	r3, #0
 8006260:	da11      	bge.n	8006286 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006268:	689b      	ldr	r3, [r3, #8]
 800626a:	683a      	ldr	r2, [r7, #0]
 800626c:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 800626e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006270:	683a      	ldr	r2, [r7, #0]
 8006272:	88d2      	ldrh	r2, [r2, #6]
 8006274:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006276:	6939      	ldr	r1, [r7, #16]
 8006278:	683b      	ldr	r3, [r7, #0]
 800627a:	88db      	ldrh	r3, [r3, #6]
 800627c:	461a      	mov	r2, r3
 800627e:	6878      	ldr	r0, [r7, #4]
 8006280:	f001 fa09 	bl	8007696 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8006284:	e06b      	b.n	800635e <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8006286:	683b      	ldr	r3, [r7, #0]
 8006288:	785a      	ldrb	r2, [r3, #1]
 800628a:	693b      	ldr	r3, [r7, #16]
 800628c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8006290:	683b      	ldr	r3, [r7, #0]
 8006292:	88db      	ldrh	r3, [r3, #6]
 8006294:	b2da      	uxtb	r2, r3
 8006296:	693b      	ldr	r3, [r7, #16]
 8006298:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800629c:	6939      	ldr	r1, [r7, #16]
 800629e:	683b      	ldr	r3, [r7, #0]
 80062a0:	88db      	ldrh	r3, [r3, #6]
 80062a2:	461a      	mov	r2, r3
 80062a4:	6878      	ldr	r0, [r7, #4]
 80062a6:	f001 fa24 	bl	80076f2 <USBD_CtlPrepareRx>
      break;
 80062aa:	e058      	b.n	800635e <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80062b2:	689b      	ldr	r3, [r3, #8]
 80062b4:	683a      	ldr	r2, [r7, #0]
 80062b6:	7850      	ldrb	r0, [r2, #1]
 80062b8:	2200      	movs	r2, #0
 80062ba:	6839      	ldr	r1, [r7, #0]
 80062bc:	4798      	blx	r3
      break;
 80062be:	e04e      	b.n	800635e <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80062c0:	683b      	ldr	r3, [r7, #0]
 80062c2:	785b      	ldrb	r3, [r3, #1]
 80062c4:	2b0b      	cmp	r3, #11
 80062c6:	d02e      	beq.n	8006326 <USBD_CDC_Setup+0x104>
 80062c8:	2b0b      	cmp	r3, #11
 80062ca:	dc38      	bgt.n	800633e <USBD_CDC_Setup+0x11c>
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d002      	beq.n	80062d6 <USBD_CDC_Setup+0xb4>
 80062d0:	2b0a      	cmp	r3, #10
 80062d2:	d014      	beq.n	80062fe <USBD_CDC_Setup+0xdc>
 80062d4:	e033      	b.n	800633e <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80062dc:	2b03      	cmp	r3, #3
 80062de:	d107      	bne.n	80062f0 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 80062e0:	f107 030c 	add.w	r3, r7, #12
 80062e4:	2202      	movs	r2, #2
 80062e6:	4619      	mov	r1, r3
 80062e8:	6878      	ldr	r0, [r7, #4]
 80062ea:	f001 f9d4 	bl	8007696 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80062ee:	e02e      	b.n	800634e <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 80062f0:	6839      	ldr	r1, [r7, #0]
 80062f2:	6878      	ldr	r0, [r7, #4]
 80062f4:	f001 f965 	bl	80075c2 <USBD_CtlError>
            ret = USBD_FAIL;
 80062f8:	2302      	movs	r3, #2
 80062fa:	75fb      	strb	r3, [r7, #23]
          break;
 80062fc:	e027      	b.n	800634e <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006304:	2b03      	cmp	r3, #3
 8006306:	d107      	bne.n	8006318 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8006308:	f107 030f 	add.w	r3, r7, #15
 800630c:	2201      	movs	r2, #1
 800630e:	4619      	mov	r1, r3
 8006310:	6878      	ldr	r0, [r7, #4]
 8006312:	f001 f9c0 	bl	8007696 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006316:	e01a      	b.n	800634e <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8006318:	6839      	ldr	r1, [r7, #0]
 800631a:	6878      	ldr	r0, [r7, #4]
 800631c:	f001 f951 	bl	80075c2 <USBD_CtlError>
            ret = USBD_FAIL;
 8006320:	2302      	movs	r3, #2
 8006322:	75fb      	strb	r3, [r7, #23]
          break;
 8006324:	e013      	b.n	800634e <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800632c:	2b03      	cmp	r3, #3
 800632e:	d00d      	beq.n	800634c <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8006330:	6839      	ldr	r1, [r7, #0]
 8006332:	6878      	ldr	r0, [r7, #4]
 8006334:	f001 f945 	bl	80075c2 <USBD_CtlError>
            ret = USBD_FAIL;
 8006338:	2302      	movs	r3, #2
 800633a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800633c:	e006      	b.n	800634c <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 800633e:	6839      	ldr	r1, [r7, #0]
 8006340:	6878      	ldr	r0, [r7, #4]
 8006342:	f001 f93e 	bl	80075c2 <USBD_CtlError>
          ret = USBD_FAIL;
 8006346:	2302      	movs	r3, #2
 8006348:	75fb      	strb	r3, [r7, #23]
          break;
 800634a:	e000      	b.n	800634e <USBD_CDC_Setup+0x12c>
          break;
 800634c:	bf00      	nop
      }
      break;
 800634e:	e006      	b.n	800635e <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8006350:	6839      	ldr	r1, [r7, #0]
 8006352:	6878      	ldr	r0, [r7, #4]
 8006354:	f001 f935 	bl	80075c2 <USBD_CtlError>
      ret = USBD_FAIL;
 8006358:	2302      	movs	r3, #2
 800635a:	75fb      	strb	r3, [r7, #23]
      break;
 800635c:	bf00      	nop
  }

  return ret;
 800635e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006360:	4618      	mov	r0, r3
 8006362:	3718      	adds	r7, #24
 8006364:	46bd      	mov	sp, r7
 8006366:	bd80      	pop	{r7, pc}

08006368 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006368:	b580      	push	{r7, lr}
 800636a:	b084      	sub	sp, #16
 800636c:	af00      	add	r7, sp, #0
 800636e:	6078      	str	r0, [r7, #4]
 8006370:	460b      	mov	r3, r1
 8006372:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800637a:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006382:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800638a:	2b00      	cmp	r3, #0
 800638c:	d03a      	beq.n	8006404 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800638e:	78fa      	ldrb	r2, [r7, #3]
 8006390:	6879      	ldr	r1, [r7, #4]
 8006392:	4613      	mov	r3, r2
 8006394:	009b      	lsls	r3, r3, #2
 8006396:	4413      	add	r3, r2
 8006398:	009b      	lsls	r3, r3, #2
 800639a:	440b      	add	r3, r1
 800639c:	331c      	adds	r3, #28
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d029      	beq.n	80063f8 <USBD_CDC_DataIn+0x90>
 80063a4:	78fa      	ldrb	r2, [r7, #3]
 80063a6:	6879      	ldr	r1, [r7, #4]
 80063a8:	4613      	mov	r3, r2
 80063aa:	009b      	lsls	r3, r3, #2
 80063ac:	4413      	add	r3, r2
 80063ae:	009b      	lsls	r3, r3, #2
 80063b0:	440b      	add	r3, r1
 80063b2:	331c      	adds	r3, #28
 80063b4:	681a      	ldr	r2, [r3, #0]
 80063b6:	78f9      	ldrb	r1, [r7, #3]
 80063b8:	68b8      	ldr	r0, [r7, #8]
 80063ba:	460b      	mov	r3, r1
 80063bc:	009b      	lsls	r3, r3, #2
 80063be:	440b      	add	r3, r1
 80063c0:	00db      	lsls	r3, r3, #3
 80063c2:	4403      	add	r3, r0
 80063c4:	3338      	adds	r3, #56	; 0x38
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	fbb2 f1f3 	udiv	r1, r2, r3
 80063cc:	fb01 f303 	mul.w	r3, r1, r3
 80063d0:	1ad3      	subs	r3, r2, r3
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d110      	bne.n	80063f8 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 80063d6:	78fa      	ldrb	r2, [r7, #3]
 80063d8:	6879      	ldr	r1, [r7, #4]
 80063da:	4613      	mov	r3, r2
 80063dc:	009b      	lsls	r3, r3, #2
 80063de:	4413      	add	r3, r2
 80063e0:	009b      	lsls	r3, r3, #2
 80063e2:	440b      	add	r3, r1
 80063e4:	331c      	adds	r3, #28
 80063e6:	2200      	movs	r2, #0
 80063e8:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80063ea:	78f9      	ldrb	r1, [r7, #3]
 80063ec:	2300      	movs	r3, #0
 80063ee:	2200      	movs	r2, #0
 80063f0:	6878      	ldr	r0, [r7, #4]
 80063f2:	f001 fe10 	bl	8008016 <USBD_LL_Transmit>
 80063f6:	e003      	b.n	8006400 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	2200      	movs	r2, #0
 80063fc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8006400:	2300      	movs	r3, #0
 8006402:	e000      	b.n	8006406 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8006404:	2302      	movs	r3, #2
  }
}
 8006406:	4618      	mov	r0, r3
 8006408:	3710      	adds	r7, #16
 800640a:	46bd      	mov	sp, r7
 800640c:	bd80      	pop	{r7, pc}

0800640e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800640e:	b580      	push	{r7, lr}
 8006410:	b084      	sub	sp, #16
 8006412:	af00      	add	r7, sp, #0
 8006414:	6078      	str	r0, [r7, #4]
 8006416:	460b      	mov	r3, r1
 8006418:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006420:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006422:	78fb      	ldrb	r3, [r7, #3]
 8006424:	4619      	mov	r1, r3
 8006426:	6878      	ldr	r0, [r7, #4]
 8006428:	f001 fe3b 	bl	80080a2 <USBD_LL_GetRxDataSize>
 800642c:	4602      	mov	r2, r0
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800643a:	2b00      	cmp	r3, #0
 800643c:	d00d      	beq.n	800645a <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006444:	68db      	ldr	r3, [r3, #12]
 8006446:	68fa      	ldr	r2, [r7, #12]
 8006448:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800644c:	68fa      	ldr	r2, [r7, #12]
 800644e:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006452:	4611      	mov	r1, r2
 8006454:	4798      	blx	r3

    return USBD_OK;
 8006456:	2300      	movs	r3, #0
 8006458:	e000      	b.n	800645c <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800645a:	2302      	movs	r3, #2
  }
}
 800645c:	4618      	mov	r0, r3
 800645e:	3710      	adds	r7, #16
 8006460:	46bd      	mov	sp, r7
 8006462:	bd80      	pop	{r7, pc}

08006464 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006464:	b580      	push	{r7, lr}
 8006466:	b084      	sub	sp, #16
 8006468:	af00      	add	r7, sp, #0
 800646a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006472:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800647a:	2b00      	cmp	r3, #0
 800647c:	d015      	beq.n	80064aa <USBD_CDC_EP0_RxReady+0x46>
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006484:	2bff      	cmp	r3, #255	; 0xff
 8006486:	d010      	beq.n	80064aa <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800648e:	689b      	ldr	r3, [r3, #8]
 8006490:	68fa      	ldr	r2, [r7, #12]
 8006492:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8006496:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8006498:	68fa      	ldr	r2, [r7, #12]
 800649a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800649e:	b292      	uxth	r2, r2
 80064a0:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	22ff      	movs	r2, #255	; 0xff
 80064a6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 80064aa:	2300      	movs	r3, #0
}
 80064ac:	4618      	mov	r0, r3
 80064ae:	3710      	adds	r7, #16
 80064b0:	46bd      	mov	sp, r7
 80064b2:	bd80      	pop	{r7, pc}

080064b4 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80064b4:	b480      	push	{r7}
 80064b6:	b083      	sub	sp, #12
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	2243      	movs	r2, #67	; 0x43
 80064c0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 80064c2:	4b03      	ldr	r3, [pc, #12]	; (80064d0 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80064c4:	4618      	mov	r0, r3
 80064c6:	370c      	adds	r7, #12
 80064c8:	46bd      	mov	sp, r7
 80064ca:	bc80      	pop	{r7}
 80064cc:	4770      	bx	lr
 80064ce:	bf00      	nop
 80064d0:	20000094 	.word	0x20000094

080064d4 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80064d4:	b480      	push	{r7}
 80064d6:	b083      	sub	sp, #12
 80064d8:	af00      	add	r7, sp, #0
 80064da:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2243      	movs	r2, #67	; 0x43
 80064e0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 80064e2:	4b03      	ldr	r3, [pc, #12]	; (80064f0 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80064e4:	4618      	mov	r0, r3
 80064e6:	370c      	adds	r7, #12
 80064e8:	46bd      	mov	sp, r7
 80064ea:	bc80      	pop	{r7}
 80064ec:	4770      	bx	lr
 80064ee:	bf00      	nop
 80064f0:	20000050 	.word	0x20000050

080064f4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80064f4:	b480      	push	{r7}
 80064f6:	b083      	sub	sp, #12
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	2243      	movs	r2, #67	; 0x43
 8006500:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8006502:	4b03      	ldr	r3, [pc, #12]	; (8006510 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8006504:	4618      	mov	r0, r3
 8006506:	370c      	adds	r7, #12
 8006508:	46bd      	mov	sp, r7
 800650a:	bc80      	pop	{r7}
 800650c:	4770      	bx	lr
 800650e:	bf00      	nop
 8006510:	200000d8 	.word	0x200000d8

08006514 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006514:	b480      	push	{r7}
 8006516:	b083      	sub	sp, #12
 8006518:	af00      	add	r7, sp, #0
 800651a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	220a      	movs	r2, #10
 8006520:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8006522:	4b03      	ldr	r3, [pc, #12]	; (8006530 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006524:	4618      	mov	r0, r3
 8006526:	370c      	adds	r7, #12
 8006528:	46bd      	mov	sp, r7
 800652a:	bc80      	pop	{r7}
 800652c:	4770      	bx	lr
 800652e:	bf00      	nop
 8006530:	2000000c 	.word	0x2000000c

08006534 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8006534:	b480      	push	{r7}
 8006536:	b085      	sub	sp, #20
 8006538:	af00      	add	r7, sp, #0
 800653a:	6078      	str	r0, [r7, #4]
 800653c:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800653e:	2302      	movs	r3, #2
 8006540:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8006542:	683b      	ldr	r3, [r7, #0]
 8006544:	2b00      	cmp	r3, #0
 8006546:	d005      	beq.n	8006554 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	683a      	ldr	r2, [r7, #0]
 800654c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8006550:	2300      	movs	r3, #0
 8006552:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8006554:	7bfb      	ldrb	r3, [r7, #15]
}
 8006556:	4618      	mov	r0, r3
 8006558:	3714      	adds	r7, #20
 800655a:	46bd      	mov	sp, r7
 800655c:	bc80      	pop	{r7}
 800655e:	4770      	bx	lr

08006560 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8006560:	b480      	push	{r7}
 8006562:	b087      	sub	sp, #28
 8006564:	af00      	add	r7, sp, #0
 8006566:	60f8      	str	r0, [r7, #12]
 8006568:	60b9      	str	r1, [r7, #8]
 800656a:	4613      	mov	r3, r2
 800656c:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006574:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8006576:	697b      	ldr	r3, [r7, #20]
 8006578:	68ba      	ldr	r2, [r7, #8]
 800657a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800657e:	88fa      	ldrh	r2, [r7, #6]
 8006580:	697b      	ldr	r3, [r7, #20]
 8006582:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8006586:	2300      	movs	r3, #0
}
 8006588:	4618      	mov	r0, r3
 800658a:	371c      	adds	r7, #28
 800658c:	46bd      	mov	sp, r7
 800658e:	bc80      	pop	{r7}
 8006590:	4770      	bx	lr

08006592 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8006592:	b480      	push	{r7}
 8006594:	b085      	sub	sp, #20
 8006596:	af00      	add	r7, sp, #0
 8006598:	6078      	str	r0, [r7, #4]
 800659a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80065a2:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	683a      	ldr	r2, [r7, #0]
 80065a8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 80065ac:	2300      	movs	r3, #0
}
 80065ae:	4618      	mov	r0, r3
 80065b0:	3714      	adds	r7, #20
 80065b2:	46bd      	mov	sp, r7
 80065b4:	bc80      	pop	{r7}
 80065b6:	4770      	bx	lr

080065b8 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80065b8:	b580      	push	{r7, lr}
 80065ba:	b084      	sub	sp, #16
 80065bc:	af00      	add	r7, sp, #0
 80065be:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80065c6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d01c      	beq.n	800660c <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d115      	bne.n	8006608 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	2201      	movs	r2, #1
 80065e0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80065fa:	b29b      	uxth	r3, r3
 80065fc:	2181      	movs	r1, #129	; 0x81
 80065fe:	6878      	ldr	r0, [r7, #4]
 8006600:	f001 fd09 	bl	8008016 <USBD_LL_Transmit>

      return USBD_OK;
 8006604:	2300      	movs	r3, #0
 8006606:	e002      	b.n	800660e <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8006608:	2301      	movs	r3, #1
 800660a:	e000      	b.n	800660e <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 800660c:	2302      	movs	r3, #2
  }
}
 800660e:	4618      	mov	r0, r3
 8006610:	3710      	adds	r7, #16
 8006612:	46bd      	mov	sp, r7
 8006614:	bd80      	pop	{r7, pc}

08006616 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006616:	b580      	push	{r7, lr}
 8006618:	b084      	sub	sp, #16
 800661a:	af00      	add	r7, sp, #0
 800661c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006624:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800662c:	2b00      	cmp	r3, #0
 800662e:	d017      	beq.n	8006660 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	7c1b      	ldrb	r3, [r3, #16]
 8006634:	2b00      	cmp	r3, #0
 8006636:	d109      	bne.n	800664c <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800663e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006642:	2101      	movs	r1, #1
 8006644:	6878      	ldr	r0, [r7, #4]
 8006646:	f001 fd09 	bl	800805c <USBD_LL_PrepareReceive>
 800664a:	e007      	b.n	800665c <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006652:	2340      	movs	r3, #64	; 0x40
 8006654:	2101      	movs	r1, #1
 8006656:	6878      	ldr	r0, [r7, #4]
 8006658:	f001 fd00 	bl	800805c <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800665c:	2300      	movs	r3, #0
 800665e:	e000      	b.n	8006662 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8006660:	2302      	movs	r3, #2
  }
}
 8006662:	4618      	mov	r0, r3
 8006664:	3710      	adds	r7, #16
 8006666:	46bd      	mov	sp, r7
 8006668:	bd80      	pop	{r7, pc}

0800666a <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800666a:	b580      	push	{r7, lr}
 800666c:	b084      	sub	sp, #16
 800666e:	af00      	add	r7, sp, #0
 8006670:	60f8      	str	r0, [r7, #12]
 8006672:	60b9      	str	r1, [r7, #8]
 8006674:	4613      	mov	r3, r2
 8006676:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	2b00      	cmp	r3, #0
 800667c:	d101      	bne.n	8006682 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800667e:	2302      	movs	r3, #2
 8006680:	e01a      	b.n	80066b8 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006688:	2b00      	cmp	r3, #0
 800668a:	d003      	beq.n	8006694 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	2200      	movs	r2, #0
 8006690:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006694:	68bb      	ldr	r3, [r7, #8]
 8006696:	2b00      	cmp	r3, #0
 8006698:	d003      	beq.n	80066a2 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	68ba      	ldr	r2, [r7, #8]
 800669e:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	2201      	movs	r2, #1
 80066a6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	79fa      	ldrb	r2, [r7, #7]
 80066ae:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80066b0:	68f8      	ldr	r0, [r7, #12]
 80066b2:	f001 fb6d 	bl	8007d90 <USBD_LL_Init>

  return USBD_OK;
 80066b6:	2300      	movs	r3, #0
}
 80066b8:	4618      	mov	r0, r3
 80066ba:	3710      	adds	r7, #16
 80066bc:	46bd      	mov	sp, r7
 80066be:	bd80      	pop	{r7, pc}

080066c0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80066c0:	b480      	push	{r7}
 80066c2:	b085      	sub	sp, #20
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	6078      	str	r0, [r7, #4]
 80066c8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 80066ca:	2300      	movs	r3, #0
 80066cc:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 80066ce:	683b      	ldr	r3, [r7, #0]
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d006      	beq.n	80066e2 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	683a      	ldr	r2, [r7, #0]
 80066d8:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 80066dc:	2300      	movs	r3, #0
 80066de:	73fb      	strb	r3, [r7, #15]
 80066e0:	e001      	b.n	80066e6 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80066e2:	2302      	movs	r3, #2
 80066e4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80066e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80066e8:	4618      	mov	r0, r3
 80066ea:	3714      	adds	r7, #20
 80066ec:	46bd      	mov	sp, r7
 80066ee:	bc80      	pop	{r7}
 80066f0:	4770      	bx	lr

080066f2 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80066f2:	b580      	push	{r7, lr}
 80066f4:	b082      	sub	sp, #8
 80066f6:	af00      	add	r7, sp, #0
 80066f8:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80066fa:	6878      	ldr	r0, [r7, #4]
 80066fc:	f001 fba2 	bl	8007e44 <USBD_LL_Start>

  return USBD_OK;
 8006700:	2300      	movs	r3, #0
}
 8006702:	4618      	mov	r0, r3
 8006704:	3708      	adds	r7, #8
 8006706:	46bd      	mov	sp, r7
 8006708:	bd80      	pop	{r7, pc}

0800670a <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800670a:	b480      	push	{r7}
 800670c:	b083      	sub	sp, #12
 800670e:	af00      	add	r7, sp, #0
 8006710:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006712:	2300      	movs	r3, #0
}
 8006714:	4618      	mov	r0, r3
 8006716:	370c      	adds	r7, #12
 8006718:	46bd      	mov	sp, r7
 800671a:	bc80      	pop	{r7}
 800671c:	4770      	bx	lr

0800671e <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800671e:	b580      	push	{r7, lr}
 8006720:	b084      	sub	sp, #16
 8006722:	af00      	add	r7, sp, #0
 8006724:	6078      	str	r0, [r7, #4]
 8006726:	460b      	mov	r3, r1
 8006728:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800672a:	2302      	movs	r3, #2
 800672c:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006734:	2b00      	cmp	r3, #0
 8006736:	d00c      	beq.n	8006752 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	78fa      	ldrb	r2, [r7, #3]
 8006742:	4611      	mov	r1, r2
 8006744:	6878      	ldr	r0, [r7, #4]
 8006746:	4798      	blx	r3
 8006748:	4603      	mov	r3, r0
 800674a:	2b00      	cmp	r3, #0
 800674c:	d101      	bne.n	8006752 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800674e:	2300      	movs	r3, #0
 8006750:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8006752:	7bfb      	ldrb	r3, [r7, #15]
}
 8006754:	4618      	mov	r0, r3
 8006756:	3710      	adds	r7, #16
 8006758:	46bd      	mov	sp, r7
 800675a:	bd80      	pop	{r7, pc}

0800675c <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800675c:	b580      	push	{r7, lr}
 800675e:	b082      	sub	sp, #8
 8006760:	af00      	add	r7, sp, #0
 8006762:	6078      	str	r0, [r7, #4]
 8006764:	460b      	mov	r3, r1
 8006766:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800676e:	685b      	ldr	r3, [r3, #4]
 8006770:	78fa      	ldrb	r2, [r7, #3]
 8006772:	4611      	mov	r1, r2
 8006774:	6878      	ldr	r0, [r7, #4]
 8006776:	4798      	blx	r3

  return USBD_OK;
 8006778:	2300      	movs	r3, #0
}
 800677a:	4618      	mov	r0, r3
 800677c:	3708      	adds	r7, #8
 800677e:	46bd      	mov	sp, r7
 8006780:	bd80      	pop	{r7, pc}

08006782 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006782:	b580      	push	{r7, lr}
 8006784:	b082      	sub	sp, #8
 8006786:	af00      	add	r7, sp, #0
 8006788:	6078      	str	r0, [r7, #4]
 800678a:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006792:	6839      	ldr	r1, [r7, #0]
 8006794:	4618      	mov	r0, r3
 8006796:	f000 fed8 	bl	800754a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	2201      	movs	r2, #1
 800679e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80067a8:	461a      	mov	r2, r3
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80067b6:	f003 031f 	and.w	r3, r3, #31
 80067ba:	2b02      	cmp	r3, #2
 80067bc:	d016      	beq.n	80067ec <USBD_LL_SetupStage+0x6a>
 80067be:	2b02      	cmp	r3, #2
 80067c0:	d81c      	bhi.n	80067fc <USBD_LL_SetupStage+0x7a>
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d002      	beq.n	80067cc <USBD_LL_SetupStage+0x4a>
 80067c6:	2b01      	cmp	r3, #1
 80067c8:	d008      	beq.n	80067dc <USBD_LL_SetupStage+0x5a>
 80067ca:	e017      	b.n	80067fc <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80067d2:	4619      	mov	r1, r3
 80067d4:	6878      	ldr	r0, [r7, #4]
 80067d6:	f000 f9cb 	bl	8006b70 <USBD_StdDevReq>
      break;
 80067da:	e01a      	b.n	8006812 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80067e2:	4619      	mov	r1, r3
 80067e4:	6878      	ldr	r0, [r7, #4]
 80067e6:	f000 fa2d 	bl	8006c44 <USBD_StdItfReq>
      break;
 80067ea:	e012      	b.n	8006812 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80067f2:	4619      	mov	r1, r3
 80067f4:	6878      	ldr	r0, [r7, #4]
 80067f6:	f000 fa6d 	bl	8006cd4 <USBD_StdEPReq>
      break;
 80067fa:	e00a      	b.n	8006812 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006802:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006806:	b2db      	uxtb	r3, r3
 8006808:	4619      	mov	r1, r3
 800680a:	6878      	ldr	r0, [r7, #4]
 800680c:	f001 fb7a 	bl	8007f04 <USBD_LL_StallEP>
      break;
 8006810:	bf00      	nop
  }

  return USBD_OK;
 8006812:	2300      	movs	r3, #0
}
 8006814:	4618      	mov	r0, r3
 8006816:	3708      	adds	r7, #8
 8006818:	46bd      	mov	sp, r7
 800681a:	bd80      	pop	{r7, pc}

0800681c <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800681c:	b580      	push	{r7, lr}
 800681e:	b086      	sub	sp, #24
 8006820:	af00      	add	r7, sp, #0
 8006822:	60f8      	str	r0, [r7, #12]
 8006824:	460b      	mov	r3, r1
 8006826:	607a      	str	r2, [r7, #4]
 8006828:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800682a:	7afb      	ldrb	r3, [r7, #11]
 800682c:	2b00      	cmp	r3, #0
 800682e:	d14b      	bne.n	80068c8 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006836:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800683e:	2b03      	cmp	r3, #3
 8006840:	d134      	bne.n	80068ac <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8006842:	697b      	ldr	r3, [r7, #20]
 8006844:	68da      	ldr	r2, [r3, #12]
 8006846:	697b      	ldr	r3, [r7, #20]
 8006848:	691b      	ldr	r3, [r3, #16]
 800684a:	429a      	cmp	r2, r3
 800684c:	d919      	bls.n	8006882 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800684e:	697b      	ldr	r3, [r7, #20]
 8006850:	68da      	ldr	r2, [r3, #12]
 8006852:	697b      	ldr	r3, [r7, #20]
 8006854:	691b      	ldr	r3, [r3, #16]
 8006856:	1ad2      	subs	r2, r2, r3
 8006858:	697b      	ldr	r3, [r7, #20]
 800685a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800685c:	697b      	ldr	r3, [r7, #20]
 800685e:	68da      	ldr	r2, [r3, #12]
 8006860:	697b      	ldr	r3, [r7, #20]
 8006862:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006864:	429a      	cmp	r2, r3
 8006866:	d203      	bcs.n	8006870 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006868:	697b      	ldr	r3, [r7, #20]
 800686a:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800686c:	b29b      	uxth	r3, r3
 800686e:	e002      	b.n	8006876 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006870:	697b      	ldr	r3, [r7, #20]
 8006872:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006874:	b29b      	uxth	r3, r3
 8006876:	461a      	mov	r2, r3
 8006878:	6879      	ldr	r1, [r7, #4]
 800687a:	68f8      	ldr	r0, [r7, #12]
 800687c:	f000 ff57 	bl	800772e <USBD_CtlContinueRx>
 8006880:	e038      	b.n	80068f4 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006888:	691b      	ldr	r3, [r3, #16]
 800688a:	2b00      	cmp	r3, #0
 800688c:	d00a      	beq.n	80068a4 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006894:	2b03      	cmp	r3, #3
 8006896:	d105      	bne.n	80068a4 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800689e:	691b      	ldr	r3, [r3, #16]
 80068a0:	68f8      	ldr	r0, [r7, #12]
 80068a2:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80068a4:	68f8      	ldr	r0, [r7, #12]
 80068a6:	f000 ff54 	bl	8007752 <USBD_CtlSendStatus>
 80068aa:	e023      	b.n	80068f4 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80068b2:	2b05      	cmp	r3, #5
 80068b4:	d11e      	bne.n	80068f4 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	2200      	movs	r2, #0
 80068ba:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 80068be:	2100      	movs	r1, #0
 80068c0:	68f8      	ldr	r0, [r7, #12]
 80068c2:	f001 fb1f 	bl	8007f04 <USBD_LL_StallEP>
 80068c6:	e015      	b.n	80068f4 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80068ce:	699b      	ldr	r3, [r3, #24]
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d00d      	beq.n	80068f0 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80068da:	2b03      	cmp	r3, #3
 80068dc:	d108      	bne.n	80068f0 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80068e4:	699b      	ldr	r3, [r3, #24]
 80068e6:	7afa      	ldrb	r2, [r7, #11]
 80068e8:	4611      	mov	r1, r2
 80068ea:	68f8      	ldr	r0, [r7, #12]
 80068ec:	4798      	blx	r3
 80068ee:	e001      	b.n	80068f4 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80068f0:	2302      	movs	r3, #2
 80068f2:	e000      	b.n	80068f6 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 80068f4:	2300      	movs	r3, #0
}
 80068f6:	4618      	mov	r0, r3
 80068f8:	3718      	adds	r7, #24
 80068fa:	46bd      	mov	sp, r7
 80068fc:	bd80      	pop	{r7, pc}

080068fe <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80068fe:	b580      	push	{r7, lr}
 8006900:	b086      	sub	sp, #24
 8006902:	af00      	add	r7, sp, #0
 8006904:	60f8      	str	r0, [r7, #12]
 8006906:	460b      	mov	r3, r1
 8006908:	607a      	str	r2, [r7, #4]
 800690a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800690c:	7afb      	ldrb	r3, [r7, #11]
 800690e:	2b00      	cmp	r3, #0
 8006910:	d17f      	bne.n	8006a12 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	3314      	adds	r3, #20
 8006916:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800691e:	2b02      	cmp	r3, #2
 8006920:	d15c      	bne.n	80069dc <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8006922:	697b      	ldr	r3, [r7, #20]
 8006924:	68da      	ldr	r2, [r3, #12]
 8006926:	697b      	ldr	r3, [r7, #20]
 8006928:	691b      	ldr	r3, [r3, #16]
 800692a:	429a      	cmp	r2, r3
 800692c:	d915      	bls.n	800695a <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800692e:	697b      	ldr	r3, [r7, #20]
 8006930:	68da      	ldr	r2, [r3, #12]
 8006932:	697b      	ldr	r3, [r7, #20]
 8006934:	691b      	ldr	r3, [r3, #16]
 8006936:	1ad2      	subs	r2, r2, r3
 8006938:	697b      	ldr	r3, [r7, #20]
 800693a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800693c:	697b      	ldr	r3, [r7, #20]
 800693e:	68db      	ldr	r3, [r3, #12]
 8006940:	b29b      	uxth	r3, r3
 8006942:	461a      	mov	r2, r3
 8006944:	6879      	ldr	r1, [r7, #4]
 8006946:	68f8      	ldr	r0, [r7, #12]
 8006948:	f000 fec1 	bl	80076ce <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800694c:	2300      	movs	r3, #0
 800694e:	2200      	movs	r2, #0
 8006950:	2100      	movs	r1, #0
 8006952:	68f8      	ldr	r0, [r7, #12]
 8006954:	f001 fb82 	bl	800805c <USBD_LL_PrepareReceive>
 8006958:	e04e      	b.n	80069f8 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800695a:	697b      	ldr	r3, [r7, #20]
 800695c:	689b      	ldr	r3, [r3, #8]
 800695e:	697a      	ldr	r2, [r7, #20]
 8006960:	6912      	ldr	r2, [r2, #16]
 8006962:	fbb3 f1f2 	udiv	r1, r3, r2
 8006966:	fb01 f202 	mul.w	r2, r1, r2
 800696a:	1a9b      	subs	r3, r3, r2
 800696c:	2b00      	cmp	r3, #0
 800696e:	d11c      	bne.n	80069aa <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8006970:	697b      	ldr	r3, [r7, #20]
 8006972:	689a      	ldr	r2, [r3, #8]
 8006974:	697b      	ldr	r3, [r7, #20]
 8006976:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006978:	429a      	cmp	r2, r3
 800697a:	d316      	bcc.n	80069aa <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800697c:	697b      	ldr	r3, [r7, #20]
 800697e:	689a      	ldr	r2, [r3, #8]
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006986:	429a      	cmp	r2, r3
 8006988:	d20f      	bcs.n	80069aa <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800698a:	2200      	movs	r2, #0
 800698c:	2100      	movs	r1, #0
 800698e:	68f8      	ldr	r0, [r7, #12]
 8006990:	f000 fe9d 	bl	80076ce <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	2200      	movs	r2, #0
 8006998:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800699c:	2300      	movs	r3, #0
 800699e:	2200      	movs	r2, #0
 80069a0:	2100      	movs	r1, #0
 80069a2:	68f8      	ldr	r0, [r7, #12]
 80069a4:	f001 fb5a 	bl	800805c <USBD_LL_PrepareReceive>
 80069a8:	e026      	b.n	80069f8 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80069b0:	68db      	ldr	r3, [r3, #12]
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d00a      	beq.n	80069cc <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80069bc:	2b03      	cmp	r3, #3
 80069be:	d105      	bne.n	80069cc <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80069c6:	68db      	ldr	r3, [r3, #12]
 80069c8:	68f8      	ldr	r0, [r7, #12]
 80069ca:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80069cc:	2180      	movs	r1, #128	; 0x80
 80069ce:	68f8      	ldr	r0, [r7, #12]
 80069d0:	f001 fa98 	bl	8007f04 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80069d4:	68f8      	ldr	r0, [r7, #12]
 80069d6:	f000 fecf 	bl	8007778 <USBD_CtlReceiveStatus>
 80069da:	e00d      	b.n	80069f8 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80069e2:	2b04      	cmp	r3, #4
 80069e4:	d004      	beq.n	80069f0 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d103      	bne.n	80069f8 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80069f0:	2180      	movs	r1, #128	; 0x80
 80069f2:	68f8      	ldr	r0, [r7, #12]
 80069f4:	f001 fa86 	bl	8007f04 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80069fe:	2b01      	cmp	r3, #1
 8006a00:	d11d      	bne.n	8006a3e <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8006a02:	68f8      	ldr	r0, [r7, #12]
 8006a04:	f7ff fe81 	bl	800670a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	2200      	movs	r2, #0
 8006a0c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006a10:	e015      	b.n	8006a3e <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a18:	695b      	ldr	r3, [r3, #20]
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d00d      	beq.n	8006a3a <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8006a24:	2b03      	cmp	r3, #3
 8006a26:	d108      	bne.n	8006a3a <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a2e:	695b      	ldr	r3, [r3, #20]
 8006a30:	7afa      	ldrb	r2, [r7, #11]
 8006a32:	4611      	mov	r1, r2
 8006a34:	68f8      	ldr	r0, [r7, #12]
 8006a36:	4798      	blx	r3
 8006a38:	e001      	b.n	8006a3e <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006a3a:	2302      	movs	r3, #2
 8006a3c:	e000      	b.n	8006a40 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8006a3e:	2300      	movs	r3, #0
}
 8006a40:	4618      	mov	r0, r3
 8006a42:	3718      	adds	r7, #24
 8006a44:	46bd      	mov	sp, r7
 8006a46:	bd80      	pop	{r7, pc}

08006a48 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006a48:	b580      	push	{r7, lr}
 8006a4a:	b082      	sub	sp, #8
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006a50:	2340      	movs	r3, #64	; 0x40
 8006a52:	2200      	movs	r2, #0
 8006a54:	2100      	movs	r1, #0
 8006a56:	6878      	ldr	r0, [r7, #4]
 8006a58:	f001 fa0f 	bl	8007e7a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	2201      	movs	r2, #1
 8006a60:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	2240      	movs	r2, #64	; 0x40
 8006a68:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006a6c:	2340      	movs	r3, #64	; 0x40
 8006a6e:	2200      	movs	r2, #0
 8006a70:	2180      	movs	r1, #128	; 0x80
 8006a72:	6878      	ldr	r0, [r7, #4]
 8006a74:	f001 fa01 	bl	8007e7a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	2201      	movs	r2, #1
 8006a7c:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	2240      	movs	r2, #64	; 0x40
 8006a82:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	2201      	movs	r2, #1
 8006a88:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	2200      	movs	r2, #0
 8006a90:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	2200      	movs	r2, #0
 8006a98:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	2200      	movs	r2, #0
 8006a9e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d009      	beq.n	8006ac0 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ab2:	685b      	ldr	r3, [r3, #4]
 8006ab4:	687a      	ldr	r2, [r7, #4]
 8006ab6:	6852      	ldr	r2, [r2, #4]
 8006ab8:	b2d2      	uxtb	r2, r2
 8006aba:	4611      	mov	r1, r2
 8006abc:	6878      	ldr	r0, [r7, #4]
 8006abe:	4798      	blx	r3
  }

  return USBD_OK;
 8006ac0:	2300      	movs	r3, #0
}
 8006ac2:	4618      	mov	r0, r3
 8006ac4:	3708      	adds	r7, #8
 8006ac6:	46bd      	mov	sp, r7
 8006ac8:	bd80      	pop	{r7, pc}

08006aca <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006aca:	b480      	push	{r7}
 8006acc:	b083      	sub	sp, #12
 8006ace:	af00      	add	r7, sp, #0
 8006ad0:	6078      	str	r0, [r7, #4]
 8006ad2:	460b      	mov	r3, r1
 8006ad4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	78fa      	ldrb	r2, [r7, #3]
 8006ada:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006adc:	2300      	movs	r3, #0
}
 8006ade:	4618      	mov	r0, r3
 8006ae0:	370c      	adds	r7, #12
 8006ae2:	46bd      	mov	sp, r7
 8006ae4:	bc80      	pop	{r7}
 8006ae6:	4770      	bx	lr

08006ae8 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006ae8:	b480      	push	{r7}
 8006aea:	b083      	sub	sp, #12
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	2204      	movs	r2, #4
 8006b00:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006b04:	2300      	movs	r3, #0
}
 8006b06:	4618      	mov	r0, r3
 8006b08:	370c      	adds	r7, #12
 8006b0a:	46bd      	mov	sp, r7
 8006b0c:	bc80      	pop	{r7}
 8006b0e:	4770      	bx	lr

08006b10 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006b10:	b480      	push	{r7}
 8006b12:	b083      	sub	sp, #12
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b1e:	2b04      	cmp	r3, #4
 8006b20:	d105      	bne.n	8006b2e <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006b2e:	2300      	movs	r3, #0
}
 8006b30:	4618      	mov	r0, r3
 8006b32:	370c      	adds	r7, #12
 8006b34:	46bd      	mov	sp, r7
 8006b36:	bc80      	pop	{r7}
 8006b38:	4770      	bx	lr

08006b3a <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006b3a:	b580      	push	{r7, lr}
 8006b3c:	b082      	sub	sp, #8
 8006b3e:	af00      	add	r7, sp, #0
 8006b40:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b48:	2b03      	cmp	r3, #3
 8006b4a:	d10b      	bne.n	8006b64 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b52:	69db      	ldr	r3, [r3, #28]
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d005      	beq.n	8006b64 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b5e:	69db      	ldr	r3, [r3, #28]
 8006b60:	6878      	ldr	r0, [r7, #4]
 8006b62:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006b64:	2300      	movs	r3, #0
}
 8006b66:	4618      	mov	r0, r3
 8006b68:	3708      	adds	r7, #8
 8006b6a:	46bd      	mov	sp, r7
 8006b6c:	bd80      	pop	{r7, pc}
	...

08006b70 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8006b70:	b580      	push	{r7, lr}
 8006b72:	b084      	sub	sp, #16
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	6078      	str	r0, [r7, #4]
 8006b78:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006b7a:	2300      	movs	r3, #0
 8006b7c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006b7e:	683b      	ldr	r3, [r7, #0]
 8006b80:	781b      	ldrb	r3, [r3, #0]
 8006b82:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006b86:	2b40      	cmp	r3, #64	; 0x40
 8006b88:	d005      	beq.n	8006b96 <USBD_StdDevReq+0x26>
 8006b8a:	2b40      	cmp	r3, #64	; 0x40
 8006b8c:	d84f      	bhi.n	8006c2e <USBD_StdDevReq+0xbe>
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d009      	beq.n	8006ba6 <USBD_StdDevReq+0x36>
 8006b92:	2b20      	cmp	r3, #32
 8006b94:	d14b      	bne.n	8006c2e <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b9c:	689b      	ldr	r3, [r3, #8]
 8006b9e:	6839      	ldr	r1, [r7, #0]
 8006ba0:	6878      	ldr	r0, [r7, #4]
 8006ba2:	4798      	blx	r3
      break;
 8006ba4:	e048      	b.n	8006c38 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006ba6:	683b      	ldr	r3, [r7, #0]
 8006ba8:	785b      	ldrb	r3, [r3, #1]
 8006baa:	2b09      	cmp	r3, #9
 8006bac:	d839      	bhi.n	8006c22 <USBD_StdDevReq+0xb2>
 8006bae:	a201      	add	r2, pc, #4	; (adr r2, 8006bb4 <USBD_StdDevReq+0x44>)
 8006bb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bb4:	08006c05 	.word	0x08006c05
 8006bb8:	08006c19 	.word	0x08006c19
 8006bbc:	08006c23 	.word	0x08006c23
 8006bc0:	08006c0f 	.word	0x08006c0f
 8006bc4:	08006c23 	.word	0x08006c23
 8006bc8:	08006be7 	.word	0x08006be7
 8006bcc:	08006bdd 	.word	0x08006bdd
 8006bd0:	08006c23 	.word	0x08006c23
 8006bd4:	08006bfb 	.word	0x08006bfb
 8006bd8:	08006bf1 	.word	0x08006bf1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006bdc:	6839      	ldr	r1, [r7, #0]
 8006bde:	6878      	ldr	r0, [r7, #4]
 8006be0:	f000 f9dc 	bl	8006f9c <USBD_GetDescriptor>
          break;
 8006be4:	e022      	b.n	8006c2c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006be6:	6839      	ldr	r1, [r7, #0]
 8006be8:	6878      	ldr	r0, [r7, #4]
 8006bea:	f000 fb3f 	bl	800726c <USBD_SetAddress>
          break;
 8006bee:	e01d      	b.n	8006c2c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8006bf0:	6839      	ldr	r1, [r7, #0]
 8006bf2:	6878      	ldr	r0, [r7, #4]
 8006bf4:	f000 fb7e 	bl	80072f4 <USBD_SetConfig>
          break;
 8006bf8:	e018      	b.n	8006c2c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006bfa:	6839      	ldr	r1, [r7, #0]
 8006bfc:	6878      	ldr	r0, [r7, #4]
 8006bfe:	f000 fc07 	bl	8007410 <USBD_GetConfig>
          break;
 8006c02:	e013      	b.n	8006c2c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006c04:	6839      	ldr	r1, [r7, #0]
 8006c06:	6878      	ldr	r0, [r7, #4]
 8006c08:	f000 fc37 	bl	800747a <USBD_GetStatus>
          break;
 8006c0c:	e00e      	b.n	8006c2c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006c0e:	6839      	ldr	r1, [r7, #0]
 8006c10:	6878      	ldr	r0, [r7, #4]
 8006c12:	f000 fc65 	bl	80074e0 <USBD_SetFeature>
          break;
 8006c16:	e009      	b.n	8006c2c <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006c18:	6839      	ldr	r1, [r7, #0]
 8006c1a:	6878      	ldr	r0, [r7, #4]
 8006c1c:	f000 fc74 	bl	8007508 <USBD_ClrFeature>
          break;
 8006c20:	e004      	b.n	8006c2c <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8006c22:	6839      	ldr	r1, [r7, #0]
 8006c24:	6878      	ldr	r0, [r7, #4]
 8006c26:	f000 fccc 	bl	80075c2 <USBD_CtlError>
          break;
 8006c2a:	bf00      	nop
      }
      break;
 8006c2c:	e004      	b.n	8006c38 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8006c2e:	6839      	ldr	r1, [r7, #0]
 8006c30:	6878      	ldr	r0, [r7, #4]
 8006c32:	f000 fcc6 	bl	80075c2 <USBD_CtlError>
      break;
 8006c36:	bf00      	nop
  }

  return ret;
 8006c38:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c3a:	4618      	mov	r0, r3
 8006c3c:	3710      	adds	r7, #16
 8006c3e:	46bd      	mov	sp, r7
 8006c40:	bd80      	pop	{r7, pc}
 8006c42:	bf00      	nop

08006c44 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8006c44:	b580      	push	{r7, lr}
 8006c46:	b084      	sub	sp, #16
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	6078      	str	r0, [r7, #4]
 8006c4c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006c4e:	2300      	movs	r3, #0
 8006c50:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006c52:	683b      	ldr	r3, [r7, #0]
 8006c54:	781b      	ldrb	r3, [r3, #0]
 8006c56:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006c5a:	2b40      	cmp	r3, #64	; 0x40
 8006c5c:	d005      	beq.n	8006c6a <USBD_StdItfReq+0x26>
 8006c5e:	2b40      	cmp	r3, #64	; 0x40
 8006c60:	d82e      	bhi.n	8006cc0 <USBD_StdItfReq+0x7c>
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d001      	beq.n	8006c6a <USBD_StdItfReq+0x26>
 8006c66:	2b20      	cmp	r3, #32
 8006c68:	d12a      	bne.n	8006cc0 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c70:	3b01      	subs	r3, #1
 8006c72:	2b02      	cmp	r3, #2
 8006c74:	d81d      	bhi.n	8006cb2 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006c76:	683b      	ldr	r3, [r7, #0]
 8006c78:	889b      	ldrh	r3, [r3, #4]
 8006c7a:	b2db      	uxtb	r3, r3
 8006c7c:	2b01      	cmp	r3, #1
 8006c7e:	d813      	bhi.n	8006ca8 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c86:	689b      	ldr	r3, [r3, #8]
 8006c88:	6839      	ldr	r1, [r7, #0]
 8006c8a:	6878      	ldr	r0, [r7, #4]
 8006c8c:	4798      	blx	r3
 8006c8e:	4603      	mov	r3, r0
 8006c90:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006c92:	683b      	ldr	r3, [r7, #0]
 8006c94:	88db      	ldrh	r3, [r3, #6]
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d110      	bne.n	8006cbc <USBD_StdItfReq+0x78>
 8006c9a:	7bfb      	ldrb	r3, [r7, #15]
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d10d      	bne.n	8006cbc <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8006ca0:	6878      	ldr	r0, [r7, #4]
 8006ca2:	f000 fd56 	bl	8007752 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006ca6:	e009      	b.n	8006cbc <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8006ca8:	6839      	ldr	r1, [r7, #0]
 8006caa:	6878      	ldr	r0, [r7, #4]
 8006cac:	f000 fc89 	bl	80075c2 <USBD_CtlError>
          break;
 8006cb0:	e004      	b.n	8006cbc <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8006cb2:	6839      	ldr	r1, [r7, #0]
 8006cb4:	6878      	ldr	r0, [r7, #4]
 8006cb6:	f000 fc84 	bl	80075c2 <USBD_CtlError>
          break;
 8006cba:	e000      	b.n	8006cbe <USBD_StdItfReq+0x7a>
          break;
 8006cbc:	bf00      	nop
      }
      break;
 8006cbe:	e004      	b.n	8006cca <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8006cc0:	6839      	ldr	r1, [r7, #0]
 8006cc2:	6878      	ldr	r0, [r7, #4]
 8006cc4:	f000 fc7d 	bl	80075c2 <USBD_CtlError>
      break;
 8006cc8:	bf00      	nop
  }

  return USBD_OK;
 8006cca:	2300      	movs	r3, #0
}
 8006ccc:	4618      	mov	r0, r3
 8006cce:	3710      	adds	r7, #16
 8006cd0:	46bd      	mov	sp, r7
 8006cd2:	bd80      	pop	{r7, pc}

08006cd4 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8006cd4:	b580      	push	{r7, lr}
 8006cd6:	b084      	sub	sp, #16
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	6078      	str	r0, [r7, #4]
 8006cdc:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8006cde:	2300      	movs	r3, #0
 8006ce0:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8006ce2:	683b      	ldr	r3, [r7, #0]
 8006ce4:	889b      	ldrh	r3, [r3, #4]
 8006ce6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006ce8:	683b      	ldr	r3, [r7, #0]
 8006cea:	781b      	ldrb	r3, [r3, #0]
 8006cec:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006cf0:	2b40      	cmp	r3, #64	; 0x40
 8006cf2:	d007      	beq.n	8006d04 <USBD_StdEPReq+0x30>
 8006cf4:	2b40      	cmp	r3, #64	; 0x40
 8006cf6:	f200 8146 	bhi.w	8006f86 <USBD_StdEPReq+0x2b2>
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d00a      	beq.n	8006d14 <USBD_StdEPReq+0x40>
 8006cfe:	2b20      	cmp	r3, #32
 8006d00:	f040 8141 	bne.w	8006f86 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d0a:	689b      	ldr	r3, [r3, #8]
 8006d0c:	6839      	ldr	r1, [r7, #0]
 8006d0e:	6878      	ldr	r0, [r7, #4]
 8006d10:	4798      	blx	r3
      break;
 8006d12:	e13d      	b.n	8006f90 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8006d14:	683b      	ldr	r3, [r7, #0]
 8006d16:	781b      	ldrb	r3, [r3, #0]
 8006d18:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006d1c:	2b20      	cmp	r3, #32
 8006d1e:	d10a      	bne.n	8006d36 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d26:	689b      	ldr	r3, [r3, #8]
 8006d28:	6839      	ldr	r1, [r7, #0]
 8006d2a:	6878      	ldr	r0, [r7, #4]
 8006d2c:	4798      	blx	r3
 8006d2e:	4603      	mov	r3, r0
 8006d30:	73fb      	strb	r3, [r7, #15]

        return ret;
 8006d32:	7bfb      	ldrb	r3, [r7, #15]
 8006d34:	e12d      	b.n	8006f92 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8006d36:	683b      	ldr	r3, [r7, #0]
 8006d38:	785b      	ldrb	r3, [r3, #1]
 8006d3a:	2b03      	cmp	r3, #3
 8006d3c:	d007      	beq.n	8006d4e <USBD_StdEPReq+0x7a>
 8006d3e:	2b03      	cmp	r3, #3
 8006d40:	f300 811b 	bgt.w	8006f7a <USBD_StdEPReq+0x2a6>
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d072      	beq.n	8006e2e <USBD_StdEPReq+0x15a>
 8006d48:	2b01      	cmp	r3, #1
 8006d4a:	d03a      	beq.n	8006dc2 <USBD_StdEPReq+0xee>
 8006d4c:	e115      	b.n	8006f7a <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d54:	2b02      	cmp	r3, #2
 8006d56:	d002      	beq.n	8006d5e <USBD_StdEPReq+0x8a>
 8006d58:	2b03      	cmp	r3, #3
 8006d5a:	d015      	beq.n	8006d88 <USBD_StdEPReq+0xb4>
 8006d5c:	e02b      	b.n	8006db6 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006d5e:	7bbb      	ldrb	r3, [r7, #14]
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d00c      	beq.n	8006d7e <USBD_StdEPReq+0xaa>
 8006d64:	7bbb      	ldrb	r3, [r7, #14]
 8006d66:	2b80      	cmp	r3, #128	; 0x80
 8006d68:	d009      	beq.n	8006d7e <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8006d6a:	7bbb      	ldrb	r3, [r7, #14]
 8006d6c:	4619      	mov	r1, r3
 8006d6e:	6878      	ldr	r0, [r7, #4]
 8006d70:	f001 f8c8 	bl	8007f04 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8006d74:	2180      	movs	r1, #128	; 0x80
 8006d76:	6878      	ldr	r0, [r7, #4]
 8006d78:	f001 f8c4 	bl	8007f04 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006d7c:	e020      	b.n	8006dc0 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8006d7e:	6839      	ldr	r1, [r7, #0]
 8006d80:	6878      	ldr	r0, [r7, #4]
 8006d82:	f000 fc1e 	bl	80075c2 <USBD_CtlError>
              break;
 8006d86:	e01b      	b.n	8006dc0 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006d88:	683b      	ldr	r3, [r7, #0]
 8006d8a:	885b      	ldrh	r3, [r3, #2]
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d10e      	bne.n	8006dae <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8006d90:	7bbb      	ldrb	r3, [r7, #14]
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d00b      	beq.n	8006dae <USBD_StdEPReq+0xda>
 8006d96:	7bbb      	ldrb	r3, [r7, #14]
 8006d98:	2b80      	cmp	r3, #128	; 0x80
 8006d9a:	d008      	beq.n	8006dae <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006d9c:	683b      	ldr	r3, [r7, #0]
 8006d9e:	88db      	ldrh	r3, [r3, #6]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d104      	bne.n	8006dae <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8006da4:	7bbb      	ldrb	r3, [r7, #14]
 8006da6:	4619      	mov	r1, r3
 8006da8:	6878      	ldr	r0, [r7, #4]
 8006daa:	f001 f8ab 	bl	8007f04 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8006dae:	6878      	ldr	r0, [r7, #4]
 8006db0:	f000 fccf 	bl	8007752 <USBD_CtlSendStatus>

              break;
 8006db4:	e004      	b.n	8006dc0 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8006db6:	6839      	ldr	r1, [r7, #0]
 8006db8:	6878      	ldr	r0, [r7, #4]
 8006dba:	f000 fc02 	bl	80075c2 <USBD_CtlError>
              break;
 8006dbe:	bf00      	nop
          }
          break;
 8006dc0:	e0e0      	b.n	8006f84 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006dc8:	2b02      	cmp	r3, #2
 8006dca:	d002      	beq.n	8006dd2 <USBD_StdEPReq+0xfe>
 8006dcc:	2b03      	cmp	r3, #3
 8006dce:	d015      	beq.n	8006dfc <USBD_StdEPReq+0x128>
 8006dd0:	e026      	b.n	8006e20 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006dd2:	7bbb      	ldrb	r3, [r7, #14]
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d00c      	beq.n	8006df2 <USBD_StdEPReq+0x11e>
 8006dd8:	7bbb      	ldrb	r3, [r7, #14]
 8006dda:	2b80      	cmp	r3, #128	; 0x80
 8006ddc:	d009      	beq.n	8006df2 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8006dde:	7bbb      	ldrb	r3, [r7, #14]
 8006de0:	4619      	mov	r1, r3
 8006de2:	6878      	ldr	r0, [r7, #4]
 8006de4:	f001 f88e 	bl	8007f04 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8006de8:	2180      	movs	r1, #128	; 0x80
 8006dea:	6878      	ldr	r0, [r7, #4]
 8006dec:	f001 f88a 	bl	8007f04 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006df0:	e01c      	b.n	8006e2c <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8006df2:	6839      	ldr	r1, [r7, #0]
 8006df4:	6878      	ldr	r0, [r7, #4]
 8006df6:	f000 fbe4 	bl	80075c2 <USBD_CtlError>
              break;
 8006dfa:	e017      	b.n	8006e2c <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006dfc:	683b      	ldr	r3, [r7, #0]
 8006dfe:	885b      	ldrh	r3, [r3, #2]
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d112      	bne.n	8006e2a <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006e04:	7bbb      	ldrb	r3, [r7, #14]
 8006e06:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d004      	beq.n	8006e18 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8006e0e:	7bbb      	ldrb	r3, [r7, #14]
 8006e10:	4619      	mov	r1, r3
 8006e12:	6878      	ldr	r0, [r7, #4]
 8006e14:	f001 f895 	bl	8007f42 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8006e18:	6878      	ldr	r0, [r7, #4]
 8006e1a:	f000 fc9a 	bl	8007752 <USBD_CtlSendStatus>
              }
              break;
 8006e1e:	e004      	b.n	8006e2a <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8006e20:	6839      	ldr	r1, [r7, #0]
 8006e22:	6878      	ldr	r0, [r7, #4]
 8006e24:	f000 fbcd 	bl	80075c2 <USBD_CtlError>
              break;
 8006e28:	e000      	b.n	8006e2c <USBD_StdEPReq+0x158>
              break;
 8006e2a:	bf00      	nop
          }
          break;
 8006e2c:	e0aa      	b.n	8006f84 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e34:	2b02      	cmp	r3, #2
 8006e36:	d002      	beq.n	8006e3e <USBD_StdEPReq+0x16a>
 8006e38:	2b03      	cmp	r3, #3
 8006e3a:	d032      	beq.n	8006ea2 <USBD_StdEPReq+0x1ce>
 8006e3c:	e097      	b.n	8006f6e <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006e3e:	7bbb      	ldrb	r3, [r7, #14]
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d007      	beq.n	8006e54 <USBD_StdEPReq+0x180>
 8006e44:	7bbb      	ldrb	r3, [r7, #14]
 8006e46:	2b80      	cmp	r3, #128	; 0x80
 8006e48:	d004      	beq.n	8006e54 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8006e4a:	6839      	ldr	r1, [r7, #0]
 8006e4c:	6878      	ldr	r0, [r7, #4]
 8006e4e:	f000 fbb8 	bl	80075c2 <USBD_CtlError>
                break;
 8006e52:	e091      	b.n	8006f78 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006e54:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	da0b      	bge.n	8006e74 <USBD_StdEPReq+0x1a0>
 8006e5c:	7bbb      	ldrb	r3, [r7, #14]
 8006e5e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006e62:	4613      	mov	r3, r2
 8006e64:	009b      	lsls	r3, r3, #2
 8006e66:	4413      	add	r3, r2
 8006e68:	009b      	lsls	r3, r3, #2
 8006e6a:	3310      	adds	r3, #16
 8006e6c:	687a      	ldr	r2, [r7, #4]
 8006e6e:	4413      	add	r3, r2
 8006e70:	3304      	adds	r3, #4
 8006e72:	e00b      	b.n	8006e8c <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006e74:	7bbb      	ldrb	r3, [r7, #14]
 8006e76:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006e7a:	4613      	mov	r3, r2
 8006e7c:	009b      	lsls	r3, r3, #2
 8006e7e:	4413      	add	r3, r2
 8006e80:	009b      	lsls	r3, r3, #2
 8006e82:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006e86:	687a      	ldr	r2, [r7, #4]
 8006e88:	4413      	add	r3, r2
 8006e8a:	3304      	adds	r3, #4
 8006e8c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006e8e:	68bb      	ldr	r3, [r7, #8]
 8006e90:	2200      	movs	r2, #0
 8006e92:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006e94:	68bb      	ldr	r3, [r7, #8]
 8006e96:	2202      	movs	r2, #2
 8006e98:	4619      	mov	r1, r3
 8006e9a:	6878      	ldr	r0, [r7, #4]
 8006e9c:	f000 fbfb 	bl	8007696 <USBD_CtlSendData>
              break;
 8006ea0:	e06a      	b.n	8006f78 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006ea2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	da11      	bge.n	8006ece <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006eaa:	7bbb      	ldrb	r3, [r7, #14]
 8006eac:	f003 020f 	and.w	r2, r3, #15
 8006eb0:	6879      	ldr	r1, [r7, #4]
 8006eb2:	4613      	mov	r3, r2
 8006eb4:	009b      	lsls	r3, r3, #2
 8006eb6:	4413      	add	r3, r2
 8006eb8:	009b      	lsls	r3, r3, #2
 8006eba:	440b      	add	r3, r1
 8006ebc:	3318      	adds	r3, #24
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d117      	bne.n	8006ef4 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8006ec4:	6839      	ldr	r1, [r7, #0]
 8006ec6:	6878      	ldr	r0, [r7, #4]
 8006ec8:	f000 fb7b 	bl	80075c2 <USBD_CtlError>
                  break;
 8006ecc:	e054      	b.n	8006f78 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006ece:	7bbb      	ldrb	r3, [r7, #14]
 8006ed0:	f003 020f 	and.w	r2, r3, #15
 8006ed4:	6879      	ldr	r1, [r7, #4]
 8006ed6:	4613      	mov	r3, r2
 8006ed8:	009b      	lsls	r3, r3, #2
 8006eda:	4413      	add	r3, r2
 8006edc:	009b      	lsls	r3, r3, #2
 8006ede:	440b      	add	r3, r1
 8006ee0:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d104      	bne.n	8006ef4 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8006eea:	6839      	ldr	r1, [r7, #0]
 8006eec:	6878      	ldr	r0, [r7, #4]
 8006eee:	f000 fb68 	bl	80075c2 <USBD_CtlError>
                  break;
 8006ef2:	e041      	b.n	8006f78 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006ef4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	da0b      	bge.n	8006f14 <USBD_StdEPReq+0x240>
 8006efc:	7bbb      	ldrb	r3, [r7, #14]
 8006efe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006f02:	4613      	mov	r3, r2
 8006f04:	009b      	lsls	r3, r3, #2
 8006f06:	4413      	add	r3, r2
 8006f08:	009b      	lsls	r3, r3, #2
 8006f0a:	3310      	adds	r3, #16
 8006f0c:	687a      	ldr	r2, [r7, #4]
 8006f0e:	4413      	add	r3, r2
 8006f10:	3304      	adds	r3, #4
 8006f12:	e00b      	b.n	8006f2c <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006f14:	7bbb      	ldrb	r3, [r7, #14]
 8006f16:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006f1a:	4613      	mov	r3, r2
 8006f1c:	009b      	lsls	r3, r3, #2
 8006f1e:	4413      	add	r3, r2
 8006f20:	009b      	lsls	r3, r3, #2
 8006f22:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006f26:	687a      	ldr	r2, [r7, #4]
 8006f28:	4413      	add	r3, r2
 8006f2a:	3304      	adds	r3, #4
 8006f2c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006f2e:	7bbb      	ldrb	r3, [r7, #14]
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d002      	beq.n	8006f3a <USBD_StdEPReq+0x266>
 8006f34:	7bbb      	ldrb	r3, [r7, #14]
 8006f36:	2b80      	cmp	r3, #128	; 0x80
 8006f38:	d103      	bne.n	8006f42 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8006f3a:	68bb      	ldr	r3, [r7, #8]
 8006f3c:	2200      	movs	r2, #0
 8006f3e:	601a      	str	r2, [r3, #0]
 8006f40:	e00e      	b.n	8006f60 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8006f42:	7bbb      	ldrb	r3, [r7, #14]
 8006f44:	4619      	mov	r1, r3
 8006f46:	6878      	ldr	r0, [r7, #4]
 8006f48:	f001 f81a 	bl	8007f80 <USBD_LL_IsStallEP>
 8006f4c:	4603      	mov	r3, r0
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d003      	beq.n	8006f5a <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8006f52:	68bb      	ldr	r3, [r7, #8]
 8006f54:	2201      	movs	r2, #1
 8006f56:	601a      	str	r2, [r3, #0]
 8006f58:	e002      	b.n	8006f60 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8006f5a:	68bb      	ldr	r3, [r7, #8]
 8006f5c:	2200      	movs	r2, #0
 8006f5e:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006f60:	68bb      	ldr	r3, [r7, #8]
 8006f62:	2202      	movs	r2, #2
 8006f64:	4619      	mov	r1, r3
 8006f66:	6878      	ldr	r0, [r7, #4]
 8006f68:	f000 fb95 	bl	8007696 <USBD_CtlSendData>
              break;
 8006f6c:	e004      	b.n	8006f78 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8006f6e:	6839      	ldr	r1, [r7, #0]
 8006f70:	6878      	ldr	r0, [r7, #4]
 8006f72:	f000 fb26 	bl	80075c2 <USBD_CtlError>
              break;
 8006f76:	bf00      	nop
          }
          break;
 8006f78:	e004      	b.n	8006f84 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8006f7a:	6839      	ldr	r1, [r7, #0]
 8006f7c:	6878      	ldr	r0, [r7, #4]
 8006f7e:	f000 fb20 	bl	80075c2 <USBD_CtlError>
          break;
 8006f82:	bf00      	nop
      }
      break;
 8006f84:	e004      	b.n	8006f90 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8006f86:	6839      	ldr	r1, [r7, #0]
 8006f88:	6878      	ldr	r0, [r7, #4]
 8006f8a:	f000 fb1a 	bl	80075c2 <USBD_CtlError>
      break;
 8006f8e:	bf00      	nop
  }

  return ret;
 8006f90:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f92:	4618      	mov	r0, r3
 8006f94:	3710      	adds	r7, #16
 8006f96:	46bd      	mov	sp, r7
 8006f98:	bd80      	pop	{r7, pc}
	...

08006f9c <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8006f9c:	b580      	push	{r7, lr}
 8006f9e:	b084      	sub	sp, #16
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	6078      	str	r0, [r7, #4]
 8006fa4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006fa6:	2300      	movs	r3, #0
 8006fa8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006faa:	2300      	movs	r3, #0
 8006fac:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006fae:	2300      	movs	r3, #0
 8006fb0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006fb2:	683b      	ldr	r3, [r7, #0]
 8006fb4:	885b      	ldrh	r3, [r3, #2]
 8006fb6:	0a1b      	lsrs	r3, r3, #8
 8006fb8:	b29b      	uxth	r3, r3
 8006fba:	3b01      	subs	r3, #1
 8006fbc:	2b06      	cmp	r3, #6
 8006fbe:	f200 8128 	bhi.w	8007212 <USBD_GetDescriptor+0x276>
 8006fc2:	a201      	add	r2, pc, #4	; (adr r2, 8006fc8 <USBD_GetDescriptor+0x2c>)
 8006fc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fc8:	08006fe5 	.word	0x08006fe5
 8006fcc:	08006ffd 	.word	0x08006ffd
 8006fd0:	0800703d 	.word	0x0800703d
 8006fd4:	08007213 	.word	0x08007213
 8006fd8:	08007213 	.word	0x08007213
 8006fdc:	080071b3 	.word	0x080071b3
 8006fe0:	080071df 	.word	0x080071df
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	687a      	ldr	r2, [r7, #4]
 8006fee:	7c12      	ldrb	r2, [r2, #16]
 8006ff0:	f107 0108 	add.w	r1, r7, #8
 8006ff4:	4610      	mov	r0, r2
 8006ff6:	4798      	blx	r3
 8006ff8:	60f8      	str	r0, [r7, #12]
      break;
 8006ffa:	e112      	b.n	8007222 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	7c1b      	ldrb	r3, [r3, #16]
 8007000:	2b00      	cmp	r3, #0
 8007002:	d10d      	bne.n	8007020 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800700a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800700c:	f107 0208 	add.w	r2, r7, #8
 8007010:	4610      	mov	r0, r2
 8007012:	4798      	blx	r3
 8007014:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	3301      	adds	r3, #1
 800701a:	2202      	movs	r2, #2
 800701c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800701e:	e100      	b.n	8007222 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007026:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007028:	f107 0208 	add.w	r2, r7, #8
 800702c:	4610      	mov	r0, r2
 800702e:	4798      	blx	r3
 8007030:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	3301      	adds	r3, #1
 8007036:	2202      	movs	r2, #2
 8007038:	701a      	strb	r2, [r3, #0]
      break;
 800703a:	e0f2      	b.n	8007222 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800703c:	683b      	ldr	r3, [r7, #0]
 800703e:	885b      	ldrh	r3, [r3, #2]
 8007040:	b2db      	uxtb	r3, r3
 8007042:	2b05      	cmp	r3, #5
 8007044:	f200 80ac 	bhi.w	80071a0 <USBD_GetDescriptor+0x204>
 8007048:	a201      	add	r2, pc, #4	; (adr r2, 8007050 <USBD_GetDescriptor+0xb4>)
 800704a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800704e:	bf00      	nop
 8007050:	08007069 	.word	0x08007069
 8007054:	0800709d 	.word	0x0800709d
 8007058:	080070d1 	.word	0x080070d1
 800705c:	08007105 	.word	0x08007105
 8007060:	08007139 	.word	0x08007139
 8007064:	0800716d 	.word	0x0800716d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800706e:	685b      	ldr	r3, [r3, #4]
 8007070:	2b00      	cmp	r3, #0
 8007072:	d00b      	beq.n	800708c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800707a:	685b      	ldr	r3, [r3, #4]
 800707c:	687a      	ldr	r2, [r7, #4]
 800707e:	7c12      	ldrb	r2, [r2, #16]
 8007080:	f107 0108 	add.w	r1, r7, #8
 8007084:	4610      	mov	r0, r2
 8007086:	4798      	blx	r3
 8007088:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800708a:	e091      	b.n	80071b0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800708c:	6839      	ldr	r1, [r7, #0]
 800708e:	6878      	ldr	r0, [r7, #4]
 8007090:	f000 fa97 	bl	80075c2 <USBD_CtlError>
            err++;
 8007094:	7afb      	ldrb	r3, [r7, #11]
 8007096:	3301      	adds	r3, #1
 8007098:	72fb      	strb	r3, [r7, #11]
          break;
 800709a:	e089      	b.n	80071b0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80070a2:	689b      	ldr	r3, [r3, #8]
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d00b      	beq.n	80070c0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80070ae:	689b      	ldr	r3, [r3, #8]
 80070b0:	687a      	ldr	r2, [r7, #4]
 80070b2:	7c12      	ldrb	r2, [r2, #16]
 80070b4:	f107 0108 	add.w	r1, r7, #8
 80070b8:	4610      	mov	r0, r2
 80070ba:	4798      	blx	r3
 80070bc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80070be:	e077      	b.n	80071b0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80070c0:	6839      	ldr	r1, [r7, #0]
 80070c2:	6878      	ldr	r0, [r7, #4]
 80070c4:	f000 fa7d 	bl	80075c2 <USBD_CtlError>
            err++;
 80070c8:	7afb      	ldrb	r3, [r7, #11]
 80070ca:	3301      	adds	r3, #1
 80070cc:	72fb      	strb	r3, [r7, #11]
          break;
 80070ce:	e06f      	b.n	80071b0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80070d6:	68db      	ldr	r3, [r3, #12]
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d00b      	beq.n	80070f4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80070e2:	68db      	ldr	r3, [r3, #12]
 80070e4:	687a      	ldr	r2, [r7, #4]
 80070e6:	7c12      	ldrb	r2, [r2, #16]
 80070e8:	f107 0108 	add.w	r1, r7, #8
 80070ec:	4610      	mov	r0, r2
 80070ee:	4798      	blx	r3
 80070f0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80070f2:	e05d      	b.n	80071b0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80070f4:	6839      	ldr	r1, [r7, #0]
 80070f6:	6878      	ldr	r0, [r7, #4]
 80070f8:	f000 fa63 	bl	80075c2 <USBD_CtlError>
            err++;
 80070fc:	7afb      	ldrb	r3, [r7, #11]
 80070fe:	3301      	adds	r3, #1
 8007100:	72fb      	strb	r3, [r7, #11]
          break;
 8007102:	e055      	b.n	80071b0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800710a:	691b      	ldr	r3, [r3, #16]
 800710c:	2b00      	cmp	r3, #0
 800710e:	d00b      	beq.n	8007128 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007116:	691b      	ldr	r3, [r3, #16]
 8007118:	687a      	ldr	r2, [r7, #4]
 800711a:	7c12      	ldrb	r2, [r2, #16]
 800711c:	f107 0108 	add.w	r1, r7, #8
 8007120:	4610      	mov	r0, r2
 8007122:	4798      	blx	r3
 8007124:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007126:	e043      	b.n	80071b0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007128:	6839      	ldr	r1, [r7, #0]
 800712a:	6878      	ldr	r0, [r7, #4]
 800712c:	f000 fa49 	bl	80075c2 <USBD_CtlError>
            err++;
 8007130:	7afb      	ldrb	r3, [r7, #11]
 8007132:	3301      	adds	r3, #1
 8007134:	72fb      	strb	r3, [r7, #11]
          break;
 8007136:	e03b      	b.n	80071b0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800713e:	695b      	ldr	r3, [r3, #20]
 8007140:	2b00      	cmp	r3, #0
 8007142:	d00b      	beq.n	800715c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800714a:	695b      	ldr	r3, [r3, #20]
 800714c:	687a      	ldr	r2, [r7, #4]
 800714e:	7c12      	ldrb	r2, [r2, #16]
 8007150:	f107 0108 	add.w	r1, r7, #8
 8007154:	4610      	mov	r0, r2
 8007156:	4798      	blx	r3
 8007158:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800715a:	e029      	b.n	80071b0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800715c:	6839      	ldr	r1, [r7, #0]
 800715e:	6878      	ldr	r0, [r7, #4]
 8007160:	f000 fa2f 	bl	80075c2 <USBD_CtlError>
            err++;
 8007164:	7afb      	ldrb	r3, [r7, #11]
 8007166:	3301      	adds	r3, #1
 8007168:	72fb      	strb	r3, [r7, #11]
          break;
 800716a:	e021      	b.n	80071b0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007172:	699b      	ldr	r3, [r3, #24]
 8007174:	2b00      	cmp	r3, #0
 8007176:	d00b      	beq.n	8007190 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800717e:	699b      	ldr	r3, [r3, #24]
 8007180:	687a      	ldr	r2, [r7, #4]
 8007182:	7c12      	ldrb	r2, [r2, #16]
 8007184:	f107 0108 	add.w	r1, r7, #8
 8007188:	4610      	mov	r0, r2
 800718a:	4798      	blx	r3
 800718c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800718e:	e00f      	b.n	80071b0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007190:	6839      	ldr	r1, [r7, #0]
 8007192:	6878      	ldr	r0, [r7, #4]
 8007194:	f000 fa15 	bl	80075c2 <USBD_CtlError>
            err++;
 8007198:	7afb      	ldrb	r3, [r7, #11]
 800719a:	3301      	adds	r3, #1
 800719c:	72fb      	strb	r3, [r7, #11]
          break;
 800719e:	e007      	b.n	80071b0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 80071a0:	6839      	ldr	r1, [r7, #0]
 80071a2:	6878      	ldr	r0, [r7, #4]
 80071a4:	f000 fa0d 	bl	80075c2 <USBD_CtlError>
          err++;
 80071a8:	7afb      	ldrb	r3, [r7, #11]
 80071aa:	3301      	adds	r3, #1
 80071ac:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 80071ae:	e038      	b.n	8007222 <USBD_GetDescriptor+0x286>
 80071b0:	e037      	b.n	8007222 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	7c1b      	ldrb	r3, [r3, #16]
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d109      	bne.n	80071ce <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80071c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071c2:	f107 0208 	add.w	r2, r7, #8
 80071c6:	4610      	mov	r0, r2
 80071c8:	4798      	blx	r3
 80071ca:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80071cc:	e029      	b.n	8007222 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80071ce:	6839      	ldr	r1, [r7, #0]
 80071d0:	6878      	ldr	r0, [r7, #4]
 80071d2:	f000 f9f6 	bl	80075c2 <USBD_CtlError>
        err++;
 80071d6:	7afb      	ldrb	r3, [r7, #11]
 80071d8:	3301      	adds	r3, #1
 80071da:	72fb      	strb	r3, [r7, #11]
      break;
 80071dc:	e021      	b.n	8007222 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	7c1b      	ldrb	r3, [r3, #16]
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d10d      	bne.n	8007202 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80071ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071ee:	f107 0208 	add.w	r2, r7, #8
 80071f2:	4610      	mov	r0, r2
 80071f4:	4798      	blx	r3
 80071f6:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	3301      	adds	r3, #1
 80071fc:	2207      	movs	r2, #7
 80071fe:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007200:	e00f      	b.n	8007222 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007202:	6839      	ldr	r1, [r7, #0]
 8007204:	6878      	ldr	r0, [r7, #4]
 8007206:	f000 f9dc 	bl	80075c2 <USBD_CtlError>
        err++;
 800720a:	7afb      	ldrb	r3, [r7, #11]
 800720c:	3301      	adds	r3, #1
 800720e:	72fb      	strb	r3, [r7, #11]
      break;
 8007210:	e007      	b.n	8007222 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007212:	6839      	ldr	r1, [r7, #0]
 8007214:	6878      	ldr	r0, [r7, #4]
 8007216:	f000 f9d4 	bl	80075c2 <USBD_CtlError>
      err++;
 800721a:	7afb      	ldrb	r3, [r7, #11]
 800721c:	3301      	adds	r3, #1
 800721e:	72fb      	strb	r3, [r7, #11]
      break;
 8007220:	bf00      	nop
  }

  if (err != 0U)
 8007222:	7afb      	ldrb	r3, [r7, #11]
 8007224:	2b00      	cmp	r3, #0
 8007226:	d11c      	bne.n	8007262 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8007228:	893b      	ldrh	r3, [r7, #8]
 800722a:	2b00      	cmp	r3, #0
 800722c:	d011      	beq.n	8007252 <USBD_GetDescriptor+0x2b6>
 800722e:	683b      	ldr	r3, [r7, #0]
 8007230:	88db      	ldrh	r3, [r3, #6]
 8007232:	2b00      	cmp	r3, #0
 8007234:	d00d      	beq.n	8007252 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8007236:	683b      	ldr	r3, [r7, #0]
 8007238:	88da      	ldrh	r2, [r3, #6]
 800723a:	893b      	ldrh	r3, [r7, #8]
 800723c:	4293      	cmp	r3, r2
 800723e:	bf28      	it	cs
 8007240:	4613      	movcs	r3, r2
 8007242:	b29b      	uxth	r3, r3
 8007244:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007246:	893b      	ldrh	r3, [r7, #8]
 8007248:	461a      	mov	r2, r3
 800724a:	68f9      	ldr	r1, [r7, #12]
 800724c:	6878      	ldr	r0, [r7, #4]
 800724e:	f000 fa22 	bl	8007696 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8007252:	683b      	ldr	r3, [r7, #0]
 8007254:	88db      	ldrh	r3, [r3, #6]
 8007256:	2b00      	cmp	r3, #0
 8007258:	d104      	bne.n	8007264 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800725a:	6878      	ldr	r0, [r7, #4]
 800725c:	f000 fa79 	bl	8007752 <USBD_CtlSendStatus>
 8007260:	e000      	b.n	8007264 <USBD_GetDescriptor+0x2c8>
    return;
 8007262:	bf00      	nop
    }
  }
}
 8007264:	3710      	adds	r7, #16
 8007266:	46bd      	mov	sp, r7
 8007268:	bd80      	pop	{r7, pc}
 800726a:	bf00      	nop

0800726c <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800726c:	b580      	push	{r7, lr}
 800726e:	b084      	sub	sp, #16
 8007270:	af00      	add	r7, sp, #0
 8007272:	6078      	str	r0, [r7, #4]
 8007274:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007276:	683b      	ldr	r3, [r7, #0]
 8007278:	889b      	ldrh	r3, [r3, #4]
 800727a:	2b00      	cmp	r3, #0
 800727c:	d130      	bne.n	80072e0 <USBD_SetAddress+0x74>
 800727e:	683b      	ldr	r3, [r7, #0]
 8007280:	88db      	ldrh	r3, [r3, #6]
 8007282:	2b00      	cmp	r3, #0
 8007284:	d12c      	bne.n	80072e0 <USBD_SetAddress+0x74>
 8007286:	683b      	ldr	r3, [r7, #0]
 8007288:	885b      	ldrh	r3, [r3, #2]
 800728a:	2b7f      	cmp	r3, #127	; 0x7f
 800728c:	d828      	bhi.n	80072e0 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800728e:	683b      	ldr	r3, [r7, #0]
 8007290:	885b      	ldrh	r3, [r3, #2]
 8007292:	b2db      	uxtb	r3, r3
 8007294:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007298:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80072a0:	2b03      	cmp	r3, #3
 80072a2:	d104      	bne.n	80072ae <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 80072a4:	6839      	ldr	r1, [r7, #0]
 80072a6:	6878      	ldr	r0, [r7, #4]
 80072a8:	f000 f98b 	bl	80075c2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80072ac:	e01d      	b.n	80072ea <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	7bfa      	ldrb	r2, [r7, #15]
 80072b2:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80072b6:	7bfb      	ldrb	r3, [r7, #15]
 80072b8:	4619      	mov	r1, r3
 80072ba:	6878      	ldr	r0, [r7, #4]
 80072bc:	f000 fe8c 	bl	8007fd8 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80072c0:	6878      	ldr	r0, [r7, #4]
 80072c2:	f000 fa46 	bl	8007752 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80072c6:	7bfb      	ldrb	r3, [r7, #15]
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d004      	beq.n	80072d6 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	2202      	movs	r2, #2
 80072d0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80072d4:	e009      	b.n	80072ea <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	2201      	movs	r2, #1
 80072da:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80072de:	e004      	b.n	80072ea <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80072e0:	6839      	ldr	r1, [r7, #0]
 80072e2:	6878      	ldr	r0, [r7, #4]
 80072e4:	f000 f96d 	bl	80075c2 <USBD_CtlError>
  }
}
 80072e8:	bf00      	nop
 80072ea:	bf00      	nop
 80072ec:	3710      	adds	r7, #16
 80072ee:	46bd      	mov	sp, r7
 80072f0:	bd80      	pop	{r7, pc}
	...

080072f4 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80072f4:	b580      	push	{r7, lr}
 80072f6:	b082      	sub	sp, #8
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	6078      	str	r0, [r7, #4]
 80072fc:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80072fe:	683b      	ldr	r3, [r7, #0]
 8007300:	885b      	ldrh	r3, [r3, #2]
 8007302:	b2da      	uxtb	r2, r3
 8007304:	4b41      	ldr	r3, [pc, #260]	; (800740c <USBD_SetConfig+0x118>)
 8007306:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007308:	4b40      	ldr	r3, [pc, #256]	; (800740c <USBD_SetConfig+0x118>)
 800730a:	781b      	ldrb	r3, [r3, #0]
 800730c:	2b01      	cmp	r3, #1
 800730e:	d904      	bls.n	800731a <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8007310:	6839      	ldr	r1, [r7, #0]
 8007312:	6878      	ldr	r0, [r7, #4]
 8007314:	f000 f955 	bl	80075c2 <USBD_CtlError>
 8007318:	e075      	b.n	8007406 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007320:	2b02      	cmp	r3, #2
 8007322:	d002      	beq.n	800732a <USBD_SetConfig+0x36>
 8007324:	2b03      	cmp	r3, #3
 8007326:	d023      	beq.n	8007370 <USBD_SetConfig+0x7c>
 8007328:	e062      	b.n	80073f0 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800732a:	4b38      	ldr	r3, [pc, #224]	; (800740c <USBD_SetConfig+0x118>)
 800732c:	781b      	ldrb	r3, [r3, #0]
 800732e:	2b00      	cmp	r3, #0
 8007330:	d01a      	beq.n	8007368 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8007332:	4b36      	ldr	r3, [pc, #216]	; (800740c <USBD_SetConfig+0x118>)
 8007334:	781b      	ldrb	r3, [r3, #0]
 8007336:	461a      	mov	r2, r3
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	2203      	movs	r2, #3
 8007340:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007344:	4b31      	ldr	r3, [pc, #196]	; (800740c <USBD_SetConfig+0x118>)
 8007346:	781b      	ldrb	r3, [r3, #0]
 8007348:	4619      	mov	r1, r3
 800734a:	6878      	ldr	r0, [r7, #4]
 800734c:	f7ff f9e7 	bl	800671e <USBD_SetClassConfig>
 8007350:	4603      	mov	r3, r0
 8007352:	2b02      	cmp	r3, #2
 8007354:	d104      	bne.n	8007360 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8007356:	6839      	ldr	r1, [r7, #0]
 8007358:	6878      	ldr	r0, [r7, #4]
 800735a:	f000 f932 	bl	80075c2 <USBD_CtlError>
            return;
 800735e:	e052      	b.n	8007406 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8007360:	6878      	ldr	r0, [r7, #4]
 8007362:	f000 f9f6 	bl	8007752 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007366:	e04e      	b.n	8007406 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007368:	6878      	ldr	r0, [r7, #4]
 800736a:	f000 f9f2 	bl	8007752 <USBD_CtlSendStatus>
        break;
 800736e:	e04a      	b.n	8007406 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8007370:	4b26      	ldr	r3, [pc, #152]	; (800740c <USBD_SetConfig+0x118>)
 8007372:	781b      	ldrb	r3, [r3, #0]
 8007374:	2b00      	cmp	r3, #0
 8007376:	d112      	bne.n	800739e <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	2202      	movs	r2, #2
 800737c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8007380:	4b22      	ldr	r3, [pc, #136]	; (800740c <USBD_SetConfig+0x118>)
 8007382:	781b      	ldrb	r3, [r3, #0]
 8007384:	461a      	mov	r2, r3
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800738a:	4b20      	ldr	r3, [pc, #128]	; (800740c <USBD_SetConfig+0x118>)
 800738c:	781b      	ldrb	r3, [r3, #0]
 800738e:	4619      	mov	r1, r3
 8007390:	6878      	ldr	r0, [r7, #4]
 8007392:	f7ff f9e3 	bl	800675c <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8007396:	6878      	ldr	r0, [r7, #4]
 8007398:	f000 f9db 	bl	8007752 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800739c:	e033      	b.n	8007406 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800739e:	4b1b      	ldr	r3, [pc, #108]	; (800740c <USBD_SetConfig+0x118>)
 80073a0:	781b      	ldrb	r3, [r3, #0]
 80073a2:	461a      	mov	r2, r3
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	685b      	ldr	r3, [r3, #4]
 80073a8:	429a      	cmp	r2, r3
 80073aa:	d01d      	beq.n	80073e8 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	685b      	ldr	r3, [r3, #4]
 80073b0:	b2db      	uxtb	r3, r3
 80073b2:	4619      	mov	r1, r3
 80073b4:	6878      	ldr	r0, [r7, #4]
 80073b6:	f7ff f9d1 	bl	800675c <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 80073ba:	4b14      	ldr	r3, [pc, #80]	; (800740c <USBD_SetConfig+0x118>)
 80073bc:	781b      	ldrb	r3, [r3, #0]
 80073be:	461a      	mov	r2, r3
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80073c4:	4b11      	ldr	r3, [pc, #68]	; (800740c <USBD_SetConfig+0x118>)
 80073c6:	781b      	ldrb	r3, [r3, #0]
 80073c8:	4619      	mov	r1, r3
 80073ca:	6878      	ldr	r0, [r7, #4]
 80073cc:	f7ff f9a7 	bl	800671e <USBD_SetClassConfig>
 80073d0:	4603      	mov	r3, r0
 80073d2:	2b02      	cmp	r3, #2
 80073d4:	d104      	bne.n	80073e0 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 80073d6:	6839      	ldr	r1, [r7, #0]
 80073d8:	6878      	ldr	r0, [r7, #4]
 80073da:	f000 f8f2 	bl	80075c2 <USBD_CtlError>
            return;
 80073de:	e012      	b.n	8007406 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80073e0:	6878      	ldr	r0, [r7, #4]
 80073e2:	f000 f9b6 	bl	8007752 <USBD_CtlSendStatus>
        break;
 80073e6:	e00e      	b.n	8007406 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80073e8:	6878      	ldr	r0, [r7, #4]
 80073ea:	f000 f9b2 	bl	8007752 <USBD_CtlSendStatus>
        break;
 80073ee:	e00a      	b.n	8007406 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 80073f0:	6839      	ldr	r1, [r7, #0]
 80073f2:	6878      	ldr	r0, [r7, #4]
 80073f4:	f000 f8e5 	bl	80075c2 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 80073f8:	4b04      	ldr	r3, [pc, #16]	; (800740c <USBD_SetConfig+0x118>)
 80073fa:	781b      	ldrb	r3, [r3, #0]
 80073fc:	4619      	mov	r1, r3
 80073fe:	6878      	ldr	r0, [r7, #4]
 8007400:	f7ff f9ac 	bl	800675c <USBD_ClrClassConfig>
        break;
 8007404:	bf00      	nop
    }
  }
}
 8007406:	3708      	adds	r7, #8
 8007408:	46bd      	mov	sp, r7
 800740a:	bd80      	pop	{r7, pc}
 800740c:	20000290 	.word	0x20000290

08007410 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007410:	b580      	push	{r7, lr}
 8007412:	b082      	sub	sp, #8
 8007414:	af00      	add	r7, sp, #0
 8007416:	6078      	str	r0, [r7, #4]
 8007418:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800741a:	683b      	ldr	r3, [r7, #0]
 800741c:	88db      	ldrh	r3, [r3, #6]
 800741e:	2b01      	cmp	r3, #1
 8007420:	d004      	beq.n	800742c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007422:	6839      	ldr	r1, [r7, #0]
 8007424:	6878      	ldr	r0, [r7, #4]
 8007426:	f000 f8cc 	bl	80075c2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800742a:	e022      	b.n	8007472 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007432:	2b02      	cmp	r3, #2
 8007434:	dc02      	bgt.n	800743c <USBD_GetConfig+0x2c>
 8007436:	2b00      	cmp	r3, #0
 8007438:	dc03      	bgt.n	8007442 <USBD_GetConfig+0x32>
 800743a:	e015      	b.n	8007468 <USBD_GetConfig+0x58>
 800743c:	2b03      	cmp	r3, #3
 800743e:	d00b      	beq.n	8007458 <USBD_GetConfig+0x48>
 8007440:	e012      	b.n	8007468 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	2200      	movs	r2, #0
 8007446:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	3308      	adds	r3, #8
 800744c:	2201      	movs	r2, #1
 800744e:	4619      	mov	r1, r3
 8007450:	6878      	ldr	r0, [r7, #4]
 8007452:	f000 f920 	bl	8007696 <USBD_CtlSendData>
        break;
 8007456:	e00c      	b.n	8007472 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	3304      	adds	r3, #4
 800745c:	2201      	movs	r2, #1
 800745e:	4619      	mov	r1, r3
 8007460:	6878      	ldr	r0, [r7, #4]
 8007462:	f000 f918 	bl	8007696 <USBD_CtlSendData>
        break;
 8007466:	e004      	b.n	8007472 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8007468:	6839      	ldr	r1, [r7, #0]
 800746a:	6878      	ldr	r0, [r7, #4]
 800746c:	f000 f8a9 	bl	80075c2 <USBD_CtlError>
        break;
 8007470:	bf00      	nop
}
 8007472:	bf00      	nop
 8007474:	3708      	adds	r7, #8
 8007476:	46bd      	mov	sp, r7
 8007478:	bd80      	pop	{r7, pc}

0800747a <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800747a:	b580      	push	{r7, lr}
 800747c:	b082      	sub	sp, #8
 800747e:	af00      	add	r7, sp, #0
 8007480:	6078      	str	r0, [r7, #4]
 8007482:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800748a:	3b01      	subs	r3, #1
 800748c:	2b02      	cmp	r3, #2
 800748e:	d81e      	bhi.n	80074ce <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007490:	683b      	ldr	r3, [r7, #0]
 8007492:	88db      	ldrh	r3, [r3, #6]
 8007494:	2b02      	cmp	r3, #2
 8007496:	d004      	beq.n	80074a2 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8007498:	6839      	ldr	r1, [r7, #0]
 800749a:	6878      	ldr	r0, [r7, #4]
 800749c:	f000 f891 	bl	80075c2 <USBD_CtlError>
        break;
 80074a0:	e01a      	b.n	80074d8 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	2201      	movs	r2, #1
 80074a6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d005      	beq.n	80074be <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	68db      	ldr	r3, [r3, #12]
 80074b6:	f043 0202 	orr.w	r2, r3, #2
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	330c      	adds	r3, #12
 80074c2:	2202      	movs	r2, #2
 80074c4:	4619      	mov	r1, r3
 80074c6:	6878      	ldr	r0, [r7, #4]
 80074c8:	f000 f8e5 	bl	8007696 <USBD_CtlSendData>
      break;
 80074cc:	e004      	b.n	80074d8 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 80074ce:	6839      	ldr	r1, [r7, #0]
 80074d0:	6878      	ldr	r0, [r7, #4]
 80074d2:	f000 f876 	bl	80075c2 <USBD_CtlError>
      break;
 80074d6:	bf00      	nop
  }
}
 80074d8:	bf00      	nop
 80074da:	3708      	adds	r7, #8
 80074dc:	46bd      	mov	sp, r7
 80074de:	bd80      	pop	{r7, pc}

080074e0 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80074e0:	b580      	push	{r7, lr}
 80074e2:	b082      	sub	sp, #8
 80074e4:	af00      	add	r7, sp, #0
 80074e6:	6078      	str	r0, [r7, #4]
 80074e8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80074ea:	683b      	ldr	r3, [r7, #0]
 80074ec:	885b      	ldrh	r3, [r3, #2]
 80074ee:	2b01      	cmp	r3, #1
 80074f0:	d106      	bne.n	8007500 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	2201      	movs	r2, #1
 80074f6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 80074fa:	6878      	ldr	r0, [r7, #4]
 80074fc:	f000 f929 	bl	8007752 <USBD_CtlSendStatus>
  }
}
 8007500:	bf00      	nop
 8007502:	3708      	adds	r7, #8
 8007504:	46bd      	mov	sp, r7
 8007506:	bd80      	pop	{r7, pc}

08007508 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007508:	b580      	push	{r7, lr}
 800750a:	b082      	sub	sp, #8
 800750c:	af00      	add	r7, sp, #0
 800750e:	6078      	str	r0, [r7, #4]
 8007510:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007518:	3b01      	subs	r3, #1
 800751a:	2b02      	cmp	r3, #2
 800751c:	d80b      	bhi.n	8007536 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800751e:	683b      	ldr	r3, [r7, #0]
 8007520:	885b      	ldrh	r3, [r3, #2]
 8007522:	2b01      	cmp	r3, #1
 8007524:	d10c      	bne.n	8007540 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	2200      	movs	r2, #0
 800752a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800752e:	6878      	ldr	r0, [r7, #4]
 8007530:	f000 f90f 	bl	8007752 <USBD_CtlSendStatus>
      }
      break;
 8007534:	e004      	b.n	8007540 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8007536:	6839      	ldr	r1, [r7, #0]
 8007538:	6878      	ldr	r0, [r7, #4]
 800753a:	f000 f842 	bl	80075c2 <USBD_CtlError>
      break;
 800753e:	e000      	b.n	8007542 <USBD_ClrFeature+0x3a>
      break;
 8007540:	bf00      	nop
  }
}
 8007542:	bf00      	nop
 8007544:	3708      	adds	r7, #8
 8007546:	46bd      	mov	sp, r7
 8007548:	bd80      	pop	{r7, pc}

0800754a <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800754a:	b480      	push	{r7}
 800754c:	b083      	sub	sp, #12
 800754e:	af00      	add	r7, sp, #0
 8007550:	6078      	str	r0, [r7, #4]
 8007552:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8007554:	683b      	ldr	r3, [r7, #0]
 8007556:	781a      	ldrb	r2, [r3, #0]
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800755c:	683b      	ldr	r3, [r7, #0]
 800755e:	785a      	ldrb	r2, [r3, #1]
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8007564:	683b      	ldr	r3, [r7, #0]
 8007566:	3302      	adds	r3, #2
 8007568:	781b      	ldrb	r3, [r3, #0]
 800756a:	b29a      	uxth	r2, r3
 800756c:	683b      	ldr	r3, [r7, #0]
 800756e:	3303      	adds	r3, #3
 8007570:	781b      	ldrb	r3, [r3, #0]
 8007572:	b29b      	uxth	r3, r3
 8007574:	021b      	lsls	r3, r3, #8
 8007576:	b29b      	uxth	r3, r3
 8007578:	4413      	add	r3, r2
 800757a:	b29a      	uxth	r2, r3
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8007580:	683b      	ldr	r3, [r7, #0]
 8007582:	3304      	adds	r3, #4
 8007584:	781b      	ldrb	r3, [r3, #0]
 8007586:	b29a      	uxth	r2, r3
 8007588:	683b      	ldr	r3, [r7, #0]
 800758a:	3305      	adds	r3, #5
 800758c:	781b      	ldrb	r3, [r3, #0]
 800758e:	b29b      	uxth	r3, r3
 8007590:	021b      	lsls	r3, r3, #8
 8007592:	b29b      	uxth	r3, r3
 8007594:	4413      	add	r3, r2
 8007596:	b29a      	uxth	r2, r3
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800759c:	683b      	ldr	r3, [r7, #0]
 800759e:	3306      	adds	r3, #6
 80075a0:	781b      	ldrb	r3, [r3, #0]
 80075a2:	b29a      	uxth	r2, r3
 80075a4:	683b      	ldr	r3, [r7, #0]
 80075a6:	3307      	adds	r3, #7
 80075a8:	781b      	ldrb	r3, [r3, #0]
 80075aa:	b29b      	uxth	r3, r3
 80075ac:	021b      	lsls	r3, r3, #8
 80075ae:	b29b      	uxth	r3, r3
 80075b0:	4413      	add	r3, r2
 80075b2:	b29a      	uxth	r2, r3
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	80da      	strh	r2, [r3, #6]

}
 80075b8:	bf00      	nop
 80075ba:	370c      	adds	r7, #12
 80075bc:	46bd      	mov	sp, r7
 80075be:	bc80      	pop	{r7}
 80075c0:	4770      	bx	lr

080075c2 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 80075c2:	b580      	push	{r7, lr}
 80075c4:	b082      	sub	sp, #8
 80075c6:	af00      	add	r7, sp, #0
 80075c8:	6078      	str	r0, [r7, #4]
 80075ca:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 80075cc:	2180      	movs	r1, #128	; 0x80
 80075ce:	6878      	ldr	r0, [r7, #4]
 80075d0:	f000 fc98 	bl	8007f04 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80075d4:	2100      	movs	r1, #0
 80075d6:	6878      	ldr	r0, [r7, #4]
 80075d8:	f000 fc94 	bl	8007f04 <USBD_LL_StallEP>
}
 80075dc:	bf00      	nop
 80075de:	3708      	adds	r7, #8
 80075e0:	46bd      	mov	sp, r7
 80075e2:	bd80      	pop	{r7, pc}

080075e4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80075e4:	b580      	push	{r7, lr}
 80075e6:	b086      	sub	sp, #24
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	60f8      	str	r0, [r7, #12]
 80075ec:	60b9      	str	r1, [r7, #8]
 80075ee:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80075f0:	2300      	movs	r3, #0
 80075f2:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d032      	beq.n	8007660 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80075fa:	68f8      	ldr	r0, [r7, #12]
 80075fc:	f000 f834 	bl	8007668 <USBD_GetLen>
 8007600:	4603      	mov	r3, r0
 8007602:	3301      	adds	r3, #1
 8007604:	b29b      	uxth	r3, r3
 8007606:	005b      	lsls	r3, r3, #1
 8007608:	b29a      	uxth	r2, r3
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800760e:	7dfb      	ldrb	r3, [r7, #23]
 8007610:	1c5a      	adds	r2, r3, #1
 8007612:	75fa      	strb	r2, [r7, #23]
 8007614:	461a      	mov	r2, r3
 8007616:	68bb      	ldr	r3, [r7, #8]
 8007618:	4413      	add	r3, r2
 800761a:	687a      	ldr	r2, [r7, #4]
 800761c:	7812      	ldrb	r2, [r2, #0]
 800761e:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8007620:	7dfb      	ldrb	r3, [r7, #23]
 8007622:	1c5a      	adds	r2, r3, #1
 8007624:	75fa      	strb	r2, [r7, #23]
 8007626:	461a      	mov	r2, r3
 8007628:	68bb      	ldr	r3, [r7, #8]
 800762a:	4413      	add	r3, r2
 800762c:	2203      	movs	r2, #3
 800762e:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8007630:	e012      	b.n	8007658 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	1c5a      	adds	r2, r3, #1
 8007636:	60fa      	str	r2, [r7, #12]
 8007638:	7dfa      	ldrb	r2, [r7, #23]
 800763a:	1c51      	adds	r1, r2, #1
 800763c:	75f9      	strb	r1, [r7, #23]
 800763e:	4611      	mov	r1, r2
 8007640:	68ba      	ldr	r2, [r7, #8]
 8007642:	440a      	add	r2, r1
 8007644:	781b      	ldrb	r3, [r3, #0]
 8007646:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8007648:	7dfb      	ldrb	r3, [r7, #23]
 800764a:	1c5a      	adds	r2, r3, #1
 800764c:	75fa      	strb	r2, [r7, #23]
 800764e:	461a      	mov	r2, r3
 8007650:	68bb      	ldr	r3, [r7, #8]
 8007652:	4413      	add	r3, r2
 8007654:	2200      	movs	r2, #0
 8007656:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	781b      	ldrb	r3, [r3, #0]
 800765c:	2b00      	cmp	r3, #0
 800765e:	d1e8      	bne.n	8007632 <USBD_GetString+0x4e>
    }
  }
}
 8007660:	bf00      	nop
 8007662:	3718      	adds	r7, #24
 8007664:	46bd      	mov	sp, r7
 8007666:	bd80      	pop	{r7, pc}

08007668 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007668:	b480      	push	{r7}
 800766a:	b085      	sub	sp, #20
 800766c:	af00      	add	r7, sp, #0
 800766e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007670:	2300      	movs	r3, #0
 8007672:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8007674:	e005      	b.n	8007682 <USBD_GetLen+0x1a>
  {
    len++;
 8007676:	7bfb      	ldrb	r3, [r7, #15]
 8007678:	3301      	adds	r3, #1
 800767a:	73fb      	strb	r3, [r7, #15]
    buf++;
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	3301      	adds	r3, #1
 8007680:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	781b      	ldrb	r3, [r3, #0]
 8007686:	2b00      	cmp	r3, #0
 8007688:	d1f5      	bne.n	8007676 <USBD_GetLen+0xe>
  }

  return len;
 800768a:	7bfb      	ldrb	r3, [r7, #15]
}
 800768c:	4618      	mov	r0, r3
 800768e:	3714      	adds	r7, #20
 8007690:	46bd      	mov	sp, r7
 8007692:	bc80      	pop	{r7}
 8007694:	4770      	bx	lr

08007696 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8007696:	b580      	push	{r7, lr}
 8007698:	b084      	sub	sp, #16
 800769a:	af00      	add	r7, sp, #0
 800769c:	60f8      	str	r0, [r7, #12]
 800769e:	60b9      	str	r1, [r7, #8]
 80076a0:	4613      	mov	r3, r2
 80076a2:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	2202      	movs	r2, #2
 80076a8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80076ac:	88fa      	ldrh	r2, [r7, #6]
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 80076b2:	88fa      	ldrh	r2, [r7, #6]
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80076b8:	88fb      	ldrh	r3, [r7, #6]
 80076ba:	68ba      	ldr	r2, [r7, #8]
 80076bc:	2100      	movs	r1, #0
 80076be:	68f8      	ldr	r0, [r7, #12]
 80076c0:	f000 fca9 	bl	8008016 <USBD_LL_Transmit>

  return USBD_OK;
 80076c4:	2300      	movs	r3, #0
}
 80076c6:	4618      	mov	r0, r3
 80076c8:	3710      	adds	r7, #16
 80076ca:	46bd      	mov	sp, r7
 80076cc:	bd80      	pop	{r7, pc}

080076ce <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 80076ce:	b580      	push	{r7, lr}
 80076d0:	b084      	sub	sp, #16
 80076d2:	af00      	add	r7, sp, #0
 80076d4:	60f8      	str	r0, [r7, #12]
 80076d6:	60b9      	str	r1, [r7, #8]
 80076d8:	4613      	mov	r3, r2
 80076da:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80076dc:	88fb      	ldrh	r3, [r7, #6]
 80076de:	68ba      	ldr	r2, [r7, #8]
 80076e0:	2100      	movs	r1, #0
 80076e2:	68f8      	ldr	r0, [r7, #12]
 80076e4:	f000 fc97 	bl	8008016 <USBD_LL_Transmit>

  return USBD_OK;
 80076e8:	2300      	movs	r3, #0
}
 80076ea:	4618      	mov	r0, r3
 80076ec:	3710      	adds	r7, #16
 80076ee:	46bd      	mov	sp, r7
 80076f0:	bd80      	pop	{r7, pc}

080076f2 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 80076f2:	b580      	push	{r7, lr}
 80076f4:	b084      	sub	sp, #16
 80076f6:	af00      	add	r7, sp, #0
 80076f8:	60f8      	str	r0, [r7, #12]
 80076fa:	60b9      	str	r1, [r7, #8]
 80076fc:	4613      	mov	r3, r2
 80076fe:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	2203      	movs	r2, #3
 8007704:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007708:	88fa      	ldrh	r2, [r7, #6]
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8007710:	88fa      	ldrh	r2, [r7, #6]
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007718:	88fb      	ldrh	r3, [r7, #6]
 800771a:	68ba      	ldr	r2, [r7, #8]
 800771c:	2100      	movs	r1, #0
 800771e:	68f8      	ldr	r0, [r7, #12]
 8007720:	f000 fc9c 	bl	800805c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007724:	2300      	movs	r3, #0
}
 8007726:	4618      	mov	r0, r3
 8007728:	3710      	adds	r7, #16
 800772a:	46bd      	mov	sp, r7
 800772c:	bd80      	pop	{r7, pc}

0800772e <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800772e:	b580      	push	{r7, lr}
 8007730:	b084      	sub	sp, #16
 8007732:	af00      	add	r7, sp, #0
 8007734:	60f8      	str	r0, [r7, #12]
 8007736:	60b9      	str	r1, [r7, #8]
 8007738:	4613      	mov	r3, r2
 800773a:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800773c:	88fb      	ldrh	r3, [r7, #6]
 800773e:	68ba      	ldr	r2, [r7, #8]
 8007740:	2100      	movs	r1, #0
 8007742:	68f8      	ldr	r0, [r7, #12]
 8007744:	f000 fc8a 	bl	800805c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007748:	2300      	movs	r3, #0
}
 800774a:	4618      	mov	r0, r3
 800774c:	3710      	adds	r7, #16
 800774e:	46bd      	mov	sp, r7
 8007750:	bd80      	pop	{r7, pc}

08007752 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007752:	b580      	push	{r7, lr}
 8007754:	b082      	sub	sp, #8
 8007756:	af00      	add	r7, sp, #0
 8007758:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	2204      	movs	r2, #4
 800775e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007762:	2300      	movs	r3, #0
 8007764:	2200      	movs	r2, #0
 8007766:	2100      	movs	r1, #0
 8007768:	6878      	ldr	r0, [r7, #4]
 800776a:	f000 fc54 	bl	8008016 <USBD_LL_Transmit>

  return USBD_OK;
 800776e:	2300      	movs	r3, #0
}
 8007770:	4618      	mov	r0, r3
 8007772:	3708      	adds	r7, #8
 8007774:	46bd      	mov	sp, r7
 8007776:	bd80      	pop	{r7, pc}

08007778 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007778:	b580      	push	{r7, lr}
 800777a:	b082      	sub	sp, #8
 800777c:	af00      	add	r7, sp, #0
 800777e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	2205      	movs	r2, #5
 8007784:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007788:	2300      	movs	r3, #0
 800778a:	2200      	movs	r2, #0
 800778c:	2100      	movs	r1, #0
 800778e:	6878      	ldr	r0, [r7, #4]
 8007790:	f000 fc64 	bl	800805c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007794:	2300      	movs	r3, #0
}
 8007796:	4618      	mov	r0, r3
 8007798:	3708      	adds	r7, #8
 800779a:	46bd      	mov	sp, r7
 800779c:	bd80      	pop	{r7, pc}
	...

080077a0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80077a0:	b580      	push	{r7, lr}
 80077a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80077a4:	2200      	movs	r2, #0
 80077a6:	4912      	ldr	r1, [pc, #72]	; (80077f0 <MX_USB_DEVICE_Init+0x50>)
 80077a8:	4812      	ldr	r0, [pc, #72]	; (80077f4 <MX_USB_DEVICE_Init+0x54>)
 80077aa:	f7fe ff5e 	bl	800666a <USBD_Init>
 80077ae:	4603      	mov	r3, r0
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d001      	beq.n	80077b8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80077b4:	f7f8 fef0 	bl	8000598 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80077b8:	490f      	ldr	r1, [pc, #60]	; (80077f8 <MX_USB_DEVICE_Init+0x58>)
 80077ba:	480e      	ldr	r0, [pc, #56]	; (80077f4 <MX_USB_DEVICE_Init+0x54>)
 80077bc:	f7fe ff80 	bl	80066c0 <USBD_RegisterClass>
 80077c0:	4603      	mov	r3, r0
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d001      	beq.n	80077ca <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80077c6:	f7f8 fee7 	bl	8000598 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80077ca:	490c      	ldr	r1, [pc, #48]	; (80077fc <MX_USB_DEVICE_Init+0x5c>)
 80077cc:	4809      	ldr	r0, [pc, #36]	; (80077f4 <MX_USB_DEVICE_Init+0x54>)
 80077ce:	f7fe feb1 	bl	8006534 <USBD_CDC_RegisterInterface>
 80077d2:	4603      	mov	r3, r0
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d001      	beq.n	80077dc <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80077d8:	f7f8 fede 	bl	8000598 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80077dc:	4805      	ldr	r0, [pc, #20]	; (80077f4 <MX_USB_DEVICE_Init+0x54>)
 80077de:	f7fe ff88 	bl	80066f2 <USBD_Start>
 80077e2:	4603      	mov	r3, r0
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d001      	beq.n	80077ec <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80077e8:	f7f8 fed6 	bl	8000598 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80077ec:	bf00      	nop
 80077ee:	bd80      	pop	{r7, pc}
 80077f0:	2000012c 	.word	0x2000012c
 80077f4:	20000294 	.word	0x20000294
 80077f8:	20000018 	.word	0x20000018
 80077fc:	2000011c 	.word	0x2000011c

08007800 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007800:	b580      	push	{r7, lr}
 8007802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007804:	2200      	movs	r2, #0
 8007806:	4905      	ldr	r1, [pc, #20]	; (800781c <CDC_Init_FS+0x1c>)
 8007808:	4805      	ldr	r0, [pc, #20]	; (8007820 <CDC_Init_FS+0x20>)
 800780a:	f7fe fea9 	bl	8006560 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800780e:	4905      	ldr	r1, [pc, #20]	; (8007824 <CDC_Init_FS+0x24>)
 8007810:	4803      	ldr	r0, [pc, #12]	; (8007820 <CDC_Init_FS+0x20>)
 8007812:	f7fe febe 	bl	8006592 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8007816:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007818:	4618      	mov	r0, r3
 800781a:	bd80      	pop	{r7, pc}
 800781c:	20000960 	.word	0x20000960
 8007820:	20000294 	.word	0x20000294
 8007824:	20000560 	.word	0x20000560

08007828 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007828:	b480      	push	{r7}
 800782a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800782c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800782e:	4618      	mov	r0, r3
 8007830:	46bd      	mov	sp, r7
 8007832:	bc80      	pop	{r7}
 8007834:	4770      	bx	lr
	...

08007838 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007838:	b480      	push	{r7}
 800783a:	b083      	sub	sp, #12
 800783c:	af00      	add	r7, sp, #0
 800783e:	4603      	mov	r3, r0
 8007840:	6039      	str	r1, [r7, #0]
 8007842:	71fb      	strb	r3, [r7, #7]
 8007844:	4613      	mov	r3, r2
 8007846:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007848:	79fb      	ldrb	r3, [r7, #7]
 800784a:	2b23      	cmp	r3, #35	; 0x23
 800784c:	f200 808c 	bhi.w	8007968 <CDC_Control_FS+0x130>
 8007850:	a201      	add	r2, pc, #4	; (adr r2, 8007858 <CDC_Control_FS+0x20>)
 8007852:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007856:	bf00      	nop
 8007858:	08007969 	.word	0x08007969
 800785c:	08007969 	.word	0x08007969
 8007860:	08007969 	.word	0x08007969
 8007864:	08007969 	.word	0x08007969
 8007868:	08007969 	.word	0x08007969
 800786c:	08007969 	.word	0x08007969
 8007870:	08007969 	.word	0x08007969
 8007874:	08007969 	.word	0x08007969
 8007878:	08007969 	.word	0x08007969
 800787c:	08007969 	.word	0x08007969
 8007880:	08007969 	.word	0x08007969
 8007884:	08007969 	.word	0x08007969
 8007888:	08007969 	.word	0x08007969
 800788c:	08007969 	.word	0x08007969
 8007890:	08007969 	.word	0x08007969
 8007894:	08007969 	.word	0x08007969
 8007898:	08007969 	.word	0x08007969
 800789c:	08007969 	.word	0x08007969
 80078a0:	08007969 	.word	0x08007969
 80078a4:	08007969 	.word	0x08007969
 80078a8:	08007969 	.word	0x08007969
 80078ac:	08007969 	.word	0x08007969
 80078b0:	08007969 	.word	0x08007969
 80078b4:	08007969 	.word	0x08007969
 80078b8:	08007969 	.word	0x08007969
 80078bc:	08007969 	.word	0x08007969
 80078c0:	08007969 	.word	0x08007969
 80078c4:	08007969 	.word	0x08007969
 80078c8:	08007969 	.word	0x08007969
 80078cc:	08007969 	.word	0x08007969
 80078d0:	08007969 	.word	0x08007969
 80078d4:	08007969 	.word	0x08007969
 80078d8:	080078e9 	.word	0x080078e9
 80078dc:	08007923 	.word	0x08007923
 80078e0:	08007969 	.word	0x08007969
 80078e4:	08007969 	.word	0x08007969
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
    	buffer[0] = pbuf[0];
 80078e8:	683b      	ldr	r3, [r7, #0]
 80078ea:	781a      	ldrb	r2, [r3, #0]
 80078ec:	4b22      	ldr	r3, [pc, #136]	; (8007978 <CDC_Control_FS+0x140>)
 80078ee:	701a      	strb	r2, [r3, #0]
    	buffer[1] = pbuf[1];
 80078f0:	683b      	ldr	r3, [r7, #0]
 80078f2:	785a      	ldrb	r2, [r3, #1]
 80078f4:	4b20      	ldr	r3, [pc, #128]	; (8007978 <CDC_Control_FS+0x140>)
 80078f6:	705a      	strb	r2, [r3, #1]
    	buffer[2] = pbuf[2];
 80078f8:	683b      	ldr	r3, [r7, #0]
 80078fa:	789a      	ldrb	r2, [r3, #2]
 80078fc:	4b1e      	ldr	r3, [pc, #120]	; (8007978 <CDC_Control_FS+0x140>)
 80078fe:	709a      	strb	r2, [r3, #2]
    	buffer[3] = pbuf[3];
 8007900:	683b      	ldr	r3, [r7, #0]
 8007902:	78da      	ldrb	r2, [r3, #3]
 8007904:	4b1c      	ldr	r3, [pc, #112]	; (8007978 <CDC_Control_FS+0x140>)
 8007906:	70da      	strb	r2, [r3, #3]
    	buffer[4] = pbuf[4];
 8007908:	683b      	ldr	r3, [r7, #0]
 800790a:	791a      	ldrb	r2, [r3, #4]
 800790c:	4b1a      	ldr	r3, [pc, #104]	; (8007978 <CDC_Control_FS+0x140>)
 800790e:	711a      	strb	r2, [r3, #4]
    	buffer[5] = pbuf[5];
 8007910:	683b      	ldr	r3, [r7, #0]
 8007912:	795a      	ldrb	r2, [r3, #5]
 8007914:	4b18      	ldr	r3, [pc, #96]	; (8007978 <CDC_Control_FS+0x140>)
 8007916:	715a      	strb	r2, [r3, #5]
    	buffer[6] = pbuf[6];
 8007918:	683b      	ldr	r3, [r7, #0]
 800791a:	799a      	ldrb	r2, [r3, #6]
 800791c:	4b16      	ldr	r3, [pc, #88]	; (8007978 <CDC_Control_FS+0x140>)
 800791e:	719a      	strb	r2, [r3, #6]
    break;
 8007920:	e023      	b.n	800796a <CDC_Control_FS+0x132>

    case CDC_GET_LINE_CODING:
    	pbuf[0] = buffer[0];
 8007922:	4b15      	ldr	r3, [pc, #84]	; (8007978 <CDC_Control_FS+0x140>)
 8007924:	781a      	ldrb	r2, [r3, #0]
 8007926:	683b      	ldr	r3, [r7, #0]
 8007928:	701a      	strb	r2, [r3, #0]
    	pbuf[1] = buffer[1];
 800792a:	683b      	ldr	r3, [r7, #0]
 800792c:	3301      	adds	r3, #1
 800792e:	4a12      	ldr	r2, [pc, #72]	; (8007978 <CDC_Control_FS+0x140>)
 8007930:	7852      	ldrb	r2, [r2, #1]
 8007932:	701a      	strb	r2, [r3, #0]
    	pbuf[2] = buffer[2];
 8007934:	683b      	ldr	r3, [r7, #0]
 8007936:	3302      	adds	r3, #2
 8007938:	4a0f      	ldr	r2, [pc, #60]	; (8007978 <CDC_Control_FS+0x140>)
 800793a:	7892      	ldrb	r2, [r2, #2]
 800793c:	701a      	strb	r2, [r3, #0]
    	pbuf[3] = buffer[3];
 800793e:	683b      	ldr	r3, [r7, #0]
 8007940:	3303      	adds	r3, #3
 8007942:	4a0d      	ldr	r2, [pc, #52]	; (8007978 <CDC_Control_FS+0x140>)
 8007944:	78d2      	ldrb	r2, [r2, #3]
 8007946:	701a      	strb	r2, [r3, #0]
    	pbuf[4] = buffer[4];
 8007948:	683b      	ldr	r3, [r7, #0]
 800794a:	3304      	adds	r3, #4
 800794c:	4a0a      	ldr	r2, [pc, #40]	; (8007978 <CDC_Control_FS+0x140>)
 800794e:	7912      	ldrb	r2, [r2, #4]
 8007950:	701a      	strb	r2, [r3, #0]
    	pbuf[5] = buffer[5];
 8007952:	683b      	ldr	r3, [r7, #0]
 8007954:	3305      	adds	r3, #5
 8007956:	4a08      	ldr	r2, [pc, #32]	; (8007978 <CDC_Control_FS+0x140>)
 8007958:	7952      	ldrb	r2, [r2, #5]
 800795a:	701a      	strb	r2, [r3, #0]
    	pbuf[6] = buffer[6];
 800795c:	683b      	ldr	r3, [r7, #0]
 800795e:	3306      	adds	r3, #6
 8007960:	4a05      	ldr	r2, [pc, #20]	; (8007978 <CDC_Control_FS+0x140>)
 8007962:	7992      	ldrb	r2, [r2, #6]
 8007964:	701a      	strb	r2, [r3, #0]

    break;
 8007966:	e000      	b.n	800796a <CDC_Control_FS+0x132>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007968:	bf00      	nop
  }

  return (USBD_OK);
 800796a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800796c:	4618      	mov	r0, r3
 800796e:	370c      	adds	r7, #12
 8007970:	46bd      	mov	sp, r7
 8007972:	bc80      	pop	{r7}
 8007974:	4770      	bx	lr
 8007976:	bf00      	nop
 8007978:	20000558 	.word	0x20000558

0800797c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800797c:	b580      	push	{r7, lr}
 800797e:	b082      	sub	sp, #8
 8007980:	af00      	add	r7, sp, #0
 8007982:	6078      	str	r0, [r7, #4]
 8007984:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007986:	6879      	ldr	r1, [r7, #4]
 8007988:	4805      	ldr	r0, [pc, #20]	; (80079a0 <CDC_Receive_FS+0x24>)
 800798a:	f7fe fe02 	bl	8006592 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800798e:	4804      	ldr	r0, [pc, #16]	; (80079a0 <CDC_Receive_FS+0x24>)
 8007990:	f7fe fe41 	bl	8006616 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8007994:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007996:	4618      	mov	r0, r3
 8007998:	3708      	adds	r7, #8
 800799a:	46bd      	mov	sp, r7
 800799c:	bd80      	pop	{r7, pc}
 800799e:	bf00      	nop
 80079a0:	20000294 	.word	0x20000294

080079a4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80079a4:	b580      	push	{r7, lr}
 80079a6:	b084      	sub	sp, #16
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	6078      	str	r0, [r7, #4]
 80079ac:	460b      	mov	r3, r1
 80079ae:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80079b0:	2300      	movs	r3, #0
 80079b2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80079b4:	4b0d      	ldr	r3, [pc, #52]	; (80079ec <CDC_Transmit_FS+0x48>)
 80079b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079ba:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80079bc:	68bb      	ldr	r3, [r7, #8]
 80079be:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d001      	beq.n	80079ca <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80079c6:	2301      	movs	r3, #1
 80079c8:	e00b      	b.n	80079e2 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80079ca:	887b      	ldrh	r3, [r7, #2]
 80079cc:	461a      	mov	r2, r3
 80079ce:	6879      	ldr	r1, [r7, #4]
 80079d0:	4806      	ldr	r0, [pc, #24]	; (80079ec <CDC_Transmit_FS+0x48>)
 80079d2:	f7fe fdc5 	bl	8006560 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80079d6:	4805      	ldr	r0, [pc, #20]	; (80079ec <CDC_Transmit_FS+0x48>)
 80079d8:	f7fe fdee 	bl	80065b8 <USBD_CDC_TransmitPacket>
 80079dc:	4603      	mov	r3, r0
 80079de:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80079e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80079e2:	4618      	mov	r0, r3
 80079e4:	3710      	adds	r7, #16
 80079e6:	46bd      	mov	sp, r7
 80079e8:	bd80      	pop	{r7, pc}
 80079ea:	bf00      	nop
 80079ec:	20000294 	.word	0x20000294

080079f0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80079f0:	b480      	push	{r7}
 80079f2:	b083      	sub	sp, #12
 80079f4:	af00      	add	r7, sp, #0
 80079f6:	4603      	mov	r3, r0
 80079f8:	6039      	str	r1, [r7, #0]
 80079fa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80079fc:	683b      	ldr	r3, [r7, #0]
 80079fe:	2212      	movs	r2, #18
 8007a00:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007a02:	4b03      	ldr	r3, [pc, #12]	; (8007a10 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007a04:	4618      	mov	r0, r3
 8007a06:	370c      	adds	r7, #12
 8007a08:	46bd      	mov	sp, r7
 8007a0a:	bc80      	pop	{r7}
 8007a0c:	4770      	bx	lr
 8007a0e:	bf00      	nop
 8007a10:	20000148 	.word	0x20000148

08007a14 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007a14:	b480      	push	{r7}
 8007a16:	b083      	sub	sp, #12
 8007a18:	af00      	add	r7, sp, #0
 8007a1a:	4603      	mov	r3, r0
 8007a1c:	6039      	str	r1, [r7, #0]
 8007a1e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007a20:	683b      	ldr	r3, [r7, #0]
 8007a22:	2204      	movs	r2, #4
 8007a24:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007a26:	4b03      	ldr	r3, [pc, #12]	; (8007a34 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007a28:	4618      	mov	r0, r3
 8007a2a:	370c      	adds	r7, #12
 8007a2c:	46bd      	mov	sp, r7
 8007a2e:	bc80      	pop	{r7}
 8007a30:	4770      	bx	lr
 8007a32:	bf00      	nop
 8007a34:	2000015c 	.word	0x2000015c

08007a38 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007a38:	b580      	push	{r7, lr}
 8007a3a:	b082      	sub	sp, #8
 8007a3c:	af00      	add	r7, sp, #0
 8007a3e:	4603      	mov	r3, r0
 8007a40:	6039      	str	r1, [r7, #0]
 8007a42:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007a44:	79fb      	ldrb	r3, [r7, #7]
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d105      	bne.n	8007a56 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007a4a:	683a      	ldr	r2, [r7, #0]
 8007a4c:	4907      	ldr	r1, [pc, #28]	; (8007a6c <USBD_FS_ProductStrDescriptor+0x34>)
 8007a4e:	4808      	ldr	r0, [pc, #32]	; (8007a70 <USBD_FS_ProductStrDescriptor+0x38>)
 8007a50:	f7ff fdc8 	bl	80075e4 <USBD_GetString>
 8007a54:	e004      	b.n	8007a60 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007a56:	683a      	ldr	r2, [r7, #0]
 8007a58:	4904      	ldr	r1, [pc, #16]	; (8007a6c <USBD_FS_ProductStrDescriptor+0x34>)
 8007a5a:	4805      	ldr	r0, [pc, #20]	; (8007a70 <USBD_FS_ProductStrDescriptor+0x38>)
 8007a5c:	f7ff fdc2 	bl	80075e4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007a60:	4b02      	ldr	r3, [pc, #8]	; (8007a6c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007a62:	4618      	mov	r0, r3
 8007a64:	3708      	adds	r7, #8
 8007a66:	46bd      	mov	sp, r7
 8007a68:	bd80      	pop	{r7, pc}
 8007a6a:	bf00      	nop
 8007a6c:	20000d60 	.word	0x20000d60
 8007a70:	08008b78 	.word	0x08008b78

08007a74 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007a74:	b580      	push	{r7, lr}
 8007a76:	b082      	sub	sp, #8
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	4603      	mov	r3, r0
 8007a7c:	6039      	str	r1, [r7, #0]
 8007a7e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007a80:	683a      	ldr	r2, [r7, #0]
 8007a82:	4904      	ldr	r1, [pc, #16]	; (8007a94 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007a84:	4804      	ldr	r0, [pc, #16]	; (8007a98 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007a86:	f7ff fdad 	bl	80075e4 <USBD_GetString>
  return USBD_StrDesc;
 8007a8a:	4b02      	ldr	r3, [pc, #8]	; (8007a94 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007a8c:	4618      	mov	r0, r3
 8007a8e:	3708      	adds	r7, #8
 8007a90:	46bd      	mov	sp, r7
 8007a92:	bd80      	pop	{r7, pc}
 8007a94:	20000d60 	.word	0x20000d60
 8007a98:	08008b90 	.word	0x08008b90

08007a9c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007a9c:	b580      	push	{r7, lr}
 8007a9e:	b082      	sub	sp, #8
 8007aa0:	af00      	add	r7, sp, #0
 8007aa2:	4603      	mov	r3, r0
 8007aa4:	6039      	str	r1, [r7, #0]
 8007aa6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007aa8:	683b      	ldr	r3, [r7, #0]
 8007aaa:	221a      	movs	r2, #26
 8007aac:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007aae:	f000 f843 	bl	8007b38 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007ab2:	4b02      	ldr	r3, [pc, #8]	; (8007abc <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007ab4:	4618      	mov	r0, r3
 8007ab6:	3708      	adds	r7, #8
 8007ab8:	46bd      	mov	sp, r7
 8007aba:	bd80      	pop	{r7, pc}
 8007abc:	20000160 	.word	0x20000160

08007ac0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007ac0:	b580      	push	{r7, lr}
 8007ac2:	b082      	sub	sp, #8
 8007ac4:	af00      	add	r7, sp, #0
 8007ac6:	4603      	mov	r3, r0
 8007ac8:	6039      	str	r1, [r7, #0]
 8007aca:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007acc:	79fb      	ldrb	r3, [r7, #7]
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d105      	bne.n	8007ade <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007ad2:	683a      	ldr	r2, [r7, #0]
 8007ad4:	4907      	ldr	r1, [pc, #28]	; (8007af4 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007ad6:	4808      	ldr	r0, [pc, #32]	; (8007af8 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007ad8:	f7ff fd84 	bl	80075e4 <USBD_GetString>
 8007adc:	e004      	b.n	8007ae8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007ade:	683a      	ldr	r2, [r7, #0]
 8007ae0:	4904      	ldr	r1, [pc, #16]	; (8007af4 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007ae2:	4805      	ldr	r0, [pc, #20]	; (8007af8 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007ae4:	f7ff fd7e 	bl	80075e4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007ae8:	4b02      	ldr	r3, [pc, #8]	; (8007af4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007aea:	4618      	mov	r0, r3
 8007aec:	3708      	adds	r7, #8
 8007aee:	46bd      	mov	sp, r7
 8007af0:	bd80      	pop	{r7, pc}
 8007af2:	bf00      	nop
 8007af4:	20000d60 	.word	0x20000d60
 8007af8:	08008ba4 	.word	0x08008ba4

08007afc <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007afc:	b580      	push	{r7, lr}
 8007afe:	b082      	sub	sp, #8
 8007b00:	af00      	add	r7, sp, #0
 8007b02:	4603      	mov	r3, r0
 8007b04:	6039      	str	r1, [r7, #0]
 8007b06:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007b08:	79fb      	ldrb	r3, [r7, #7]
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d105      	bne.n	8007b1a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007b0e:	683a      	ldr	r2, [r7, #0]
 8007b10:	4907      	ldr	r1, [pc, #28]	; (8007b30 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007b12:	4808      	ldr	r0, [pc, #32]	; (8007b34 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007b14:	f7ff fd66 	bl	80075e4 <USBD_GetString>
 8007b18:	e004      	b.n	8007b24 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007b1a:	683a      	ldr	r2, [r7, #0]
 8007b1c:	4904      	ldr	r1, [pc, #16]	; (8007b30 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007b1e:	4805      	ldr	r0, [pc, #20]	; (8007b34 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007b20:	f7ff fd60 	bl	80075e4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007b24:	4b02      	ldr	r3, [pc, #8]	; (8007b30 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007b26:	4618      	mov	r0, r3
 8007b28:	3708      	adds	r7, #8
 8007b2a:	46bd      	mov	sp, r7
 8007b2c:	bd80      	pop	{r7, pc}
 8007b2e:	bf00      	nop
 8007b30:	20000d60 	.word	0x20000d60
 8007b34:	08008bb0 	.word	0x08008bb0

08007b38 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007b38:	b580      	push	{r7, lr}
 8007b3a:	b084      	sub	sp, #16
 8007b3c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007b3e:	4b0f      	ldr	r3, [pc, #60]	; (8007b7c <Get_SerialNum+0x44>)
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007b44:	4b0e      	ldr	r3, [pc, #56]	; (8007b80 <Get_SerialNum+0x48>)
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007b4a:	4b0e      	ldr	r3, [pc, #56]	; (8007b84 <Get_SerialNum+0x4c>)
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007b50:	68fa      	ldr	r2, [r7, #12]
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	4413      	add	r3, r2
 8007b56:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d009      	beq.n	8007b72 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007b5e:	2208      	movs	r2, #8
 8007b60:	4909      	ldr	r1, [pc, #36]	; (8007b88 <Get_SerialNum+0x50>)
 8007b62:	68f8      	ldr	r0, [r7, #12]
 8007b64:	f000 f814 	bl	8007b90 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007b68:	2204      	movs	r2, #4
 8007b6a:	4908      	ldr	r1, [pc, #32]	; (8007b8c <Get_SerialNum+0x54>)
 8007b6c:	68b8      	ldr	r0, [r7, #8]
 8007b6e:	f000 f80f 	bl	8007b90 <IntToUnicode>
  }
}
 8007b72:	bf00      	nop
 8007b74:	3710      	adds	r7, #16
 8007b76:	46bd      	mov	sp, r7
 8007b78:	bd80      	pop	{r7, pc}
 8007b7a:	bf00      	nop
 8007b7c:	1ffff7e8 	.word	0x1ffff7e8
 8007b80:	1ffff7ec 	.word	0x1ffff7ec
 8007b84:	1ffff7f0 	.word	0x1ffff7f0
 8007b88:	20000162 	.word	0x20000162
 8007b8c:	20000172 	.word	0x20000172

08007b90 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007b90:	b480      	push	{r7}
 8007b92:	b087      	sub	sp, #28
 8007b94:	af00      	add	r7, sp, #0
 8007b96:	60f8      	str	r0, [r7, #12]
 8007b98:	60b9      	str	r1, [r7, #8]
 8007b9a:	4613      	mov	r3, r2
 8007b9c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007b9e:	2300      	movs	r3, #0
 8007ba0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007ba2:	2300      	movs	r3, #0
 8007ba4:	75fb      	strb	r3, [r7, #23]
 8007ba6:	e027      	b.n	8007bf8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	0f1b      	lsrs	r3, r3, #28
 8007bac:	2b09      	cmp	r3, #9
 8007bae:	d80b      	bhi.n	8007bc8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	0f1b      	lsrs	r3, r3, #28
 8007bb4:	b2da      	uxtb	r2, r3
 8007bb6:	7dfb      	ldrb	r3, [r7, #23]
 8007bb8:	005b      	lsls	r3, r3, #1
 8007bba:	4619      	mov	r1, r3
 8007bbc:	68bb      	ldr	r3, [r7, #8]
 8007bbe:	440b      	add	r3, r1
 8007bc0:	3230      	adds	r2, #48	; 0x30
 8007bc2:	b2d2      	uxtb	r2, r2
 8007bc4:	701a      	strb	r2, [r3, #0]
 8007bc6:	e00a      	b.n	8007bde <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	0f1b      	lsrs	r3, r3, #28
 8007bcc:	b2da      	uxtb	r2, r3
 8007bce:	7dfb      	ldrb	r3, [r7, #23]
 8007bd0:	005b      	lsls	r3, r3, #1
 8007bd2:	4619      	mov	r1, r3
 8007bd4:	68bb      	ldr	r3, [r7, #8]
 8007bd6:	440b      	add	r3, r1
 8007bd8:	3237      	adds	r2, #55	; 0x37
 8007bda:	b2d2      	uxtb	r2, r2
 8007bdc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	011b      	lsls	r3, r3, #4
 8007be2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007be4:	7dfb      	ldrb	r3, [r7, #23]
 8007be6:	005b      	lsls	r3, r3, #1
 8007be8:	3301      	adds	r3, #1
 8007bea:	68ba      	ldr	r2, [r7, #8]
 8007bec:	4413      	add	r3, r2
 8007bee:	2200      	movs	r2, #0
 8007bf0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007bf2:	7dfb      	ldrb	r3, [r7, #23]
 8007bf4:	3301      	adds	r3, #1
 8007bf6:	75fb      	strb	r3, [r7, #23]
 8007bf8:	7dfa      	ldrb	r2, [r7, #23]
 8007bfa:	79fb      	ldrb	r3, [r7, #7]
 8007bfc:	429a      	cmp	r2, r3
 8007bfe:	d3d3      	bcc.n	8007ba8 <IntToUnicode+0x18>
  }
}
 8007c00:	bf00      	nop
 8007c02:	bf00      	nop
 8007c04:	371c      	adds	r7, #28
 8007c06:	46bd      	mov	sp, r7
 8007c08:	bc80      	pop	{r7}
 8007c0a:	4770      	bx	lr

08007c0c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007c0c:	b580      	push	{r7, lr}
 8007c0e:	b084      	sub	sp, #16
 8007c10:	af00      	add	r7, sp, #0
 8007c12:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	4a0d      	ldr	r2, [pc, #52]	; (8007c50 <HAL_PCD_MspInit+0x44>)
 8007c1a:	4293      	cmp	r3, r2
 8007c1c:	d113      	bne.n	8007c46 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8007c1e:	4b0d      	ldr	r3, [pc, #52]	; (8007c54 <HAL_PCD_MspInit+0x48>)
 8007c20:	69db      	ldr	r3, [r3, #28]
 8007c22:	4a0c      	ldr	r2, [pc, #48]	; (8007c54 <HAL_PCD_MspInit+0x48>)
 8007c24:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007c28:	61d3      	str	r3, [r2, #28]
 8007c2a:	4b0a      	ldr	r3, [pc, #40]	; (8007c54 <HAL_PCD_MspInit+0x48>)
 8007c2c:	69db      	ldr	r3, [r3, #28]
 8007c2e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007c32:	60fb      	str	r3, [r7, #12]
 8007c34:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8007c36:	2200      	movs	r2, #0
 8007c38:	2100      	movs	r1, #0
 8007c3a:	2014      	movs	r0, #20
 8007c3c:	f7f8 ff71 	bl	8000b22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8007c40:	2014      	movs	r0, #20
 8007c42:	f7f8 ff8a 	bl	8000b5a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8007c46:	bf00      	nop
 8007c48:	3710      	adds	r7, #16
 8007c4a:	46bd      	mov	sp, r7
 8007c4c:	bd80      	pop	{r7, pc}
 8007c4e:	bf00      	nop
 8007c50:	40005c00 	.word	0x40005c00
 8007c54:	40021000 	.word	0x40021000

08007c58 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007c58:	b580      	push	{r7, lr}
 8007c5a:	b082      	sub	sp, #8
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8007c6c:	4619      	mov	r1, r3
 8007c6e:	4610      	mov	r0, r2
 8007c70:	f7fe fd87 	bl	8006782 <USBD_LL_SetupStage>
}
 8007c74:	bf00      	nop
 8007c76:	3708      	adds	r7, #8
 8007c78:	46bd      	mov	sp, r7
 8007c7a:	bd80      	pop	{r7, pc}

08007c7c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007c7c:	b580      	push	{r7, lr}
 8007c7e:	b082      	sub	sp, #8
 8007c80:	af00      	add	r7, sp, #0
 8007c82:	6078      	str	r0, [r7, #4]
 8007c84:	460b      	mov	r3, r1
 8007c86:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8007c8e:	78fa      	ldrb	r2, [r7, #3]
 8007c90:	6879      	ldr	r1, [r7, #4]
 8007c92:	4613      	mov	r3, r2
 8007c94:	009b      	lsls	r3, r3, #2
 8007c96:	4413      	add	r3, r2
 8007c98:	00db      	lsls	r3, r3, #3
 8007c9a:	440b      	add	r3, r1
 8007c9c:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8007ca0:	681a      	ldr	r2, [r3, #0]
 8007ca2:	78fb      	ldrb	r3, [r7, #3]
 8007ca4:	4619      	mov	r1, r3
 8007ca6:	f7fe fdb9 	bl	800681c <USBD_LL_DataOutStage>
}
 8007caa:	bf00      	nop
 8007cac:	3708      	adds	r7, #8
 8007cae:	46bd      	mov	sp, r7
 8007cb0:	bd80      	pop	{r7, pc}

08007cb2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007cb2:	b580      	push	{r7, lr}
 8007cb4:	b082      	sub	sp, #8
 8007cb6:	af00      	add	r7, sp, #0
 8007cb8:	6078      	str	r0, [r7, #4]
 8007cba:	460b      	mov	r3, r1
 8007cbc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8007cc4:	78fa      	ldrb	r2, [r7, #3]
 8007cc6:	6879      	ldr	r1, [r7, #4]
 8007cc8:	4613      	mov	r3, r2
 8007cca:	009b      	lsls	r3, r3, #2
 8007ccc:	4413      	add	r3, r2
 8007cce:	00db      	lsls	r3, r3, #3
 8007cd0:	440b      	add	r3, r1
 8007cd2:	333c      	adds	r3, #60	; 0x3c
 8007cd4:	681a      	ldr	r2, [r3, #0]
 8007cd6:	78fb      	ldrb	r3, [r7, #3]
 8007cd8:	4619      	mov	r1, r3
 8007cda:	f7fe fe10 	bl	80068fe <USBD_LL_DataInStage>
}
 8007cde:	bf00      	nop
 8007ce0:	3708      	adds	r7, #8
 8007ce2:	46bd      	mov	sp, r7
 8007ce4:	bd80      	pop	{r7, pc}

08007ce6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ce6:	b580      	push	{r7, lr}
 8007ce8:	b082      	sub	sp, #8
 8007cea:	af00      	add	r7, sp, #0
 8007cec:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007cf4:	4618      	mov	r0, r3
 8007cf6:	f7fe ff20 	bl	8006b3a <USBD_LL_SOF>
}
 8007cfa:	bf00      	nop
 8007cfc:	3708      	adds	r7, #8
 8007cfe:	46bd      	mov	sp, r7
 8007d00:	bd80      	pop	{r7, pc}

08007d02 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d02:	b580      	push	{r7, lr}
 8007d04:	b084      	sub	sp, #16
 8007d06:	af00      	add	r7, sp, #0
 8007d08:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007d0a:	2301      	movs	r3, #1
 8007d0c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	689b      	ldr	r3, [r3, #8]
 8007d12:	2b02      	cmp	r3, #2
 8007d14:	d001      	beq.n	8007d1a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8007d16:	f7f8 fc3f 	bl	8000598 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007d20:	7bfa      	ldrb	r2, [r7, #15]
 8007d22:	4611      	mov	r1, r2
 8007d24:	4618      	mov	r0, r3
 8007d26:	f7fe fed0 	bl	8006aca <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007d30:	4618      	mov	r0, r3
 8007d32:	f7fe fe89 	bl	8006a48 <USBD_LL_Reset>
}
 8007d36:	bf00      	nop
 8007d38:	3710      	adds	r7, #16
 8007d3a:	46bd      	mov	sp, r7
 8007d3c:	bd80      	pop	{r7, pc}
	...

08007d40 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d40:	b580      	push	{r7, lr}
 8007d42:	b082      	sub	sp, #8
 8007d44:	af00      	add	r7, sp, #0
 8007d46:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007d4e:	4618      	mov	r0, r3
 8007d50:	f7fe feca 	bl	8006ae8 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	699b      	ldr	r3, [r3, #24]
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d005      	beq.n	8007d68 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007d5c:	4b04      	ldr	r3, [pc, #16]	; (8007d70 <HAL_PCD_SuspendCallback+0x30>)
 8007d5e:	691b      	ldr	r3, [r3, #16]
 8007d60:	4a03      	ldr	r2, [pc, #12]	; (8007d70 <HAL_PCD_SuspendCallback+0x30>)
 8007d62:	f043 0306 	orr.w	r3, r3, #6
 8007d66:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007d68:	bf00      	nop
 8007d6a:	3708      	adds	r7, #8
 8007d6c:	46bd      	mov	sp, r7
 8007d6e:	bd80      	pop	{r7, pc}
 8007d70:	e000ed00 	.word	0xe000ed00

08007d74 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d74:	b580      	push	{r7, lr}
 8007d76:	b082      	sub	sp, #8
 8007d78:	af00      	add	r7, sp, #0
 8007d7a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007d82:	4618      	mov	r0, r3
 8007d84:	f7fe fec4 	bl	8006b10 <USBD_LL_Resume>
}
 8007d88:	bf00      	nop
 8007d8a:	3708      	adds	r7, #8
 8007d8c:	46bd      	mov	sp, r7
 8007d8e:	bd80      	pop	{r7, pc}

08007d90 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007d90:	b580      	push	{r7, lr}
 8007d92:	b082      	sub	sp, #8
 8007d94:	af00      	add	r7, sp, #0
 8007d96:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8007d98:	4a28      	ldr	r2, [pc, #160]	; (8007e3c <USBD_LL_Init+0xac>)
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	4a26      	ldr	r2, [pc, #152]	; (8007e3c <USBD_LL_Init+0xac>)
 8007da4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8007da8:	4b24      	ldr	r3, [pc, #144]	; (8007e3c <USBD_LL_Init+0xac>)
 8007daa:	4a25      	ldr	r2, [pc, #148]	; (8007e40 <USBD_LL_Init+0xb0>)
 8007dac:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8007dae:	4b23      	ldr	r3, [pc, #140]	; (8007e3c <USBD_LL_Init+0xac>)
 8007db0:	2208      	movs	r2, #8
 8007db2:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8007db4:	4b21      	ldr	r3, [pc, #132]	; (8007e3c <USBD_LL_Init+0xac>)
 8007db6:	2202      	movs	r2, #2
 8007db8:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8007dba:	4b20      	ldr	r3, [pc, #128]	; (8007e3c <USBD_LL_Init+0xac>)
 8007dbc:	2200      	movs	r2, #0
 8007dbe:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8007dc0:	4b1e      	ldr	r3, [pc, #120]	; (8007e3c <USBD_LL_Init+0xac>)
 8007dc2:	2200      	movs	r2, #0
 8007dc4:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8007dc6:	4b1d      	ldr	r3, [pc, #116]	; (8007e3c <USBD_LL_Init+0xac>)
 8007dc8:	2200      	movs	r2, #0
 8007dca:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8007dcc:	481b      	ldr	r0, [pc, #108]	; (8007e3c <USBD_LL_Init+0xac>)
 8007dce:	f7f9 f8b5 	bl	8000f3c <HAL_PCD_Init>
 8007dd2:	4603      	mov	r3, r0
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d001      	beq.n	8007ddc <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8007dd8:	f7f8 fbde 	bl	8000598 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007de2:	2318      	movs	r3, #24
 8007de4:	2200      	movs	r2, #0
 8007de6:	2100      	movs	r1, #0
 8007de8:	f7fa fd29 	bl	800283e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007df2:	2358      	movs	r3, #88	; 0x58
 8007df4:	2200      	movs	r2, #0
 8007df6:	2180      	movs	r1, #128	; 0x80
 8007df8:	f7fa fd21 	bl	800283e <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007e02:	23c0      	movs	r3, #192	; 0xc0
 8007e04:	2200      	movs	r2, #0
 8007e06:	2181      	movs	r1, #129	; 0x81
 8007e08:	f7fa fd19 	bl	800283e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007e12:	f44f 7388 	mov.w	r3, #272	; 0x110
 8007e16:	2200      	movs	r2, #0
 8007e18:	2101      	movs	r1, #1
 8007e1a:	f7fa fd10 	bl	800283e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007e24:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007e28:	2200      	movs	r2, #0
 8007e2a:	2182      	movs	r1, #130	; 0x82
 8007e2c:	f7fa fd07 	bl	800283e <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8007e30:	2300      	movs	r3, #0
}
 8007e32:	4618      	mov	r0, r3
 8007e34:	3708      	adds	r7, #8
 8007e36:	46bd      	mov	sp, r7
 8007e38:	bd80      	pop	{r7, pc}
 8007e3a:	bf00      	nop
 8007e3c:	20000f60 	.word	0x20000f60
 8007e40:	40005c00 	.word	0x40005c00

08007e44 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007e44:	b580      	push	{r7, lr}
 8007e46:	b084      	sub	sp, #16
 8007e48:	af00      	add	r7, sp, #0
 8007e4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007e4c:	2300      	movs	r3, #0
 8007e4e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007e50:	2300      	movs	r3, #0
 8007e52:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007e5a:	4618      	mov	r0, r3
 8007e5c:	f7f9 f979 	bl	8001152 <HAL_PCD_Start>
 8007e60:	4603      	mov	r3, r0
 8007e62:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007e64:	7bfb      	ldrb	r3, [r7, #15]
 8007e66:	4618      	mov	r0, r3
 8007e68:	f000 f94e 	bl	8008108 <USBD_Get_USB_Status>
 8007e6c:	4603      	mov	r3, r0
 8007e6e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007e70:	7bbb      	ldrb	r3, [r7, #14]
}
 8007e72:	4618      	mov	r0, r3
 8007e74:	3710      	adds	r7, #16
 8007e76:	46bd      	mov	sp, r7
 8007e78:	bd80      	pop	{r7, pc}

08007e7a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007e7a:	b580      	push	{r7, lr}
 8007e7c:	b084      	sub	sp, #16
 8007e7e:	af00      	add	r7, sp, #0
 8007e80:	6078      	str	r0, [r7, #4]
 8007e82:	4608      	mov	r0, r1
 8007e84:	4611      	mov	r1, r2
 8007e86:	461a      	mov	r2, r3
 8007e88:	4603      	mov	r3, r0
 8007e8a:	70fb      	strb	r3, [r7, #3]
 8007e8c:	460b      	mov	r3, r1
 8007e8e:	70bb      	strb	r3, [r7, #2]
 8007e90:	4613      	mov	r3, r2
 8007e92:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007e94:	2300      	movs	r3, #0
 8007e96:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007e98:	2300      	movs	r3, #0
 8007e9a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007ea2:	78bb      	ldrb	r3, [r7, #2]
 8007ea4:	883a      	ldrh	r2, [r7, #0]
 8007ea6:	78f9      	ldrb	r1, [r7, #3]
 8007ea8:	f7f9 faf1 	bl	800148e <HAL_PCD_EP_Open>
 8007eac:	4603      	mov	r3, r0
 8007eae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007eb0:	7bfb      	ldrb	r3, [r7, #15]
 8007eb2:	4618      	mov	r0, r3
 8007eb4:	f000 f928 	bl	8008108 <USBD_Get_USB_Status>
 8007eb8:	4603      	mov	r3, r0
 8007eba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007ebc:	7bbb      	ldrb	r3, [r7, #14]
}
 8007ebe:	4618      	mov	r0, r3
 8007ec0:	3710      	adds	r7, #16
 8007ec2:	46bd      	mov	sp, r7
 8007ec4:	bd80      	pop	{r7, pc}

08007ec6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007ec6:	b580      	push	{r7, lr}
 8007ec8:	b084      	sub	sp, #16
 8007eca:	af00      	add	r7, sp, #0
 8007ecc:	6078      	str	r0, [r7, #4]
 8007ece:	460b      	mov	r3, r1
 8007ed0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007ed2:	2300      	movs	r3, #0
 8007ed4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007ed6:	2300      	movs	r3, #0
 8007ed8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007ee0:	78fa      	ldrb	r2, [r7, #3]
 8007ee2:	4611      	mov	r1, r2
 8007ee4:	4618      	mov	r0, r3
 8007ee6:	f7f9 fb38 	bl	800155a <HAL_PCD_EP_Close>
 8007eea:	4603      	mov	r3, r0
 8007eec:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007eee:	7bfb      	ldrb	r3, [r7, #15]
 8007ef0:	4618      	mov	r0, r3
 8007ef2:	f000 f909 	bl	8008108 <USBD_Get_USB_Status>
 8007ef6:	4603      	mov	r3, r0
 8007ef8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007efa:	7bbb      	ldrb	r3, [r7, #14]
}
 8007efc:	4618      	mov	r0, r3
 8007efe:	3710      	adds	r7, #16
 8007f00:	46bd      	mov	sp, r7
 8007f02:	bd80      	pop	{r7, pc}

08007f04 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007f04:	b580      	push	{r7, lr}
 8007f06:	b084      	sub	sp, #16
 8007f08:	af00      	add	r7, sp, #0
 8007f0a:	6078      	str	r0, [r7, #4]
 8007f0c:	460b      	mov	r3, r1
 8007f0e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007f10:	2300      	movs	r3, #0
 8007f12:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007f14:	2300      	movs	r3, #0
 8007f16:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007f1e:	78fa      	ldrb	r2, [r7, #3]
 8007f20:	4611      	mov	r1, r2
 8007f22:	4618      	mov	r0, r3
 8007f24:	f7f9 fbf8 	bl	8001718 <HAL_PCD_EP_SetStall>
 8007f28:	4603      	mov	r3, r0
 8007f2a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007f2c:	7bfb      	ldrb	r3, [r7, #15]
 8007f2e:	4618      	mov	r0, r3
 8007f30:	f000 f8ea 	bl	8008108 <USBD_Get_USB_Status>
 8007f34:	4603      	mov	r3, r0
 8007f36:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007f38:	7bbb      	ldrb	r3, [r7, #14]
}
 8007f3a:	4618      	mov	r0, r3
 8007f3c:	3710      	adds	r7, #16
 8007f3e:	46bd      	mov	sp, r7
 8007f40:	bd80      	pop	{r7, pc}

08007f42 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007f42:	b580      	push	{r7, lr}
 8007f44:	b084      	sub	sp, #16
 8007f46:	af00      	add	r7, sp, #0
 8007f48:	6078      	str	r0, [r7, #4]
 8007f4a:	460b      	mov	r3, r1
 8007f4c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007f4e:	2300      	movs	r3, #0
 8007f50:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007f52:	2300      	movs	r3, #0
 8007f54:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007f5c:	78fa      	ldrb	r2, [r7, #3]
 8007f5e:	4611      	mov	r1, r2
 8007f60:	4618      	mov	r0, r3
 8007f62:	f7f9 fc39 	bl	80017d8 <HAL_PCD_EP_ClrStall>
 8007f66:	4603      	mov	r3, r0
 8007f68:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007f6a:	7bfb      	ldrb	r3, [r7, #15]
 8007f6c:	4618      	mov	r0, r3
 8007f6e:	f000 f8cb 	bl	8008108 <USBD_Get_USB_Status>
 8007f72:	4603      	mov	r3, r0
 8007f74:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007f76:	7bbb      	ldrb	r3, [r7, #14]
}
 8007f78:	4618      	mov	r0, r3
 8007f7a:	3710      	adds	r7, #16
 8007f7c:	46bd      	mov	sp, r7
 8007f7e:	bd80      	pop	{r7, pc}

08007f80 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007f80:	b480      	push	{r7}
 8007f82:	b085      	sub	sp, #20
 8007f84:	af00      	add	r7, sp, #0
 8007f86:	6078      	str	r0, [r7, #4]
 8007f88:	460b      	mov	r3, r1
 8007f8a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007f92:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007f94:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	da0c      	bge.n	8007fb6 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007f9c:	78fb      	ldrb	r3, [r7, #3]
 8007f9e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007fa2:	68f9      	ldr	r1, [r7, #12]
 8007fa4:	1c5a      	adds	r2, r3, #1
 8007fa6:	4613      	mov	r3, r2
 8007fa8:	009b      	lsls	r3, r3, #2
 8007faa:	4413      	add	r3, r2
 8007fac:	00db      	lsls	r3, r3, #3
 8007fae:	440b      	add	r3, r1
 8007fb0:	3302      	adds	r3, #2
 8007fb2:	781b      	ldrb	r3, [r3, #0]
 8007fb4:	e00b      	b.n	8007fce <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007fb6:	78fb      	ldrb	r3, [r7, #3]
 8007fb8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007fbc:	68f9      	ldr	r1, [r7, #12]
 8007fbe:	4613      	mov	r3, r2
 8007fc0:	009b      	lsls	r3, r3, #2
 8007fc2:	4413      	add	r3, r2
 8007fc4:	00db      	lsls	r3, r3, #3
 8007fc6:	440b      	add	r3, r1
 8007fc8:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8007fcc:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007fce:	4618      	mov	r0, r3
 8007fd0:	3714      	adds	r7, #20
 8007fd2:	46bd      	mov	sp, r7
 8007fd4:	bc80      	pop	{r7}
 8007fd6:	4770      	bx	lr

08007fd8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007fd8:	b580      	push	{r7, lr}
 8007fda:	b084      	sub	sp, #16
 8007fdc:	af00      	add	r7, sp, #0
 8007fde:	6078      	str	r0, [r7, #4]
 8007fe0:	460b      	mov	r3, r1
 8007fe2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007fe4:	2300      	movs	r3, #0
 8007fe6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007fe8:	2300      	movs	r3, #0
 8007fea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007ff2:	78fa      	ldrb	r2, [r7, #3]
 8007ff4:	4611      	mov	r1, r2
 8007ff6:	4618      	mov	r0, r3
 8007ff8:	f7f9 fa24 	bl	8001444 <HAL_PCD_SetAddress>
 8007ffc:	4603      	mov	r3, r0
 8007ffe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008000:	7bfb      	ldrb	r3, [r7, #15]
 8008002:	4618      	mov	r0, r3
 8008004:	f000 f880 	bl	8008108 <USBD_Get_USB_Status>
 8008008:	4603      	mov	r3, r0
 800800a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800800c:	7bbb      	ldrb	r3, [r7, #14]
}
 800800e:	4618      	mov	r0, r3
 8008010:	3710      	adds	r7, #16
 8008012:	46bd      	mov	sp, r7
 8008014:	bd80      	pop	{r7, pc}

08008016 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008016:	b580      	push	{r7, lr}
 8008018:	b086      	sub	sp, #24
 800801a:	af00      	add	r7, sp, #0
 800801c:	60f8      	str	r0, [r7, #12]
 800801e:	607a      	str	r2, [r7, #4]
 8008020:	461a      	mov	r2, r3
 8008022:	460b      	mov	r3, r1
 8008024:	72fb      	strb	r3, [r7, #11]
 8008026:	4613      	mov	r3, r2
 8008028:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800802a:	2300      	movs	r3, #0
 800802c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800802e:	2300      	movs	r3, #0
 8008030:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008038:	893b      	ldrh	r3, [r7, #8]
 800803a:	7af9      	ldrb	r1, [r7, #11]
 800803c:	687a      	ldr	r2, [r7, #4]
 800803e:	f7f9 fb28 	bl	8001692 <HAL_PCD_EP_Transmit>
 8008042:	4603      	mov	r3, r0
 8008044:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008046:	7dfb      	ldrb	r3, [r7, #23]
 8008048:	4618      	mov	r0, r3
 800804a:	f000 f85d 	bl	8008108 <USBD_Get_USB_Status>
 800804e:	4603      	mov	r3, r0
 8008050:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008052:	7dbb      	ldrb	r3, [r7, #22]
}
 8008054:	4618      	mov	r0, r3
 8008056:	3718      	adds	r7, #24
 8008058:	46bd      	mov	sp, r7
 800805a:	bd80      	pop	{r7, pc}

0800805c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800805c:	b580      	push	{r7, lr}
 800805e:	b086      	sub	sp, #24
 8008060:	af00      	add	r7, sp, #0
 8008062:	60f8      	str	r0, [r7, #12]
 8008064:	607a      	str	r2, [r7, #4]
 8008066:	461a      	mov	r2, r3
 8008068:	460b      	mov	r3, r1
 800806a:	72fb      	strb	r3, [r7, #11]
 800806c:	4613      	mov	r3, r2
 800806e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008070:	2300      	movs	r3, #0
 8008072:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008074:	2300      	movs	r3, #0
 8008076:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800807e:	893b      	ldrh	r3, [r7, #8]
 8008080:	7af9      	ldrb	r1, [r7, #11]
 8008082:	687a      	ldr	r2, [r7, #4]
 8008084:	f7f9 fab1 	bl	80015ea <HAL_PCD_EP_Receive>
 8008088:	4603      	mov	r3, r0
 800808a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800808c:	7dfb      	ldrb	r3, [r7, #23]
 800808e:	4618      	mov	r0, r3
 8008090:	f000 f83a 	bl	8008108 <USBD_Get_USB_Status>
 8008094:	4603      	mov	r3, r0
 8008096:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008098:	7dbb      	ldrb	r3, [r7, #22]
}
 800809a:	4618      	mov	r0, r3
 800809c:	3718      	adds	r7, #24
 800809e:	46bd      	mov	sp, r7
 80080a0:	bd80      	pop	{r7, pc}

080080a2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80080a2:	b580      	push	{r7, lr}
 80080a4:	b082      	sub	sp, #8
 80080a6:	af00      	add	r7, sp, #0
 80080a8:	6078      	str	r0, [r7, #4]
 80080aa:	460b      	mov	r3, r1
 80080ac:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80080b4:	78fa      	ldrb	r2, [r7, #3]
 80080b6:	4611      	mov	r1, r2
 80080b8:	4618      	mov	r0, r3
 80080ba:	f7f9 fad3 	bl	8001664 <HAL_PCD_EP_GetRxCount>
 80080be:	4603      	mov	r3, r0
}
 80080c0:	4618      	mov	r0, r3
 80080c2:	3708      	adds	r7, #8
 80080c4:	46bd      	mov	sp, r7
 80080c6:	bd80      	pop	{r7, pc}

080080c8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80080c8:	b480      	push	{r7}
 80080ca:	b083      	sub	sp, #12
 80080cc:	af00      	add	r7, sp, #0
 80080ce:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80080d0:	4b02      	ldr	r3, [pc, #8]	; (80080dc <USBD_static_malloc+0x14>)
}
 80080d2:	4618      	mov	r0, r3
 80080d4:	370c      	adds	r7, #12
 80080d6:	46bd      	mov	sp, r7
 80080d8:	bc80      	pop	{r7}
 80080da:	4770      	bx	lr
 80080dc:	2000124c 	.word	0x2000124c

080080e0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80080e0:	b480      	push	{r7}
 80080e2:	b083      	sub	sp, #12
 80080e4:	af00      	add	r7, sp, #0
 80080e6:	6078      	str	r0, [r7, #4]

}
 80080e8:	bf00      	nop
 80080ea:	370c      	adds	r7, #12
 80080ec:	46bd      	mov	sp, r7
 80080ee:	bc80      	pop	{r7}
 80080f0:	4770      	bx	lr

080080f2 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80080f2:	b480      	push	{r7}
 80080f4:	b083      	sub	sp, #12
 80080f6:	af00      	add	r7, sp, #0
 80080f8:	6078      	str	r0, [r7, #4]
 80080fa:	460b      	mov	r3, r1
 80080fc:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 80080fe:	bf00      	nop
 8008100:	370c      	adds	r7, #12
 8008102:	46bd      	mov	sp, r7
 8008104:	bc80      	pop	{r7}
 8008106:	4770      	bx	lr

08008108 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008108:	b480      	push	{r7}
 800810a:	b085      	sub	sp, #20
 800810c:	af00      	add	r7, sp, #0
 800810e:	4603      	mov	r3, r0
 8008110:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008112:	2300      	movs	r3, #0
 8008114:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008116:	79fb      	ldrb	r3, [r7, #7]
 8008118:	2b03      	cmp	r3, #3
 800811a:	d817      	bhi.n	800814c <USBD_Get_USB_Status+0x44>
 800811c:	a201      	add	r2, pc, #4	; (adr r2, 8008124 <USBD_Get_USB_Status+0x1c>)
 800811e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008122:	bf00      	nop
 8008124:	08008135 	.word	0x08008135
 8008128:	0800813b 	.word	0x0800813b
 800812c:	08008141 	.word	0x08008141
 8008130:	08008147 	.word	0x08008147
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008134:	2300      	movs	r3, #0
 8008136:	73fb      	strb	r3, [r7, #15]
    break;
 8008138:	e00b      	b.n	8008152 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800813a:	2302      	movs	r3, #2
 800813c:	73fb      	strb	r3, [r7, #15]
    break;
 800813e:	e008      	b.n	8008152 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008140:	2301      	movs	r3, #1
 8008142:	73fb      	strb	r3, [r7, #15]
    break;
 8008144:	e005      	b.n	8008152 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008146:	2302      	movs	r3, #2
 8008148:	73fb      	strb	r3, [r7, #15]
    break;
 800814a:	e002      	b.n	8008152 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800814c:	2302      	movs	r3, #2
 800814e:	73fb      	strb	r3, [r7, #15]
    break;
 8008150:	bf00      	nop
  }
  return usb_status;
 8008152:	7bfb      	ldrb	r3, [r7, #15]
}
 8008154:	4618      	mov	r0, r3
 8008156:	3714      	adds	r7, #20
 8008158:	46bd      	mov	sp, r7
 800815a:	bc80      	pop	{r7}
 800815c:	4770      	bx	lr
 800815e:	bf00      	nop

08008160 <sniprintf>:
 8008160:	b40c      	push	{r2, r3}
 8008162:	b530      	push	{r4, r5, lr}
 8008164:	4b17      	ldr	r3, [pc, #92]	; (80081c4 <sniprintf+0x64>)
 8008166:	1e0c      	subs	r4, r1, #0
 8008168:	681d      	ldr	r5, [r3, #0]
 800816a:	b09d      	sub	sp, #116	; 0x74
 800816c:	da08      	bge.n	8008180 <sniprintf+0x20>
 800816e:	238b      	movs	r3, #139	; 0x8b
 8008170:	f04f 30ff 	mov.w	r0, #4294967295
 8008174:	602b      	str	r3, [r5, #0]
 8008176:	b01d      	add	sp, #116	; 0x74
 8008178:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800817c:	b002      	add	sp, #8
 800817e:	4770      	bx	lr
 8008180:	f44f 7302 	mov.w	r3, #520	; 0x208
 8008184:	f8ad 3014 	strh.w	r3, [sp, #20]
 8008188:	bf0c      	ite	eq
 800818a:	4623      	moveq	r3, r4
 800818c:	f104 33ff 	addne.w	r3, r4, #4294967295
 8008190:	9304      	str	r3, [sp, #16]
 8008192:	9307      	str	r3, [sp, #28]
 8008194:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008198:	9002      	str	r0, [sp, #8]
 800819a:	9006      	str	r0, [sp, #24]
 800819c:	f8ad 3016 	strh.w	r3, [sp, #22]
 80081a0:	4628      	mov	r0, r5
 80081a2:	ab21      	add	r3, sp, #132	; 0x84
 80081a4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80081a6:	a902      	add	r1, sp, #8
 80081a8:	9301      	str	r3, [sp, #4]
 80081aa:	f000 f98f 	bl	80084cc <_svfiprintf_r>
 80081ae:	1c43      	adds	r3, r0, #1
 80081b0:	bfbc      	itt	lt
 80081b2:	238b      	movlt	r3, #139	; 0x8b
 80081b4:	602b      	strlt	r3, [r5, #0]
 80081b6:	2c00      	cmp	r4, #0
 80081b8:	d0dd      	beq.n	8008176 <sniprintf+0x16>
 80081ba:	2200      	movs	r2, #0
 80081bc:	9b02      	ldr	r3, [sp, #8]
 80081be:	701a      	strb	r2, [r3, #0]
 80081c0:	e7d9      	b.n	8008176 <sniprintf+0x16>
 80081c2:	bf00      	nop
 80081c4:	200001c8 	.word	0x200001c8

080081c8 <memset>:
 80081c8:	4603      	mov	r3, r0
 80081ca:	4402      	add	r2, r0
 80081cc:	4293      	cmp	r3, r2
 80081ce:	d100      	bne.n	80081d2 <memset+0xa>
 80081d0:	4770      	bx	lr
 80081d2:	f803 1b01 	strb.w	r1, [r3], #1
 80081d6:	e7f9      	b.n	80081cc <memset+0x4>

080081d8 <__errno>:
 80081d8:	4b01      	ldr	r3, [pc, #4]	; (80081e0 <__errno+0x8>)
 80081da:	6818      	ldr	r0, [r3, #0]
 80081dc:	4770      	bx	lr
 80081de:	bf00      	nop
 80081e0:	200001c8 	.word	0x200001c8

080081e4 <__libc_init_array>:
 80081e4:	b570      	push	{r4, r5, r6, lr}
 80081e6:	2600      	movs	r6, #0
 80081e8:	4d0c      	ldr	r5, [pc, #48]	; (800821c <__libc_init_array+0x38>)
 80081ea:	4c0d      	ldr	r4, [pc, #52]	; (8008220 <__libc_init_array+0x3c>)
 80081ec:	1b64      	subs	r4, r4, r5
 80081ee:	10a4      	asrs	r4, r4, #2
 80081f0:	42a6      	cmp	r6, r4
 80081f2:	d109      	bne.n	8008208 <__libc_init_array+0x24>
 80081f4:	f000 fc7a 	bl	8008aec <_init>
 80081f8:	2600      	movs	r6, #0
 80081fa:	4d0a      	ldr	r5, [pc, #40]	; (8008224 <__libc_init_array+0x40>)
 80081fc:	4c0a      	ldr	r4, [pc, #40]	; (8008228 <__libc_init_array+0x44>)
 80081fe:	1b64      	subs	r4, r4, r5
 8008200:	10a4      	asrs	r4, r4, #2
 8008202:	42a6      	cmp	r6, r4
 8008204:	d105      	bne.n	8008212 <__libc_init_array+0x2e>
 8008206:	bd70      	pop	{r4, r5, r6, pc}
 8008208:	f855 3b04 	ldr.w	r3, [r5], #4
 800820c:	4798      	blx	r3
 800820e:	3601      	adds	r6, #1
 8008210:	e7ee      	b.n	80081f0 <__libc_init_array+0xc>
 8008212:	f855 3b04 	ldr.w	r3, [r5], #4
 8008216:	4798      	blx	r3
 8008218:	3601      	adds	r6, #1
 800821a:	e7f2      	b.n	8008202 <__libc_init_array+0x1e>
 800821c:	08008c0c 	.word	0x08008c0c
 8008220:	08008c0c 	.word	0x08008c0c
 8008224:	08008c0c 	.word	0x08008c0c
 8008228:	08008c10 	.word	0x08008c10

0800822c <__retarget_lock_acquire_recursive>:
 800822c:	4770      	bx	lr

0800822e <__retarget_lock_release_recursive>:
 800822e:	4770      	bx	lr

08008230 <_free_r>:
 8008230:	b538      	push	{r3, r4, r5, lr}
 8008232:	4605      	mov	r5, r0
 8008234:	2900      	cmp	r1, #0
 8008236:	d040      	beq.n	80082ba <_free_r+0x8a>
 8008238:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800823c:	1f0c      	subs	r4, r1, #4
 800823e:	2b00      	cmp	r3, #0
 8008240:	bfb8      	it	lt
 8008242:	18e4      	addlt	r4, r4, r3
 8008244:	f000 f8dc 	bl	8008400 <__malloc_lock>
 8008248:	4a1c      	ldr	r2, [pc, #112]	; (80082bc <_free_r+0x8c>)
 800824a:	6813      	ldr	r3, [r2, #0]
 800824c:	b933      	cbnz	r3, 800825c <_free_r+0x2c>
 800824e:	6063      	str	r3, [r4, #4]
 8008250:	6014      	str	r4, [r2, #0]
 8008252:	4628      	mov	r0, r5
 8008254:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008258:	f000 b8d8 	b.w	800840c <__malloc_unlock>
 800825c:	42a3      	cmp	r3, r4
 800825e:	d908      	bls.n	8008272 <_free_r+0x42>
 8008260:	6820      	ldr	r0, [r4, #0]
 8008262:	1821      	adds	r1, r4, r0
 8008264:	428b      	cmp	r3, r1
 8008266:	bf01      	itttt	eq
 8008268:	6819      	ldreq	r1, [r3, #0]
 800826a:	685b      	ldreq	r3, [r3, #4]
 800826c:	1809      	addeq	r1, r1, r0
 800826e:	6021      	streq	r1, [r4, #0]
 8008270:	e7ed      	b.n	800824e <_free_r+0x1e>
 8008272:	461a      	mov	r2, r3
 8008274:	685b      	ldr	r3, [r3, #4]
 8008276:	b10b      	cbz	r3, 800827c <_free_r+0x4c>
 8008278:	42a3      	cmp	r3, r4
 800827a:	d9fa      	bls.n	8008272 <_free_r+0x42>
 800827c:	6811      	ldr	r1, [r2, #0]
 800827e:	1850      	adds	r0, r2, r1
 8008280:	42a0      	cmp	r0, r4
 8008282:	d10b      	bne.n	800829c <_free_r+0x6c>
 8008284:	6820      	ldr	r0, [r4, #0]
 8008286:	4401      	add	r1, r0
 8008288:	1850      	adds	r0, r2, r1
 800828a:	4283      	cmp	r3, r0
 800828c:	6011      	str	r1, [r2, #0]
 800828e:	d1e0      	bne.n	8008252 <_free_r+0x22>
 8008290:	6818      	ldr	r0, [r3, #0]
 8008292:	685b      	ldr	r3, [r3, #4]
 8008294:	4408      	add	r0, r1
 8008296:	6010      	str	r0, [r2, #0]
 8008298:	6053      	str	r3, [r2, #4]
 800829a:	e7da      	b.n	8008252 <_free_r+0x22>
 800829c:	d902      	bls.n	80082a4 <_free_r+0x74>
 800829e:	230c      	movs	r3, #12
 80082a0:	602b      	str	r3, [r5, #0]
 80082a2:	e7d6      	b.n	8008252 <_free_r+0x22>
 80082a4:	6820      	ldr	r0, [r4, #0]
 80082a6:	1821      	adds	r1, r4, r0
 80082a8:	428b      	cmp	r3, r1
 80082aa:	bf01      	itttt	eq
 80082ac:	6819      	ldreq	r1, [r3, #0]
 80082ae:	685b      	ldreq	r3, [r3, #4]
 80082b0:	1809      	addeq	r1, r1, r0
 80082b2:	6021      	streq	r1, [r4, #0]
 80082b4:	6063      	str	r3, [r4, #4]
 80082b6:	6054      	str	r4, [r2, #4]
 80082b8:	e7cb      	b.n	8008252 <_free_r+0x22>
 80082ba:	bd38      	pop	{r3, r4, r5, pc}
 80082bc:	200015ac 	.word	0x200015ac

080082c0 <sbrk_aligned>:
 80082c0:	b570      	push	{r4, r5, r6, lr}
 80082c2:	4e0e      	ldr	r6, [pc, #56]	; (80082fc <sbrk_aligned+0x3c>)
 80082c4:	460c      	mov	r4, r1
 80082c6:	6831      	ldr	r1, [r6, #0]
 80082c8:	4605      	mov	r5, r0
 80082ca:	b911      	cbnz	r1, 80082d2 <sbrk_aligned+0x12>
 80082cc:	f000 fbaa 	bl	8008a24 <_sbrk_r>
 80082d0:	6030      	str	r0, [r6, #0]
 80082d2:	4621      	mov	r1, r4
 80082d4:	4628      	mov	r0, r5
 80082d6:	f000 fba5 	bl	8008a24 <_sbrk_r>
 80082da:	1c43      	adds	r3, r0, #1
 80082dc:	d00a      	beq.n	80082f4 <sbrk_aligned+0x34>
 80082de:	1cc4      	adds	r4, r0, #3
 80082e0:	f024 0403 	bic.w	r4, r4, #3
 80082e4:	42a0      	cmp	r0, r4
 80082e6:	d007      	beq.n	80082f8 <sbrk_aligned+0x38>
 80082e8:	1a21      	subs	r1, r4, r0
 80082ea:	4628      	mov	r0, r5
 80082ec:	f000 fb9a 	bl	8008a24 <_sbrk_r>
 80082f0:	3001      	adds	r0, #1
 80082f2:	d101      	bne.n	80082f8 <sbrk_aligned+0x38>
 80082f4:	f04f 34ff 	mov.w	r4, #4294967295
 80082f8:	4620      	mov	r0, r4
 80082fa:	bd70      	pop	{r4, r5, r6, pc}
 80082fc:	200015b0 	.word	0x200015b0

08008300 <_malloc_r>:
 8008300:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008304:	1ccd      	adds	r5, r1, #3
 8008306:	f025 0503 	bic.w	r5, r5, #3
 800830a:	3508      	adds	r5, #8
 800830c:	2d0c      	cmp	r5, #12
 800830e:	bf38      	it	cc
 8008310:	250c      	movcc	r5, #12
 8008312:	2d00      	cmp	r5, #0
 8008314:	4607      	mov	r7, r0
 8008316:	db01      	blt.n	800831c <_malloc_r+0x1c>
 8008318:	42a9      	cmp	r1, r5
 800831a:	d905      	bls.n	8008328 <_malloc_r+0x28>
 800831c:	230c      	movs	r3, #12
 800831e:	2600      	movs	r6, #0
 8008320:	603b      	str	r3, [r7, #0]
 8008322:	4630      	mov	r0, r6
 8008324:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008328:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80083fc <_malloc_r+0xfc>
 800832c:	f000 f868 	bl	8008400 <__malloc_lock>
 8008330:	f8d8 3000 	ldr.w	r3, [r8]
 8008334:	461c      	mov	r4, r3
 8008336:	bb5c      	cbnz	r4, 8008390 <_malloc_r+0x90>
 8008338:	4629      	mov	r1, r5
 800833a:	4638      	mov	r0, r7
 800833c:	f7ff ffc0 	bl	80082c0 <sbrk_aligned>
 8008340:	1c43      	adds	r3, r0, #1
 8008342:	4604      	mov	r4, r0
 8008344:	d155      	bne.n	80083f2 <_malloc_r+0xf2>
 8008346:	f8d8 4000 	ldr.w	r4, [r8]
 800834a:	4626      	mov	r6, r4
 800834c:	2e00      	cmp	r6, #0
 800834e:	d145      	bne.n	80083dc <_malloc_r+0xdc>
 8008350:	2c00      	cmp	r4, #0
 8008352:	d048      	beq.n	80083e6 <_malloc_r+0xe6>
 8008354:	6823      	ldr	r3, [r4, #0]
 8008356:	4631      	mov	r1, r6
 8008358:	4638      	mov	r0, r7
 800835a:	eb04 0903 	add.w	r9, r4, r3
 800835e:	f000 fb61 	bl	8008a24 <_sbrk_r>
 8008362:	4581      	cmp	r9, r0
 8008364:	d13f      	bne.n	80083e6 <_malloc_r+0xe6>
 8008366:	6821      	ldr	r1, [r4, #0]
 8008368:	4638      	mov	r0, r7
 800836a:	1a6d      	subs	r5, r5, r1
 800836c:	4629      	mov	r1, r5
 800836e:	f7ff ffa7 	bl	80082c0 <sbrk_aligned>
 8008372:	3001      	adds	r0, #1
 8008374:	d037      	beq.n	80083e6 <_malloc_r+0xe6>
 8008376:	6823      	ldr	r3, [r4, #0]
 8008378:	442b      	add	r3, r5
 800837a:	6023      	str	r3, [r4, #0]
 800837c:	f8d8 3000 	ldr.w	r3, [r8]
 8008380:	2b00      	cmp	r3, #0
 8008382:	d038      	beq.n	80083f6 <_malloc_r+0xf6>
 8008384:	685a      	ldr	r2, [r3, #4]
 8008386:	42a2      	cmp	r2, r4
 8008388:	d12b      	bne.n	80083e2 <_malloc_r+0xe2>
 800838a:	2200      	movs	r2, #0
 800838c:	605a      	str	r2, [r3, #4]
 800838e:	e00f      	b.n	80083b0 <_malloc_r+0xb0>
 8008390:	6822      	ldr	r2, [r4, #0]
 8008392:	1b52      	subs	r2, r2, r5
 8008394:	d41f      	bmi.n	80083d6 <_malloc_r+0xd6>
 8008396:	2a0b      	cmp	r2, #11
 8008398:	d917      	bls.n	80083ca <_malloc_r+0xca>
 800839a:	1961      	adds	r1, r4, r5
 800839c:	42a3      	cmp	r3, r4
 800839e:	6025      	str	r5, [r4, #0]
 80083a0:	bf18      	it	ne
 80083a2:	6059      	strne	r1, [r3, #4]
 80083a4:	6863      	ldr	r3, [r4, #4]
 80083a6:	bf08      	it	eq
 80083a8:	f8c8 1000 	streq.w	r1, [r8]
 80083ac:	5162      	str	r2, [r4, r5]
 80083ae:	604b      	str	r3, [r1, #4]
 80083b0:	4638      	mov	r0, r7
 80083b2:	f104 060b 	add.w	r6, r4, #11
 80083b6:	f000 f829 	bl	800840c <__malloc_unlock>
 80083ba:	f026 0607 	bic.w	r6, r6, #7
 80083be:	1d23      	adds	r3, r4, #4
 80083c0:	1af2      	subs	r2, r6, r3
 80083c2:	d0ae      	beq.n	8008322 <_malloc_r+0x22>
 80083c4:	1b9b      	subs	r3, r3, r6
 80083c6:	50a3      	str	r3, [r4, r2]
 80083c8:	e7ab      	b.n	8008322 <_malloc_r+0x22>
 80083ca:	42a3      	cmp	r3, r4
 80083cc:	6862      	ldr	r2, [r4, #4]
 80083ce:	d1dd      	bne.n	800838c <_malloc_r+0x8c>
 80083d0:	f8c8 2000 	str.w	r2, [r8]
 80083d4:	e7ec      	b.n	80083b0 <_malloc_r+0xb0>
 80083d6:	4623      	mov	r3, r4
 80083d8:	6864      	ldr	r4, [r4, #4]
 80083da:	e7ac      	b.n	8008336 <_malloc_r+0x36>
 80083dc:	4634      	mov	r4, r6
 80083de:	6876      	ldr	r6, [r6, #4]
 80083e0:	e7b4      	b.n	800834c <_malloc_r+0x4c>
 80083e2:	4613      	mov	r3, r2
 80083e4:	e7cc      	b.n	8008380 <_malloc_r+0x80>
 80083e6:	230c      	movs	r3, #12
 80083e8:	4638      	mov	r0, r7
 80083ea:	603b      	str	r3, [r7, #0]
 80083ec:	f000 f80e 	bl	800840c <__malloc_unlock>
 80083f0:	e797      	b.n	8008322 <_malloc_r+0x22>
 80083f2:	6025      	str	r5, [r4, #0]
 80083f4:	e7dc      	b.n	80083b0 <_malloc_r+0xb0>
 80083f6:	605b      	str	r3, [r3, #4]
 80083f8:	deff      	udf	#255	; 0xff
 80083fa:	bf00      	nop
 80083fc:	200015ac 	.word	0x200015ac

08008400 <__malloc_lock>:
 8008400:	4801      	ldr	r0, [pc, #4]	; (8008408 <__malloc_lock+0x8>)
 8008402:	f7ff bf13 	b.w	800822c <__retarget_lock_acquire_recursive>
 8008406:	bf00      	nop
 8008408:	200015a8 	.word	0x200015a8

0800840c <__malloc_unlock>:
 800840c:	4801      	ldr	r0, [pc, #4]	; (8008414 <__malloc_unlock+0x8>)
 800840e:	f7ff bf0e 	b.w	800822e <__retarget_lock_release_recursive>
 8008412:	bf00      	nop
 8008414:	200015a8 	.word	0x200015a8

08008418 <__ssputs_r>:
 8008418:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800841c:	461f      	mov	r7, r3
 800841e:	688e      	ldr	r6, [r1, #8]
 8008420:	4682      	mov	sl, r0
 8008422:	42be      	cmp	r6, r7
 8008424:	460c      	mov	r4, r1
 8008426:	4690      	mov	r8, r2
 8008428:	680b      	ldr	r3, [r1, #0]
 800842a:	d82c      	bhi.n	8008486 <__ssputs_r+0x6e>
 800842c:	898a      	ldrh	r2, [r1, #12]
 800842e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008432:	d026      	beq.n	8008482 <__ssputs_r+0x6a>
 8008434:	6965      	ldr	r5, [r4, #20]
 8008436:	6909      	ldr	r1, [r1, #16]
 8008438:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800843c:	eba3 0901 	sub.w	r9, r3, r1
 8008440:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008444:	1c7b      	adds	r3, r7, #1
 8008446:	444b      	add	r3, r9
 8008448:	106d      	asrs	r5, r5, #1
 800844a:	429d      	cmp	r5, r3
 800844c:	bf38      	it	cc
 800844e:	461d      	movcc	r5, r3
 8008450:	0553      	lsls	r3, r2, #21
 8008452:	d527      	bpl.n	80084a4 <__ssputs_r+0x8c>
 8008454:	4629      	mov	r1, r5
 8008456:	f7ff ff53 	bl	8008300 <_malloc_r>
 800845a:	4606      	mov	r6, r0
 800845c:	b360      	cbz	r0, 80084b8 <__ssputs_r+0xa0>
 800845e:	464a      	mov	r2, r9
 8008460:	6921      	ldr	r1, [r4, #16]
 8008462:	f000 fafd 	bl	8008a60 <memcpy>
 8008466:	89a3      	ldrh	r3, [r4, #12]
 8008468:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800846c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008470:	81a3      	strh	r3, [r4, #12]
 8008472:	6126      	str	r6, [r4, #16]
 8008474:	444e      	add	r6, r9
 8008476:	6026      	str	r6, [r4, #0]
 8008478:	463e      	mov	r6, r7
 800847a:	6165      	str	r5, [r4, #20]
 800847c:	eba5 0509 	sub.w	r5, r5, r9
 8008480:	60a5      	str	r5, [r4, #8]
 8008482:	42be      	cmp	r6, r7
 8008484:	d900      	bls.n	8008488 <__ssputs_r+0x70>
 8008486:	463e      	mov	r6, r7
 8008488:	4632      	mov	r2, r6
 800848a:	4641      	mov	r1, r8
 800848c:	6820      	ldr	r0, [r4, #0]
 800848e:	f000 faaf 	bl	80089f0 <memmove>
 8008492:	2000      	movs	r0, #0
 8008494:	68a3      	ldr	r3, [r4, #8]
 8008496:	1b9b      	subs	r3, r3, r6
 8008498:	60a3      	str	r3, [r4, #8]
 800849a:	6823      	ldr	r3, [r4, #0]
 800849c:	4433      	add	r3, r6
 800849e:	6023      	str	r3, [r4, #0]
 80084a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80084a4:	462a      	mov	r2, r5
 80084a6:	f000 fae9 	bl	8008a7c <_realloc_r>
 80084aa:	4606      	mov	r6, r0
 80084ac:	2800      	cmp	r0, #0
 80084ae:	d1e0      	bne.n	8008472 <__ssputs_r+0x5a>
 80084b0:	4650      	mov	r0, sl
 80084b2:	6921      	ldr	r1, [r4, #16]
 80084b4:	f7ff febc 	bl	8008230 <_free_r>
 80084b8:	230c      	movs	r3, #12
 80084ba:	f8ca 3000 	str.w	r3, [sl]
 80084be:	89a3      	ldrh	r3, [r4, #12]
 80084c0:	f04f 30ff 	mov.w	r0, #4294967295
 80084c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80084c8:	81a3      	strh	r3, [r4, #12]
 80084ca:	e7e9      	b.n	80084a0 <__ssputs_r+0x88>

080084cc <_svfiprintf_r>:
 80084cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084d0:	4698      	mov	r8, r3
 80084d2:	898b      	ldrh	r3, [r1, #12]
 80084d4:	4607      	mov	r7, r0
 80084d6:	061b      	lsls	r3, r3, #24
 80084d8:	460d      	mov	r5, r1
 80084da:	4614      	mov	r4, r2
 80084dc:	b09d      	sub	sp, #116	; 0x74
 80084de:	d50e      	bpl.n	80084fe <_svfiprintf_r+0x32>
 80084e0:	690b      	ldr	r3, [r1, #16]
 80084e2:	b963      	cbnz	r3, 80084fe <_svfiprintf_r+0x32>
 80084e4:	2140      	movs	r1, #64	; 0x40
 80084e6:	f7ff ff0b 	bl	8008300 <_malloc_r>
 80084ea:	6028      	str	r0, [r5, #0]
 80084ec:	6128      	str	r0, [r5, #16]
 80084ee:	b920      	cbnz	r0, 80084fa <_svfiprintf_r+0x2e>
 80084f0:	230c      	movs	r3, #12
 80084f2:	603b      	str	r3, [r7, #0]
 80084f4:	f04f 30ff 	mov.w	r0, #4294967295
 80084f8:	e0d0      	b.n	800869c <_svfiprintf_r+0x1d0>
 80084fa:	2340      	movs	r3, #64	; 0x40
 80084fc:	616b      	str	r3, [r5, #20]
 80084fe:	2300      	movs	r3, #0
 8008500:	9309      	str	r3, [sp, #36]	; 0x24
 8008502:	2320      	movs	r3, #32
 8008504:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008508:	2330      	movs	r3, #48	; 0x30
 800850a:	f04f 0901 	mov.w	r9, #1
 800850e:	f8cd 800c 	str.w	r8, [sp, #12]
 8008512:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 80086b4 <_svfiprintf_r+0x1e8>
 8008516:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800851a:	4623      	mov	r3, r4
 800851c:	469a      	mov	sl, r3
 800851e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008522:	b10a      	cbz	r2, 8008528 <_svfiprintf_r+0x5c>
 8008524:	2a25      	cmp	r2, #37	; 0x25
 8008526:	d1f9      	bne.n	800851c <_svfiprintf_r+0x50>
 8008528:	ebba 0b04 	subs.w	fp, sl, r4
 800852c:	d00b      	beq.n	8008546 <_svfiprintf_r+0x7a>
 800852e:	465b      	mov	r3, fp
 8008530:	4622      	mov	r2, r4
 8008532:	4629      	mov	r1, r5
 8008534:	4638      	mov	r0, r7
 8008536:	f7ff ff6f 	bl	8008418 <__ssputs_r>
 800853a:	3001      	adds	r0, #1
 800853c:	f000 80a9 	beq.w	8008692 <_svfiprintf_r+0x1c6>
 8008540:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008542:	445a      	add	r2, fp
 8008544:	9209      	str	r2, [sp, #36]	; 0x24
 8008546:	f89a 3000 	ldrb.w	r3, [sl]
 800854a:	2b00      	cmp	r3, #0
 800854c:	f000 80a1 	beq.w	8008692 <_svfiprintf_r+0x1c6>
 8008550:	2300      	movs	r3, #0
 8008552:	f04f 32ff 	mov.w	r2, #4294967295
 8008556:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800855a:	f10a 0a01 	add.w	sl, sl, #1
 800855e:	9304      	str	r3, [sp, #16]
 8008560:	9307      	str	r3, [sp, #28]
 8008562:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008566:	931a      	str	r3, [sp, #104]	; 0x68
 8008568:	4654      	mov	r4, sl
 800856a:	2205      	movs	r2, #5
 800856c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008570:	4850      	ldr	r0, [pc, #320]	; (80086b4 <_svfiprintf_r+0x1e8>)
 8008572:	f000 fa67 	bl	8008a44 <memchr>
 8008576:	9a04      	ldr	r2, [sp, #16]
 8008578:	b9d8      	cbnz	r0, 80085b2 <_svfiprintf_r+0xe6>
 800857a:	06d0      	lsls	r0, r2, #27
 800857c:	bf44      	itt	mi
 800857e:	2320      	movmi	r3, #32
 8008580:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008584:	0711      	lsls	r1, r2, #28
 8008586:	bf44      	itt	mi
 8008588:	232b      	movmi	r3, #43	; 0x2b
 800858a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800858e:	f89a 3000 	ldrb.w	r3, [sl]
 8008592:	2b2a      	cmp	r3, #42	; 0x2a
 8008594:	d015      	beq.n	80085c2 <_svfiprintf_r+0xf6>
 8008596:	4654      	mov	r4, sl
 8008598:	2000      	movs	r0, #0
 800859a:	f04f 0c0a 	mov.w	ip, #10
 800859e:	9a07      	ldr	r2, [sp, #28]
 80085a0:	4621      	mov	r1, r4
 80085a2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80085a6:	3b30      	subs	r3, #48	; 0x30
 80085a8:	2b09      	cmp	r3, #9
 80085aa:	d94d      	bls.n	8008648 <_svfiprintf_r+0x17c>
 80085ac:	b1b0      	cbz	r0, 80085dc <_svfiprintf_r+0x110>
 80085ae:	9207      	str	r2, [sp, #28]
 80085b0:	e014      	b.n	80085dc <_svfiprintf_r+0x110>
 80085b2:	eba0 0308 	sub.w	r3, r0, r8
 80085b6:	fa09 f303 	lsl.w	r3, r9, r3
 80085ba:	4313      	orrs	r3, r2
 80085bc:	46a2      	mov	sl, r4
 80085be:	9304      	str	r3, [sp, #16]
 80085c0:	e7d2      	b.n	8008568 <_svfiprintf_r+0x9c>
 80085c2:	9b03      	ldr	r3, [sp, #12]
 80085c4:	1d19      	adds	r1, r3, #4
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	9103      	str	r1, [sp, #12]
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	bfbb      	ittet	lt
 80085ce:	425b      	neglt	r3, r3
 80085d0:	f042 0202 	orrlt.w	r2, r2, #2
 80085d4:	9307      	strge	r3, [sp, #28]
 80085d6:	9307      	strlt	r3, [sp, #28]
 80085d8:	bfb8      	it	lt
 80085da:	9204      	strlt	r2, [sp, #16]
 80085dc:	7823      	ldrb	r3, [r4, #0]
 80085de:	2b2e      	cmp	r3, #46	; 0x2e
 80085e0:	d10c      	bne.n	80085fc <_svfiprintf_r+0x130>
 80085e2:	7863      	ldrb	r3, [r4, #1]
 80085e4:	2b2a      	cmp	r3, #42	; 0x2a
 80085e6:	d134      	bne.n	8008652 <_svfiprintf_r+0x186>
 80085e8:	9b03      	ldr	r3, [sp, #12]
 80085ea:	3402      	adds	r4, #2
 80085ec:	1d1a      	adds	r2, r3, #4
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	9203      	str	r2, [sp, #12]
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	bfb8      	it	lt
 80085f6:	f04f 33ff 	movlt.w	r3, #4294967295
 80085fa:	9305      	str	r3, [sp, #20]
 80085fc:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 80086b8 <_svfiprintf_r+0x1ec>
 8008600:	2203      	movs	r2, #3
 8008602:	4650      	mov	r0, sl
 8008604:	7821      	ldrb	r1, [r4, #0]
 8008606:	f000 fa1d 	bl	8008a44 <memchr>
 800860a:	b138      	cbz	r0, 800861c <_svfiprintf_r+0x150>
 800860c:	2240      	movs	r2, #64	; 0x40
 800860e:	9b04      	ldr	r3, [sp, #16]
 8008610:	eba0 000a 	sub.w	r0, r0, sl
 8008614:	4082      	lsls	r2, r0
 8008616:	4313      	orrs	r3, r2
 8008618:	3401      	adds	r4, #1
 800861a:	9304      	str	r3, [sp, #16]
 800861c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008620:	2206      	movs	r2, #6
 8008622:	4826      	ldr	r0, [pc, #152]	; (80086bc <_svfiprintf_r+0x1f0>)
 8008624:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008628:	f000 fa0c 	bl	8008a44 <memchr>
 800862c:	2800      	cmp	r0, #0
 800862e:	d038      	beq.n	80086a2 <_svfiprintf_r+0x1d6>
 8008630:	4b23      	ldr	r3, [pc, #140]	; (80086c0 <_svfiprintf_r+0x1f4>)
 8008632:	bb1b      	cbnz	r3, 800867c <_svfiprintf_r+0x1b0>
 8008634:	9b03      	ldr	r3, [sp, #12]
 8008636:	3307      	adds	r3, #7
 8008638:	f023 0307 	bic.w	r3, r3, #7
 800863c:	3308      	adds	r3, #8
 800863e:	9303      	str	r3, [sp, #12]
 8008640:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008642:	4433      	add	r3, r6
 8008644:	9309      	str	r3, [sp, #36]	; 0x24
 8008646:	e768      	b.n	800851a <_svfiprintf_r+0x4e>
 8008648:	460c      	mov	r4, r1
 800864a:	2001      	movs	r0, #1
 800864c:	fb0c 3202 	mla	r2, ip, r2, r3
 8008650:	e7a6      	b.n	80085a0 <_svfiprintf_r+0xd4>
 8008652:	2300      	movs	r3, #0
 8008654:	f04f 0c0a 	mov.w	ip, #10
 8008658:	4619      	mov	r1, r3
 800865a:	3401      	adds	r4, #1
 800865c:	9305      	str	r3, [sp, #20]
 800865e:	4620      	mov	r0, r4
 8008660:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008664:	3a30      	subs	r2, #48	; 0x30
 8008666:	2a09      	cmp	r2, #9
 8008668:	d903      	bls.n	8008672 <_svfiprintf_r+0x1a6>
 800866a:	2b00      	cmp	r3, #0
 800866c:	d0c6      	beq.n	80085fc <_svfiprintf_r+0x130>
 800866e:	9105      	str	r1, [sp, #20]
 8008670:	e7c4      	b.n	80085fc <_svfiprintf_r+0x130>
 8008672:	4604      	mov	r4, r0
 8008674:	2301      	movs	r3, #1
 8008676:	fb0c 2101 	mla	r1, ip, r1, r2
 800867a:	e7f0      	b.n	800865e <_svfiprintf_r+0x192>
 800867c:	ab03      	add	r3, sp, #12
 800867e:	9300      	str	r3, [sp, #0]
 8008680:	462a      	mov	r2, r5
 8008682:	4638      	mov	r0, r7
 8008684:	4b0f      	ldr	r3, [pc, #60]	; (80086c4 <_svfiprintf_r+0x1f8>)
 8008686:	a904      	add	r1, sp, #16
 8008688:	f3af 8000 	nop.w
 800868c:	1c42      	adds	r2, r0, #1
 800868e:	4606      	mov	r6, r0
 8008690:	d1d6      	bne.n	8008640 <_svfiprintf_r+0x174>
 8008692:	89ab      	ldrh	r3, [r5, #12]
 8008694:	065b      	lsls	r3, r3, #25
 8008696:	f53f af2d 	bmi.w	80084f4 <_svfiprintf_r+0x28>
 800869a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800869c:	b01d      	add	sp, #116	; 0x74
 800869e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086a2:	ab03      	add	r3, sp, #12
 80086a4:	9300      	str	r3, [sp, #0]
 80086a6:	462a      	mov	r2, r5
 80086a8:	4638      	mov	r0, r7
 80086aa:	4b06      	ldr	r3, [pc, #24]	; (80086c4 <_svfiprintf_r+0x1f8>)
 80086ac:	a904      	add	r1, sp, #16
 80086ae:	f000 f87d 	bl	80087ac <_printf_i>
 80086b2:	e7eb      	b.n	800868c <_svfiprintf_r+0x1c0>
 80086b4:	08008bd8 	.word	0x08008bd8
 80086b8:	08008bde 	.word	0x08008bde
 80086bc:	08008be2 	.word	0x08008be2
 80086c0:	00000000 	.word	0x00000000
 80086c4:	08008419 	.word	0x08008419

080086c8 <_printf_common>:
 80086c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80086cc:	4616      	mov	r6, r2
 80086ce:	4699      	mov	r9, r3
 80086d0:	688a      	ldr	r2, [r1, #8]
 80086d2:	690b      	ldr	r3, [r1, #16]
 80086d4:	4607      	mov	r7, r0
 80086d6:	4293      	cmp	r3, r2
 80086d8:	bfb8      	it	lt
 80086da:	4613      	movlt	r3, r2
 80086dc:	6033      	str	r3, [r6, #0]
 80086de:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80086e2:	460c      	mov	r4, r1
 80086e4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80086e8:	b10a      	cbz	r2, 80086ee <_printf_common+0x26>
 80086ea:	3301      	adds	r3, #1
 80086ec:	6033      	str	r3, [r6, #0]
 80086ee:	6823      	ldr	r3, [r4, #0]
 80086f0:	0699      	lsls	r1, r3, #26
 80086f2:	bf42      	ittt	mi
 80086f4:	6833      	ldrmi	r3, [r6, #0]
 80086f6:	3302      	addmi	r3, #2
 80086f8:	6033      	strmi	r3, [r6, #0]
 80086fa:	6825      	ldr	r5, [r4, #0]
 80086fc:	f015 0506 	ands.w	r5, r5, #6
 8008700:	d106      	bne.n	8008710 <_printf_common+0x48>
 8008702:	f104 0a19 	add.w	sl, r4, #25
 8008706:	68e3      	ldr	r3, [r4, #12]
 8008708:	6832      	ldr	r2, [r6, #0]
 800870a:	1a9b      	subs	r3, r3, r2
 800870c:	42ab      	cmp	r3, r5
 800870e:	dc2b      	bgt.n	8008768 <_printf_common+0xa0>
 8008710:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008714:	1e13      	subs	r3, r2, #0
 8008716:	6822      	ldr	r2, [r4, #0]
 8008718:	bf18      	it	ne
 800871a:	2301      	movne	r3, #1
 800871c:	0692      	lsls	r2, r2, #26
 800871e:	d430      	bmi.n	8008782 <_printf_common+0xba>
 8008720:	4649      	mov	r1, r9
 8008722:	4638      	mov	r0, r7
 8008724:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008728:	47c0      	blx	r8
 800872a:	3001      	adds	r0, #1
 800872c:	d023      	beq.n	8008776 <_printf_common+0xae>
 800872e:	6823      	ldr	r3, [r4, #0]
 8008730:	6922      	ldr	r2, [r4, #16]
 8008732:	f003 0306 	and.w	r3, r3, #6
 8008736:	2b04      	cmp	r3, #4
 8008738:	bf14      	ite	ne
 800873a:	2500      	movne	r5, #0
 800873c:	6833      	ldreq	r3, [r6, #0]
 800873e:	f04f 0600 	mov.w	r6, #0
 8008742:	bf08      	it	eq
 8008744:	68e5      	ldreq	r5, [r4, #12]
 8008746:	f104 041a 	add.w	r4, r4, #26
 800874a:	bf08      	it	eq
 800874c:	1aed      	subeq	r5, r5, r3
 800874e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8008752:	bf08      	it	eq
 8008754:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008758:	4293      	cmp	r3, r2
 800875a:	bfc4      	itt	gt
 800875c:	1a9b      	subgt	r3, r3, r2
 800875e:	18ed      	addgt	r5, r5, r3
 8008760:	42b5      	cmp	r5, r6
 8008762:	d11a      	bne.n	800879a <_printf_common+0xd2>
 8008764:	2000      	movs	r0, #0
 8008766:	e008      	b.n	800877a <_printf_common+0xb2>
 8008768:	2301      	movs	r3, #1
 800876a:	4652      	mov	r2, sl
 800876c:	4649      	mov	r1, r9
 800876e:	4638      	mov	r0, r7
 8008770:	47c0      	blx	r8
 8008772:	3001      	adds	r0, #1
 8008774:	d103      	bne.n	800877e <_printf_common+0xb6>
 8008776:	f04f 30ff 	mov.w	r0, #4294967295
 800877a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800877e:	3501      	adds	r5, #1
 8008780:	e7c1      	b.n	8008706 <_printf_common+0x3e>
 8008782:	2030      	movs	r0, #48	; 0x30
 8008784:	18e1      	adds	r1, r4, r3
 8008786:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800878a:	1c5a      	adds	r2, r3, #1
 800878c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008790:	4422      	add	r2, r4
 8008792:	3302      	adds	r3, #2
 8008794:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008798:	e7c2      	b.n	8008720 <_printf_common+0x58>
 800879a:	2301      	movs	r3, #1
 800879c:	4622      	mov	r2, r4
 800879e:	4649      	mov	r1, r9
 80087a0:	4638      	mov	r0, r7
 80087a2:	47c0      	blx	r8
 80087a4:	3001      	adds	r0, #1
 80087a6:	d0e6      	beq.n	8008776 <_printf_common+0xae>
 80087a8:	3601      	adds	r6, #1
 80087aa:	e7d9      	b.n	8008760 <_printf_common+0x98>

080087ac <_printf_i>:
 80087ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80087b0:	7e0f      	ldrb	r7, [r1, #24]
 80087b2:	4691      	mov	r9, r2
 80087b4:	2f78      	cmp	r7, #120	; 0x78
 80087b6:	4680      	mov	r8, r0
 80087b8:	460c      	mov	r4, r1
 80087ba:	469a      	mov	sl, r3
 80087bc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80087be:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80087c2:	d807      	bhi.n	80087d4 <_printf_i+0x28>
 80087c4:	2f62      	cmp	r7, #98	; 0x62
 80087c6:	d80a      	bhi.n	80087de <_printf_i+0x32>
 80087c8:	2f00      	cmp	r7, #0
 80087ca:	f000 80d5 	beq.w	8008978 <_printf_i+0x1cc>
 80087ce:	2f58      	cmp	r7, #88	; 0x58
 80087d0:	f000 80c1 	beq.w	8008956 <_printf_i+0x1aa>
 80087d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80087d8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80087dc:	e03a      	b.n	8008854 <_printf_i+0xa8>
 80087de:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80087e2:	2b15      	cmp	r3, #21
 80087e4:	d8f6      	bhi.n	80087d4 <_printf_i+0x28>
 80087e6:	a101      	add	r1, pc, #4	; (adr r1, 80087ec <_printf_i+0x40>)
 80087e8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80087ec:	08008845 	.word	0x08008845
 80087f0:	08008859 	.word	0x08008859
 80087f4:	080087d5 	.word	0x080087d5
 80087f8:	080087d5 	.word	0x080087d5
 80087fc:	080087d5 	.word	0x080087d5
 8008800:	080087d5 	.word	0x080087d5
 8008804:	08008859 	.word	0x08008859
 8008808:	080087d5 	.word	0x080087d5
 800880c:	080087d5 	.word	0x080087d5
 8008810:	080087d5 	.word	0x080087d5
 8008814:	080087d5 	.word	0x080087d5
 8008818:	0800895f 	.word	0x0800895f
 800881c:	08008885 	.word	0x08008885
 8008820:	08008919 	.word	0x08008919
 8008824:	080087d5 	.word	0x080087d5
 8008828:	080087d5 	.word	0x080087d5
 800882c:	08008981 	.word	0x08008981
 8008830:	080087d5 	.word	0x080087d5
 8008834:	08008885 	.word	0x08008885
 8008838:	080087d5 	.word	0x080087d5
 800883c:	080087d5 	.word	0x080087d5
 8008840:	08008921 	.word	0x08008921
 8008844:	682b      	ldr	r3, [r5, #0]
 8008846:	1d1a      	adds	r2, r3, #4
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	602a      	str	r2, [r5, #0]
 800884c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008850:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008854:	2301      	movs	r3, #1
 8008856:	e0a0      	b.n	800899a <_printf_i+0x1ee>
 8008858:	6820      	ldr	r0, [r4, #0]
 800885a:	682b      	ldr	r3, [r5, #0]
 800885c:	0607      	lsls	r7, r0, #24
 800885e:	f103 0104 	add.w	r1, r3, #4
 8008862:	6029      	str	r1, [r5, #0]
 8008864:	d501      	bpl.n	800886a <_printf_i+0xbe>
 8008866:	681e      	ldr	r6, [r3, #0]
 8008868:	e003      	b.n	8008872 <_printf_i+0xc6>
 800886a:	0646      	lsls	r6, r0, #25
 800886c:	d5fb      	bpl.n	8008866 <_printf_i+0xba>
 800886e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8008872:	2e00      	cmp	r6, #0
 8008874:	da03      	bge.n	800887e <_printf_i+0xd2>
 8008876:	232d      	movs	r3, #45	; 0x2d
 8008878:	4276      	negs	r6, r6
 800887a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800887e:	230a      	movs	r3, #10
 8008880:	4859      	ldr	r0, [pc, #356]	; (80089e8 <_printf_i+0x23c>)
 8008882:	e012      	b.n	80088aa <_printf_i+0xfe>
 8008884:	682b      	ldr	r3, [r5, #0]
 8008886:	6820      	ldr	r0, [r4, #0]
 8008888:	1d19      	adds	r1, r3, #4
 800888a:	6029      	str	r1, [r5, #0]
 800888c:	0605      	lsls	r5, r0, #24
 800888e:	d501      	bpl.n	8008894 <_printf_i+0xe8>
 8008890:	681e      	ldr	r6, [r3, #0]
 8008892:	e002      	b.n	800889a <_printf_i+0xee>
 8008894:	0641      	lsls	r1, r0, #25
 8008896:	d5fb      	bpl.n	8008890 <_printf_i+0xe4>
 8008898:	881e      	ldrh	r6, [r3, #0]
 800889a:	2f6f      	cmp	r7, #111	; 0x6f
 800889c:	bf0c      	ite	eq
 800889e:	2308      	moveq	r3, #8
 80088a0:	230a      	movne	r3, #10
 80088a2:	4851      	ldr	r0, [pc, #324]	; (80089e8 <_printf_i+0x23c>)
 80088a4:	2100      	movs	r1, #0
 80088a6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80088aa:	6865      	ldr	r5, [r4, #4]
 80088ac:	2d00      	cmp	r5, #0
 80088ae:	bfa8      	it	ge
 80088b0:	6821      	ldrge	r1, [r4, #0]
 80088b2:	60a5      	str	r5, [r4, #8]
 80088b4:	bfa4      	itt	ge
 80088b6:	f021 0104 	bicge.w	r1, r1, #4
 80088ba:	6021      	strge	r1, [r4, #0]
 80088bc:	b90e      	cbnz	r6, 80088c2 <_printf_i+0x116>
 80088be:	2d00      	cmp	r5, #0
 80088c0:	d04b      	beq.n	800895a <_printf_i+0x1ae>
 80088c2:	4615      	mov	r5, r2
 80088c4:	fbb6 f1f3 	udiv	r1, r6, r3
 80088c8:	fb03 6711 	mls	r7, r3, r1, r6
 80088cc:	5dc7      	ldrb	r7, [r0, r7]
 80088ce:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80088d2:	4637      	mov	r7, r6
 80088d4:	42bb      	cmp	r3, r7
 80088d6:	460e      	mov	r6, r1
 80088d8:	d9f4      	bls.n	80088c4 <_printf_i+0x118>
 80088da:	2b08      	cmp	r3, #8
 80088dc:	d10b      	bne.n	80088f6 <_printf_i+0x14a>
 80088de:	6823      	ldr	r3, [r4, #0]
 80088e0:	07de      	lsls	r6, r3, #31
 80088e2:	d508      	bpl.n	80088f6 <_printf_i+0x14a>
 80088e4:	6923      	ldr	r3, [r4, #16]
 80088e6:	6861      	ldr	r1, [r4, #4]
 80088e8:	4299      	cmp	r1, r3
 80088ea:	bfde      	ittt	le
 80088ec:	2330      	movle	r3, #48	; 0x30
 80088ee:	f805 3c01 	strble.w	r3, [r5, #-1]
 80088f2:	f105 35ff 	addle.w	r5, r5, #4294967295
 80088f6:	1b52      	subs	r2, r2, r5
 80088f8:	6122      	str	r2, [r4, #16]
 80088fa:	464b      	mov	r3, r9
 80088fc:	4621      	mov	r1, r4
 80088fe:	4640      	mov	r0, r8
 8008900:	f8cd a000 	str.w	sl, [sp]
 8008904:	aa03      	add	r2, sp, #12
 8008906:	f7ff fedf 	bl	80086c8 <_printf_common>
 800890a:	3001      	adds	r0, #1
 800890c:	d14a      	bne.n	80089a4 <_printf_i+0x1f8>
 800890e:	f04f 30ff 	mov.w	r0, #4294967295
 8008912:	b004      	add	sp, #16
 8008914:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008918:	6823      	ldr	r3, [r4, #0]
 800891a:	f043 0320 	orr.w	r3, r3, #32
 800891e:	6023      	str	r3, [r4, #0]
 8008920:	2778      	movs	r7, #120	; 0x78
 8008922:	4832      	ldr	r0, [pc, #200]	; (80089ec <_printf_i+0x240>)
 8008924:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008928:	6823      	ldr	r3, [r4, #0]
 800892a:	6829      	ldr	r1, [r5, #0]
 800892c:	061f      	lsls	r7, r3, #24
 800892e:	f851 6b04 	ldr.w	r6, [r1], #4
 8008932:	d402      	bmi.n	800893a <_printf_i+0x18e>
 8008934:	065f      	lsls	r7, r3, #25
 8008936:	bf48      	it	mi
 8008938:	b2b6      	uxthmi	r6, r6
 800893a:	07df      	lsls	r7, r3, #31
 800893c:	bf48      	it	mi
 800893e:	f043 0320 	orrmi.w	r3, r3, #32
 8008942:	6029      	str	r1, [r5, #0]
 8008944:	bf48      	it	mi
 8008946:	6023      	strmi	r3, [r4, #0]
 8008948:	b91e      	cbnz	r6, 8008952 <_printf_i+0x1a6>
 800894a:	6823      	ldr	r3, [r4, #0]
 800894c:	f023 0320 	bic.w	r3, r3, #32
 8008950:	6023      	str	r3, [r4, #0]
 8008952:	2310      	movs	r3, #16
 8008954:	e7a6      	b.n	80088a4 <_printf_i+0xf8>
 8008956:	4824      	ldr	r0, [pc, #144]	; (80089e8 <_printf_i+0x23c>)
 8008958:	e7e4      	b.n	8008924 <_printf_i+0x178>
 800895a:	4615      	mov	r5, r2
 800895c:	e7bd      	b.n	80088da <_printf_i+0x12e>
 800895e:	682b      	ldr	r3, [r5, #0]
 8008960:	6826      	ldr	r6, [r4, #0]
 8008962:	1d18      	adds	r0, r3, #4
 8008964:	6961      	ldr	r1, [r4, #20]
 8008966:	6028      	str	r0, [r5, #0]
 8008968:	0635      	lsls	r5, r6, #24
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	d501      	bpl.n	8008972 <_printf_i+0x1c6>
 800896e:	6019      	str	r1, [r3, #0]
 8008970:	e002      	b.n	8008978 <_printf_i+0x1cc>
 8008972:	0670      	lsls	r0, r6, #25
 8008974:	d5fb      	bpl.n	800896e <_printf_i+0x1c2>
 8008976:	8019      	strh	r1, [r3, #0]
 8008978:	2300      	movs	r3, #0
 800897a:	4615      	mov	r5, r2
 800897c:	6123      	str	r3, [r4, #16]
 800897e:	e7bc      	b.n	80088fa <_printf_i+0x14e>
 8008980:	682b      	ldr	r3, [r5, #0]
 8008982:	2100      	movs	r1, #0
 8008984:	1d1a      	adds	r2, r3, #4
 8008986:	602a      	str	r2, [r5, #0]
 8008988:	681d      	ldr	r5, [r3, #0]
 800898a:	6862      	ldr	r2, [r4, #4]
 800898c:	4628      	mov	r0, r5
 800898e:	f000 f859 	bl	8008a44 <memchr>
 8008992:	b108      	cbz	r0, 8008998 <_printf_i+0x1ec>
 8008994:	1b40      	subs	r0, r0, r5
 8008996:	6060      	str	r0, [r4, #4]
 8008998:	6863      	ldr	r3, [r4, #4]
 800899a:	6123      	str	r3, [r4, #16]
 800899c:	2300      	movs	r3, #0
 800899e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80089a2:	e7aa      	b.n	80088fa <_printf_i+0x14e>
 80089a4:	462a      	mov	r2, r5
 80089a6:	4649      	mov	r1, r9
 80089a8:	4640      	mov	r0, r8
 80089aa:	6923      	ldr	r3, [r4, #16]
 80089ac:	47d0      	blx	sl
 80089ae:	3001      	adds	r0, #1
 80089b0:	d0ad      	beq.n	800890e <_printf_i+0x162>
 80089b2:	6823      	ldr	r3, [r4, #0]
 80089b4:	079b      	lsls	r3, r3, #30
 80089b6:	d413      	bmi.n	80089e0 <_printf_i+0x234>
 80089b8:	68e0      	ldr	r0, [r4, #12]
 80089ba:	9b03      	ldr	r3, [sp, #12]
 80089bc:	4298      	cmp	r0, r3
 80089be:	bfb8      	it	lt
 80089c0:	4618      	movlt	r0, r3
 80089c2:	e7a6      	b.n	8008912 <_printf_i+0x166>
 80089c4:	2301      	movs	r3, #1
 80089c6:	4632      	mov	r2, r6
 80089c8:	4649      	mov	r1, r9
 80089ca:	4640      	mov	r0, r8
 80089cc:	47d0      	blx	sl
 80089ce:	3001      	adds	r0, #1
 80089d0:	d09d      	beq.n	800890e <_printf_i+0x162>
 80089d2:	3501      	adds	r5, #1
 80089d4:	68e3      	ldr	r3, [r4, #12]
 80089d6:	9903      	ldr	r1, [sp, #12]
 80089d8:	1a5b      	subs	r3, r3, r1
 80089da:	42ab      	cmp	r3, r5
 80089dc:	dcf2      	bgt.n	80089c4 <_printf_i+0x218>
 80089de:	e7eb      	b.n	80089b8 <_printf_i+0x20c>
 80089e0:	2500      	movs	r5, #0
 80089e2:	f104 0619 	add.w	r6, r4, #25
 80089e6:	e7f5      	b.n	80089d4 <_printf_i+0x228>
 80089e8:	08008be9 	.word	0x08008be9
 80089ec:	08008bfa 	.word	0x08008bfa

080089f0 <memmove>:
 80089f0:	4288      	cmp	r0, r1
 80089f2:	b510      	push	{r4, lr}
 80089f4:	eb01 0402 	add.w	r4, r1, r2
 80089f8:	d902      	bls.n	8008a00 <memmove+0x10>
 80089fa:	4284      	cmp	r4, r0
 80089fc:	4623      	mov	r3, r4
 80089fe:	d807      	bhi.n	8008a10 <memmove+0x20>
 8008a00:	1e43      	subs	r3, r0, #1
 8008a02:	42a1      	cmp	r1, r4
 8008a04:	d008      	beq.n	8008a18 <memmove+0x28>
 8008a06:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008a0a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008a0e:	e7f8      	b.n	8008a02 <memmove+0x12>
 8008a10:	4601      	mov	r1, r0
 8008a12:	4402      	add	r2, r0
 8008a14:	428a      	cmp	r2, r1
 8008a16:	d100      	bne.n	8008a1a <memmove+0x2a>
 8008a18:	bd10      	pop	{r4, pc}
 8008a1a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008a1e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008a22:	e7f7      	b.n	8008a14 <memmove+0x24>

08008a24 <_sbrk_r>:
 8008a24:	b538      	push	{r3, r4, r5, lr}
 8008a26:	2300      	movs	r3, #0
 8008a28:	4d05      	ldr	r5, [pc, #20]	; (8008a40 <_sbrk_r+0x1c>)
 8008a2a:	4604      	mov	r4, r0
 8008a2c:	4608      	mov	r0, r1
 8008a2e:	602b      	str	r3, [r5, #0]
 8008a30:	f7f7 feb8 	bl	80007a4 <_sbrk>
 8008a34:	1c43      	adds	r3, r0, #1
 8008a36:	d102      	bne.n	8008a3e <_sbrk_r+0x1a>
 8008a38:	682b      	ldr	r3, [r5, #0]
 8008a3a:	b103      	cbz	r3, 8008a3e <_sbrk_r+0x1a>
 8008a3c:	6023      	str	r3, [r4, #0]
 8008a3e:	bd38      	pop	{r3, r4, r5, pc}
 8008a40:	200015a4 	.word	0x200015a4

08008a44 <memchr>:
 8008a44:	4603      	mov	r3, r0
 8008a46:	b510      	push	{r4, lr}
 8008a48:	b2c9      	uxtb	r1, r1
 8008a4a:	4402      	add	r2, r0
 8008a4c:	4293      	cmp	r3, r2
 8008a4e:	4618      	mov	r0, r3
 8008a50:	d101      	bne.n	8008a56 <memchr+0x12>
 8008a52:	2000      	movs	r0, #0
 8008a54:	e003      	b.n	8008a5e <memchr+0x1a>
 8008a56:	7804      	ldrb	r4, [r0, #0]
 8008a58:	3301      	adds	r3, #1
 8008a5a:	428c      	cmp	r4, r1
 8008a5c:	d1f6      	bne.n	8008a4c <memchr+0x8>
 8008a5e:	bd10      	pop	{r4, pc}

08008a60 <memcpy>:
 8008a60:	440a      	add	r2, r1
 8008a62:	4291      	cmp	r1, r2
 8008a64:	f100 33ff 	add.w	r3, r0, #4294967295
 8008a68:	d100      	bne.n	8008a6c <memcpy+0xc>
 8008a6a:	4770      	bx	lr
 8008a6c:	b510      	push	{r4, lr}
 8008a6e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008a72:	4291      	cmp	r1, r2
 8008a74:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008a78:	d1f9      	bne.n	8008a6e <memcpy+0xe>
 8008a7a:	bd10      	pop	{r4, pc}

08008a7c <_realloc_r>:
 8008a7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a80:	4680      	mov	r8, r0
 8008a82:	4614      	mov	r4, r2
 8008a84:	460e      	mov	r6, r1
 8008a86:	b921      	cbnz	r1, 8008a92 <_realloc_r+0x16>
 8008a88:	4611      	mov	r1, r2
 8008a8a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008a8e:	f7ff bc37 	b.w	8008300 <_malloc_r>
 8008a92:	b92a      	cbnz	r2, 8008aa0 <_realloc_r+0x24>
 8008a94:	f7ff fbcc 	bl	8008230 <_free_r>
 8008a98:	4625      	mov	r5, r4
 8008a9a:	4628      	mov	r0, r5
 8008a9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008aa0:	f000 f81b 	bl	8008ada <_malloc_usable_size_r>
 8008aa4:	4284      	cmp	r4, r0
 8008aa6:	4607      	mov	r7, r0
 8008aa8:	d802      	bhi.n	8008ab0 <_realloc_r+0x34>
 8008aaa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008aae:	d812      	bhi.n	8008ad6 <_realloc_r+0x5a>
 8008ab0:	4621      	mov	r1, r4
 8008ab2:	4640      	mov	r0, r8
 8008ab4:	f7ff fc24 	bl	8008300 <_malloc_r>
 8008ab8:	4605      	mov	r5, r0
 8008aba:	2800      	cmp	r0, #0
 8008abc:	d0ed      	beq.n	8008a9a <_realloc_r+0x1e>
 8008abe:	42bc      	cmp	r4, r7
 8008ac0:	4622      	mov	r2, r4
 8008ac2:	4631      	mov	r1, r6
 8008ac4:	bf28      	it	cs
 8008ac6:	463a      	movcs	r2, r7
 8008ac8:	f7ff ffca 	bl	8008a60 <memcpy>
 8008acc:	4631      	mov	r1, r6
 8008ace:	4640      	mov	r0, r8
 8008ad0:	f7ff fbae 	bl	8008230 <_free_r>
 8008ad4:	e7e1      	b.n	8008a9a <_realloc_r+0x1e>
 8008ad6:	4635      	mov	r5, r6
 8008ad8:	e7df      	b.n	8008a9a <_realloc_r+0x1e>

08008ada <_malloc_usable_size_r>:
 8008ada:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008ade:	1f18      	subs	r0, r3, #4
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	bfbc      	itt	lt
 8008ae4:	580b      	ldrlt	r3, [r1, r0]
 8008ae6:	18c0      	addlt	r0, r0, r3
 8008ae8:	4770      	bx	lr
	...

08008aec <_init>:
 8008aec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008aee:	bf00      	nop
 8008af0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008af2:	bc08      	pop	{r3}
 8008af4:	469e      	mov	lr, r3
 8008af6:	4770      	bx	lr

08008af8 <_fini>:
 8008af8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008afa:	bf00      	nop
 8008afc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008afe:	bc08      	pop	{r3}
 8008b00:	469e      	mov	lr, r3
 8008b02:	4770      	bx	lr
