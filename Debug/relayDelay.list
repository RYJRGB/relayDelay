
relayDelay.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009008  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000210  08009114  08009114  00019114  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009324  08009324  000201cc  2**0
                  CONTENTS
  4 .ARM          00000000  08009324  08009324  000201cc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009324  08009324  000201cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009324  08009324  00019324  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009328  08009328  00019328  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001cc  20000000  0800932c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000013ec  200001cc  080094f8  000201cc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200015b8  080094f8  000215b8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201cc  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000201f5  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000fcd2  00000000  00000000  00020238  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000030ae  00000000  00000000  0002ff0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000eb8  00000000  00000000  00032fb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b16  00000000  00000000  00033e70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00004a7b  00000000  00000000  00034986  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012a02  00000000  00000000  00039401  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008b065  00000000  00000000  0004be03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000403c  00000000  00000000  000d6e68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  000daea4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200001cc 	.word	0x200001cc
 8000128:	00000000 	.word	0x00000000
 800012c:	080090fc 	.word	0x080090fc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200001d0 	.word	0x200001d0
 8000148:	080090fc 	.word	0x080090fc

0800014c <readInputs>:
static void MX_SPI1_Init(void);
static void MX_USART1_UART_Init(void);
/* USER CODE BEGIN PFP */

// Read PMB input states and create boolean struct plus debounce
InputData readInputs(void) {
 800014c:	b580      	push	{r7, lr}
 800014e:	b084      	sub	sp, #16
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
    InputData data;
    // Read for chargeEnabled
    if(HAL_GPIO_ReadPin(EN_INPUT_BUS, CH_EN) == false) { //if PB5 CH_EN low
 8000154:	2120      	movs	r1, #32
 8000156:	4835      	ldr	r0, [pc, #212]	; (800022c <readInputs+0xe0>)
 8000158:	f001 f98e 	bl	8001478 <HAL_GPIO_ReadPin>
 800015c:	4603      	mov	r3, r0
 800015e:	2b00      	cmp	r3, #0
 8000160:	d102      	bne.n	8000168 <readInputs+0x1c>
			data.chargeEnabled = true;
 8000162:	2301      	movs	r3, #1
 8000164:	723b      	strb	r3, [r7, #8]
 8000166:	e001      	b.n	800016c <readInputs+0x20>
	}
	else{
		data.chargeEnabled = false;
 8000168:	2300      	movs	r3, #0
 800016a:	723b      	strb	r3, [r7, #8]
	}

    // Read for dischargeEnabled
    if(HAL_GPIO_ReadPin(EN_INPUT_BUS, DSC_EN) == false) { //if PB6 DSC_EN low
 800016c:	2140      	movs	r1, #64	; 0x40
 800016e:	482f      	ldr	r0, [pc, #188]	; (800022c <readInputs+0xe0>)
 8000170:	f001 f982 	bl	8001478 <HAL_GPIO_ReadPin>
 8000174:	4603      	mov	r3, r0
 8000176:	2b00      	cmp	r3, #0
 8000178:	d102      	bne.n	8000180 <readInputs+0x34>
			data.dischargeEnabled = true;
 800017a:	2301      	movs	r3, #1
 800017c:	727b      	strb	r3, [r7, #9]
 800017e:	e001      	b.n	8000184 <readInputs+0x38>
	}
	else{
		data.dischargeEnabled = false;
 8000180:	2300      	movs	r3, #0
 8000182:	727b      	strb	r3, [r7, #9]
	}

    // Read for chargerDetected
    if(HAL_GPIO_ReadPin(EN_INPUT_BUS, SP_EN) == false) { //if SP_EN PB7 is low  (charger detected)
 8000184:	2180      	movs	r1, #128	; 0x80
 8000186:	4829      	ldr	r0, [pc, #164]	; (800022c <readInputs+0xe0>)
 8000188:	f001 f976 	bl	8001478 <HAL_GPIO_ReadPin>
 800018c:	4603      	mov	r3, r0
 800018e:	2b00      	cmp	r3, #0
 8000190:	d102      	bne.n	8000198 <readInputs+0x4c>
            data.chargerDetected = true;
 8000192:	2301      	movs	r3, #1
 8000194:	72bb      	strb	r3, [r7, #10]
 8000196:	e001      	b.n	800019c <readInputs+0x50>
    }
    else{
    	data.chargerDetected = false;
 8000198:	2300      	movs	r3, #0
 800019a:	72bb      	strb	r3, [r7, #10]
    }

    // Read for antisafeEnabled
    if(HAL_GPIO_ReadPin(EN_INPUT_BUS, ANTISAFE_PIN) == false){ //if PB3 antisafe is low
 800019c:	2108      	movs	r1, #8
 800019e:	4823      	ldr	r0, [pc, #140]	; (800022c <readInputs+0xe0>)
 80001a0:	f001 f96a 	bl	8001478 <HAL_GPIO_ReadPin>
 80001a4:	4603      	mov	r3, r0
 80001a6:	2b00      	cmp	r3, #0
 80001a8:	d102      	bne.n	80001b0 <readInputs+0x64>
        data.antisafeEnabled = true;
 80001aa:	2301      	movs	r3, #1
 80001ac:	72fb      	strb	r3, [r7, #11]
 80001ae:	e001      	b.n	80001b4 <readInputs+0x68>
	}
	else{
		data.antisafeEnabled = false;
 80001b0:	2300      	movs	r3, #0
 80001b2:	72fb      	strb	r3, [r7, #11]
	}

    // Read Relays
    data.relayHigh = HAL_GPIO_ReadPin(RELAY_BUS, RELAY_HIGH); //output state relay high
 80001b4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80001b8:	481c      	ldr	r0, [pc, #112]	; (800022c <readInputs+0xe0>)
 80001ba:	f001 f95d 	bl	8001478 <HAL_GPIO_ReadPin>
 80001be:	4603      	mov	r3, r0
 80001c0:	2b00      	cmp	r3, #0
 80001c2:	bf14      	ite	ne
 80001c4:	2301      	movne	r3, #1
 80001c6:	2300      	moveq	r3, #0
 80001c8:	b2db      	uxtb	r3, r3
 80001ca:	733b      	strb	r3, [r7, #12]
    data.relayLow = HAL_GPIO_ReadPin(RELAY_BUS, RELAY_LOW); //output state relay low
 80001cc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80001d0:	4816      	ldr	r0, [pc, #88]	; (800022c <readInputs+0xe0>)
 80001d2:	f001 f951 	bl	8001478 <HAL_GPIO_ReadPin>
 80001d6:	4603      	mov	r3, r0
 80001d8:	2b00      	cmp	r3, #0
 80001da:	bf14      	ite	ne
 80001dc:	2301      	movne	r3, #1
 80001de:	2300      	moveq	r3, #0
 80001e0:	b2db      	uxtb	r3, r3
 80001e2:	737b      	strb	r3, [r7, #13]
    data.relayPC = HAL_GPIO_ReadPin(RELAY_BUS, RELAY_PRECHARGE); //output state relay pre-charge
 80001e4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80001e8:	4810      	ldr	r0, [pc, #64]	; (800022c <readInputs+0xe0>)
 80001ea:	f001 f945 	bl	8001478 <HAL_GPIO_ReadPin>
 80001ee:	4603      	mov	r3, r0
 80001f0:	2b00      	cmp	r3, #0
 80001f2:	bf14      	ite	ne
 80001f4:	2301      	movne	r3, #1
 80001f6:	2300      	moveq	r3, #0
 80001f8:	b2db      	uxtb	r3, r3
 80001fa:	73bb      	strb	r3, [r7, #14]
    data.relayCHG = HAL_GPIO_ReadPin(RELAY_BUS, RELAY_CHARGE); //output state relay charge
 80001fc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000200:	480a      	ldr	r0, [pc, #40]	; (800022c <readInputs+0xe0>)
 8000202:	f001 f939 	bl	8001478 <HAL_GPIO_ReadPin>
 8000206:	4603      	mov	r3, r0
 8000208:	2b00      	cmp	r3, #0
 800020a:	bf14      	ite	ne
 800020c:	2301      	movne	r3, #1
 800020e:	2300      	moveq	r3, #0
 8000210:	b2db      	uxtb	r3, r3
 8000212:	73fb      	strb	r3, [r7, #15]

    return data;
 8000214:	687b      	ldr	r3, [r7, #4]
 8000216:	461a      	mov	r2, r3
 8000218:	f107 0308 	add.w	r3, r7, #8
 800021c:	cb03      	ldmia	r3!, {r0, r1}
 800021e:	6010      	str	r0, [r2, #0]
 8000220:	6051      	str	r1, [r2, #4]
}
 8000222:	6878      	ldr	r0, [r7, #4]
 8000224:	3710      	adds	r7, #16
 8000226:	46bd      	mov	sp, r7
 8000228:	bd80      	pop	{r7, pc}
 800022a:	bf00      	nop
 800022c:	40010c00 	.word	0x40010c00

08000230 <allRelayOff>:

void allRelayOff(void){
 8000230:	b580      	push	{r7, lr}
 8000232:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RELAY_BUS, RELAY_LOW, RESET); //turn off negative relay
 8000234:	2200      	movs	r2, #0
 8000236:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800023a:	480b      	ldr	r0, [pc, #44]	; (8000268 <allRelayOff+0x38>)
 800023c:	f001 f933 	bl	80014a6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RELAY_BUS, RELAY_HIGH, RESET); //turn off positive relay
 8000240:	2200      	movs	r2, #0
 8000242:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000246:	4808      	ldr	r0, [pc, #32]	; (8000268 <allRelayOff+0x38>)
 8000248:	f001 f92d 	bl	80014a6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RELAY_BUS, RELAY_CHARGE, RESET); //turn off charge relay
 800024c:	2200      	movs	r2, #0
 800024e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000252:	4805      	ldr	r0, [pc, #20]	; (8000268 <allRelayOff+0x38>)
 8000254:	f001 f927 	bl	80014a6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RELAY_BUS, RELAY_PRECHARGE, RESET); //turn off precharge relay
 8000258:	2200      	movs	r2, #0
 800025a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800025e:	4802      	ldr	r0, [pc, #8]	; (8000268 <allRelayOff+0x38>)
 8000260:	f001 f921 	bl	80014a6 <HAL_GPIO_WritePin>
//	HAL_GPIO_WritePin(RELAY_BUS, GPIO_PIN_0, RESET); //
//	HAL_GPIO_WritePin(RELAY_BUS, GPIO_PIN_1, RESET); //
//	HAL_GPIO_WritePin(RELAY_BUS, GPIO_PIN_10, RESET); //
//	HAL_GPIO_WritePin(RELAY_BUS, GPIO_PIN_11, RESET); //
}
 8000264:	bf00      	nop
 8000266:	bd80      	pop	{r7, pc}
 8000268:	40010c00 	.word	0x40010c00

0800026c <sendUSB_BMS_state>:
//	HAL_GPIO_WritePin(RELAY_BUS, GPIO_PIN_11, SET); //
}



void sendUSB_BMS_state(void){
 800026c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800026e:	b0ab      	sub	sp, #172	; 0xac
 8000270:	af06      	add	r7, sp, #24
	InputData data = readInputs();
 8000272:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8000276:	4618      	mov	r0, r3
 8000278:	f7ff ff68 	bl	800014c <readInputs>
	uint8_t buffer[128] = {0}; // Initialize to zeros
 800027c:	2300      	movs	r3, #0
 800027e:	607b      	str	r3, [r7, #4]
 8000280:	f107 0308 	add.w	r3, r7, #8
 8000284:	227c      	movs	r2, #124	; 0x7c
 8000286:	2100      	movs	r1, #0
 8000288:	4618      	mov	r0, r3
 800028a:	f008 faa5 	bl	80087d8 <memset>
						  "DSC_EN: %s, "
						  "CH_DET: %s, "
						  "ASAFE: %s, "
						  "Mode: %d, "
						  "Status: %d\r\n",
						  data.chargeEnabled ? "true" : "false",
 800028e:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
	int length = snprintf((char *)buffer, sizeof(buffer),
 8000292:	2b00      	cmp	r3, #0
 8000294:	d001      	beq.n	800029a <sendUSB_BMS_state+0x2e>
 8000296:	4c1b      	ldr	r4, [pc, #108]	; (8000304 <sendUSB_BMS_state+0x98>)
 8000298:	e000      	b.n	800029c <sendUSB_BMS_state+0x30>
 800029a:	4c1b      	ldr	r4, [pc, #108]	; (8000308 <sendUSB_BMS_state+0x9c>)
						  data.dischargeEnabled ? "true" : "false",
 800029c:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
	int length = snprintf((char *)buffer, sizeof(buffer),
 80002a0:	2b00      	cmp	r3, #0
 80002a2:	d001      	beq.n	80002a8 <sendUSB_BMS_state+0x3c>
 80002a4:	4b17      	ldr	r3, [pc, #92]	; (8000304 <sendUSB_BMS_state+0x98>)
 80002a6:	e000      	b.n	80002aa <sendUSB_BMS_state+0x3e>
 80002a8:	4b17      	ldr	r3, [pc, #92]	; (8000308 <sendUSB_BMS_state+0x9c>)
						  data.chargerDetected ? "true" : "false",
 80002aa:	f897 2086 	ldrb.w	r2, [r7, #134]	; 0x86
	int length = snprintf((char *)buffer, sizeof(buffer),
 80002ae:	2a00      	cmp	r2, #0
 80002b0:	d001      	beq.n	80002b6 <sendUSB_BMS_state+0x4a>
 80002b2:	4a14      	ldr	r2, [pc, #80]	; (8000304 <sendUSB_BMS_state+0x98>)
 80002b4:	e000      	b.n	80002b8 <sendUSB_BMS_state+0x4c>
 80002b6:	4a14      	ldr	r2, [pc, #80]	; (8000308 <sendUSB_BMS_state+0x9c>)
						  data.antisafeEnabled ? "true" : "false",
 80002b8:	f897 1087 	ldrb.w	r1, [r7, #135]	; 0x87
	int length = snprintf((char *)buffer, sizeof(buffer),
 80002bc:	2900      	cmp	r1, #0
 80002be:	d001      	beq.n	80002c4 <sendUSB_BMS_state+0x58>
 80002c0:	4910      	ldr	r1, [pc, #64]	; (8000304 <sendUSB_BMS_state+0x98>)
 80002c2:	e000      	b.n	80002c6 <sendUSB_BMS_state+0x5a>
 80002c4:	4910      	ldr	r1, [pc, #64]	; (8000308 <sendUSB_BMS_state+0x9c>)
 80002c6:	4811      	ldr	r0, [pc, #68]	; (800030c <sendUSB_BMS_state+0xa0>)
 80002c8:	7800      	ldrb	r0, [r0, #0]
 80002ca:	4605      	mov	r5, r0
 80002cc:	4810      	ldr	r0, [pc, #64]	; (8000310 <sendUSB_BMS_state+0xa4>)
 80002ce:	7800      	ldrb	r0, [r0, #0]
 80002d0:	4606      	mov	r6, r0
 80002d2:	1d38      	adds	r0, r7, #4
 80002d4:	9604      	str	r6, [sp, #16]
 80002d6:	9503      	str	r5, [sp, #12]
 80002d8:	9102      	str	r1, [sp, #8]
 80002da:	9201      	str	r2, [sp, #4]
 80002dc:	9300      	str	r3, [sp, #0]
 80002de:	4623      	mov	r3, r4
 80002e0:	4a0c      	ldr	r2, [pc, #48]	; (8000314 <sendUSB_BMS_state+0xa8>)
 80002e2:	2180      	movs	r1, #128	; 0x80
 80002e4:	f008 fa44 	bl	8008770 <sniprintf>
 80002e8:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
						  currentState, status);  // Adding the status variable here

	CDC_Transmit_FS(buffer, length);  // Use length here
 80002ec:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80002f0:	b29a      	uxth	r2, r3
 80002f2:	1d3b      	adds	r3, r7, #4
 80002f4:	4611      	mov	r1, r2
 80002f6:	4618      	mov	r0, r3
 80002f8:	f007 fe5c 	bl	8007fb4 <CDC_Transmit_FS>
}
 80002fc:	bf00      	nop
 80002fe:	3794      	adds	r7, #148	; 0x94
 8000300:	46bd      	mov	sp, r7
 8000302:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000304:	08009114 	.word	0x08009114
 8000308:	0800911c 	.word	0x0800911c
 800030c:	20000284 	.word	0x20000284
 8000310:	20000285 	.word	0x20000285
 8000314:	08009124 	.word	0x08009124

08000318 <sendUSB_Relay_State>:

void sendUSB_Relay_State(void){
 8000318:	b590      	push	{r4, r7, lr}
 800031a:	b0a9      	sub	sp, #164	; 0xa4
 800031c:	af04      	add	r7, sp, #16
	InputData data = readInputs();
 800031e:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8000322:	4618      	mov	r0, r3
 8000324:	f7ff ff12 	bl	800014c <readInputs>
	uint8_t buffer[128] = {0}; // Initialize to zeros
 8000328:	2300      	movs	r3, #0
 800032a:	607b      	str	r3, [r7, #4]
 800032c:	f107 0308 	add.w	r3, r7, #8
 8000330:	227c      	movs	r2, #124	; 0x7c
 8000332:	2100      	movs	r1, #0
 8000334:	4618      	mov	r0, r3
 8000336:	f008 fa4f 	bl	80087d8 <memset>
	int length = snprintf((char *)buffer, sizeof(buffer),
						  "RELAY OUTPUT| POS: %s, "
						  "NEG: %s, "
						  "PreCharge: %s, "
						  "CHARGE: %s\r\n",
						  data.relayHigh ? "EN" : "DIS",
 800033a:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
	int length = snprintf((char *)buffer, sizeof(buffer),
 800033e:	2b00      	cmp	r3, #0
 8000340:	d001      	beq.n	8000346 <sendUSB_Relay_State+0x2e>
 8000342:	4c17      	ldr	r4, [pc, #92]	; (80003a0 <sendUSB_Relay_State+0x88>)
 8000344:	e000      	b.n	8000348 <sendUSB_Relay_State+0x30>
 8000346:	4c17      	ldr	r4, [pc, #92]	; (80003a4 <sendUSB_Relay_State+0x8c>)
						  data.relayLow ? "EN" : "DIS",
 8000348:	f897 3089 	ldrb.w	r3, [r7, #137]	; 0x89
	int length = snprintf((char *)buffer, sizeof(buffer),
 800034c:	2b00      	cmp	r3, #0
 800034e:	d001      	beq.n	8000354 <sendUSB_Relay_State+0x3c>
 8000350:	4b13      	ldr	r3, [pc, #76]	; (80003a0 <sendUSB_Relay_State+0x88>)
 8000352:	e000      	b.n	8000356 <sendUSB_Relay_State+0x3e>
 8000354:	4b13      	ldr	r3, [pc, #76]	; (80003a4 <sendUSB_Relay_State+0x8c>)
						  data.relayPC ? "EN" : "DIS",
 8000356:	f897 208a 	ldrb.w	r2, [r7, #138]	; 0x8a
	int length = snprintf((char *)buffer, sizeof(buffer),
 800035a:	2a00      	cmp	r2, #0
 800035c:	d001      	beq.n	8000362 <sendUSB_Relay_State+0x4a>
 800035e:	4a10      	ldr	r2, [pc, #64]	; (80003a0 <sendUSB_Relay_State+0x88>)
 8000360:	e000      	b.n	8000364 <sendUSB_Relay_State+0x4c>
 8000362:	4a10      	ldr	r2, [pc, #64]	; (80003a4 <sendUSB_Relay_State+0x8c>)
						  data.relayCHG ? "EN" : "DIS"
 8000364:	f897 108b 	ldrb.w	r1, [r7, #139]	; 0x8b
	int length = snprintf((char *)buffer, sizeof(buffer),
 8000368:	2900      	cmp	r1, #0
 800036a:	d001      	beq.n	8000370 <sendUSB_Relay_State+0x58>
 800036c:	490c      	ldr	r1, [pc, #48]	; (80003a0 <sendUSB_Relay_State+0x88>)
 800036e:	e000      	b.n	8000372 <sendUSB_Relay_State+0x5a>
 8000370:	490c      	ldr	r1, [pc, #48]	; (80003a4 <sendUSB_Relay_State+0x8c>)
 8000372:	1d38      	adds	r0, r7, #4
 8000374:	9102      	str	r1, [sp, #8]
 8000376:	9201      	str	r2, [sp, #4]
 8000378:	9300      	str	r3, [sp, #0]
 800037a:	4623      	mov	r3, r4
 800037c:	4a0a      	ldr	r2, [pc, #40]	; (80003a8 <sendUSB_Relay_State+0x90>)
 800037e:	2180      	movs	r1, #128	; 0x80
 8000380:	f008 f9f6 	bl	8008770 <sniprintf>
 8000384:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
						  );

	CDC_Transmit_FS(buffer, length);  // Use length here
 8000388:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800038c:	b29a      	uxth	r2, r3
 800038e:	1d3b      	adds	r3, r7, #4
 8000390:	4611      	mov	r1, r2
 8000392:	4618      	mov	r0, r3
 8000394:	f007 fe0e 	bl	8007fb4 <CDC_Transmit_FS>
}
 8000398:	bf00      	nop
 800039a:	3794      	adds	r7, #148	; 0x94
 800039c:	46bd      	mov	sp, r7
 800039e:	bd90      	pop	{r4, r7, pc}
 80003a0:	0800916c 	.word	0x0800916c
 80003a4:	08009170 	.word	0x08009170
 80003a8:	08009174 	.word	0x08009174

080003ac <serialPrintln>:

void serialPrintln(const char *str) {
 80003ac:	b580      	push	{r7, lr}
 80003ae:	b0a4      	sub	sp, #144	; 0x90
 80003b0:	af00      	add	r7, sp, #0
 80003b2:	6078      	str	r0, [r7, #4]
    uint8_t buffer[128];  // Make sure this buffer is large enough for your messages
    int length = snprintf((char *)buffer, sizeof(buffer), "%s\n", str);
 80003b4:	f107 000c 	add.w	r0, r7, #12
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	4a0b      	ldr	r2, [pc, #44]	; (80003e8 <serialPrintln+0x3c>)
 80003bc:	2180      	movs	r1, #128	; 0x80
 80003be:	f008 f9d7 	bl	8008770 <sniprintf>
 80003c2:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c

    if (length > 0) {
 80003c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	dd08      	ble.n	80003e0 <serialPrintln+0x34>
        CDC_Transmit_FS(buffer, length);
 80003ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80003d2:	b29a      	uxth	r2, r3
 80003d4:	f107 030c 	add.w	r3, r7, #12
 80003d8:	4611      	mov	r1, r2
 80003da:	4618      	mov	r0, r3
 80003dc:	f007 fdea 	bl	8007fb4 <CDC_Transmit_FS>
    }
}
 80003e0:	bf00      	nop
 80003e2:	3790      	adds	r7, #144	; 0x90
 80003e4:	46bd      	mov	sp, r7
 80003e6:	bd80      	pop	{r7, pc}
 80003e8:	080091b0 	.word	0x080091b0

080003ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003ec:	b580      	push	{r7, lr}
 80003ee:	b08c      	sub	sp, #48	; 0x30
 80003f0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003f2:	f000 fd29 	bl	8000e48 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003f6:	f000 fa4f 	bl	8000898 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003fa:	f000 fb09 	bl	8000a10 <MX_GPIO_Init>
  MX_SPI1_Init();
 80003fe:	f000 faa7 	bl	8000950 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000402:	f000 fadb 	bl	80009bc <MX_USART1_UART_Init>
  MX_USB_DEVICE_Init();
 8000406:	f007 fcd3 	bl	8007db0 <MX_USB_DEVICE_Init>
  while (1)
  {

	  //0.1s loop 10Hz
	  static int i = 0;
	  i = 0;
 800040a:	4bb6      	ldr	r3, [pc, #728]	; (80006e4 <main+0x2f8>)
 800040c:	2200      	movs	r2, #0
 800040e:	601a      	str	r2, [r3, #0]

	  while(currentState == IDLE_STATE && i < 10){
 8000410:	e046      	b.n	80004a0 <main+0xb4>
		  HAL_Delay(100);
 8000412:	2064      	movs	r0, #100	; 0x64
 8000414:	f000 fd7a 	bl	8000f0c <HAL_Delay>
		  InputData data = readInputs();
 8000418:	f107 0320 	add.w	r3, r7, #32
 800041c:	4618      	mov	r0, r3
 800041e:	f7ff fe95 	bl	800014c <readInputs>
		  if(data.chargeEnabled && data.dischargeEnabled && !data.chargerDetected){
 8000422:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000426:	2b00      	cmp	r3, #0
 8000428:	d017      	beq.n	800045a <main+0x6e>
 800042a:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800042e:	2b00      	cmp	r3, #0
 8000430:	d013      	beq.n	800045a <main+0x6e>
 8000432:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8000436:	f083 0301 	eor.w	r3, r3, #1
 800043a:	b2db      	uxtb	r3, r3
 800043c:	2b00      	cmp	r3, #0
 800043e:	d00c      	beq.n	800045a <main+0x6e>
			  currentState = DRIVE_STATE;
 8000440:	4ba9      	ldr	r3, [pc, #676]	; (80006e8 <main+0x2fc>)
 8000442:	2201      	movs	r2, #1
 8000444:	701a      	strb	r2, [r3, #0]
			  serialPrintln("Drive STATE");
 8000446:	48a9      	ldr	r0, [pc, #676]	; (80006ec <main+0x300>)
 8000448:	f7ff ffb0 	bl	80003ac <serialPrintln>
			  relay_sequence = 1; //begin startup sequence
 800044c:	4ba8      	ldr	r3, [pc, #672]	; (80006f0 <main+0x304>)
 800044e:	2201      	movs	r2, #1
 8000450:	701a      	strb	r2, [r3, #0]
			  i = 0;
 8000452:	4ba4      	ldr	r3, [pc, #656]	; (80006e4 <main+0x2f8>)
 8000454:	2200      	movs	r2, #0
 8000456:	601a      	str	r2, [r3, #0]
			  break;
 8000458:	e02a      	b.n	80004b0 <main+0xc4>
		  }
		  if(data.chargerDetected && data.chargeEnabled){
 800045a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800045e:	2b00      	cmp	r3, #0
 8000460:	d010      	beq.n	8000484 <main+0x98>
 8000462:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000466:	2b00      	cmp	r3, #0
 8000468:	d00c      	beq.n	8000484 <main+0x98>
			  currentState = CHARGE_STATE;
 800046a:	4b9f      	ldr	r3, [pc, #636]	; (80006e8 <main+0x2fc>)
 800046c:	2202      	movs	r2, #2
 800046e:	701a      	strb	r2, [r3, #0]
			  serialPrintln("Charge STATE");
 8000470:	48a0      	ldr	r0, [pc, #640]	; (80006f4 <main+0x308>)
 8000472:	f7ff ff9b 	bl	80003ac <serialPrintln>
			  relay_sequence = 1; //begin startup sequence
 8000476:	4b9e      	ldr	r3, [pc, #632]	; (80006f0 <main+0x304>)
 8000478:	2201      	movs	r2, #1
 800047a:	701a      	strb	r2, [r3, #0]
			  i = 0;
 800047c:	4b99      	ldr	r3, [pc, #612]	; (80006e4 <main+0x2f8>)
 800047e:	2200      	movs	r2, #0
 8000480:	601a      	str	r2, [r3, #0]
			  break;
 8000482:	e015      	b.n	80004b0 <main+0xc4>
		  }
		  else{
			  currentState = IDLE_STATE;
 8000484:	4b98      	ldr	r3, [pc, #608]	; (80006e8 <main+0x2fc>)
 8000486:	2200      	movs	r2, #0
 8000488:	701a      	strb	r2, [r3, #0]
			  serialPrintln("IDLE STATE");
 800048a:	489b      	ldr	r0, [pc, #620]	; (80006f8 <main+0x30c>)
 800048c:	f7ff ff8e 	bl	80003ac <serialPrintln>
			  i = 0;
 8000490:	4b94      	ldr	r3, [pc, #592]	; (80006e4 <main+0x2f8>)
 8000492:	2200      	movs	r2, #0
 8000494:	601a      	str	r2, [r3, #0]
		  }
		  i++;
 8000496:	4b93      	ldr	r3, [pc, #588]	; (80006e4 <main+0x2f8>)
 8000498:	681b      	ldr	r3, [r3, #0]
 800049a:	3301      	adds	r3, #1
 800049c:	4a91      	ldr	r2, [pc, #580]	; (80006e4 <main+0x2f8>)
 800049e:	6013      	str	r3, [r2, #0]
	  while(currentState == IDLE_STATE && i < 10){
 80004a0:	4b91      	ldr	r3, [pc, #580]	; (80006e8 <main+0x2fc>)
 80004a2:	781b      	ldrb	r3, [r3, #0]
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	d103      	bne.n	80004b0 <main+0xc4>
 80004a8:	4b8e      	ldr	r3, [pc, #568]	; (80006e4 <main+0x2f8>)
 80004aa:	681b      	ldr	r3, [r3, #0]
 80004ac:	2b09      	cmp	r3, #9
 80004ae:	ddb0      	ble.n	8000412 <main+0x26>

	  }
	  if(currentState == DRIVE_STATE && relay_sequence == 1){
 80004b0:	4b8d      	ldr	r3, [pc, #564]	; (80006e8 <main+0x2fc>)
 80004b2:	781b      	ldrb	r3, [r3, #0]
 80004b4:	2b01      	cmp	r3, #1
 80004b6:	f040 80b9 	bne.w	800062c <main+0x240>
 80004ba:	4b8d      	ldr	r3, [pc, #564]	; (80006f0 <main+0x304>)
 80004bc:	781b      	ldrb	r3, [r3, #0]
 80004be:	2b01      	cmp	r3, #1
 80004c0:	f040 80b4 	bne.w	800062c <main+0x240>
		  InputData data = readInputs();
 80004c4:	f107 0318 	add.w	r3, r7, #24
 80004c8:	4618      	mov	r0, r3
 80004ca:	f7ff fe3f 	bl	800014c <readInputs>
		  if(data.chargeEnabled && data.dischargeEnabled){
 80004ce:	7e3b      	ldrb	r3, [r7, #24]
 80004d0:	2b00      	cmp	r3, #0
 80004d2:	d011      	beq.n	80004f8 <main+0x10c>
 80004d4:	7e7b      	ldrb	r3, [r7, #25]
 80004d6:	2b00      	cmp	r3, #0
 80004d8:	d00e      	beq.n	80004f8 <main+0x10c>
			  HAL_GPIO_WritePin(RELAY_BUS, RELAY_LOW, SET); //turn on lower relay
 80004da:	2201      	movs	r2, #1
 80004dc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80004e0:	4886      	ldr	r0, [pc, #536]	; (80006fc <main+0x310>)
 80004e2:	f000 ffe0 	bl	80014a6 <HAL_GPIO_WritePin>
			  serialPrintln("NEG Contact Engaged");
 80004e6:	4886      	ldr	r0, [pc, #536]	; (8000700 <main+0x314>)
 80004e8:	f7ff ff60 	bl	80003ac <serialPrintln>
			  sendUSB_Relay_State();
 80004ec:	f7ff ff14 	bl	8000318 <sendUSB_Relay_State>
			  HAL_Delay(100);
 80004f0:	2064      	movs	r0, #100	; 0x64
 80004f2:	f000 fd0b 	bl	8000f0c <HAL_Delay>
 80004f6:	e004      	b.n	8000502 <main+0x116>
		  }
		  else{
			  allRelayOff();
 80004f8:	f7ff fe9a 	bl	8000230 <allRelayOff>
			  status = DRIVE_FAULT;
 80004fc:	4b81      	ldr	r3, [pc, #516]	; (8000704 <main+0x318>)
 80004fe:	22fe      	movs	r2, #254	; 0xfe
 8000500:	701a      	strb	r2, [r3, #0]
			  //break;
		  }
		  data = readInputs();
 8000502:	463b      	mov	r3, r7
 8000504:	4618      	mov	r0, r3
 8000506:	f7ff fe21 	bl	800014c <readInputs>
 800050a:	f107 0318 	add.w	r3, r7, #24
 800050e:	463a      	mov	r2, r7
 8000510:	6810      	ldr	r0, [r2, #0]
 8000512:	6851      	ldr	r1, [r2, #4]
 8000514:	c303      	stmia	r3!, {r0, r1}
		  if(data.chargeEnabled && data.dischargeEnabled){
 8000516:	7e3b      	ldrb	r3, [r7, #24]
 8000518:	2b00      	cmp	r3, #0
 800051a:	d01e      	beq.n	800055a <main+0x16e>
 800051c:	7e7b      	ldrb	r3, [r7, #25]
 800051e:	2b00      	cmp	r3, #0
 8000520:	d01b      	beq.n	800055a <main+0x16e>
			  HAL_GPIO_WritePin(RELAY_BUS, RELAY_PRECHARGE, SET); //turn on Precharge
 8000522:	2201      	movs	r2, #1
 8000524:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000528:	4874      	ldr	r0, [pc, #464]	; (80006fc <main+0x310>)
 800052a:	f000 ffbc 	bl	80014a6 <HAL_GPIO_WritePin>
			  serialPrintln("Precharging");
 800052e:	4876      	ldr	r0, [pc, #472]	; (8000708 <main+0x31c>)
 8000530:	f7ff ff3c 	bl	80003ac <serialPrintln>
			  sendUSB_Relay_State();
 8000534:	f7ff fef0 	bl	8000318 <sendUSB_Relay_State>
			  HAL_Delay(100);
 8000538:	2064      	movs	r0, #100	; 0x64
 800053a:	f000 fce7 	bl	8000f0c <HAL_Delay>
		  else{
			  allRelayOff();
			  status = DRIVE_FAULT;
			  break;
		  }
		  data = readInputs();
 800053e:	463b      	mov	r3, r7
 8000540:	4618      	mov	r0, r3
 8000542:	f7ff fe03 	bl	800014c <readInputs>
 8000546:	f107 0318 	add.w	r3, r7, #24
 800054a:	463a      	mov	r2, r7
 800054c:	6810      	ldr	r0, [r2, #0]
 800054e:	6851      	ldr	r1, [r2, #4]
 8000550:	c303      	stmia	r3!, {r0, r1}
		  if(data.chargeEnabled && data.dischargeEnabled){
 8000552:	7e3b      	ldrb	r3, [r7, #24]
 8000554:	2b00      	cmp	r3, #0
 8000556:	d106      	bne.n	8000566 <main+0x17a>
 8000558:	e01f      	b.n	800059a <main+0x1ae>
			  allRelayOff();
 800055a:	f7ff fe69 	bl	8000230 <allRelayOff>
			  status = DRIVE_FAULT;
 800055e:	4b69      	ldr	r3, [pc, #420]	; (8000704 <main+0x318>)
 8000560:	22fe      	movs	r2, #254	; 0xfe
 8000562:	701a      	strb	r2, [r3, #0]
			  break;
 8000564:	e180      	b.n	8000868 <main+0x47c>
		  if(data.chargeEnabled && data.dischargeEnabled){
 8000566:	7e7b      	ldrb	r3, [r7, #25]
 8000568:	2b00      	cmp	r3, #0
 800056a:	d016      	beq.n	800059a <main+0x1ae>
			  HAL_Delay(PRECHARGE_DURATION); //wait for precharge
 800056c:	f241 3088 	movw	r0, #5000	; 0x1388
 8000570:	f000 fccc 	bl	8000f0c <HAL_Delay>
			  serialPrintln("Wait 5000ms");
 8000574:	4865      	ldr	r0, [pc, #404]	; (800070c <main+0x320>)
 8000576:	f7ff ff19 	bl	80003ac <serialPrintln>
			  sendUSB_Relay_State();
 800057a:	f7ff fecd 	bl	8000318 <sendUSB_Relay_State>
		  else{
			  allRelayOff();
			  status = DRIVE_FAULT;
			  break;
		  }
		  data = readInputs();
 800057e:	463b      	mov	r3, r7
 8000580:	4618      	mov	r0, r3
 8000582:	f7ff fde3 	bl	800014c <readInputs>
 8000586:	f107 0318 	add.w	r3, r7, #24
 800058a:	463a      	mov	r2, r7
 800058c:	6810      	ldr	r0, [r2, #0]
 800058e:	6851      	ldr	r1, [r2, #4]
 8000590:	c303      	stmia	r3!, {r0, r1}
		  if(data.chargeEnabled && data.dischargeEnabled){
 8000592:	7e3b      	ldrb	r3, [r7, #24]
 8000594:	2b00      	cmp	r3, #0
 8000596:	d106      	bne.n	80005a6 <main+0x1ba>
 8000598:	e02d      	b.n	80005f6 <main+0x20a>
			  allRelayOff();
 800059a:	f7ff fe49 	bl	8000230 <allRelayOff>
			  status = DRIVE_FAULT;
 800059e:	4b59      	ldr	r3, [pc, #356]	; (8000704 <main+0x318>)
 80005a0:	22fe      	movs	r2, #254	; 0xfe
 80005a2:	701a      	strb	r2, [r3, #0]
			  break;
 80005a4:	e160      	b.n	8000868 <main+0x47c>
		  if(data.chargeEnabled && data.dischargeEnabled){
 80005a6:	7e7b      	ldrb	r3, [r7, #25]
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d024      	beq.n	80005f6 <main+0x20a>
			  HAL_GPIO_WritePin(RELAY_BUS, RELAY_HIGH, SET); //turn on POS contactor
 80005ac:	2201      	movs	r2, #1
 80005ae:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80005b2:	4852      	ldr	r0, [pc, #328]	; (80006fc <main+0x310>)
 80005b4:	f000 ff77 	bl	80014a6 <HAL_GPIO_WritePin>
			  HAL_Delay(100);
 80005b8:	2064      	movs	r0, #100	; 0x64
 80005ba:	f000 fca7 	bl	8000f0c <HAL_Delay>
			  HAL_GPIO_WritePin(RELAY_BUS, RELAY_PRECHARGE, RESET); //turn off Precharge
 80005be:	2200      	movs	r2, #0
 80005c0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005c4:	484d      	ldr	r0, [pc, #308]	; (80006fc <main+0x310>)
 80005c6:	f000 ff6e 	bl	80014a6 <HAL_GPIO_WritePin>
			  serialPrintln("POS Contact Engaged");
 80005ca:	4851      	ldr	r0, [pc, #324]	; (8000710 <main+0x324>)
 80005cc:	f7ff feee 	bl	80003ac <serialPrintln>
			  sendUSB_Relay_State();
 80005d0:	f7ff fea2 	bl	8000318 <sendUSB_Relay_State>
			  HAL_Delay(100);
 80005d4:	2064      	movs	r0, #100	; 0x64
 80005d6:	f000 fc99 	bl	8000f0c <HAL_Delay>
		  else{
			  allRelayOff();
			  status = DRIVE_FAULT;
			  break;
		  }
		  data = readInputs();
 80005da:	463b      	mov	r3, r7
 80005dc:	4618      	mov	r0, r3
 80005de:	f7ff fdb5 	bl	800014c <readInputs>
 80005e2:	f107 0318 	add.w	r3, r7, #24
 80005e6:	463a      	mov	r2, r7
 80005e8:	6810      	ldr	r0, [r2, #0]
 80005ea:	6851      	ldr	r1, [r2, #4]
 80005ec:	c303      	stmia	r3!, {r0, r1}
		  if(data.chargeEnabled && data.dischargeEnabled){
 80005ee:	7e3b      	ldrb	r3, [r7, #24]
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d106      	bne.n	8000602 <main+0x216>
 80005f4:	e014      	b.n	8000620 <main+0x234>
			  allRelayOff();
 80005f6:	f7ff fe1b 	bl	8000230 <allRelayOff>
			  status = DRIVE_FAULT;
 80005fa:	4b42      	ldr	r3, [pc, #264]	; (8000704 <main+0x318>)
 80005fc:	22fe      	movs	r2, #254	; 0xfe
 80005fe:	701a      	strb	r2, [r3, #0]
			  break;
 8000600:	e132      	b.n	8000868 <main+0x47c>
		  if(data.chargeEnabled && data.dischargeEnabled){
 8000602:	7e7b      	ldrb	r3, [r7, #25]
 8000604:	2b00      	cmp	r3, #0
 8000606:	d00b      	beq.n	8000620 <main+0x234>
			  serialPrintln("Startup Sequence Complete");
 8000608:	4842      	ldr	r0, [pc, #264]	; (8000714 <main+0x328>)
 800060a:	f7ff fecf 	bl	80003ac <serialPrintln>
			  sendUSB_Relay_State();
 800060e:	f7ff fe83 	bl	8000318 <sendUSB_Relay_State>
			  HAL_Delay(100);
 8000612:	2064      	movs	r0, #100	; 0x64
 8000614:	f000 fc7a 	bl	8000f0c <HAL_Delay>
		  else{
			  allRelayOff();
			  status = DRIVE_FAULT;
			  break;
		  }
		  relay_sequence = 0;
 8000618:	4b35      	ldr	r3, [pc, #212]	; (80006f0 <main+0x304>)
 800061a:	2200      	movs	r2, #0
 800061c:	701a      	strb	r2, [r3, #0]
 800061e:	e005      	b.n	800062c <main+0x240>
			  allRelayOff();
 8000620:	f7ff fe06 	bl	8000230 <allRelayOff>
			  status = DRIVE_FAULT;
 8000624:	4b37      	ldr	r3, [pc, #220]	; (8000704 <main+0x318>)
 8000626:	22fe      	movs	r2, #254	; 0xfe
 8000628:	701a      	strb	r2, [r3, #0]
			  break;
 800062a:	e11d      	b.n	8000868 <main+0x47c>
	  }

	  if(currentState == CHARGE_STATE && relay_sequence == 1){
 800062c:	4b2e      	ldr	r3, [pc, #184]	; (80006e8 <main+0x2fc>)
 800062e:	781b      	ldrb	r3, [r3, #0]
 8000630:	2b02      	cmp	r3, #2
 8000632:	f040 8088 	bne.w	8000746 <main+0x35a>
 8000636:	4b2e      	ldr	r3, [pc, #184]	; (80006f0 <main+0x304>)
 8000638:	781b      	ldrb	r3, [r3, #0]
 800063a:	2b01      	cmp	r3, #1
 800063c:	f040 8083 	bne.w	8000746 <main+0x35a>
	  		  InputData data = readInputs();
 8000640:	f107 0310 	add.w	r3, r7, #16
 8000644:	4618      	mov	r0, r3
 8000646:	f7ff fd81 	bl	800014c <readInputs>
	  		  if(data.chargeEnabled && data.chargerDetected){
 800064a:	7c3b      	ldrb	r3, [r7, #16]
 800064c:	2b00      	cmp	r3, #0
 800064e:	d01e      	beq.n	800068e <main+0x2a2>
 8000650:	7cbb      	ldrb	r3, [r7, #18]
 8000652:	2b00      	cmp	r3, #0
 8000654:	d01b      	beq.n	800068e <main+0x2a2>
	  			  HAL_GPIO_WritePin(RELAY_BUS, RELAY_LOW, SET); //turn on lower relay
 8000656:	2201      	movs	r2, #1
 8000658:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800065c:	4827      	ldr	r0, [pc, #156]	; (80006fc <main+0x310>)
 800065e:	f000 ff22 	bl	80014a6 <HAL_GPIO_WritePin>
	  			  serialPrintln("NEG Contact Engaged");
 8000662:	4827      	ldr	r0, [pc, #156]	; (8000700 <main+0x314>)
 8000664:	f7ff fea2 	bl	80003ac <serialPrintln>
	  			  sendUSB_Relay_State();
 8000668:	f7ff fe56 	bl	8000318 <sendUSB_Relay_State>
	  			  HAL_Delay(100);
 800066c:	2064      	movs	r0, #100	; 0x64
 800066e:	f000 fc4d 	bl	8000f0c <HAL_Delay>
	  			  allRelayOff();
	  			  status = CHG_FAULT;
	  			  break;
	  		  }

	  		  data = readInputs();
 8000672:	463b      	mov	r3, r7
 8000674:	4618      	mov	r0, r3
 8000676:	f7ff fd69 	bl	800014c <readInputs>
 800067a:	f107 0310 	add.w	r3, r7, #16
 800067e:	463a      	mov	r2, r7
 8000680:	6810      	ldr	r0, [r2, #0]
 8000682:	6851      	ldr	r1, [r2, #4]
 8000684:	c303      	stmia	r3!, {r0, r1}
	  		  if(data.chargeEnabled && data.chargerDetected){
 8000686:	7c3b      	ldrb	r3, [r7, #16]
 8000688:	2b00      	cmp	r3, #0
 800068a:	d106      	bne.n	800069a <main+0x2ae>
 800068c:	e024      	b.n	80006d8 <main+0x2ec>
	  			  allRelayOff();
 800068e:	f7ff fdcf 	bl	8000230 <allRelayOff>
	  			  status = CHG_FAULT;
 8000692:	4b1c      	ldr	r3, [pc, #112]	; (8000704 <main+0x318>)
 8000694:	22ff      	movs	r2, #255	; 0xff
 8000696:	701a      	strb	r2, [r3, #0]
	  			  break;
 8000698:	e0e6      	b.n	8000868 <main+0x47c>
	  		  if(data.chargeEnabled && data.chargerDetected){
 800069a:	7cbb      	ldrb	r3, [r7, #18]
 800069c:	2b00      	cmp	r3, #0
 800069e:	d01b      	beq.n	80006d8 <main+0x2ec>
	  			  HAL_GPIO_WritePin(RELAY_BUS, RELAY_CHARGE, SET); //turn on charge relay
 80006a0:	2201      	movs	r2, #1
 80006a2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80006a6:	4815      	ldr	r0, [pc, #84]	; (80006fc <main+0x310>)
 80006a8:	f000 fefd 	bl	80014a6 <HAL_GPIO_WritePin>
	  			  serialPrintln("CHG Relay Engaged");
 80006ac:	481a      	ldr	r0, [pc, #104]	; (8000718 <main+0x32c>)
 80006ae:	f7ff fe7d 	bl	80003ac <serialPrintln>
	  			  sendUSB_Relay_State();
 80006b2:	f7ff fe31 	bl	8000318 <sendUSB_Relay_State>
	  			  HAL_Delay(100);
 80006b6:	2064      	movs	r0, #100	; 0x64
 80006b8:	f000 fc28 	bl	8000f0c <HAL_Delay>
	  			  allRelayOff();
	  			  status = CHG_FAULT;
	  			  break;
	  		  }

	  		  data = readInputs();
 80006bc:	463b      	mov	r3, r7
 80006be:	4618      	mov	r0, r3
 80006c0:	f7ff fd44 	bl	800014c <readInputs>
 80006c4:	f107 0310 	add.w	r3, r7, #16
 80006c8:	463a      	mov	r2, r7
 80006ca:	6810      	ldr	r0, [r2, #0]
 80006cc:	6851      	ldr	r1, [r2, #4]
 80006ce:	c303      	stmia	r3!, {r0, r1}
			  if(data.chargeEnabled && data.chargerDetected){
 80006d0:	7c3b      	ldrb	r3, [r7, #16]
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d122      	bne.n	800071c <main+0x330>
 80006d6:	e030      	b.n	800073a <main+0x34e>
	  			  allRelayOff();
 80006d8:	f7ff fdaa 	bl	8000230 <allRelayOff>
	  			  status = CHG_FAULT;
 80006dc:	4b09      	ldr	r3, [pc, #36]	; (8000704 <main+0x318>)
 80006de:	22ff      	movs	r2, #255	; 0xff
 80006e0:	701a      	strb	r2, [r3, #0]
	  			  break;
 80006e2:	e0c1      	b.n	8000868 <main+0x47c>
 80006e4:	20000288 	.word	0x20000288
 80006e8:	20000284 	.word	0x20000284
 80006ec:	080091b4 	.word	0x080091b4
 80006f0:	20000286 	.word	0x20000286
 80006f4:	080091c0 	.word	0x080091c0
 80006f8:	080091d0 	.word	0x080091d0
 80006fc:	40010c00 	.word	0x40010c00
 8000700:	080091dc 	.word	0x080091dc
 8000704:	20000285 	.word	0x20000285
 8000708:	080091f0 	.word	0x080091f0
 800070c:	080091fc 	.word	0x080091fc
 8000710:	08009208 	.word	0x08009208
 8000714:	0800921c 	.word	0x0800921c
 8000718:	08009238 	.word	0x08009238
			  if(data.chargeEnabled && data.chargerDetected){
 800071c:	7cbb      	ldrb	r3, [r7, #18]
 800071e:	2b00      	cmp	r3, #0
 8000720:	d00b      	beq.n	800073a <main+0x34e>
				  serialPrintln("Charging Sequence Complete");
 8000722:	4854      	ldr	r0, [pc, #336]	; (8000874 <main+0x488>)
 8000724:	f7ff fe42 	bl	80003ac <serialPrintln>
				  sendUSB_Relay_State();
 8000728:	f7ff fdf6 	bl	8000318 <sendUSB_Relay_State>
				  HAL_Delay(100);
 800072c:	2064      	movs	r0, #100	; 0x64
 800072e:	f000 fbed 	bl	8000f0c <HAL_Delay>
				  allRelayOff();
				  status = CHG_FAULT;
				  break;
			  }

	  		  relay_sequence = 0;
 8000732:	4b51      	ldr	r3, [pc, #324]	; (8000878 <main+0x48c>)
 8000734:	2200      	movs	r2, #0
 8000736:	701a      	strb	r2, [r3, #0]
 8000738:	e005      	b.n	8000746 <main+0x35a>
				  allRelayOff();
 800073a:	f7ff fd79 	bl	8000230 <allRelayOff>
				  status = CHG_FAULT;
 800073e:	4b4f      	ldr	r3, [pc, #316]	; (800087c <main+0x490>)
 8000740:	22ff      	movs	r2, #255	; 0xff
 8000742:	701a      	strb	r2, [r3, #0]
				  break;
 8000744:	e090      	b.n	8000868 <main+0x47c>
	  }
	  InputData data = readInputs();
 8000746:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800074a:	4618      	mov	r0, r3
 800074c:	f7ff fcfe 	bl	800014c <readInputs>

	  //currentState = updateState();
	  if(currentState == DRIVE_STATE){
 8000750:	4b4b      	ldr	r3, [pc, #300]	; (8000880 <main+0x494>)
 8000752:	781b      	ldrb	r3, [r3, #0]
 8000754:	2b01      	cmp	r3, #1
 8000756:	d119      	bne.n	800078c <main+0x3a0>
		  if(!(data.chargeEnabled && data.dischargeEnabled)){
 8000758:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800075c:	f083 0301 	eor.w	r3, r3, #1
 8000760:	b2db      	uxtb	r3, r3
 8000762:	2b00      	cmp	r3, #0
 8000764:	d106      	bne.n	8000774 <main+0x388>
 8000766:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800076a:	f083 0301 	eor.w	r3, r3, #1
 800076e:	b2db      	uxtb	r3, r3
 8000770:	2b00      	cmp	r3, #0
 8000772:	d008      	beq.n	8000786 <main+0x39a>
			  allRelayOff();
 8000774:	f7ff fd5c 	bl	8000230 <allRelayOff>
			  status = DRIVE_FAULT;
 8000778:	4b40      	ldr	r3, [pc, #256]	; (800087c <main+0x490>)
 800077a:	22fe      	movs	r2, #254	; 0xfe
 800077c:	701a      	strb	r2, [r3, #0]
			  serialPrintln("Drive Fault");
 800077e:	4841      	ldr	r0, [pc, #260]	; (8000884 <main+0x498>)
 8000780:	f7ff fe14 	bl	80003ac <serialPrintln>
 8000784:	e002      	b.n	800078c <main+0x3a0>
		  }
		  else{
			  status = DRIVE_GOOD;
 8000786:	4b3d      	ldr	r3, [pc, #244]	; (800087c <main+0x490>)
 8000788:	2201      	movs	r2, #1
 800078a:	701a      	strb	r2, [r3, #0]
		  }
	  }

	  if(currentState == CHARGE_STATE){
 800078c:	4b3c      	ldr	r3, [pc, #240]	; (8000880 <main+0x494>)
 800078e:	781b      	ldrb	r3, [r3, #0]
 8000790:	2b02      	cmp	r3, #2
 8000792:	d122      	bne.n	80007da <main+0x3ee>
		  if(!data.chargeEnabled){ //charge disabled by BMS
 8000794:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000798:	f083 0301 	eor.w	r3, r3, #1
 800079c:	b2db      	uxtb	r3, r3
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d007      	beq.n	80007b2 <main+0x3c6>
			  allRelayOff(); //shutdown
 80007a2:	f7ff fd45 	bl	8000230 <allRelayOff>
			  status = CHG_FAULT;
 80007a6:	4b35      	ldr	r3, [pc, #212]	; (800087c <main+0x490>)
 80007a8:	22ff      	movs	r2, #255	; 0xff
 80007aa:	701a      	strb	r2, [r3, #0]
			  serialPrintln("CHG Fault");
 80007ac:	4836      	ldr	r0, [pc, #216]	; (8000888 <main+0x49c>)
 80007ae:	f7ff fdfd 	bl	80003ac <serialPrintln>
		  }
		  if(!data.chargerDetected && data.chargeEnabled){ //done charging or unplugged but not fault
 80007b2:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80007b6:	f083 0301 	eor.w	r3, r3, #1
 80007ba:	b2db      	uxtb	r3, r3
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d009      	beq.n	80007d4 <main+0x3e8>
 80007c0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d005      	beq.n	80007d4 <main+0x3e8>
			  allRelayOff(); //turn off all relays
 80007c8:	f7ff fd32 	bl	8000230 <allRelayOff>
			  status = CHG_COMPLETE;
 80007cc:	4b2b      	ldr	r3, [pc, #172]	; (800087c <main+0x490>)
 80007ce:	2203      	movs	r2, #3
 80007d0:	701a      	strb	r2, [r3, #0]
 80007d2:	e002      	b.n	80007da <main+0x3ee>
		  }
		  else{
			  status = CHG_GOOD;
 80007d4:	4b29      	ldr	r3, [pc, #164]	; (800087c <main+0x490>)
 80007d6:	2202      	movs	r2, #2
 80007d8:	701a      	strb	r2, [r3, #0]
		  }
	  }

	  if(currentState == CHG_COMPLETE){
 80007da:	4b29      	ldr	r3, [pc, #164]	; (8000880 <main+0x494>)
 80007dc:	781b      	ldrb	r3, [r3, #0]
 80007de:	2b03      	cmp	r3, #3
 80007e0:	d102      	bne.n	80007e8 <main+0x3fc>
		  currentState = IDLE_STATE; //back to startup
 80007e2:	4b27      	ldr	r3, [pc, #156]	; (8000880 <main+0x494>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	701a      	strb	r2, [r3, #0]
	  }

	  if(status == CHG_FAULT || status == DRIVE_FAULT){ //if in fault state
 80007e8:	4b24      	ldr	r3, [pc, #144]	; (800087c <main+0x490>)
 80007ea:	781b      	ldrb	r3, [r3, #0]
 80007ec:	2bff      	cmp	r3, #255	; 0xff
 80007ee:	d003      	beq.n	80007f8 <main+0x40c>
 80007f0:	4b22      	ldr	r3, [pc, #136]	; (800087c <main+0x490>)
 80007f2:	781b      	ldrb	r3, [r3, #0]
 80007f4:	2bfe      	cmp	r3, #254	; 0xfe
 80007f6:	d116      	bne.n	8000826 <main+0x43a>
		  allRelayOff();
 80007f8:	f7ff fd1a 	bl	8000230 <allRelayOff>
		  HAL_Delay(5000); //wait 5000ms
 80007fc:	f241 3088 	movw	r0, #5000	; 0x1388
 8000800:	f000 fb84 	bl	8000f0c <HAL_Delay>
		  InputData data = readInputs(); //read the BMS states
 8000804:	f107 0308 	add.w	r3, r7, #8
 8000808:	4618      	mov	r0, r3
 800080a:	f7ff fc9f 	bl	800014c <readInputs>
		  if(data.chargeEnabled && data.dischargeEnabled){ //if everything is good
 800080e:	7a3b      	ldrb	r3, [r7, #8]
 8000810:	2b00      	cmp	r3, #0
 8000812:	d008      	beq.n	8000826 <main+0x43a>
 8000814:	7a7b      	ldrb	r3, [r7, #9]
 8000816:	2b00      	cmp	r3, #0
 8000818:	d005      	beq.n	8000826 <main+0x43a>
			  currentState = IDLE_STATE; //back to startup
 800081a:	4b19      	ldr	r3, [pc, #100]	; (8000880 <main+0x494>)
 800081c:	2200      	movs	r2, #0
 800081e:	701a      	strb	r2, [r3, #0]
			  status = DRIVE_GOOD;
 8000820:	4b16      	ldr	r3, [pc, #88]	; (800087c <main+0x490>)
 8000822:	2201      	movs	r2, #1
 8000824:	701a      	strb	r2, [r3, #0]
		  }

	  }

	  if(i%10 == 0){
 8000826:	4b19      	ldr	r3, [pc, #100]	; (800088c <main+0x4a0>)
 8000828:	6819      	ldr	r1, [r3, #0]
 800082a:	4b19      	ldr	r3, [pc, #100]	; (8000890 <main+0x4a4>)
 800082c:	fb83 2301 	smull	r2, r3, r3, r1
 8000830:	109a      	asrs	r2, r3, #2
 8000832:	17cb      	asrs	r3, r1, #31
 8000834:	1ad2      	subs	r2, r2, r3
 8000836:	4613      	mov	r3, r2
 8000838:	009b      	lsls	r3, r3, #2
 800083a:	4413      	add	r3, r2
 800083c:	005b      	lsls	r3, r3, #1
 800083e:	1aca      	subs	r2, r1, r3
 8000840:	2a00      	cmp	r2, #0
 8000842:	d103      	bne.n	800084c <main+0x460>
		  sendUSB_BMS_state();
 8000844:	f7ff fd12 	bl	800026c <sendUSB_BMS_state>
		  sendUSB_Relay_State();
 8000848:	f7ff fd66 	bl	8000318 <sendUSB_Relay_State>
	  }
	  else{

	  }

	  i++;
 800084c:	4b0f      	ldr	r3, [pc, #60]	; (800088c <main+0x4a0>)
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	3301      	adds	r3, #1
 8000852:	4a0e      	ldr	r2, [pc, #56]	; (800088c <main+0x4a0>)
 8000854:	6013      	str	r3, [r2, #0]

	  HAL_Delay(100);
 8000856:	2064      	movs	r0, #100	; 0x64
 8000858:	f000 fb58 	bl	8000f0c <HAL_Delay>
	  HAL_GPIO_TogglePin(LED_BUS, LED_PIN);
 800085c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000860:	480c      	ldr	r0, [pc, #48]	; (8000894 <main+0x4a8>)
 8000862:	f000 fe38 	bl	80014d6 <HAL_GPIO_TogglePin>
  {
 8000866:	e5d0      	b.n	800040a <main+0x1e>
 8000868:	2300      	movs	r3, #0
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}
 800086a:	4618      	mov	r0, r3
 800086c:	3730      	adds	r7, #48	; 0x30
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}
 8000872:	bf00      	nop
 8000874:	0800924c 	.word	0x0800924c
 8000878:	20000286 	.word	0x20000286
 800087c:	20000285 	.word	0x20000285
 8000880:	20000284 	.word	0x20000284
 8000884:	08009268 	.word	0x08009268
 8000888:	08009274 	.word	0x08009274
 800088c:	20000288 	.word	0x20000288
 8000890:	66666667 	.word	0x66666667
 8000894:	40011000 	.word	0x40011000

08000898 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b094      	sub	sp, #80	; 0x50
 800089c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800089e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80008a2:	2228      	movs	r2, #40	; 0x28
 80008a4:	2100      	movs	r1, #0
 80008a6:	4618      	mov	r0, r3
 80008a8:	f007 ff96 	bl	80087d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008ac:	f107 0314 	add.w	r3, r7, #20
 80008b0:	2200      	movs	r2, #0
 80008b2:	601a      	str	r2, [r3, #0]
 80008b4:	605a      	str	r2, [r3, #4]
 80008b6:	609a      	str	r2, [r3, #8]
 80008b8:	60da      	str	r2, [r3, #12]
 80008ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008bc:	1d3b      	adds	r3, r7, #4
 80008be:	2200      	movs	r2, #0
 80008c0:	601a      	str	r2, [r3, #0]
 80008c2:	605a      	str	r2, [r3, #4]
 80008c4:	609a      	str	r2, [r3, #8]
 80008c6:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008c8:	2301      	movs	r3, #1
 80008ca:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008cc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80008d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 80008d2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80008d6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008d8:	2301      	movs	r3, #1
 80008da:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008dc:	2302      	movs	r3, #2
 80008de:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008e0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80008e4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80008e6:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80008ea:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008ec:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80008f0:	4618      	mov	r0, r3
 80008f2:	f002 faef 	bl	8002ed4 <HAL_RCC_OscConfig>
 80008f6:	4603      	mov	r3, r0
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d001      	beq.n	8000900 <SystemClock_Config+0x68>
  {
    Error_Handler();
 80008fc:	f000 f93c 	bl	8000b78 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000900:	230f      	movs	r3, #15
 8000902:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000904:	2302      	movs	r3, #2
 8000906:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000908:	2300      	movs	r3, #0
 800090a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800090c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000910:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000912:	2300      	movs	r3, #0
 8000914:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000916:	f107 0314 	add.w	r3, r7, #20
 800091a:	2102      	movs	r1, #2
 800091c:	4618      	mov	r0, r3
 800091e:	f002 fd5b 	bl	80033d8 <HAL_RCC_ClockConfig>
 8000922:	4603      	mov	r3, r0
 8000924:	2b00      	cmp	r3, #0
 8000926:	d001      	beq.n	800092c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000928:	f000 f926 	bl	8000b78 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800092c:	2310      	movs	r3, #16
 800092e:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000930:	2300      	movs	r3, #0
 8000932:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000934:	1d3b      	adds	r3, r7, #4
 8000936:	4618      	mov	r0, r3
 8000938:	f002 fee8 	bl	800370c <HAL_RCCEx_PeriphCLKConfig>
 800093c:	4603      	mov	r3, r0
 800093e:	2b00      	cmp	r3, #0
 8000940:	d001      	beq.n	8000946 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000942:	f000 f919 	bl	8000b78 <Error_Handler>
  }
}
 8000946:	bf00      	nop
 8000948:	3750      	adds	r7, #80	; 0x50
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}
	...

08000950 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000954:	4b17      	ldr	r3, [pc, #92]	; (80009b4 <MX_SPI1_Init+0x64>)
 8000956:	4a18      	ldr	r2, [pc, #96]	; (80009b8 <MX_SPI1_Init+0x68>)
 8000958:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800095a:	4b16      	ldr	r3, [pc, #88]	; (80009b4 <MX_SPI1_Init+0x64>)
 800095c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000960:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000962:	4b14      	ldr	r3, [pc, #80]	; (80009b4 <MX_SPI1_Init+0x64>)
 8000964:	2200      	movs	r2, #0
 8000966:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000968:	4b12      	ldr	r3, [pc, #72]	; (80009b4 <MX_SPI1_Init+0x64>)
 800096a:	2200      	movs	r2, #0
 800096c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800096e:	4b11      	ldr	r3, [pc, #68]	; (80009b4 <MX_SPI1_Init+0x64>)
 8000970:	2200      	movs	r2, #0
 8000972:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000974:	4b0f      	ldr	r3, [pc, #60]	; (80009b4 <MX_SPI1_Init+0x64>)
 8000976:	2200      	movs	r2, #0
 8000978:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800097a:	4b0e      	ldr	r3, [pc, #56]	; (80009b4 <MX_SPI1_Init+0x64>)
 800097c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000980:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000982:	4b0c      	ldr	r3, [pc, #48]	; (80009b4 <MX_SPI1_Init+0x64>)
 8000984:	2218      	movs	r2, #24
 8000986:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000988:	4b0a      	ldr	r3, [pc, #40]	; (80009b4 <MX_SPI1_Init+0x64>)
 800098a:	2200      	movs	r2, #0
 800098c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800098e:	4b09      	ldr	r3, [pc, #36]	; (80009b4 <MX_SPI1_Init+0x64>)
 8000990:	2200      	movs	r2, #0
 8000992:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000994:	4b07      	ldr	r3, [pc, #28]	; (80009b4 <MX_SPI1_Init+0x64>)
 8000996:	2200      	movs	r2, #0
 8000998:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800099a:	4b06      	ldr	r3, [pc, #24]	; (80009b4 <MX_SPI1_Init+0x64>)
 800099c:	220a      	movs	r2, #10
 800099e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80009a0:	4804      	ldr	r0, [pc, #16]	; (80009b4 <MX_SPI1_Init+0x64>)
 80009a2:	f002 ff69 	bl	8003878 <HAL_SPI_Init>
 80009a6:	4603      	mov	r3, r0
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d001      	beq.n	80009b0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80009ac:	f000 f8e4 	bl	8000b78 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80009b0:	bf00      	nop
 80009b2:	bd80      	pop	{r7, pc}
 80009b4:	200001e8 	.word	0x200001e8
 80009b8:	40013000 	.word	0x40013000

080009bc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80009c0:	4b11      	ldr	r3, [pc, #68]	; (8000a08 <MX_USART1_UART_Init+0x4c>)
 80009c2:	4a12      	ldr	r2, [pc, #72]	; (8000a0c <MX_USART1_UART_Init+0x50>)
 80009c4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80009c6:	4b10      	ldr	r3, [pc, #64]	; (8000a08 <MX_USART1_UART_Init+0x4c>)
 80009c8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009cc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80009ce:	4b0e      	ldr	r3, [pc, #56]	; (8000a08 <MX_USART1_UART_Init+0x4c>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80009d4:	4b0c      	ldr	r3, [pc, #48]	; (8000a08 <MX_USART1_UART_Init+0x4c>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80009da:	4b0b      	ldr	r3, [pc, #44]	; (8000a08 <MX_USART1_UART_Init+0x4c>)
 80009dc:	2200      	movs	r2, #0
 80009de:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80009e0:	4b09      	ldr	r3, [pc, #36]	; (8000a08 <MX_USART1_UART_Init+0x4c>)
 80009e2:	220c      	movs	r2, #12
 80009e4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009e6:	4b08      	ldr	r3, [pc, #32]	; (8000a08 <MX_USART1_UART_Init+0x4c>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80009ec:	4b06      	ldr	r3, [pc, #24]	; (8000a08 <MX_USART1_UART_Init+0x4c>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80009f2:	4805      	ldr	r0, [pc, #20]	; (8000a08 <MX_USART1_UART_Init+0x4c>)
 80009f4:	f002 ffc4 	bl	8003980 <HAL_UART_Init>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d001      	beq.n	8000a02 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80009fe:	f000 f8bb 	bl	8000b78 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000a02:	bf00      	nop
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	20000240 	.word	0x20000240
 8000a0c:	40013800 	.word	0x40013800

08000a10 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b088      	sub	sp, #32
 8000a14:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a16:	f107 0310 	add.w	r3, r7, #16
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	601a      	str	r2, [r3, #0]
 8000a1e:	605a      	str	r2, [r3, #4]
 8000a20:	609a      	str	r2, [r3, #8]
 8000a22:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a24:	4b4f      	ldr	r3, [pc, #316]	; (8000b64 <MX_GPIO_Init+0x154>)
 8000a26:	699b      	ldr	r3, [r3, #24]
 8000a28:	4a4e      	ldr	r2, [pc, #312]	; (8000b64 <MX_GPIO_Init+0x154>)
 8000a2a:	f043 0310 	orr.w	r3, r3, #16
 8000a2e:	6193      	str	r3, [r2, #24]
 8000a30:	4b4c      	ldr	r3, [pc, #304]	; (8000b64 <MX_GPIO_Init+0x154>)
 8000a32:	699b      	ldr	r3, [r3, #24]
 8000a34:	f003 0310 	and.w	r3, r3, #16
 8000a38:	60fb      	str	r3, [r7, #12]
 8000a3a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a3c:	4b49      	ldr	r3, [pc, #292]	; (8000b64 <MX_GPIO_Init+0x154>)
 8000a3e:	699b      	ldr	r3, [r3, #24]
 8000a40:	4a48      	ldr	r2, [pc, #288]	; (8000b64 <MX_GPIO_Init+0x154>)
 8000a42:	f043 0320 	orr.w	r3, r3, #32
 8000a46:	6193      	str	r3, [r2, #24]
 8000a48:	4b46      	ldr	r3, [pc, #280]	; (8000b64 <MX_GPIO_Init+0x154>)
 8000a4a:	699b      	ldr	r3, [r3, #24]
 8000a4c:	f003 0320 	and.w	r3, r3, #32
 8000a50:	60bb      	str	r3, [r7, #8]
 8000a52:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a54:	4b43      	ldr	r3, [pc, #268]	; (8000b64 <MX_GPIO_Init+0x154>)
 8000a56:	699b      	ldr	r3, [r3, #24]
 8000a58:	4a42      	ldr	r2, [pc, #264]	; (8000b64 <MX_GPIO_Init+0x154>)
 8000a5a:	f043 0304 	orr.w	r3, r3, #4
 8000a5e:	6193      	str	r3, [r2, #24]
 8000a60:	4b40      	ldr	r3, [pc, #256]	; (8000b64 <MX_GPIO_Init+0x154>)
 8000a62:	699b      	ldr	r3, [r3, #24]
 8000a64:	f003 0304 	and.w	r3, r3, #4
 8000a68:	607b      	str	r3, [r7, #4]
 8000a6a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a6c:	4b3d      	ldr	r3, [pc, #244]	; (8000b64 <MX_GPIO_Init+0x154>)
 8000a6e:	699b      	ldr	r3, [r3, #24]
 8000a70:	4a3c      	ldr	r2, [pc, #240]	; (8000b64 <MX_GPIO_Init+0x154>)
 8000a72:	f043 0308 	orr.w	r3, r3, #8
 8000a76:	6193      	str	r3, [r2, #24]
 8000a78:	4b3a      	ldr	r3, [pc, #232]	; (8000b64 <MX_GPIO_Init+0x154>)
 8000a7a:	699b      	ldr	r3, [r3, #24]
 8000a7c:	f003 0308 	and.w	r3, r3, #8
 8000a80:	603b      	str	r3, [r7, #0]
 8000a82:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000a84:	2200      	movs	r2, #0
 8000a86:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a8a:	4837      	ldr	r0, [pc, #220]	; (8000b68 <MX_GPIO_Init+0x158>)
 8000a8c:	f000 fd0b 	bl	80014a6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 8000a90:	2200      	movs	r2, #0
 8000a92:	f44f 718f 	mov.w	r1, #286	; 0x11e
 8000a96:	4835      	ldr	r0, [pc, #212]	; (8000b6c <MX_GPIO_Init+0x15c>)
 8000a98:	f000 fd05 	bl	80014a6 <HAL_GPIO_WritePin>
                          |GPIO_PIN_8, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	f64f 4113 	movw	r1, #64531	; 0xfc13
 8000aa2:	4833      	ldr	r0, [pc, #204]	; (8000b70 <MX_GPIO_Init+0x160>)
 8000aa4:	f000 fcff 	bl	80014a6 <HAL_GPIO_WritePin>
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_4, GPIO_PIN_RESET);

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000aa8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000aac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aae:	2301      	movs	r3, #1
 8000ab0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab6:	2302      	movs	r3, #2
 8000ab8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000aba:	f107 0310 	add.w	r3, r7, #16
 8000abe:	4619      	mov	r1, r3
 8000ac0:	4829      	ldr	r0, [pc, #164]	; (8000b68 <MX_GPIO_Init+0x158>)
 8000ac2:	f000 fb55 	bl	8001170 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000ac6:	2301      	movs	r3, #1
 8000ac8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000aca:	4b2a      	ldr	r3, [pc, #168]	; (8000b74 <MX_GPIO_Init+0x164>)
 8000acc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ace:	2301      	movs	r3, #1
 8000ad0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ad2:	f107 0310 	add.w	r3, r7, #16
 8000ad6:	4619      	mov	r1, r3
 8000ad8:	4824      	ldr	r0, [pc, #144]	; (8000b6c <MX_GPIO_Init+0x15c>)
 8000ada:	f000 fb49 	bl	8001170 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA3 PA4
                           PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 8000ade:	f44f 738f 	mov.w	r3, #286	; 0x11e
 8000ae2:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ae4:	2301      	movs	r3, #1
 8000ae6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aec:	2302      	movs	r3, #2
 8000aee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000af0:	f107 0310 	add.w	r3, r7, #16
 8000af4:	4619      	mov	r1, r3
 8000af6:	481d      	ldr	r0, [pc, #116]	; (8000b6c <MX_GPIO_Init+0x15c>)
 8000af8:	f000 fb3a 	bl	8001170 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB10 PB11
                           PB12 PB13 PB14 PB15
                           PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11
 8000afc:	f64f 4313 	movw	r3, #64531	; 0xfc13
 8000b00:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b02:	2301      	movs	r3, #1
 8000b04:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b06:	2300      	movs	r3, #0
 8000b08:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b0a:	2302      	movs	r3, #2
 8000b0c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b0e:	f107 0310 	add.w	r3, r7, #16
 8000b12:	4619      	mov	r1, r3
 8000b14:	4816      	ldr	r0, [pc, #88]	; (8000b70 <MX_GPIO_Init+0x160>)
 8000b16:	f000 fb2b 	bl	8001170 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000b1a:	2308      	movs	r3, #8
 8000b1c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b22:	2301      	movs	r3, #1
 8000b24:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b26:	f107 0310 	add.w	r3, r7, #16
 8000b2a:	4619      	mov	r1, r3
 8000b2c:	4810      	ldr	r0, [pc, #64]	; (8000b70 <MX_GPIO_Init+0x160>)
 8000b2e:	f000 fb1f 	bl	8001170 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB5 PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000b32:	23e0      	movs	r3, #224	; 0xe0
 8000b34:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b36:	2300      	movs	r3, #0
 8000b38:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b3e:	f107 0310 	add.w	r3, r7, #16
 8000b42:	4619      	mov	r1, r3
 8000b44:	480a      	ldr	r0, [pc, #40]	; (8000b70 <MX_GPIO_Init+0x160>)
 8000b46:	f000 fb13 	bl	8001170 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	2100      	movs	r1, #0
 8000b4e:	2006      	movs	r0, #6
 8000b50:	f000 fad7 	bl	8001102 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000b54:	2006      	movs	r0, #6
 8000b56:	f000 faf0 	bl	800113a <HAL_NVIC_EnableIRQ>

}
 8000b5a:	bf00      	nop
 8000b5c:	3720      	adds	r7, #32
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	40021000 	.word	0x40021000
 8000b68:	40011000 	.word	0x40011000
 8000b6c:	40010800 	.word	0x40010800
 8000b70:	40010c00 	.word	0x40010c00
 8000b74:	10110000 	.word	0x10110000

08000b78 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b7c:	b672      	cpsid	i
}
 8000b7e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b80:	e7fe      	b.n	8000b80 <Error_Handler+0x8>
	...

08000b84 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	b085      	sub	sp, #20
 8000b88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000b8a:	4b15      	ldr	r3, [pc, #84]	; (8000be0 <HAL_MspInit+0x5c>)
 8000b8c:	699b      	ldr	r3, [r3, #24]
 8000b8e:	4a14      	ldr	r2, [pc, #80]	; (8000be0 <HAL_MspInit+0x5c>)
 8000b90:	f043 0301 	orr.w	r3, r3, #1
 8000b94:	6193      	str	r3, [r2, #24]
 8000b96:	4b12      	ldr	r3, [pc, #72]	; (8000be0 <HAL_MspInit+0x5c>)
 8000b98:	699b      	ldr	r3, [r3, #24]
 8000b9a:	f003 0301 	and.w	r3, r3, #1
 8000b9e:	60bb      	str	r3, [r7, #8]
 8000ba0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ba2:	4b0f      	ldr	r3, [pc, #60]	; (8000be0 <HAL_MspInit+0x5c>)
 8000ba4:	69db      	ldr	r3, [r3, #28]
 8000ba6:	4a0e      	ldr	r2, [pc, #56]	; (8000be0 <HAL_MspInit+0x5c>)
 8000ba8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bac:	61d3      	str	r3, [r2, #28]
 8000bae:	4b0c      	ldr	r3, [pc, #48]	; (8000be0 <HAL_MspInit+0x5c>)
 8000bb0:	69db      	ldr	r3, [r3, #28]
 8000bb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bb6:	607b      	str	r3, [r7, #4]
 8000bb8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000bba:	4b0a      	ldr	r3, [pc, #40]	; (8000be4 <HAL_MspInit+0x60>)
 8000bbc:	685b      	ldr	r3, [r3, #4]
 8000bbe:	60fb      	str	r3, [r7, #12]
 8000bc0:	68fb      	ldr	r3, [r7, #12]
 8000bc2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000bc6:	60fb      	str	r3, [r7, #12]
 8000bc8:	68fb      	ldr	r3, [r7, #12]
 8000bca:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000bce:	60fb      	str	r3, [r7, #12]
 8000bd0:	4a04      	ldr	r2, [pc, #16]	; (8000be4 <HAL_MspInit+0x60>)
 8000bd2:	68fb      	ldr	r3, [r7, #12]
 8000bd4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bd6:	bf00      	nop
 8000bd8:	3714      	adds	r7, #20
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bc80      	pop	{r7}
 8000bde:	4770      	bx	lr
 8000be0:	40021000 	.word	0x40021000
 8000be4:	40010000 	.word	0x40010000

08000be8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b088      	sub	sp, #32
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bf0:	f107 0310 	add.w	r3, r7, #16
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	601a      	str	r2, [r3, #0]
 8000bf8:	605a      	str	r2, [r3, #4]
 8000bfa:	609a      	str	r2, [r3, #8]
 8000bfc:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	4a1b      	ldr	r2, [pc, #108]	; (8000c70 <HAL_SPI_MspInit+0x88>)
 8000c04:	4293      	cmp	r3, r2
 8000c06:	d12f      	bne.n	8000c68 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000c08:	4b1a      	ldr	r3, [pc, #104]	; (8000c74 <HAL_SPI_MspInit+0x8c>)
 8000c0a:	699b      	ldr	r3, [r3, #24]
 8000c0c:	4a19      	ldr	r2, [pc, #100]	; (8000c74 <HAL_SPI_MspInit+0x8c>)
 8000c0e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000c12:	6193      	str	r3, [r2, #24]
 8000c14:	4b17      	ldr	r3, [pc, #92]	; (8000c74 <HAL_SPI_MspInit+0x8c>)
 8000c16:	699b      	ldr	r3, [r3, #24]
 8000c18:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c1c:	60fb      	str	r3, [r7, #12]
 8000c1e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c20:	4b14      	ldr	r3, [pc, #80]	; (8000c74 <HAL_SPI_MspInit+0x8c>)
 8000c22:	699b      	ldr	r3, [r3, #24]
 8000c24:	4a13      	ldr	r2, [pc, #76]	; (8000c74 <HAL_SPI_MspInit+0x8c>)
 8000c26:	f043 0304 	orr.w	r3, r3, #4
 8000c2a:	6193      	str	r3, [r2, #24]
 8000c2c:	4b11      	ldr	r3, [pc, #68]	; (8000c74 <HAL_SPI_MspInit+0x8c>)
 8000c2e:	699b      	ldr	r3, [r3, #24]
 8000c30:	f003 0304 	and.w	r3, r3, #4
 8000c34:	60bb      	str	r3, [r7, #8]
 8000c36:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000c38:	23a0      	movs	r3, #160	; 0xa0
 8000c3a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c3c:	2302      	movs	r3, #2
 8000c3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c40:	2303      	movs	r3, #3
 8000c42:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c44:	f107 0310 	add.w	r3, r7, #16
 8000c48:	4619      	mov	r1, r3
 8000c4a:	480b      	ldr	r0, [pc, #44]	; (8000c78 <HAL_SPI_MspInit+0x90>)
 8000c4c:	f000 fa90 	bl	8001170 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000c50:	2340      	movs	r3, #64	; 0x40
 8000c52:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c54:	2300      	movs	r3, #0
 8000c56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c5c:	f107 0310 	add.w	r3, r7, #16
 8000c60:	4619      	mov	r1, r3
 8000c62:	4805      	ldr	r0, [pc, #20]	; (8000c78 <HAL_SPI_MspInit+0x90>)
 8000c64:	f000 fa84 	bl	8001170 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000c68:	bf00      	nop
 8000c6a:	3720      	adds	r7, #32
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bd80      	pop	{r7, pc}
 8000c70:	40013000 	.word	0x40013000
 8000c74:	40021000 	.word	0x40021000
 8000c78:	40010800 	.word	0x40010800

08000c7c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b088      	sub	sp, #32
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c84:	f107 0310 	add.w	r3, r7, #16
 8000c88:	2200      	movs	r2, #0
 8000c8a:	601a      	str	r2, [r3, #0]
 8000c8c:	605a      	str	r2, [r3, #4]
 8000c8e:	609a      	str	r2, [r3, #8]
 8000c90:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	4a1c      	ldr	r2, [pc, #112]	; (8000d08 <HAL_UART_MspInit+0x8c>)
 8000c98:	4293      	cmp	r3, r2
 8000c9a:	d131      	bne.n	8000d00 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c9c:	4b1b      	ldr	r3, [pc, #108]	; (8000d0c <HAL_UART_MspInit+0x90>)
 8000c9e:	699b      	ldr	r3, [r3, #24]
 8000ca0:	4a1a      	ldr	r2, [pc, #104]	; (8000d0c <HAL_UART_MspInit+0x90>)
 8000ca2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ca6:	6193      	str	r3, [r2, #24]
 8000ca8:	4b18      	ldr	r3, [pc, #96]	; (8000d0c <HAL_UART_MspInit+0x90>)
 8000caa:	699b      	ldr	r3, [r3, #24]
 8000cac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cb0:	60fb      	str	r3, [r7, #12]
 8000cb2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cb4:	4b15      	ldr	r3, [pc, #84]	; (8000d0c <HAL_UART_MspInit+0x90>)
 8000cb6:	699b      	ldr	r3, [r3, #24]
 8000cb8:	4a14      	ldr	r2, [pc, #80]	; (8000d0c <HAL_UART_MspInit+0x90>)
 8000cba:	f043 0304 	orr.w	r3, r3, #4
 8000cbe:	6193      	str	r3, [r2, #24]
 8000cc0:	4b12      	ldr	r3, [pc, #72]	; (8000d0c <HAL_UART_MspInit+0x90>)
 8000cc2:	699b      	ldr	r3, [r3, #24]
 8000cc4:	f003 0304 	and.w	r3, r3, #4
 8000cc8:	60bb      	str	r3, [r7, #8]
 8000cca:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000ccc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000cd0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cd2:	2302      	movs	r3, #2
 8000cd4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000cd6:	2303      	movs	r3, #3
 8000cd8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cda:	f107 0310 	add.w	r3, r7, #16
 8000cde:	4619      	mov	r1, r3
 8000ce0:	480b      	ldr	r0, [pc, #44]	; (8000d10 <HAL_UART_MspInit+0x94>)
 8000ce2:	f000 fa45 	bl	8001170 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000ce6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000cea:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cec:	2300      	movs	r3, #0
 8000cee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cf4:	f107 0310 	add.w	r3, r7, #16
 8000cf8:	4619      	mov	r1, r3
 8000cfa:	4805      	ldr	r0, [pc, #20]	; (8000d10 <HAL_UART_MspInit+0x94>)
 8000cfc:	f000 fa38 	bl	8001170 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000d00:	bf00      	nop
 8000d02:	3720      	adds	r7, #32
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd80      	pop	{r7, pc}
 8000d08:	40013800 	.word	0x40013800
 8000d0c:	40021000 	.word	0x40021000
 8000d10:	40010800 	.word	0x40010800

08000d14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d18:	e7fe      	b.n	8000d18 <NMI_Handler+0x4>

08000d1a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d1a:	b480      	push	{r7}
 8000d1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d1e:	e7fe      	b.n	8000d1e <HardFault_Handler+0x4>

08000d20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d24:	e7fe      	b.n	8000d24 <MemManage_Handler+0x4>

08000d26 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d26:	b480      	push	{r7}
 8000d28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d2a:	e7fe      	b.n	8000d2a <BusFault_Handler+0x4>

08000d2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d30:	e7fe      	b.n	8000d30 <UsageFault_Handler+0x4>

08000d32 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d32:	b480      	push	{r7}
 8000d34:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d36:	bf00      	nop
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bc80      	pop	{r7}
 8000d3c:	4770      	bx	lr

08000d3e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d3e:	b480      	push	{r7}
 8000d40:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d42:	bf00      	nop
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bc80      	pop	{r7}
 8000d48:	4770      	bx	lr

08000d4a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d4a:	b480      	push	{r7}
 8000d4c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d4e:	bf00      	nop
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bc80      	pop	{r7}
 8000d54:	4770      	bx	lr

08000d56 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d56:	b580      	push	{r7, lr}
 8000d58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d5a:	f000 f8bb 	bl	8000ed4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d5e:	bf00      	nop
 8000d60:	bd80      	pop	{r7, pc}

08000d62 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000d62:	b580      	push	{r7, lr}
 8000d64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000d66:	2001      	movs	r0, #1
 8000d68:	f000 fbce 	bl	8001508 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000d6c:	bf00      	nop
 8000d6e:	bd80      	pop	{r7, pc}

08000d70 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000d74:	4802      	ldr	r0, [pc, #8]	; (8000d80 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000d76:	f000 fd1a 	bl	80017ae <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000d7a:	bf00      	nop
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	20000f64 	.word	0x20000f64

08000d84 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b086      	sub	sp, #24
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d8c:	4a14      	ldr	r2, [pc, #80]	; (8000de0 <_sbrk+0x5c>)
 8000d8e:	4b15      	ldr	r3, [pc, #84]	; (8000de4 <_sbrk+0x60>)
 8000d90:	1ad3      	subs	r3, r2, r3
 8000d92:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d94:	697b      	ldr	r3, [r7, #20]
 8000d96:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d98:	4b13      	ldr	r3, [pc, #76]	; (8000de8 <_sbrk+0x64>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d102      	bne.n	8000da6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000da0:	4b11      	ldr	r3, [pc, #68]	; (8000de8 <_sbrk+0x64>)
 8000da2:	4a12      	ldr	r2, [pc, #72]	; (8000dec <_sbrk+0x68>)
 8000da4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000da6:	4b10      	ldr	r3, [pc, #64]	; (8000de8 <_sbrk+0x64>)
 8000da8:	681a      	ldr	r2, [r3, #0]
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	4413      	add	r3, r2
 8000dae:	693a      	ldr	r2, [r7, #16]
 8000db0:	429a      	cmp	r2, r3
 8000db2:	d207      	bcs.n	8000dc4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000db4:	f007 fd18 	bl	80087e8 <__errno>
 8000db8:	4603      	mov	r3, r0
 8000dba:	220c      	movs	r2, #12
 8000dbc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000dbe:	f04f 33ff 	mov.w	r3, #4294967295
 8000dc2:	e009      	b.n	8000dd8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000dc4:	4b08      	ldr	r3, [pc, #32]	; (8000de8 <_sbrk+0x64>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000dca:	4b07      	ldr	r3, [pc, #28]	; (8000de8 <_sbrk+0x64>)
 8000dcc:	681a      	ldr	r2, [r3, #0]
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	4413      	add	r3, r2
 8000dd2:	4a05      	ldr	r2, [pc, #20]	; (8000de8 <_sbrk+0x64>)
 8000dd4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000dd6:	68fb      	ldr	r3, [r7, #12]
}
 8000dd8:	4618      	mov	r0, r3
 8000dda:	3718      	adds	r7, #24
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd80      	pop	{r7, pc}
 8000de0:	20005000 	.word	0x20005000
 8000de4:	00000400 	.word	0x00000400
 8000de8:	2000028c 	.word	0x2000028c
 8000dec:	200015b8 	.word	0x200015b8

08000df0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000df0:	b480      	push	{r7}
 8000df2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000df4:	bf00      	nop
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bc80      	pop	{r7}
 8000dfa:	4770      	bx	lr

08000dfc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000dfc:	480c      	ldr	r0, [pc, #48]	; (8000e30 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000dfe:	490d      	ldr	r1, [pc, #52]	; (8000e34 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e00:	4a0d      	ldr	r2, [pc, #52]	; (8000e38 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e02:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e04:	e002      	b.n	8000e0c <LoopCopyDataInit>

08000e06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e0a:	3304      	adds	r3, #4

08000e0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e10:	d3f9      	bcc.n	8000e06 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e12:	4a0a      	ldr	r2, [pc, #40]	; (8000e3c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e14:	4c0a      	ldr	r4, [pc, #40]	; (8000e40 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e18:	e001      	b.n	8000e1e <LoopFillZerobss>

08000e1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e1c:	3204      	adds	r2, #4

08000e1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e20:	d3fb      	bcc.n	8000e1a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000e22:	f7ff ffe5 	bl	8000df0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e26:	f007 fce5 	bl	80087f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000e2a:	f7ff fadf 	bl	80003ec <main>
  bx lr
 8000e2e:	4770      	bx	lr
  ldr r0, =_sdata
 8000e30:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e34:	200001cc 	.word	0x200001cc
  ldr r2, =_sidata
 8000e38:	0800932c 	.word	0x0800932c
  ldr r2, =_sbss
 8000e3c:	200001cc 	.word	0x200001cc
  ldr r4, =_ebss
 8000e40:	200015b8 	.word	0x200015b8

08000e44 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e44:	e7fe      	b.n	8000e44 <ADC1_2_IRQHandler>
	...

08000e48 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e4c:	4b08      	ldr	r3, [pc, #32]	; (8000e70 <HAL_Init+0x28>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	4a07      	ldr	r2, [pc, #28]	; (8000e70 <HAL_Init+0x28>)
 8000e52:	f043 0310 	orr.w	r3, r3, #16
 8000e56:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e58:	2003      	movs	r0, #3
 8000e5a:	f000 f947 	bl	80010ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e5e:	200f      	movs	r0, #15
 8000e60:	f000 f808 	bl	8000e74 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e64:	f7ff fe8e 	bl	8000b84 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e68:	2300      	movs	r3, #0
}
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	40022000 	.word	0x40022000

08000e74 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b082      	sub	sp, #8
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e7c:	4b12      	ldr	r3, [pc, #72]	; (8000ec8 <HAL_InitTick+0x54>)
 8000e7e:	681a      	ldr	r2, [r3, #0]
 8000e80:	4b12      	ldr	r3, [pc, #72]	; (8000ecc <HAL_InitTick+0x58>)
 8000e82:	781b      	ldrb	r3, [r3, #0]
 8000e84:	4619      	mov	r1, r3
 8000e86:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e8a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e92:	4618      	mov	r0, r3
 8000e94:	f000 f95f 	bl	8001156 <HAL_SYSTICK_Config>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d001      	beq.n	8000ea2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e9e:	2301      	movs	r3, #1
 8000ea0:	e00e      	b.n	8000ec0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	2b0f      	cmp	r3, #15
 8000ea6:	d80a      	bhi.n	8000ebe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	6879      	ldr	r1, [r7, #4]
 8000eac:	f04f 30ff 	mov.w	r0, #4294967295
 8000eb0:	f000 f927 	bl	8001102 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000eb4:	4a06      	ldr	r2, [pc, #24]	; (8000ed0 <HAL_InitTick+0x5c>)
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	e000      	b.n	8000ec0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ebe:	2301      	movs	r3, #1
}
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	3708      	adds	r7, #8
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bd80      	pop	{r7, pc}
 8000ec8:	20000000 	.word	0x20000000
 8000ecc:	20000008 	.word	0x20000008
 8000ed0:	20000004 	.word	0x20000004

08000ed4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ed8:	4b05      	ldr	r3, [pc, #20]	; (8000ef0 <HAL_IncTick+0x1c>)
 8000eda:	781b      	ldrb	r3, [r3, #0]
 8000edc:	461a      	mov	r2, r3
 8000ede:	4b05      	ldr	r3, [pc, #20]	; (8000ef4 <HAL_IncTick+0x20>)
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	4413      	add	r3, r2
 8000ee4:	4a03      	ldr	r2, [pc, #12]	; (8000ef4 <HAL_IncTick+0x20>)
 8000ee6:	6013      	str	r3, [r2, #0]
}
 8000ee8:	bf00      	nop
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bc80      	pop	{r7}
 8000eee:	4770      	bx	lr
 8000ef0:	20000008 	.word	0x20000008
 8000ef4:	20000290 	.word	0x20000290

08000ef8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0
  return uwTick;
 8000efc:	4b02      	ldr	r3, [pc, #8]	; (8000f08 <HAL_GetTick+0x10>)
 8000efe:	681b      	ldr	r3, [r3, #0]
}
 8000f00:	4618      	mov	r0, r3
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bc80      	pop	{r7}
 8000f06:	4770      	bx	lr
 8000f08:	20000290 	.word	0x20000290

08000f0c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b084      	sub	sp, #16
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f14:	f7ff fff0 	bl	8000ef8 <HAL_GetTick>
 8000f18:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f24:	d005      	beq.n	8000f32 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f26:	4b0a      	ldr	r3, [pc, #40]	; (8000f50 <HAL_Delay+0x44>)
 8000f28:	781b      	ldrb	r3, [r3, #0]
 8000f2a:	461a      	mov	r2, r3
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	4413      	add	r3, r2
 8000f30:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f32:	bf00      	nop
 8000f34:	f7ff ffe0 	bl	8000ef8 <HAL_GetTick>
 8000f38:	4602      	mov	r2, r0
 8000f3a:	68bb      	ldr	r3, [r7, #8]
 8000f3c:	1ad3      	subs	r3, r2, r3
 8000f3e:	68fa      	ldr	r2, [r7, #12]
 8000f40:	429a      	cmp	r2, r3
 8000f42:	d8f7      	bhi.n	8000f34 <HAL_Delay+0x28>
  {
  }
}
 8000f44:	bf00      	nop
 8000f46:	bf00      	nop
 8000f48:	3710      	adds	r7, #16
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	bf00      	nop
 8000f50:	20000008 	.word	0x20000008

08000f54 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f54:	b480      	push	{r7}
 8000f56:	b085      	sub	sp, #20
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	f003 0307 	and.w	r3, r3, #7
 8000f62:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f64:	4b0c      	ldr	r3, [pc, #48]	; (8000f98 <__NVIC_SetPriorityGrouping+0x44>)
 8000f66:	68db      	ldr	r3, [r3, #12]
 8000f68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f6a:	68ba      	ldr	r2, [r7, #8]
 8000f6c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f70:	4013      	ands	r3, r2
 8000f72:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f78:	68bb      	ldr	r3, [r7, #8]
 8000f7a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f7c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f86:	4a04      	ldr	r2, [pc, #16]	; (8000f98 <__NVIC_SetPriorityGrouping+0x44>)
 8000f88:	68bb      	ldr	r3, [r7, #8]
 8000f8a:	60d3      	str	r3, [r2, #12]
}
 8000f8c:	bf00      	nop
 8000f8e:	3714      	adds	r7, #20
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bc80      	pop	{r7}
 8000f94:	4770      	bx	lr
 8000f96:	bf00      	nop
 8000f98:	e000ed00 	.word	0xe000ed00

08000f9c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fa0:	4b04      	ldr	r3, [pc, #16]	; (8000fb4 <__NVIC_GetPriorityGrouping+0x18>)
 8000fa2:	68db      	ldr	r3, [r3, #12]
 8000fa4:	0a1b      	lsrs	r3, r3, #8
 8000fa6:	f003 0307 	and.w	r3, r3, #7
}
 8000faa:	4618      	mov	r0, r3
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bc80      	pop	{r7}
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop
 8000fb4:	e000ed00 	.word	0xe000ed00

08000fb8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	b083      	sub	sp, #12
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	db0b      	blt.n	8000fe2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fca:	79fb      	ldrb	r3, [r7, #7]
 8000fcc:	f003 021f 	and.w	r2, r3, #31
 8000fd0:	4906      	ldr	r1, [pc, #24]	; (8000fec <__NVIC_EnableIRQ+0x34>)
 8000fd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fd6:	095b      	lsrs	r3, r3, #5
 8000fd8:	2001      	movs	r0, #1
 8000fda:	fa00 f202 	lsl.w	r2, r0, r2
 8000fde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000fe2:	bf00      	nop
 8000fe4:	370c      	adds	r7, #12
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bc80      	pop	{r7}
 8000fea:	4770      	bx	lr
 8000fec:	e000e100 	.word	0xe000e100

08000ff0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	b083      	sub	sp, #12
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	6039      	str	r1, [r7, #0]
 8000ffa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ffc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001000:	2b00      	cmp	r3, #0
 8001002:	db0a      	blt.n	800101a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	b2da      	uxtb	r2, r3
 8001008:	490c      	ldr	r1, [pc, #48]	; (800103c <__NVIC_SetPriority+0x4c>)
 800100a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800100e:	0112      	lsls	r2, r2, #4
 8001010:	b2d2      	uxtb	r2, r2
 8001012:	440b      	add	r3, r1
 8001014:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001018:	e00a      	b.n	8001030 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	b2da      	uxtb	r2, r3
 800101e:	4908      	ldr	r1, [pc, #32]	; (8001040 <__NVIC_SetPriority+0x50>)
 8001020:	79fb      	ldrb	r3, [r7, #7]
 8001022:	f003 030f 	and.w	r3, r3, #15
 8001026:	3b04      	subs	r3, #4
 8001028:	0112      	lsls	r2, r2, #4
 800102a:	b2d2      	uxtb	r2, r2
 800102c:	440b      	add	r3, r1
 800102e:	761a      	strb	r2, [r3, #24]
}
 8001030:	bf00      	nop
 8001032:	370c      	adds	r7, #12
 8001034:	46bd      	mov	sp, r7
 8001036:	bc80      	pop	{r7}
 8001038:	4770      	bx	lr
 800103a:	bf00      	nop
 800103c:	e000e100 	.word	0xe000e100
 8001040:	e000ed00 	.word	0xe000ed00

08001044 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001044:	b480      	push	{r7}
 8001046:	b089      	sub	sp, #36	; 0x24
 8001048:	af00      	add	r7, sp, #0
 800104a:	60f8      	str	r0, [r7, #12]
 800104c:	60b9      	str	r1, [r7, #8]
 800104e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	f003 0307 	and.w	r3, r3, #7
 8001056:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001058:	69fb      	ldr	r3, [r7, #28]
 800105a:	f1c3 0307 	rsb	r3, r3, #7
 800105e:	2b04      	cmp	r3, #4
 8001060:	bf28      	it	cs
 8001062:	2304      	movcs	r3, #4
 8001064:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001066:	69fb      	ldr	r3, [r7, #28]
 8001068:	3304      	adds	r3, #4
 800106a:	2b06      	cmp	r3, #6
 800106c:	d902      	bls.n	8001074 <NVIC_EncodePriority+0x30>
 800106e:	69fb      	ldr	r3, [r7, #28]
 8001070:	3b03      	subs	r3, #3
 8001072:	e000      	b.n	8001076 <NVIC_EncodePriority+0x32>
 8001074:	2300      	movs	r3, #0
 8001076:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001078:	f04f 32ff 	mov.w	r2, #4294967295
 800107c:	69bb      	ldr	r3, [r7, #24]
 800107e:	fa02 f303 	lsl.w	r3, r2, r3
 8001082:	43da      	mvns	r2, r3
 8001084:	68bb      	ldr	r3, [r7, #8]
 8001086:	401a      	ands	r2, r3
 8001088:	697b      	ldr	r3, [r7, #20]
 800108a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800108c:	f04f 31ff 	mov.w	r1, #4294967295
 8001090:	697b      	ldr	r3, [r7, #20]
 8001092:	fa01 f303 	lsl.w	r3, r1, r3
 8001096:	43d9      	mvns	r1, r3
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800109c:	4313      	orrs	r3, r2
         );
}
 800109e:	4618      	mov	r0, r3
 80010a0:	3724      	adds	r7, #36	; 0x24
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bc80      	pop	{r7}
 80010a6:	4770      	bx	lr

080010a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b082      	sub	sp, #8
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	3b01      	subs	r3, #1
 80010b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010b8:	d301      	bcc.n	80010be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010ba:	2301      	movs	r3, #1
 80010bc:	e00f      	b.n	80010de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010be:	4a0a      	ldr	r2, [pc, #40]	; (80010e8 <SysTick_Config+0x40>)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	3b01      	subs	r3, #1
 80010c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010c6:	210f      	movs	r1, #15
 80010c8:	f04f 30ff 	mov.w	r0, #4294967295
 80010cc:	f7ff ff90 	bl	8000ff0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010d0:	4b05      	ldr	r3, [pc, #20]	; (80010e8 <SysTick_Config+0x40>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010d6:	4b04      	ldr	r3, [pc, #16]	; (80010e8 <SysTick_Config+0x40>)
 80010d8:	2207      	movs	r2, #7
 80010da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010dc:	2300      	movs	r3, #0
}
 80010de:	4618      	mov	r0, r3
 80010e0:	3708      	adds	r7, #8
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	e000e010 	.word	0xe000e010

080010ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b082      	sub	sp, #8
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010f4:	6878      	ldr	r0, [r7, #4]
 80010f6:	f7ff ff2d 	bl	8000f54 <__NVIC_SetPriorityGrouping>
}
 80010fa:	bf00      	nop
 80010fc:	3708      	adds	r7, #8
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}

08001102 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001102:	b580      	push	{r7, lr}
 8001104:	b086      	sub	sp, #24
 8001106:	af00      	add	r7, sp, #0
 8001108:	4603      	mov	r3, r0
 800110a:	60b9      	str	r1, [r7, #8]
 800110c:	607a      	str	r2, [r7, #4]
 800110e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001110:	2300      	movs	r3, #0
 8001112:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001114:	f7ff ff42 	bl	8000f9c <__NVIC_GetPriorityGrouping>
 8001118:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800111a:	687a      	ldr	r2, [r7, #4]
 800111c:	68b9      	ldr	r1, [r7, #8]
 800111e:	6978      	ldr	r0, [r7, #20]
 8001120:	f7ff ff90 	bl	8001044 <NVIC_EncodePriority>
 8001124:	4602      	mov	r2, r0
 8001126:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800112a:	4611      	mov	r1, r2
 800112c:	4618      	mov	r0, r3
 800112e:	f7ff ff5f 	bl	8000ff0 <__NVIC_SetPriority>
}
 8001132:	bf00      	nop
 8001134:	3718      	adds	r7, #24
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}

0800113a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800113a:	b580      	push	{r7, lr}
 800113c:	b082      	sub	sp, #8
 800113e:	af00      	add	r7, sp, #0
 8001140:	4603      	mov	r3, r0
 8001142:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001144:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001148:	4618      	mov	r0, r3
 800114a:	f7ff ff35 	bl	8000fb8 <__NVIC_EnableIRQ>
}
 800114e:	bf00      	nop
 8001150:	3708      	adds	r7, #8
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}

08001156 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001156:	b580      	push	{r7, lr}
 8001158:	b082      	sub	sp, #8
 800115a:	af00      	add	r7, sp, #0
 800115c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800115e:	6878      	ldr	r0, [r7, #4]
 8001160:	f7ff ffa2 	bl	80010a8 <SysTick_Config>
 8001164:	4603      	mov	r3, r0
}
 8001166:	4618      	mov	r0, r3
 8001168:	3708      	adds	r7, #8
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}
	...

08001170 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001170:	b480      	push	{r7}
 8001172:	b08b      	sub	sp, #44	; 0x2c
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
 8001178:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800117a:	2300      	movs	r3, #0
 800117c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800117e:	2300      	movs	r3, #0
 8001180:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001182:	e169      	b.n	8001458 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001184:	2201      	movs	r2, #1
 8001186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001188:	fa02 f303 	lsl.w	r3, r2, r3
 800118c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	69fa      	ldr	r2, [r7, #28]
 8001194:	4013      	ands	r3, r2
 8001196:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001198:	69ba      	ldr	r2, [r7, #24]
 800119a:	69fb      	ldr	r3, [r7, #28]
 800119c:	429a      	cmp	r2, r3
 800119e:	f040 8158 	bne.w	8001452 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	685b      	ldr	r3, [r3, #4]
 80011a6:	4a9a      	ldr	r2, [pc, #616]	; (8001410 <HAL_GPIO_Init+0x2a0>)
 80011a8:	4293      	cmp	r3, r2
 80011aa:	d05e      	beq.n	800126a <HAL_GPIO_Init+0xfa>
 80011ac:	4a98      	ldr	r2, [pc, #608]	; (8001410 <HAL_GPIO_Init+0x2a0>)
 80011ae:	4293      	cmp	r3, r2
 80011b0:	d875      	bhi.n	800129e <HAL_GPIO_Init+0x12e>
 80011b2:	4a98      	ldr	r2, [pc, #608]	; (8001414 <HAL_GPIO_Init+0x2a4>)
 80011b4:	4293      	cmp	r3, r2
 80011b6:	d058      	beq.n	800126a <HAL_GPIO_Init+0xfa>
 80011b8:	4a96      	ldr	r2, [pc, #600]	; (8001414 <HAL_GPIO_Init+0x2a4>)
 80011ba:	4293      	cmp	r3, r2
 80011bc:	d86f      	bhi.n	800129e <HAL_GPIO_Init+0x12e>
 80011be:	4a96      	ldr	r2, [pc, #600]	; (8001418 <HAL_GPIO_Init+0x2a8>)
 80011c0:	4293      	cmp	r3, r2
 80011c2:	d052      	beq.n	800126a <HAL_GPIO_Init+0xfa>
 80011c4:	4a94      	ldr	r2, [pc, #592]	; (8001418 <HAL_GPIO_Init+0x2a8>)
 80011c6:	4293      	cmp	r3, r2
 80011c8:	d869      	bhi.n	800129e <HAL_GPIO_Init+0x12e>
 80011ca:	4a94      	ldr	r2, [pc, #592]	; (800141c <HAL_GPIO_Init+0x2ac>)
 80011cc:	4293      	cmp	r3, r2
 80011ce:	d04c      	beq.n	800126a <HAL_GPIO_Init+0xfa>
 80011d0:	4a92      	ldr	r2, [pc, #584]	; (800141c <HAL_GPIO_Init+0x2ac>)
 80011d2:	4293      	cmp	r3, r2
 80011d4:	d863      	bhi.n	800129e <HAL_GPIO_Init+0x12e>
 80011d6:	4a92      	ldr	r2, [pc, #584]	; (8001420 <HAL_GPIO_Init+0x2b0>)
 80011d8:	4293      	cmp	r3, r2
 80011da:	d046      	beq.n	800126a <HAL_GPIO_Init+0xfa>
 80011dc:	4a90      	ldr	r2, [pc, #576]	; (8001420 <HAL_GPIO_Init+0x2b0>)
 80011de:	4293      	cmp	r3, r2
 80011e0:	d85d      	bhi.n	800129e <HAL_GPIO_Init+0x12e>
 80011e2:	2b12      	cmp	r3, #18
 80011e4:	d82a      	bhi.n	800123c <HAL_GPIO_Init+0xcc>
 80011e6:	2b12      	cmp	r3, #18
 80011e8:	d859      	bhi.n	800129e <HAL_GPIO_Init+0x12e>
 80011ea:	a201      	add	r2, pc, #4	; (adr r2, 80011f0 <HAL_GPIO_Init+0x80>)
 80011ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011f0:	0800126b 	.word	0x0800126b
 80011f4:	08001245 	.word	0x08001245
 80011f8:	08001257 	.word	0x08001257
 80011fc:	08001299 	.word	0x08001299
 8001200:	0800129f 	.word	0x0800129f
 8001204:	0800129f 	.word	0x0800129f
 8001208:	0800129f 	.word	0x0800129f
 800120c:	0800129f 	.word	0x0800129f
 8001210:	0800129f 	.word	0x0800129f
 8001214:	0800129f 	.word	0x0800129f
 8001218:	0800129f 	.word	0x0800129f
 800121c:	0800129f 	.word	0x0800129f
 8001220:	0800129f 	.word	0x0800129f
 8001224:	0800129f 	.word	0x0800129f
 8001228:	0800129f 	.word	0x0800129f
 800122c:	0800129f 	.word	0x0800129f
 8001230:	0800129f 	.word	0x0800129f
 8001234:	0800124d 	.word	0x0800124d
 8001238:	08001261 	.word	0x08001261
 800123c:	4a79      	ldr	r2, [pc, #484]	; (8001424 <HAL_GPIO_Init+0x2b4>)
 800123e:	4293      	cmp	r3, r2
 8001240:	d013      	beq.n	800126a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001242:	e02c      	b.n	800129e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	68db      	ldr	r3, [r3, #12]
 8001248:	623b      	str	r3, [r7, #32]
          break;
 800124a:	e029      	b.n	80012a0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	68db      	ldr	r3, [r3, #12]
 8001250:	3304      	adds	r3, #4
 8001252:	623b      	str	r3, [r7, #32]
          break;
 8001254:	e024      	b.n	80012a0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	68db      	ldr	r3, [r3, #12]
 800125a:	3308      	adds	r3, #8
 800125c:	623b      	str	r3, [r7, #32]
          break;
 800125e:	e01f      	b.n	80012a0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	68db      	ldr	r3, [r3, #12]
 8001264:	330c      	adds	r3, #12
 8001266:	623b      	str	r3, [r7, #32]
          break;
 8001268:	e01a      	b.n	80012a0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	689b      	ldr	r3, [r3, #8]
 800126e:	2b00      	cmp	r3, #0
 8001270:	d102      	bne.n	8001278 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001272:	2304      	movs	r3, #4
 8001274:	623b      	str	r3, [r7, #32]
          break;
 8001276:	e013      	b.n	80012a0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	689b      	ldr	r3, [r3, #8]
 800127c:	2b01      	cmp	r3, #1
 800127e:	d105      	bne.n	800128c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001280:	2308      	movs	r3, #8
 8001282:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	69fa      	ldr	r2, [r7, #28]
 8001288:	611a      	str	r2, [r3, #16]
          break;
 800128a:	e009      	b.n	80012a0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800128c:	2308      	movs	r3, #8
 800128e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	69fa      	ldr	r2, [r7, #28]
 8001294:	615a      	str	r2, [r3, #20]
          break;
 8001296:	e003      	b.n	80012a0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001298:	2300      	movs	r3, #0
 800129a:	623b      	str	r3, [r7, #32]
          break;
 800129c:	e000      	b.n	80012a0 <HAL_GPIO_Init+0x130>
          break;
 800129e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80012a0:	69bb      	ldr	r3, [r7, #24]
 80012a2:	2bff      	cmp	r3, #255	; 0xff
 80012a4:	d801      	bhi.n	80012aa <HAL_GPIO_Init+0x13a>
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	e001      	b.n	80012ae <HAL_GPIO_Init+0x13e>
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	3304      	adds	r3, #4
 80012ae:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80012b0:	69bb      	ldr	r3, [r7, #24]
 80012b2:	2bff      	cmp	r3, #255	; 0xff
 80012b4:	d802      	bhi.n	80012bc <HAL_GPIO_Init+0x14c>
 80012b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012b8:	009b      	lsls	r3, r3, #2
 80012ba:	e002      	b.n	80012c2 <HAL_GPIO_Init+0x152>
 80012bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012be:	3b08      	subs	r3, #8
 80012c0:	009b      	lsls	r3, r3, #2
 80012c2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80012c4:	697b      	ldr	r3, [r7, #20]
 80012c6:	681a      	ldr	r2, [r3, #0]
 80012c8:	210f      	movs	r1, #15
 80012ca:	693b      	ldr	r3, [r7, #16]
 80012cc:	fa01 f303 	lsl.w	r3, r1, r3
 80012d0:	43db      	mvns	r3, r3
 80012d2:	401a      	ands	r2, r3
 80012d4:	6a39      	ldr	r1, [r7, #32]
 80012d6:	693b      	ldr	r3, [r7, #16]
 80012d8:	fa01 f303 	lsl.w	r3, r1, r3
 80012dc:	431a      	orrs	r2, r3
 80012de:	697b      	ldr	r3, [r7, #20]
 80012e0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	685b      	ldr	r3, [r3, #4]
 80012e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	f000 80b1 	beq.w	8001452 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80012f0:	4b4d      	ldr	r3, [pc, #308]	; (8001428 <HAL_GPIO_Init+0x2b8>)
 80012f2:	699b      	ldr	r3, [r3, #24]
 80012f4:	4a4c      	ldr	r2, [pc, #304]	; (8001428 <HAL_GPIO_Init+0x2b8>)
 80012f6:	f043 0301 	orr.w	r3, r3, #1
 80012fa:	6193      	str	r3, [r2, #24]
 80012fc:	4b4a      	ldr	r3, [pc, #296]	; (8001428 <HAL_GPIO_Init+0x2b8>)
 80012fe:	699b      	ldr	r3, [r3, #24]
 8001300:	f003 0301 	and.w	r3, r3, #1
 8001304:	60bb      	str	r3, [r7, #8]
 8001306:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001308:	4a48      	ldr	r2, [pc, #288]	; (800142c <HAL_GPIO_Init+0x2bc>)
 800130a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800130c:	089b      	lsrs	r3, r3, #2
 800130e:	3302      	adds	r3, #2
 8001310:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001314:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001318:	f003 0303 	and.w	r3, r3, #3
 800131c:	009b      	lsls	r3, r3, #2
 800131e:	220f      	movs	r2, #15
 8001320:	fa02 f303 	lsl.w	r3, r2, r3
 8001324:	43db      	mvns	r3, r3
 8001326:	68fa      	ldr	r2, [r7, #12]
 8001328:	4013      	ands	r3, r2
 800132a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	4a40      	ldr	r2, [pc, #256]	; (8001430 <HAL_GPIO_Init+0x2c0>)
 8001330:	4293      	cmp	r3, r2
 8001332:	d013      	beq.n	800135c <HAL_GPIO_Init+0x1ec>
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	4a3f      	ldr	r2, [pc, #252]	; (8001434 <HAL_GPIO_Init+0x2c4>)
 8001338:	4293      	cmp	r3, r2
 800133a:	d00d      	beq.n	8001358 <HAL_GPIO_Init+0x1e8>
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	4a3e      	ldr	r2, [pc, #248]	; (8001438 <HAL_GPIO_Init+0x2c8>)
 8001340:	4293      	cmp	r3, r2
 8001342:	d007      	beq.n	8001354 <HAL_GPIO_Init+0x1e4>
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	4a3d      	ldr	r2, [pc, #244]	; (800143c <HAL_GPIO_Init+0x2cc>)
 8001348:	4293      	cmp	r3, r2
 800134a:	d101      	bne.n	8001350 <HAL_GPIO_Init+0x1e0>
 800134c:	2303      	movs	r3, #3
 800134e:	e006      	b.n	800135e <HAL_GPIO_Init+0x1ee>
 8001350:	2304      	movs	r3, #4
 8001352:	e004      	b.n	800135e <HAL_GPIO_Init+0x1ee>
 8001354:	2302      	movs	r3, #2
 8001356:	e002      	b.n	800135e <HAL_GPIO_Init+0x1ee>
 8001358:	2301      	movs	r3, #1
 800135a:	e000      	b.n	800135e <HAL_GPIO_Init+0x1ee>
 800135c:	2300      	movs	r3, #0
 800135e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001360:	f002 0203 	and.w	r2, r2, #3
 8001364:	0092      	lsls	r2, r2, #2
 8001366:	4093      	lsls	r3, r2
 8001368:	68fa      	ldr	r2, [r7, #12]
 800136a:	4313      	orrs	r3, r2
 800136c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800136e:	492f      	ldr	r1, [pc, #188]	; (800142c <HAL_GPIO_Init+0x2bc>)
 8001370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001372:	089b      	lsrs	r3, r3, #2
 8001374:	3302      	adds	r3, #2
 8001376:	68fa      	ldr	r2, [r7, #12]
 8001378:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	685b      	ldr	r3, [r3, #4]
 8001380:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001384:	2b00      	cmp	r3, #0
 8001386:	d006      	beq.n	8001396 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001388:	4b2d      	ldr	r3, [pc, #180]	; (8001440 <HAL_GPIO_Init+0x2d0>)
 800138a:	681a      	ldr	r2, [r3, #0]
 800138c:	492c      	ldr	r1, [pc, #176]	; (8001440 <HAL_GPIO_Init+0x2d0>)
 800138e:	69bb      	ldr	r3, [r7, #24]
 8001390:	4313      	orrs	r3, r2
 8001392:	600b      	str	r3, [r1, #0]
 8001394:	e006      	b.n	80013a4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001396:	4b2a      	ldr	r3, [pc, #168]	; (8001440 <HAL_GPIO_Init+0x2d0>)
 8001398:	681a      	ldr	r2, [r3, #0]
 800139a:	69bb      	ldr	r3, [r7, #24]
 800139c:	43db      	mvns	r3, r3
 800139e:	4928      	ldr	r1, [pc, #160]	; (8001440 <HAL_GPIO_Init+0x2d0>)
 80013a0:	4013      	ands	r3, r2
 80013a2:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d006      	beq.n	80013be <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80013b0:	4b23      	ldr	r3, [pc, #140]	; (8001440 <HAL_GPIO_Init+0x2d0>)
 80013b2:	685a      	ldr	r2, [r3, #4]
 80013b4:	4922      	ldr	r1, [pc, #136]	; (8001440 <HAL_GPIO_Init+0x2d0>)
 80013b6:	69bb      	ldr	r3, [r7, #24]
 80013b8:	4313      	orrs	r3, r2
 80013ba:	604b      	str	r3, [r1, #4]
 80013bc:	e006      	b.n	80013cc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80013be:	4b20      	ldr	r3, [pc, #128]	; (8001440 <HAL_GPIO_Init+0x2d0>)
 80013c0:	685a      	ldr	r2, [r3, #4]
 80013c2:	69bb      	ldr	r3, [r7, #24]
 80013c4:	43db      	mvns	r3, r3
 80013c6:	491e      	ldr	r1, [pc, #120]	; (8001440 <HAL_GPIO_Init+0x2d0>)
 80013c8:	4013      	ands	r3, r2
 80013ca:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	685b      	ldr	r3, [r3, #4]
 80013d0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d006      	beq.n	80013e6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80013d8:	4b19      	ldr	r3, [pc, #100]	; (8001440 <HAL_GPIO_Init+0x2d0>)
 80013da:	689a      	ldr	r2, [r3, #8]
 80013dc:	4918      	ldr	r1, [pc, #96]	; (8001440 <HAL_GPIO_Init+0x2d0>)
 80013de:	69bb      	ldr	r3, [r7, #24]
 80013e0:	4313      	orrs	r3, r2
 80013e2:	608b      	str	r3, [r1, #8]
 80013e4:	e006      	b.n	80013f4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80013e6:	4b16      	ldr	r3, [pc, #88]	; (8001440 <HAL_GPIO_Init+0x2d0>)
 80013e8:	689a      	ldr	r2, [r3, #8]
 80013ea:	69bb      	ldr	r3, [r7, #24]
 80013ec:	43db      	mvns	r3, r3
 80013ee:	4914      	ldr	r1, [pc, #80]	; (8001440 <HAL_GPIO_Init+0x2d0>)
 80013f0:	4013      	ands	r3, r2
 80013f2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d021      	beq.n	8001444 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001400:	4b0f      	ldr	r3, [pc, #60]	; (8001440 <HAL_GPIO_Init+0x2d0>)
 8001402:	68da      	ldr	r2, [r3, #12]
 8001404:	490e      	ldr	r1, [pc, #56]	; (8001440 <HAL_GPIO_Init+0x2d0>)
 8001406:	69bb      	ldr	r3, [r7, #24]
 8001408:	4313      	orrs	r3, r2
 800140a:	60cb      	str	r3, [r1, #12]
 800140c:	e021      	b.n	8001452 <HAL_GPIO_Init+0x2e2>
 800140e:	bf00      	nop
 8001410:	10320000 	.word	0x10320000
 8001414:	10310000 	.word	0x10310000
 8001418:	10220000 	.word	0x10220000
 800141c:	10210000 	.word	0x10210000
 8001420:	10120000 	.word	0x10120000
 8001424:	10110000 	.word	0x10110000
 8001428:	40021000 	.word	0x40021000
 800142c:	40010000 	.word	0x40010000
 8001430:	40010800 	.word	0x40010800
 8001434:	40010c00 	.word	0x40010c00
 8001438:	40011000 	.word	0x40011000
 800143c:	40011400 	.word	0x40011400
 8001440:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001444:	4b0b      	ldr	r3, [pc, #44]	; (8001474 <HAL_GPIO_Init+0x304>)
 8001446:	68da      	ldr	r2, [r3, #12]
 8001448:	69bb      	ldr	r3, [r7, #24]
 800144a:	43db      	mvns	r3, r3
 800144c:	4909      	ldr	r1, [pc, #36]	; (8001474 <HAL_GPIO_Init+0x304>)
 800144e:	4013      	ands	r3, r2
 8001450:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001454:	3301      	adds	r3, #1
 8001456:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	681a      	ldr	r2, [r3, #0]
 800145c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800145e:	fa22 f303 	lsr.w	r3, r2, r3
 8001462:	2b00      	cmp	r3, #0
 8001464:	f47f ae8e 	bne.w	8001184 <HAL_GPIO_Init+0x14>
  }
}
 8001468:	bf00      	nop
 800146a:	bf00      	nop
 800146c:	372c      	adds	r7, #44	; 0x2c
 800146e:	46bd      	mov	sp, r7
 8001470:	bc80      	pop	{r7}
 8001472:	4770      	bx	lr
 8001474:	40010400 	.word	0x40010400

08001478 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001478:	b480      	push	{r7}
 800147a:	b085      	sub	sp, #20
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
 8001480:	460b      	mov	r3, r1
 8001482:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	689a      	ldr	r2, [r3, #8]
 8001488:	887b      	ldrh	r3, [r7, #2]
 800148a:	4013      	ands	r3, r2
 800148c:	2b00      	cmp	r3, #0
 800148e:	d002      	beq.n	8001496 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001490:	2301      	movs	r3, #1
 8001492:	73fb      	strb	r3, [r7, #15]
 8001494:	e001      	b.n	800149a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001496:	2300      	movs	r3, #0
 8001498:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800149a:	7bfb      	ldrb	r3, [r7, #15]
}
 800149c:	4618      	mov	r0, r3
 800149e:	3714      	adds	r7, #20
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bc80      	pop	{r7}
 80014a4:	4770      	bx	lr

080014a6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014a6:	b480      	push	{r7}
 80014a8:	b083      	sub	sp, #12
 80014aa:	af00      	add	r7, sp, #0
 80014ac:	6078      	str	r0, [r7, #4]
 80014ae:	460b      	mov	r3, r1
 80014b0:	807b      	strh	r3, [r7, #2]
 80014b2:	4613      	mov	r3, r2
 80014b4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80014b6:	787b      	ldrb	r3, [r7, #1]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d003      	beq.n	80014c4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80014bc:	887a      	ldrh	r2, [r7, #2]
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80014c2:	e003      	b.n	80014cc <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80014c4:	887b      	ldrh	r3, [r7, #2]
 80014c6:	041a      	lsls	r2, r3, #16
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	611a      	str	r2, [r3, #16]
}
 80014cc:	bf00      	nop
 80014ce:	370c      	adds	r7, #12
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bc80      	pop	{r7}
 80014d4:	4770      	bx	lr

080014d6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80014d6:	b480      	push	{r7}
 80014d8:	b085      	sub	sp, #20
 80014da:	af00      	add	r7, sp, #0
 80014dc:	6078      	str	r0, [r7, #4]
 80014de:	460b      	mov	r3, r1
 80014e0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	68db      	ldr	r3, [r3, #12]
 80014e6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80014e8:	887a      	ldrh	r2, [r7, #2]
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	4013      	ands	r3, r2
 80014ee:	041a      	lsls	r2, r3, #16
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	43d9      	mvns	r1, r3
 80014f4:	887b      	ldrh	r3, [r7, #2]
 80014f6:	400b      	ands	r3, r1
 80014f8:	431a      	orrs	r2, r3
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	611a      	str	r2, [r3, #16]
}
 80014fe:	bf00      	nop
 8001500:	3714      	adds	r7, #20
 8001502:	46bd      	mov	sp, r7
 8001504:	bc80      	pop	{r7}
 8001506:	4770      	bx	lr

08001508 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b082      	sub	sp, #8
 800150c:	af00      	add	r7, sp, #0
 800150e:	4603      	mov	r3, r0
 8001510:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001512:	4b08      	ldr	r3, [pc, #32]	; (8001534 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001514:	695a      	ldr	r2, [r3, #20]
 8001516:	88fb      	ldrh	r3, [r7, #6]
 8001518:	4013      	ands	r3, r2
 800151a:	2b00      	cmp	r3, #0
 800151c:	d006      	beq.n	800152c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800151e:	4a05      	ldr	r2, [pc, #20]	; (8001534 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001520:	88fb      	ldrh	r3, [r7, #6]
 8001522:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001524:	88fb      	ldrh	r3, [r7, #6]
 8001526:	4618      	mov	r0, r3
 8001528:	f000 f806 	bl	8001538 <HAL_GPIO_EXTI_Callback>
  }
}
 800152c:	bf00      	nop
 800152e:	3708      	adds	r7, #8
 8001530:	46bd      	mov	sp, r7
 8001532:	bd80      	pop	{r7, pc}
 8001534:	40010400 	.word	0x40010400

08001538 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001538:	b480      	push	{r7}
 800153a:	b083      	sub	sp, #12
 800153c:	af00      	add	r7, sp, #0
 800153e:	4603      	mov	r3, r0
 8001540:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001542:	bf00      	nop
 8001544:	370c      	adds	r7, #12
 8001546:	46bd      	mov	sp, r7
 8001548:	bc80      	pop	{r7}
 800154a:	4770      	bx	lr

0800154c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800154c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800154e:	b08b      	sub	sp, #44	; 0x2c
 8001550:	af06      	add	r7, sp, #24
 8001552:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	2b00      	cmp	r3, #0
 8001558:	d101      	bne.n	800155e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800155a:	2301      	movs	r3, #1
 800155c:	e0fd      	b.n	800175a <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001564:	b2db      	uxtb	r3, r3
 8001566:	2b00      	cmp	r3, #0
 8001568:	d106      	bne.n	8001578 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	2200      	movs	r2, #0
 800156e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001572:	6878      	ldr	r0, [r7, #4]
 8001574:	f006 fe52 	bl	800821c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	2203      	movs	r2, #3
 800157c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	4618      	mov	r0, r3
 8001586:	f002 fafd 	bl	8003b84 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	603b      	str	r3, [r7, #0]
 8001590:	687e      	ldr	r6, [r7, #4]
 8001592:	466d      	mov	r5, sp
 8001594:	f106 0410 	add.w	r4, r6, #16
 8001598:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800159a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800159c:	6823      	ldr	r3, [r4, #0]
 800159e:	602b      	str	r3, [r5, #0]
 80015a0:	1d33      	adds	r3, r6, #4
 80015a2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80015a4:	6838      	ldr	r0, [r7, #0]
 80015a6:	f002 fac7 	bl	8003b38 <USB_CoreInit>
 80015aa:	4603      	mov	r3, r0
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d005      	beq.n	80015bc <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	2202      	movs	r2, #2
 80015b4:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80015b8:	2301      	movs	r3, #1
 80015ba:	e0ce      	b.n	800175a <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	2100      	movs	r1, #0
 80015c2:	4618      	mov	r0, r3
 80015c4:	f002 faf8 	bl	8003bb8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80015c8:	2300      	movs	r3, #0
 80015ca:	73fb      	strb	r3, [r7, #15]
 80015cc:	e04c      	b.n	8001668 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80015ce:	7bfb      	ldrb	r3, [r7, #15]
 80015d0:	6879      	ldr	r1, [r7, #4]
 80015d2:	1c5a      	adds	r2, r3, #1
 80015d4:	4613      	mov	r3, r2
 80015d6:	009b      	lsls	r3, r3, #2
 80015d8:	4413      	add	r3, r2
 80015da:	00db      	lsls	r3, r3, #3
 80015dc:	440b      	add	r3, r1
 80015de:	3301      	adds	r3, #1
 80015e0:	2201      	movs	r2, #1
 80015e2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80015e4:	7bfb      	ldrb	r3, [r7, #15]
 80015e6:	6879      	ldr	r1, [r7, #4]
 80015e8:	1c5a      	adds	r2, r3, #1
 80015ea:	4613      	mov	r3, r2
 80015ec:	009b      	lsls	r3, r3, #2
 80015ee:	4413      	add	r3, r2
 80015f0:	00db      	lsls	r3, r3, #3
 80015f2:	440b      	add	r3, r1
 80015f4:	7bfa      	ldrb	r2, [r7, #15]
 80015f6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80015f8:	7bfa      	ldrb	r2, [r7, #15]
 80015fa:	7bfb      	ldrb	r3, [r7, #15]
 80015fc:	b298      	uxth	r0, r3
 80015fe:	6879      	ldr	r1, [r7, #4]
 8001600:	4613      	mov	r3, r2
 8001602:	009b      	lsls	r3, r3, #2
 8001604:	4413      	add	r3, r2
 8001606:	00db      	lsls	r3, r3, #3
 8001608:	440b      	add	r3, r1
 800160a:	3336      	adds	r3, #54	; 0x36
 800160c:	4602      	mov	r2, r0
 800160e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001610:	7bfb      	ldrb	r3, [r7, #15]
 8001612:	6879      	ldr	r1, [r7, #4]
 8001614:	1c5a      	adds	r2, r3, #1
 8001616:	4613      	mov	r3, r2
 8001618:	009b      	lsls	r3, r3, #2
 800161a:	4413      	add	r3, r2
 800161c:	00db      	lsls	r3, r3, #3
 800161e:	440b      	add	r3, r1
 8001620:	3303      	adds	r3, #3
 8001622:	2200      	movs	r2, #0
 8001624:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001626:	7bfa      	ldrb	r2, [r7, #15]
 8001628:	6879      	ldr	r1, [r7, #4]
 800162a:	4613      	mov	r3, r2
 800162c:	009b      	lsls	r3, r3, #2
 800162e:	4413      	add	r3, r2
 8001630:	00db      	lsls	r3, r3, #3
 8001632:	440b      	add	r3, r1
 8001634:	3338      	adds	r3, #56	; 0x38
 8001636:	2200      	movs	r2, #0
 8001638:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800163a:	7bfa      	ldrb	r2, [r7, #15]
 800163c:	6879      	ldr	r1, [r7, #4]
 800163e:	4613      	mov	r3, r2
 8001640:	009b      	lsls	r3, r3, #2
 8001642:	4413      	add	r3, r2
 8001644:	00db      	lsls	r3, r3, #3
 8001646:	440b      	add	r3, r1
 8001648:	333c      	adds	r3, #60	; 0x3c
 800164a:	2200      	movs	r2, #0
 800164c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800164e:	7bfa      	ldrb	r2, [r7, #15]
 8001650:	6879      	ldr	r1, [r7, #4]
 8001652:	4613      	mov	r3, r2
 8001654:	009b      	lsls	r3, r3, #2
 8001656:	4413      	add	r3, r2
 8001658:	00db      	lsls	r3, r3, #3
 800165a:	440b      	add	r3, r1
 800165c:	3340      	adds	r3, #64	; 0x40
 800165e:	2200      	movs	r2, #0
 8001660:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001662:	7bfb      	ldrb	r3, [r7, #15]
 8001664:	3301      	adds	r3, #1
 8001666:	73fb      	strb	r3, [r7, #15]
 8001668:	7bfa      	ldrb	r2, [r7, #15]
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	685b      	ldr	r3, [r3, #4]
 800166e:	429a      	cmp	r2, r3
 8001670:	d3ad      	bcc.n	80015ce <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001672:	2300      	movs	r3, #0
 8001674:	73fb      	strb	r3, [r7, #15]
 8001676:	e044      	b.n	8001702 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001678:	7bfa      	ldrb	r2, [r7, #15]
 800167a:	6879      	ldr	r1, [r7, #4]
 800167c:	4613      	mov	r3, r2
 800167e:	009b      	lsls	r3, r3, #2
 8001680:	4413      	add	r3, r2
 8001682:	00db      	lsls	r3, r3, #3
 8001684:	440b      	add	r3, r1
 8001686:	f203 1369 	addw	r3, r3, #361	; 0x169
 800168a:	2200      	movs	r2, #0
 800168c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800168e:	7bfa      	ldrb	r2, [r7, #15]
 8001690:	6879      	ldr	r1, [r7, #4]
 8001692:	4613      	mov	r3, r2
 8001694:	009b      	lsls	r3, r3, #2
 8001696:	4413      	add	r3, r2
 8001698:	00db      	lsls	r3, r3, #3
 800169a:	440b      	add	r3, r1
 800169c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80016a0:	7bfa      	ldrb	r2, [r7, #15]
 80016a2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80016a4:	7bfa      	ldrb	r2, [r7, #15]
 80016a6:	6879      	ldr	r1, [r7, #4]
 80016a8:	4613      	mov	r3, r2
 80016aa:	009b      	lsls	r3, r3, #2
 80016ac:	4413      	add	r3, r2
 80016ae:	00db      	lsls	r3, r3, #3
 80016b0:	440b      	add	r3, r1
 80016b2:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80016b6:	2200      	movs	r2, #0
 80016b8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80016ba:	7bfa      	ldrb	r2, [r7, #15]
 80016bc:	6879      	ldr	r1, [r7, #4]
 80016be:	4613      	mov	r3, r2
 80016c0:	009b      	lsls	r3, r3, #2
 80016c2:	4413      	add	r3, r2
 80016c4:	00db      	lsls	r3, r3, #3
 80016c6:	440b      	add	r3, r1
 80016c8:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80016cc:	2200      	movs	r2, #0
 80016ce:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80016d0:	7bfa      	ldrb	r2, [r7, #15]
 80016d2:	6879      	ldr	r1, [r7, #4]
 80016d4:	4613      	mov	r3, r2
 80016d6:	009b      	lsls	r3, r3, #2
 80016d8:	4413      	add	r3, r2
 80016da:	00db      	lsls	r3, r3, #3
 80016dc:	440b      	add	r3, r1
 80016de:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80016e2:	2200      	movs	r2, #0
 80016e4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80016e6:	7bfa      	ldrb	r2, [r7, #15]
 80016e8:	6879      	ldr	r1, [r7, #4]
 80016ea:	4613      	mov	r3, r2
 80016ec:	009b      	lsls	r3, r3, #2
 80016ee:	4413      	add	r3, r2
 80016f0:	00db      	lsls	r3, r3, #3
 80016f2:	440b      	add	r3, r1
 80016f4:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80016f8:	2200      	movs	r2, #0
 80016fa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80016fc:	7bfb      	ldrb	r3, [r7, #15]
 80016fe:	3301      	adds	r3, #1
 8001700:	73fb      	strb	r3, [r7, #15]
 8001702:	7bfa      	ldrb	r2, [r7, #15]
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	429a      	cmp	r2, r3
 800170a:	d3b5      	bcc.n	8001678 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	603b      	str	r3, [r7, #0]
 8001712:	687e      	ldr	r6, [r7, #4]
 8001714:	466d      	mov	r5, sp
 8001716:	f106 0410 	add.w	r4, r6, #16
 800171a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800171c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800171e:	6823      	ldr	r3, [r4, #0]
 8001720:	602b      	str	r3, [r5, #0]
 8001722:	1d33      	adds	r3, r6, #4
 8001724:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001726:	6838      	ldr	r0, [r7, #0]
 8001728:	f002 fa52 	bl	8003bd0 <USB_DevInit>
 800172c:	4603      	mov	r3, r0
 800172e:	2b00      	cmp	r3, #0
 8001730:	d005      	beq.n	800173e <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	2202      	movs	r2, #2
 8001736:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 800173a:	2301      	movs	r3, #1
 800173c:	e00d      	b.n	800175a <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	2200      	movs	r2, #0
 8001742:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	2201      	movs	r2, #1
 800174a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	4618      	mov	r0, r3
 8001754:	f004 ff04 	bl	8006560 <USB_DevDisconnect>

  return HAL_OK;
 8001758:	2300      	movs	r3, #0
}
 800175a:	4618      	mov	r0, r3
 800175c:	3714      	adds	r7, #20
 800175e:	46bd      	mov	sp, r7
 8001760:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001762 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001762:	b580      	push	{r7, lr}
 8001764:	b082      	sub	sp, #8
 8001766:	af00      	add	r7, sp, #0
 8001768:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001770:	2b01      	cmp	r3, #1
 8001772:	d101      	bne.n	8001778 <HAL_PCD_Start+0x16>
 8001774:	2302      	movs	r3, #2
 8001776:	e016      	b.n	80017a6 <HAL_PCD_Start+0x44>
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	2201      	movs	r2, #1
 800177c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4618      	mov	r0, r3
 8001786:	f002 f9e7 	bl	8003b58 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 800178a:	2101      	movs	r1, #1
 800178c:	6878      	ldr	r0, [r7, #4]
 800178e:	f006 ffb8 	bl	8008702 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	4618      	mov	r0, r3
 8001798:	f004 fed8 	bl	800654c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	2200      	movs	r2, #0
 80017a0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80017a4:	2300      	movs	r3, #0
}
 80017a6:	4618      	mov	r0, r3
 80017a8:	3708      	adds	r7, #8
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}

080017ae <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80017ae:	b580      	push	{r7, lr}
 80017b0:	b088      	sub	sp, #32
 80017b2:	af00      	add	r7, sp, #0
 80017b4:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	4618      	mov	r0, r3
 80017bc:	f004 feda 	bl	8006574 <USB_ReadInterrupts>
 80017c0:	4603      	mov	r3, r0
 80017c2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80017c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80017ca:	d102      	bne.n	80017d2 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80017cc:	6878      	ldr	r0, [r7, #4]
 80017ce:	f000 fb5f 	bl	8001e90 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	4618      	mov	r0, r3
 80017d8:	f004 fecc 	bl	8006574 <USB_ReadInterrupts>
 80017dc:	4603      	mov	r3, r0
 80017de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80017e6:	d112      	bne.n	800180e <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80017f0:	b29a      	uxth	r2, r3
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80017fa:	b292      	uxth	r2, r2
 80017fc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001800:	6878      	ldr	r0, [r7, #4]
 8001802:	f006 fd86 	bl	8008312 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001806:	2100      	movs	r1, #0
 8001808:	6878      	ldr	r0, [r7, #4]
 800180a:	f000 f923 	bl	8001a54 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	4618      	mov	r0, r3
 8001814:	f004 feae 	bl	8006574 <USB_ReadInterrupts>
 8001818:	4603      	mov	r3, r0
 800181a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800181e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001822:	d10b      	bne.n	800183c <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800182c:	b29a      	uxth	r2, r3
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001836:	b292      	uxth	r2, r2
 8001838:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4618      	mov	r0, r3
 8001842:	f004 fe97 	bl	8006574 <USB_ReadInterrupts>
 8001846:	4603      	mov	r3, r0
 8001848:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800184c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001850:	d10b      	bne.n	800186a <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800185a:	b29a      	uxth	r2, r3
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001864:	b292      	uxth	r2, r2
 8001866:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	4618      	mov	r0, r3
 8001870:	f004 fe80 	bl	8006574 <USB_ReadInterrupts>
 8001874:	4603      	mov	r3, r0
 8001876:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800187a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800187e:	d126      	bne.n	80018ce <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001888:	b29a      	uxth	r2, r3
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f022 0204 	bic.w	r2, r2, #4
 8001892:	b292      	uxth	r2, r2
 8001894:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80018a0:	b29a      	uxth	r2, r3
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f022 0208 	bic.w	r2, r2, #8
 80018aa:	b292      	uxth	r2, r2
 80018ac:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80018b0:	6878      	ldr	r0, [r7, #4]
 80018b2:	f006 fd67 	bl	8008384 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80018be:	b29a      	uxth	r2, r3
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80018c8:	b292      	uxth	r2, r2
 80018ca:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4618      	mov	r0, r3
 80018d4:	f004 fe4e 	bl	8006574 <USB_ReadInterrupts>
 80018d8:	4603      	mov	r3, r0
 80018da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80018de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80018e2:	f040 8082 	bne.w	80019ea <HAL_PCD_IRQHandler+0x23c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 80018e6:	2300      	movs	r3, #0
 80018e8:	77fb      	strb	r3, [r7, #31]
 80018ea:	e010      	b.n	800190e <HAL_PCD_IRQHandler+0x160>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	461a      	mov	r2, r3
 80018f2:	7ffb      	ldrb	r3, [r7, #31]
 80018f4:	009b      	lsls	r3, r3, #2
 80018f6:	441a      	add	r2, r3
 80018f8:	7ffb      	ldrb	r3, [r7, #31]
 80018fa:	8812      	ldrh	r2, [r2, #0]
 80018fc:	b292      	uxth	r2, r2
 80018fe:	005b      	lsls	r3, r3, #1
 8001900:	3320      	adds	r3, #32
 8001902:	443b      	add	r3, r7
 8001904:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8001908:	7ffb      	ldrb	r3, [r7, #31]
 800190a:	3301      	adds	r3, #1
 800190c:	77fb      	strb	r3, [r7, #31]
 800190e:	7ffb      	ldrb	r3, [r7, #31]
 8001910:	2b07      	cmp	r3, #7
 8001912:	d9eb      	bls.n	80018ec <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800191c:	b29a      	uxth	r2, r3
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f042 0201 	orr.w	r2, r2, #1
 8001926:	b292      	uxth	r2, r2
 8001928:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001934:	b29a      	uxth	r2, r3
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f022 0201 	bic.w	r2, r2, #1
 800193e:	b292      	uxth	r2, r2
 8001940:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8001944:	bf00      	nop
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800194e:	b29b      	uxth	r3, r3
 8001950:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001954:	2b00      	cmp	r3, #0
 8001956:	d0f6      	beq.n	8001946 <HAL_PCD_IRQHandler+0x198>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001960:	b29a      	uxth	r2, r3
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800196a:	b292      	uxth	r2, r2
 800196c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8001970:	2300      	movs	r3, #0
 8001972:	77fb      	strb	r3, [r7, #31]
 8001974:	e00f      	b.n	8001996 <HAL_PCD_IRQHandler+0x1e8>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8001976:	7ffb      	ldrb	r3, [r7, #31]
 8001978:	687a      	ldr	r2, [r7, #4]
 800197a:	6812      	ldr	r2, [r2, #0]
 800197c:	4611      	mov	r1, r2
 800197e:	7ffa      	ldrb	r2, [r7, #31]
 8001980:	0092      	lsls	r2, r2, #2
 8001982:	440a      	add	r2, r1
 8001984:	005b      	lsls	r3, r3, #1
 8001986:	3320      	adds	r3, #32
 8001988:	443b      	add	r3, r7
 800198a:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 800198e:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8001990:	7ffb      	ldrb	r3, [r7, #31]
 8001992:	3301      	adds	r3, #1
 8001994:	77fb      	strb	r3, [r7, #31]
 8001996:	7ffb      	ldrb	r3, [r7, #31]
 8001998:	2b07      	cmp	r3, #7
 800199a:	d9ec      	bls.n	8001976 <HAL_PCD_IRQHandler+0x1c8>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80019a4:	b29a      	uxth	r2, r3
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f042 0208 	orr.w	r2, r2, #8
 80019ae:	b292      	uxth	r2, r2
 80019b0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80019bc:	b29a      	uxth	r2, r3
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80019c6:	b292      	uxth	r2, r2
 80019c8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80019d4:	b29a      	uxth	r2, r3
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f042 0204 	orr.w	r2, r2, #4
 80019de:	b292      	uxth	r2, r2
 80019e0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80019e4:	6878      	ldr	r0, [r7, #4]
 80019e6:	f006 fcb3 	bl	8008350 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	4618      	mov	r0, r3
 80019f0:	f004 fdc0 	bl	8006574 <USB_ReadInterrupts>
 80019f4:	4603      	mov	r3, r0
 80019f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80019fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80019fe:	d10e      	bne.n	8001a1e <HAL_PCD_IRQHandler+0x270>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001a08:	b29a      	uxth	r2, r3
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001a12:	b292      	uxth	r2, r2
 8001a14:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001a18:	6878      	ldr	r0, [r7, #4]
 8001a1a:	f006 fc6c 	bl	80082f6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	4618      	mov	r0, r3
 8001a24:	f004 fda6 	bl	8006574 <USB_ReadInterrupts>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a2e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001a32:	d10b      	bne.n	8001a4c <HAL_PCD_IRQHandler+0x29e>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001a3c:	b29a      	uxth	r2, r3
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001a46:	b292      	uxth	r2, r2
 8001a48:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8001a4c:	bf00      	nop
 8001a4e:	3720      	adds	r7, #32
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bd80      	pop	{r7, pc}

08001a54 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b082      	sub	sp, #8
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
 8001a5c:	460b      	mov	r3, r1
 8001a5e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001a66:	2b01      	cmp	r3, #1
 8001a68:	d101      	bne.n	8001a6e <HAL_PCD_SetAddress+0x1a>
 8001a6a:	2302      	movs	r3, #2
 8001a6c:	e013      	b.n	8001a96 <HAL_PCD_SetAddress+0x42>
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	2201      	movs	r2, #1
 8001a72:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	78fa      	ldrb	r2, [r7, #3]
 8001a7a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	78fa      	ldrb	r2, [r7, #3]
 8001a84:	4611      	mov	r1, r2
 8001a86:	4618      	mov	r0, r3
 8001a88:	f004 fd4d 	bl	8006526 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	2200      	movs	r2, #0
 8001a90:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001a94:	2300      	movs	r3, #0
}
 8001a96:	4618      	mov	r0, r3
 8001a98:	3708      	adds	r7, #8
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}

08001a9e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001a9e:	b580      	push	{r7, lr}
 8001aa0:	b084      	sub	sp, #16
 8001aa2:	af00      	add	r7, sp, #0
 8001aa4:	6078      	str	r0, [r7, #4]
 8001aa6:	4608      	mov	r0, r1
 8001aa8:	4611      	mov	r1, r2
 8001aaa:	461a      	mov	r2, r3
 8001aac:	4603      	mov	r3, r0
 8001aae:	70fb      	strb	r3, [r7, #3]
 8001ab0:	460b      	mov	r3, r1
 8001ab2:	803b      	strh	r3, [r7, #0]
 8001ab4:	4613      	mov	r3, r2
 8001ab6:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001abc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	da0e      	bge.n	8001ae2 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ac4:	78fb      	ldrb	r3, [r7, #3]
 8001ac6:	f003 0307 	and.w	r3, r3, #7
 8001aca:	1c5a      	adds	r2, r3, #1
 8001acc:	4613      	mov	r3, r2
 8001ace:	009b      	lsls	r3, r3, #2
 8001ad0:	4413      	add	r3, r2
 8001ad2:	00db      	lsls	r3, r3, #3
 8001ad4:	687a      	ldr	r2, [r7, #4]
 8001ad6:	4413      	add	r3, r2
 8001ad8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	2201      	movs	r2, #1
 8001ade:	705a      	strb	r2, [r3, #1]
 8001ae0:	e00e      	b.n	8001b00 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001ae2:	78fb      	ldrb	r3, [r7, #3]
 8001ae4:	f003 0207 	and.w	r2, r3, #7
 8001ae8:	4613      	mov	r3, r2
 8001aea:	009b      	lsls	r3, r3, #2
 8001aec:	4413      	add	r3, r2
 8001aee:	00db      	lsls	r3, r3, #3
 8001af0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001af4:	687a      	ldr	r2, [r7, #4]
 8001af6:	4413      	add	r3, r2
 8001af8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	2200      	movs	r2, #0
 8001afe:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001b00:	78fb      	ldrb	r3, [r7, #3]
 8001b02:	f003 0307 	and.w	r3, r3, #7
 8001b06:	b2da      	uxtb	r2, r3
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001b0c:	883a      	ldrh	r2, [r7, #0]
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	78ba      	ldrb	r2, [r7, #2]
 8001b16:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	785b      	ldrb	r3, [r3, #1]
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d004      	beq.n	8001b2a <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	781b      	ldrb	r3, [r3, #0]
 8001b24:	b29a      	uxth	r2, r3
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001b2a:	78bb      	ldrb	r3, [r7, #2]
 8001b2c:	2b02      	cmp	r3, #2
 8001b2e:	d102      	bne.n	8001b36 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	2200      	movs	r2, #0
 8001b34:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001b3c:	2b01      	cmp	r3, #1
 8001b3e:	d101      	bne.n	8001b44 <HAL_PCD_EP_Open+0xa6>
 8001b40:	2302      	movs	r3, #2
 8001b42:	e00e      	b.n	8001b62 <HAL_PCD_EP_Open+0xc4>
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	2201      	movs	r2, #1
 8001b48:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	68f9      	ldr	r1, [r7, #12]
 8001b52:	4618      	mov	r0, r3
 8001b54:	f002 f85c 	bl	8003c10 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8001b60:	7afb      	ldrb	r3, [r7, #11]
}
 8001b62:	4618      	mov	r0, r3
 8001b64:	3710      	adds	r7, #16
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}

08001b6a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001b6a:	b580      	push	{r7, lr}
 8001b6c:	b084      	sub	sp, #16
 8001b6e:	af00      	add	r7, sp, #0
 8001b70:	6078      	str	r0, [r7, #4]
 8001b72:	460b      	mov	r3, r1
 8001b74:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001b76:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	da0e      	bge.n	8001b9c <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001b7e:	78fb      	ldrb	r3, [r7, #3]
 8001b80:	f003 0307 	and.w	r3, r3, #7
 8001b84:	1c5a      	adds	r2, r3, #1
 8001b86:	4613      	mov	r3, r2
 8001b88:	009b      	lsls	r3, r3, #2
 8001b8a:	4413      	add	r3, r2
 8001b8c:	00db      	lsls	r3, r3, #3
 8001b8e:	687a      	ldr	r2, [r7, #4]
 8001b90:	4413      	add	r3, r2
 8001b92:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	2201      	movs	r2, #1
 8001b98:	705a      	strb	r2, [r3, #1]
 8001b9a:	e00e      	b.n	8001bba <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001b9c:	78fb      	ldrb	r3, [r7, #3]
 8001b9e:	f003 0207 	and.w	r2, r3, #7
 8001ba2:	4613      	mov	r3, r2
 8001ba4:	009b      	lsls	r3, r3, #2
 8001ba6:	4413      	add	r3, r2
 8001ba8:	00db      	lsls	r3, r3, #3
 8001baa:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001bae:	687a      	ldr	r2, [r7, #4]
 8001bb0:	4413      	add	r3, r2
 8001bb2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001bba:	78fb      	ldrb	r3, [r7, #3]
 8001bbc:	f003 0307 	and.w	r3, r3, #7
 8001bc0:	b2da      	uxtb	r2, r3
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001bcc:	2b01      	cmp	r3, #1
 8001bce:	d101      	bne.n	8001bd4 <HAL_PCD_EP_Close+0x6a>
 8001bd0:	2302      	movs	r3, #2
 8001bd2:	e00e      	b.n	8001bf2 <HAL_PCD_EP_Close+0x88>
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2201      	movs	r2, #1
 8001bd8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	68f9      	ldr	r1, [r7, #12]
 8001be2:	4618      	mov	r0, r3
 8001be4:	f002 fb7e 	bl	80042e4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2200      	movs	r2, #0
 8001bec:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8001bf0:	2300      	movs	r3, #0
}
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	3710      	adds	r7, #16
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}

08001bfa <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001bfa:	b580      	push	{r7, lr}
 8001bfc:	b086      	sub	sp, #24
 8001bfe:	af00      	add	r7, sp, #0
 8001c00:	60f8      	str	r0, [r7, #12]
 8001c02:	607a      	str	r2, [r7, #4]
 8001c04:	603b      	str	r3, [r7, #0]
 8001c06:	460b      	mov	r3, r1
 8001c08:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001c0a:	7afb      	ldrb	r3, [r7, #11]
 8001c0c:	f003 0207 	and.w	r2, r3, #7
 8001c10:	4613      	mov	r3, r2
 8001c12:	009b      	lsls	r3, r3, #2
 8001c14:	4413      	add	r3, r2
 8001c16:	00db      	lsls	r3, r3, #3
 8001c18:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001c1c:	68fa      	ldr	r2, [r7, #12]
 8001c1e:	4413      	add	r3, r2
 8001c20:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001c22:	697b      	ldr	r3, [r7, #20]
 8001c24:	687a      	ldr	r2, [r7, #4]
 8001c26:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001c28:	697b      	ldr	r3, [r7, #20]
 8001c2a:	683a      	ldr	r2, [r7, #0]
 8001c2c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001c2e:	697b      	ldr	r3, [r7, #20]
 8001c30:	2200      	movs	r2, #0
 8001c32:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001c34:	697b      	ldr	r3, [r7, #20]
 8001c36:	2200      	movs	r2, #0
 8001c38:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001c3a:	7afb      	ldrb	r3, [r7, #11]
 8001c3c:	f003 0307 	and.w	r3, r3, #7
 8001c40:	b2da      	uxtb	r2, r3
 8001c42:	697b      	ldr	r3, [r7, #20]
 8001c44:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001c46:	7afb      	ldrb	r3, [r7, #11]
 8001c48:	f003 0307 	and.w	r3, r3, #7
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d106      	bne.n	8001c5e <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	6979      	ldr	r1, [r7, #20]
 8001c56:	4618      	mov	r0, r3
 8001c58:	f002 fd30 	bl	80046bc <USB_EPStartXfer>
 8001c5c:	e005      	b.n	8001c6a <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	6979      	ldr	r1, [r7, #20]
 8001c64:	4618      	mov	r0, r3
 8001c66:	f002 fd29 	bl	80046bc <USB_EPStartXfer>
  }

  return HAL_OK;
 8001c6a:	2300      	movs	r3, #0
}
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	3718      	adds	r7, #24
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bd80      	pop	{r7, pc}

08001c74 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001c74:	b480      	push	{r7}
 8001c76:	b083      	sub	sp, #12
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
 8001c7c:	460b      	mov	r3, r1
 8001c7e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001c80:	78fb      	ldrb	r3, [r7, #3]
 8001c82:	f003 0207 	and.w	r2, r3, #7
 8001c86:	6879      	ldr	r1, [r7, #4]
 8001c88:	4613      	mov	r3, r2
 8001c8a:	009b      	lsls	r3, r3, #2
 8001c8c:	4413      	add	r3, r2
 8001c8e:	00db      	lsls	r3, r3, #3
 8001c90:	440b      	add	r3, r1
 8001c92:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8001c96:	681b      	ldr	r3, [r3, #0]
}
 8001c98:	4618      	mov	r0, r3
 8001c9a:	370c      	adds	r7, #12
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bc80      	pop	{r7}
 8001ca0:	4770      	bx	lr

08001ca2 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001ca2:	b580      	push	{r7, lr}
 8001ca4:	b086      	sub	sp, #24
 8001ca6:	af00      	add	r7, sp, #0
 8001ca8:	60f8      	str	r0, [r7, #12]
 8001caa:	607a      	str	r2, [r7, #4]
 8001cac:	603b      	str	r3, [r7, #0]
 8001cae:	460b      	mov	r3, r1
 8001cb0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001cb2:	7afb      	ldrb	r3, [r7, #11]
 8001cb4:	f003 0307 	and.w	r3, r3, #7
 8001cb8:	1c5a      	adds	r2, r3, #1
 8001cba:	4613      	mov	r3, r2
 8001cbc:	009b      	lsls	r3, r3, #2
 8001cbe:	4413      	add	r3, r2
 8001cc0:	00db      	lsls	r3, r3, #3
 8001cc2:	68fa      	ldr	r2, [r7, #12]
 8001cc4:	4413      	add	r3, r2
 8001cc6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001cc8:	697b      	ldr	r3, [r7, #20]
 8001cca:	687a      	ldr	r2, [r7, #4]
 8001ccc:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001cce:	697b      	ldr	r3, [r7, #20]
 8001cd0:	683a      	ldr	r2, [r7, #0]
 8001cd2:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8001cd4:	697b      	ldr	r3, [r7, #20]
 8001cd6:	2201      	movs	r2, #1
 8001cd8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8001cdc:	697b      	ldr	r3, [r7, #20]
 8001cde:	683a      	ldr	r2, [r7, #0]
 8001ce0:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8001ce2:	697b      	ldr	r3, [r7, #20]
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001ce8:	697b      	ldr	r3, [r7, #20]
 8001cea:	2201      	movs	r2, #1
 8001cec:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001cee:	7afb      	ldrb	r3, [r7, #11]
 8001cf0:	f003 0307 	and.w	r3, r3, #7
 8001cf4:	b2da      	uxtb	r2, r3
 8001cf6:	697b      	ldr	r3, [r7, #20]
 8001cf8:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001cfa:	7afb      	ldrb	r3, [r7, #11]
 8001cfc:	f003 0307 	and.w	r3, r3, #7
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d106      	bne.n	8001d12 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	6979      	ldr	r1, [r7, #20]
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	f002 fcd6 	bl	80046bc <USB_EPStartXfer>
 8001d10:	e005      	b.n	8001d1e <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	6979      	ldr	r1, [r7, #20]
 8001d18:	4618      	mov	r0, r3
 8001d1a:	f002 fccf 	bl	80046bc <USB_EPStartXfer>
  }

  return HAL_OK;
 8001d1e:	2300      	movs	r3, #0
}
 8001d20:	4618      	mov	r0, r3
 8001d22:	3718      	adds	r7, #24
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bd80      	pop	{r7, pc}

08001d28 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b084      	sub	sp, #16
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
 8001d30:	460b      	mov	r3, r1
 8001d32:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001d34:	78fb      	ldrb	r3, [r7, #3]
 8001d36:	f003 0207 	and.w	r2, r3, #7
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	429a      	cmp	r2, r3
 8001d40:	d901      	bls.n	8001d46 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001d42:	2301      	movs	r3, #1
 8001d44:	e04c      	b.n	8001de0 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001d46:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	da0e      	bge.n	8001d6c <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d4e:	78fb      	ldrb	r3, [r7, #3]
 8001d50:	f003 0307 	and.w	r3, r3, #7
 8001d54:	1c5a      	adds	r2, r3, #1
 8001d56:	4613      	mov	r3, r2
 8001d58:	009b      	lsls	r3, r3, #2
 8001d5a:	4413      	add	r3, r2
 8001d5c:	00db      	lsls	r3, r3, #3
 8001d5e:	687a      	ldr	r2, [r7, #4]
 8001d60:	4413      	add	r3, r2
 8001d62:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	2201      	movs	r2, #1
 8001d68:	705a      	strb	r2, [r3, #1]
 8001d6a:	e00c      	b.n	8001d86 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001d6c:	78fa      	ldrb	r2, [r7, #3]
 8001d6e:	4613      	mov	r3, r2
 8001d70:	009b      	lsls	r3, r3, #2
 8001d72:	4413      	add	r3, r2
 8001d74:	00db      	lsls	r3, r3, #3
 8001d76:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001d7a:	687a      	ldr	r2, [r7, #4]
 8001d7c:	4413      	add	r3, r2
 8001d7e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	2200      	movs	r2, #0
 8001d84:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	2201      	movs	r2, #1
 8001d8a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001d8c:	78fb      	ldrb	r3, [r7, #3]
 8001d8e:	f003 0307 	and.w	r3, r3, #7
 8001d92:	b2da      	uxtb	r2, r3
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001d9e:	2b01      	cmp	r3, #1
 8001da0:	d101      	bne.n	8001da6 <HAL_PCD_EP_SetStall+0x7e>
 8001da2:	2302      	movs	r3, #2
 8001da4:	e01c      	b.n	8001de0 <HAL_PCD_EP_SetStall+0xb8>
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	2201      	movs	r2, #1
 8001daa:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	68f9      	ldr	r1, [r7, #12]
 8001db4:	4618      	mov	r0, r3
 8001db6:	f004 fab9 	bl	800632c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001dba:	78fb      	ldrb	r3, [r7, #3]
 8001dbc:	f003 0307 	and.w	r3, r3, #7
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d108      	bne.n	8001dd6 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681a      	ldr	r2, [r3, #0]
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8001dce:	4619      	mov	r1, r3
 8001dd0:	4610      	mov	r0, r2
 8001dd2:	f004 fbde 	bl	8006592 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	2200      	movs	r2, #0
 8001dda:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001dde:	2300      	movs	r3, #0
}
 8001de0:	4618      	mov	r0, r3
 8001de2:	3710      	adds	r7, #16
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bd80      	pop	{r7, pc}

08001de8 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b084      	sub	sp, #16
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
 8001df0:	460b      	mov	r3, r1
 8001df2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001df4:	78fb      	ldrb	r3, [r7, #3]
 8001df6:	f003 020f 	and.w	r2, r3, #15
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	685b      	ldr	r3, [r3, #4]
 8001dfe:	429a      	cmp	r2, r3
 8001e00:	d901      	bls.n	8001e06 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001e02:	2301      	movs	r3, #1
 8001e04:	e040      	b.n	8001e88 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001e06:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	da0e      	bge.n	8001e2c <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e0e:	78fb      	ldrb	r3, [r7, #3]
 8001e10:	f003 0307 	and.w	r3, r3, #7
 8001e14:	1c5a      	adds	r2, r3, #1
 8001e16:	4613      	mov	r3, r2
 8001e18:	009b      	lsls	r3, r3, #2
 8001e1a:	4413      	add	r3, r2
 8001e1c:	00db      	lsls	r3, r3, #3
 8001e1e:	687a      	ldr	r2, [r7, #4]
 8001e20:	4413      	add	r3, r2
 8001e22:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	2201      	movs	r2, #1
 8001e28:	705a      	strb	r2, [r3, #1]
 8001e2a:	e00e      	b.n	8001e4a <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001e2c:	78fb      	ldrb	r3, [r7, #3]
 8001e2e:	f003 0207 	and.w	r2, r3, #7
 8001e32:	4613      	mov	r3, r2
 8001e34:	009b      	lsls	r3, r3, #2
 8001e36:	4413      	add	r3, r2
 8001e38:	00db      	lsls	r3, r3, #3
 8001e3a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001e3e:	687a      	ldr	r2, [r7, #4]
 8001e40:	4413      	add	r3, r2
 8001e42:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	2200      	movs	r2, #0
 8001e48:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001e50:	78fb      	ldrb	r3, [r7, #3]
 8001e52:	f003 0307 	and.w	r3, r3, #7
 8001e56:	b2da      	uxtb	r2, r3
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001e62:	2b01      	cmp	r3, #1
 8001e64:	d101      	bne.n	8001e6a <HAL_PCD_EP_ClrStall+0x82>
 8001e66:	2302      	movs	r3, #2
 8001e68:	e00e      	b.n	8001e88 <HAL_PCD_EP_ClrStall+0xa0>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	2201      	movs	r2, #1
 8001e6e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	68f9      	ldr	r1, [r7, #12]
 8001e78:	4618      	mov	r0, r3
 8001e7a:	f004 faa7 	bl	80063cc <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2200      	movs	r2, #0
 8001e82:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001e86:	2300      	movs	r3, #0
}
 8001e88:	4618      	mov	r0, r3
 8001e8a:	3710      	adds	r7, #16
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	bd80      	pop	{r7, pc}

08001e90 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b08e      	sub	sp, #56	; 0x38
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001e98:	e2ec      	b.n	8002474 <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001ea2:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001ea4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001ea6:	b2db      	uxtb	r3, r3
 8001ea8:	f003 030f 	and.w	r3, r3, #15
 8001eac:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8001eb0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	f040 8161 	bne.w	800217c <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001eba:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001ebc:	f003 0310 	and.w	r3, r3, #16
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d152      	bne.n	8001f6a <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	881b      	ldrh	r3, [r3, #0]
 8001eca:	b29b      	uxth	r3, r3
 8001ecc:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001ed0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ed4:	81fb      	strh	r3, [r7, #14]
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681a      	ldr	r2, [r3, #0]
 8001eda:	89fb      	ldrh	r3, [r7, #14]
 8001edc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001ee0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001ee4:	b29b      	uxth	r3, r3
 8001ee6:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	3328      	adds	r3, #40	; 0x28
 8001eec:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001ef6:	b29b      	uxth	r3, r3
 8001ef8:	461a      	mov	r2, r3
 8001efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001efc:	781b      	ldrb	r3, [r3, #0]
 8001efe:	00db      	lsls	r3, r3, #3
 8001f00:	4413      	add	r3, r2
 8001f02:	3302      	adds	r3, #2
 8001f04:	005b      	lsls	r3, r3, #1
 8001f06:	687a      	ldr	r2, [r7, #4]
 8001f08:	6812      	ldr	r2, [r2, #0]
 8001f0a:	4413      	add	r3, r2
 8001f0c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001f10:	881b      	ldrh	r3, [r3, #0]
 8001f12:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f18:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f1c:	695a      	ldr	r2, [r3, #20]
 8001f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f20:	69db      	ldr	r3, [r3, #28]
 8001f22:	441a      	add	r2, r3
 8001f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f26:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001f28:	2100      	movs	r1, #0
 8001f2a:	6878      	ldr	r0, [r7, #4]
 8001f2c:	f006 f9c9 	bl	80082c2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001f36:	b2db      	uxtb	r3, r3
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	f000 829b 	beq.w	8002474 <PCD_EP_ISR_Handler+0x5e4>
 8001f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f40:	699b      	ldr	r3, [r3, #24]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	f040 8296 	bne.w	8002474 <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001f4e:	b2db      	uxtb	r3, r3
 8001f50:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001f54:	b2da      	uxtb	r2, r3
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	b292      	uxth	r2, r2
 8001f5c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2200      	movs	r2, #0
 8001f64:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001f68:	e284      	b.n	8002474 <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001f70:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	881b      	ldrh	r3, [r3, #0]
 8001f78:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001f7a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001f7c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d034      	beq.n	8001fee <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001f8c:	b29b      	uxth	r3, r3
 8001f8e:	461a      	mov	r2, r3
 8001f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f92:	781b      	ldrb	r3, [r3, #0]
 8001f94:	00db      	lsls	r3, r3, #3
 8001f96:	4413      	add	r3, r2
 8001f98:	3306      	adds	r3, #6
 8001f9a:	005b      	lsls	r3, r3, #1
 8001f9c:	687a      	ldr	r2, [r7, #4]
 8001f9e:	6812      	ldr	r2, [r2, #0]
 8001fa0:	4413      	add	r3, r2
 8001fa2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001fa6:	881b      	ldrh	r3, [r3, #0]
 8001fa8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fae:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6818      	ldr	r0, [r3, #0]
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8001fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fbc:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fc0:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001fc2:	b29b      	uxth	r3, r3
 8001fc4:	f004 fb35 	bl	8006632 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	881b      	ldrh	r3, [r3, #0]
 8001fce:	b29a      	uxth	r2, r3
 8001fd0:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001fd4:	4013      	ands	r3, r2
 8001fd6:	823b      	strh	r3, [r7, #16]
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	8a3a      	ldrh	r2, [r7, #16]
 8001fde:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001fe2:	b292      	uxth	r2, r2
 8001fe4:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001fe6:	6878      	ldr	r0, [r7, #4]
 8001fe8:	f006 f93e 	bl	8008268 <HAL_PCD_SetupStageCallback>
 8001fec:	e242      	b.n	8002474 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001fee:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	f280 823e 	bge.w	8002474 <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	881b      	ldrh	r3, [r3, #0]
 8001ffe:	b29a      	uxth	r2, r3
 8002000:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002004:	4013      	ands	r3, r2
 8002006:	83bb      	strh	r3, [r7, #28]
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	8bba      	ldrh	r2, [r7, #28]
 800200e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002012:	b292      	uxth	r2, r2
 8002014:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800201e:	b29b      	uxth	r3, r3
 8002020:	461a      	mov	r2, r3
 8002022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002024:	781b      	ldrb	r3, [r3, #0]
 8002026:	00db      	lsls	r3, r3, #3
 8002028:	4413      	add	r3, r2
 800202a:	3306      	adds	r3, #6
 800202c:	005b      	lsls	r3, r3, #1
 800202e:	687a      	ldr	r2, [r7, #4]
 8002030:	6812      	ldr	r2, [r2, #0]
 8002032:	4413      	add	r3, r2
 8002034:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002038:	881b      	ldrh	r3, [r3, #0]
 800203a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800203e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002040:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002044:	69db      	ldr	r3, [r3, #28]
 8002046:	2b00      	cmp	r3, #0
 8002048:	d019      	beq.n	800207e <PCD_EP_ISR_Handler+0x1ee>
 800204a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800204c:	695b      	ldr	r3, [r3, #20]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d015      	beq.n	800207e <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6818      	ldr	r0, [r3, #0]
 8002056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002058:	6959      	ldr	r1, [r3, #20]
 800205a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800205c:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800205e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002060:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002062:	b29b      	uxth	r3, r3
 8002064:	f004 fae5 	bl	8006632 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8002068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800206a:	695a      	ldr	r2, [r3, #20]
 800206c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800206e:	69db      	ldr	r3, [r3, #28]
 8002070:	441a      	add	r2, r3
 8002072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002074:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002076:	2100      	movs	r1, #0
 8002078:	6878      	ldr	r0, [r7, #4]
 800207a:	f006 f907 	bl	800828c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	881b      	ldrh	r3, [r3, #0]
 8002084:	b29b      	uxth	r3, r3
 8002086:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800208a:	2b00      	cmp	r3, #0
 800208c:	f040 81f2 	bne.w	8002474 <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	61bb      	str	r3, [r7, #24]
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800209e:	b29b      	uxth	r3, r3
 80020a0:	461a      	mov	r2, r3
 80020a2:	69bb      	ldr	r3, [r7, #24]
 80020a4:	4413      	add	r3, r2
 80020a6:	61bb      	str	r3, [r7, #24]
 80020a8:	69bb      	ldr	r3, [r7, #24]
 80020aa:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80020ae:	617b      	str	r3, [r7, #20]
 80020b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020b2:	691b      	ldr	r3, [r3, #16]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d112      	bne.n	80020de <PCD_EP_ISR_Handler+0x24e>
 80020b8:	697b      	ldr	r3, [r7, #20]
 80020ba:	881b      	ldrh	r3, [r3, #0]
 80020bc:	b29b      	uxth	r3, r3
 80020be:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80020c2:	b29a      	uxth	r2, r3
 80020c4:	697b      	ldr	r3, [r7, #20]
 80020c6:	801a      	strh	r2, [r3, #0]
 80020c8:	697b      	ldr	r3, [r7, #20]
 80020ca:	881b      	ldrh	r3, [r3, #0]
 80020cc:	b29b      	uxth	r3, r3
 80020ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80020d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80020d6:	b29a      	uxth	r2, r3
 80020d8:	697b      	ldr	r3, [r7, #20]
 80020da:	801a      	strh	r2, [r3, #0]
 80020dc:	e02f      	b.n	800213e <PCD_EP_ISR_Handler+0x2ae>
 80020de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020e0:	691b      	ldr	r3, [r3, #16]
 80020e2:	2b3e      	cmp	r3, #62	; 0x3e
 80020e4:	d813      	bhi.n	800210e <PCD_EP_ISR_Handler+0x27e>
 80020e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020e8:	691b      	ldr	r3, [r3, #16]
 80020ea:	085b      	lsrs	r3, r3, #1
 80020ec:	633b      	str	r3, [r7, #48]	; 0x30
 80020ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020f0:	691b      	ldr	r3, [r3, #16]
 80020f2:	f003 0301 	and.w	r3, r3, #1
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d002      	beq.n	8002100 <PCD_EP_ISR_Handler+0x270>
 80020fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020fc:	3301      	adds	r3, #1
 80020fe:	633b      	str	r3, [r7, #48]	; 0x30
 8002100:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002102:	b29b      	uxth	r3, r3
 8002104:	029b      	lsls	r3, r3, #10
 8002106:	b29a      	uxth	r2, r3
 8002108:	697b      	ldr	r3, [r7, #20]
 800210a:	801a      	strh	r2, [r3, #0]
 800210c:	e017      	b.n	800213e <PCD_EP_ISR_Handler+0x2ae>
 800210e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002110:	691b      	ldr	r3, [r3, #16]
 8002112:	095b      	lsrs	r3, r3, #5
 8002114:	633b      	str	r3, [r7, #48]	; 0x30
 8002116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002118:	691b      	ldr	r3, [r3, #16]
 800211a:	f003 031f 	and.w	r3, r3, #31
 800211e:	2b00      	cmp	r3, #0
 8002120:	d102      	bne.n	8002128 <PCD_EP_ISR_Handler+0x298>
 8002122:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002124:	3b01      	subs	r3, #1
 8002126:	633b      	str	r3, [r7, #48]	; 0x30
 8002128:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800212a:	b29b      	uxth	r3, r3
 800212c:	029b      	lsls	r3, r3, #10
 800212e:	b29b      	uxth	r3, r3
 8002130:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002134:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002138:	b29a      	uxth	r2, r3
 800213a:	697b      	ldr	r3, [r7, #20]
 800213c:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	881b      	ldrh	r3, [r3, #0]
 8002144:	b29b      	uxth	r3, r3
 8002146:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800214a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800214e:	827b      	strh	r3, [r7, #18]
 8002150:	8a7b      	ldrh	r3, [r7, #18]
 8002152:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002156:	827b      	strh	r3, [r7, #18]
 8002158:	8a7b      	ldrh	r3, [r7, #18]
 800215a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800215e:	827b      	strh	r3, [r7, #18]
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681a      	ldr	r2, [r3, #0]
 8002164:	8a7b      	ldrh	r3, [r7, #18]
 8002166:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800216a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800216e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002172:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002176:	b29b      	uxth	r3, r3
 8002178:	8013      	strh	r3, [r2, #0]
 800217a:	e17b      	b.n	8002474 <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	461a      	mov	r2, r3
 8002182:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002186:	009b      	lsls	r3, r3, #2
 8002188:	4413      	add	r3, r2
 800218a:	881b      	ldrh	r3, [r3, #0]
 800218c:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800218e:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8002192:	2b00      	cmp	r3, #0
 8002194:	f280 80ea 	bge.w	800236c <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	461a      	mov	r2, r3
 800219e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80021a2:	009b      	lsls	r3, r3, #2
 80021a4:	4413      	add	r3, r2
 80021a6:	881b      	ldrh	r3, [r3, #0]
 80021a8:	b29a      	uxth	r2, r3
 80021aa:	f640 738f 	movw	r3, #3983	; 0xf8f
 80021ae:	4013      	ands	r3, r2
 80021b0:	853b      	strh	r3, [r7, #40]	; 0x28
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	461a      	mov	r2, r3
 80021b8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80021bc:	009b      	lsls	r3, r3, #2
 80021be:	4413      	add	r3, r2
 80021c0:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80021c2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80021c6:	b292      	uxth	r2, r2
 80021c8:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80021ca:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80021ce:	4613      	mov	r3, r2
 80021d0:	009b      	lsls	r3, r3, #2
 80021d2:	4413      	add	r3, r2
 80021d4:	00db      	lsls	r3, r3, #3
 80021d6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80021da:	687a      	ldr	r2, [r7, #4]
 80021dc:	4413      	add	r3, r2
 80021de:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80021e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021e2:	7b1b      	ldrb	r3, [r3, #12]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d122      	bne.n	800222e <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80021f0:	b29b      	uxth	r3, r3
 80021f2:	461a      	mov	r2, r3
 80021f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f6:	781b      	ldrb	r3, [r3, #0]
 80021f8:	00db      	lsls	r3, r3, #3
 80021fa:	4413      	add	r3, r2
 80021fc:	3306      	adds	r3, #6
 80021fe:	005b      	lsls	r3, r3, #1
 8002200:	687a      	ldr	r2, [r7, #4]
 8002202:	6812      	ldr	r2, [r2, #0]
 8002204:	4413      	add	r3, r2
 8002206:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800220a:	881b      	ldrh	r3, [r3, #0]
 800220c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002210:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8002212:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002214:	2b00      	cmp	r3, #0
 8002216:	f000 8087 	beq.w	8002328 <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6818      	ldr	r0, [r3, #0]
 800221e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002220:	6959      	ldr	r1, [r3, #20]
 8002222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002224:	88da      	ldrh	r2, [r3, #6]
 8002226:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002228:	f004 fa03 	bl	8006632 <USB_ReadPMA>
 800222c:	e07c      	b.n	8002328 <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800222e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002230:	78db      	ldrb	r3, [r3, #3]
 8002232:	2b02      	cmp	r3, #2
 8002234:	d108      	bne.n	8002248 <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8002236:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002238:	461a      	mov	r2, r3
 800223a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800223c:	6878      	ldr	r0, [r7, #4]
 800223e:	f000 f927 	bl	8002490 <HAL_PCD_EP_DB_Receive>
 8002242:	4603      	mov	r3, r0
 8002244:	86fb      	strh	r3, [r7, #54]	; 0x36
 8002246:	e06f      	b.n	8002328 <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	461a      	mov	r2, r3
 800224e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002250:	781b      	ldrb	r3, [r3, #0]
 8002252:	009b      	lsls	r3, r3, #2
 8002254:	4413      	add	r3, r2
 8002256:	881b      	ldrh	r3, [r3, #0]
 8002258:	b29b      	uxth	r3, r3
 800225a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800225e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002262:	847b      	strh	r3, [r7, #34]	; 0x22
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	461a      	mov	r2, r3
 800226a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800226c:	781b      	ldrb	r3, [r3, #0]
 800226e:	009b      	lsls	r3, r3, #2
 8002270:	441a      	add	r2, r3
 8002272:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002274:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002278:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800227c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002280:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002284:	b29b      	uxth	r3, r3
 8002286:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	461a      	mov	r2, r3
 800228e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002290:	781b      	ldrb	r3, [r3, #0]
 8002292:	009b      	lsls	r3, r3, #2
 8002294:	4413      	add	r3, r2
 8002296:	881b      	ldrh	r3, [r3, #0]
 8002298:	b29b      	uxth	r3, r3
 800229a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d021      	beq.n	80022e6 <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80022aa:	b29b      	uxth	r3, r3
 80022ac:	461a      	mov	r2, r3
 80022ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022b0:	781b      	ldrb	r3, [r3, #0]
 80022b2:	00db      	lsls	r3, r3, #3
 80022b4:	4413      	add	r3, r2
 80022b6:	3302      	adds	r3, #2
 80022b8:	005b      	lsls	r3, r3, #1
 80022ba:	687a      	ldr	r2, [r7, #4]
 80022bc:	6812      	ldr	r2, [r2, #0]
 80022be:	4413      	add	r3, r2
 80022c0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80022c4:	881b      	ldrh	r3, [r3, #0]
 80022c6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80022ca:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80022cc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d02a      	beq.n	8002328 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6818      	ldr	r0, [r3, #0]
 80022d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d8:	6959      	ldr	r1, [r3, #20]
 80022da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022dc:	891a      	ldrh	r2, [r3, #8]
 80022de:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80022e0:	f004 f9a7 	bl	8006632 <USB_ReadPMA>
 80022e4:	e020      	b.n	8002328 <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80022ee:	b29b      	uxth	r3, r3
 80022f0:	461a      	mov	r2, r3
 80022f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022f4:	781b      	ldrb	r3, [r3, #0]
 80022f6:	00db      	lsls	r3, r3, #3
 80022f8:	4413      	add	r3, r2
 80022fa:	3306      	adds	r3, #6
 80022fc:	005b      	lsls	r3, r3, #1
 80022fe:	687a      	ldr	r2, [r7, #4]
 8002300:	6812      	ldr	r2, [r2, #0]
 8002302:	4413      	add	r3, r2
 8002304:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002308:	881b      	ldrh	r3, [r3, #0]
 800230a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800230e:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8002310:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002312:	2b00      	cmp	r3, #0
 8002314:	d008      	beq.n	8002328 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6818      	ldr	r0, [r3, #0]
 800231a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800231c:	6959      	ldr	r1, [r3, #20]
 800231e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002320:	895a      	ldrh	r2, [r3, #10]
 8002322:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002324:	f004 f985 	bl	8006632 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800232a:	69da      	ldr	r2, [r3, #28]
 800232c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800232e:	441a      	add	r2, r3
 8002330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002332:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002336:	695a      	ldr	r2, [r3, #20]
 8002338:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800233a:	441a      	add	r2, r3
 800233c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800233e:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002342:	699b      	ldr	r3, [r3, #24]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d004      	beq.n	8002352 <PCD_EP_ISR_Handler+0x4c2>
 8002348:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800234a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800234c:	691b      	ldr	r3, [r3, #16]
 800234e:	429a      	cmp	r2, r3
 8002350:	d206      	bcs.n	8002360 <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002354:	781b      	ldrb	r3, [r3, #0]
 8002356:	4619      	mov	r1, r3
 8002358:	6878      	ldr	r0, [r7, #4]
 800235a:	f005 ff97 	bl	800828c <HAL_PCD_DataOutStageCallback>
 800235e:	e005      	b.n	800236c <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002366:	4618      	mov	r0, r3
 8002368:	f002 f9a8 	bl	80046bc <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800236c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800236e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002372:	2b00      	cmp	r3, #0
 8002374:	d07e      	beq.n	8002474 <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 8002376:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800237a:	1c5a      	adds	r2, r3, #1
 800237c:	4613      	mov	r3, r2
 800237e:	009b      	lsls	r3, r3, #2
 8002380:	4413      	add	r3, r2
 8002382:	00db      	lsls	r3, r3, #3
 8002384:	687a      	ldr	r2, [r7, #4]
 8002386:	4413      	add	r3, r2
 8002388:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	461a      	mov	r2, r3
 8002390:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002394:	009b      	lsls	r3, r3, #2
 8002396:	4413      	add	r3, r2
 8002398:	881b      	ldrh	r3, [r3, #0]
 800239a:	b29b      	uxth	r3, r3
 800239c:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80023a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023a4:	843b      	strh	r3, [r7, #32]
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	461a      	mov	r2, r3
 80023ac:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80023b0:	009b      	lsls	r3, r3, #2
 80023b2:	441a      	add	r2, r3
 80023b4:	8c3b      	ldrh	r3, [r7, #32]
 80023b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80023ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80023be:	b29b      	uxth	r3, r3
 80023c0:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 80023c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023c4:	78db      	ldrb	r3, [r3, #3]
 80023c6:	2b03      	cmp	r3, #3
 80023c8:	d00c      	beq.n	80023e4 <PCD_EP_ISR_Handler+0x554>
 80023ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023cc:	78db      	ldrb	r3, [r3, #3]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d008      	beq.n	80023e4 <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80023d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023d4:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 80023d6:	2b02      	cmp	r3, #2
 80023d8:	d146      	bne.n	8002468 <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80023da:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80023dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d141      	bne.n	8002468 <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80023ec:	b29b      	uxth	r3, r3
 80023ee:	461a      	mov	r2, r3
 80023f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023f2:	781b      	ldrb	r3, [r3, #0]
 80023f4:	00db      	lsls	r3, r3, #3
 80023f6:	4413      	add	r3, r2
 80023f8:	3302      	adds	r3, #2
 80023fa:	005b      	lsls	r3, r3, #1
 80023fc:	687a      	ldr	r2, [r7, #4]
 80023fe:	6812      	ldr	r2, [r2, #0]
 8002400:	4413      	add	r3, r2
 8002402:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002406:	881b      	ldrh	r3, [r3, #0]
 8002408:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800240c:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 800240e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002410:	699a      	ldr	r2, [r3, #24]
 8002412:	8bfb      	ldrh	r3, [r7, #30]
 8002414:	429a      	cmp	r2, r3
 8002416:	d906      	bls.n	8002426 <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 8002418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800241a:	699a      	ldr	r2, [r3, #24]
 800241c:	8bfb      	ldrh	r3, [r7, #30]
 800241e:	1ad2      	subs	r2, r2, r3
 8002420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002422:	619a      	str	r2, [r3, #24]
 8002424:	e002      	b.n	800242c <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 8002426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002428:	2200      	movs	r2, #0
 800242a:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 800242c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800242e:	699b      	ldr	r3, [r3, #24]
 8002430:	2b00      	cmp	r3, #0
 8002432:	d106      	bne.n	8002442 <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002436:	781b      	ldrb	r3, [r3, #0]
 8002438:	4619      	mov	r1, r3
 800243a:	6878      	ldr	r0, [r7, #4]
 800243c:	f005 ff41 	bl	80082c2 <HAL_PCD_DataInStageCallback>
 8002440:	e018      	b.n	8002474 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8002442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002444:	695a      	ldr	r2, [r3, #20]
 8002446:	8bfb      	ldrh	r3, [r7, #30]
 8002448:	441a      	add	r2, r3
 800244a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800244c:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 800244e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002450:	69da      	ldr	r2, [r3, #28]
 8002452:	8bfb      	ldrh	r3, [r7, #30]
 8002454:	441a      	add	r2, r3
 8002456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002458:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002460:	4618      	mov	r0, r3
 8002462:	f002 f92b 	bl	80046bc <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8002466:	e005      	b.n	8002474 <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002468:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800246a:	461a      	mov	r2, r3
 800246c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800246e:	6878      	ldr	r0, [r7, #4]
 8002470:	f000 f91b 	bl	80026aa <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800247c:	b29b      	uxth	r3, r3
 800247e:	b21b      	sxth	r3, r3
 8002480:	2b00      	cmp	r3, #0
 8002482:	f6ff ad0a 	blt.w	8001e9a <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8002486:	2300      	movs	r3, #0
}
 8002488:	4618      	mov	r0, r3
 800248a:	3738      	adds	r7, #56	; 0x38
 800248c:	46bd      	mov	sp, r7
 800248e:	bd80      	pop	{r7, pc}

08002490 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b088      	sub	sp, #32
 8002494:	af00      	add	r7, sp, #0
 8002496:	60f8      	str	r0, [r7, #12]
 8002498:	60b9      	str	r1, [r7, #8]
 800249a:	4613      	mov	r3, r2
 800249c:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800249e:	88fb      	ldrh	r3, [r7, #6]
 80024a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d07e      	beq.n	80025a6 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80024b0:	b29b      	uxth	r3, r3
 80024b2:	461a      	mov	r2, r3
 80024b4:	68bb      	ldr	r3, [r7, #8]
 80024b6:	781b      	ldrb	r3, [r3, #0]
 80024b8:	00db      	lsls	r3, r3, #3
 80024ba:	4413      	add	r3, r2
 80024bc:	3302      	adds	r3, #2
 80024be:	005b      	lsls	r3, r3, #1
 80024c0:	68fa      	ldr	r2, [r7, #12]
 80024c2:	6812      	ldr	r2, [r2, #0]
 80024c4:	4413      	add	r3, r2
 80024c6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80024ca:	881b      	ldrh	r3, [r3, #0]
 80024cc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80024d0:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80024d2:	68bb      	ldr	r3, [r7, #8]
 80024d4:	699a      	ldr	r2, [r3, #24]
 80024d6:	8b7b      	ldrh	r3, [r7, #26]
 80024d8:	429a      	cmp	r2, r3
 80024da:	d306      	bcc.n	80024ea <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 80024dc:	68bb      	ldr	r3, [r7, #8]
 80024de:	699a      	ldr	r2, [r3, #24]
 80024e0:	8b7b      	ldrh	r3, [r7, #26]
 80024e2:	1ad2      	subs	r2, r2, r3
 80024e4:	68bb      	ldr	r3, [r7, #8]
 80024e6:	619a      	str	r2, [r3, #24]
 80024e8:	e002      	b.n	80024f0 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 80024ea:	68bb      	ldr	r3, [r7, #8]
 80024ec:	2200      	movs	r2, #0
 80024ee:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80024f0:	68bb      	ldr	r3, [r7, #8]
 80024f2:	699b      	ldr	r3, [r3, #24]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d123      	bne.n	8002540 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	461a      	mov	r2, r3
 80024fe:	68bb      	ldr	r3, [r7, #8]
 8002500:	781b      	ldrb	r3, [r3, #0]
 8002502:	009b      	lsls	r3, r3, #2
 8002504:	4413      	add	r3, r2
 8002506:	881b      	ldrh	r3, [r3, #0]
 8002508:	b29b      	uxth	r3, r3
 800250a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800250e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002512:	833b      	strh	r3, [r7, #24]
 8002514:	8b3b      	ldrh	r3, [r7, #24]
 8002516:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800251a:	833b      	strh	r3, [r7, #24]
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	461a      	mov	r2, r3
 8002522:	68bb      	ldr	r3, [r7, #8]
 8002524:	781b      	ldrb	r3, [r3, #0]
 8002526:	009b      	lsls	r3, r3, #2
 8002528:	441a      	add	r2, r3
 800252a:	8b3b      	ldrh	r3, [r7, #24]
 800252c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002530:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002534:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002538:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800253c:	b29b      	uxth	r3, r3
 800253e:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002540:	88fb      	ldrh	r3, [r7, #6]
 8002542:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002546:	2b00      	cmp	r3, #0
 8002548:	d01f      	beq.n	800258a <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	461a      	mov	r2, r3
 8002550:	68bb      	ldr	r3, [r7, #8]
 8002552:	781b      	ldrb	r3, [r3, #0]
 8002554:	009b      	lsls	r3, r3, #2
 8002556:	4413      	add	r3, r2
 8002558:	881b      	ldrh	r3, [r3, #0]
 800255a:	b29b      	uxth	r3, r3
 800255c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002560:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002564:	82fb      	strh	r3, [r7, #22]
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	461a      	mov	r2, r3
 800256c:	68bb      	ldr	r3, [r7, #8]
 800256e:	781b      	ldrb	r3, [r3, #0]
 8002570:	009b      	lsls	r3, r3, #2
 8002572:	441a      	add	r2, r3
 8002574:	8afb      	ldrh	r3, [r7, #22]
 8002576:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800257a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800257e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002582:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002586:	b29b      	uxth	r3, r3
 8002588:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800258a:	8b7b      	ldrh	r3, [r7, #26]
 800258c:	2b00      	cmp	r3, #0
 800258e:	f000 8087 	beq.w	80026a0 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	6818      	ldr	r0, [r3, #0]
 8002596:	68bb      	ldr	r3, [r7, #8]
 8002598:	6959      	ldr	r1, [r3, #20]
 800259a:	68bb      	ldr	r3, [r7, #8]
 800259c:	891a      	ldrh	r2, [r3, #8]
 800259e:	8b7b      	ldrh	r3, [r7, #26]
 80025a0:	f004 f847 	bl	8006632 <USB_ReadPMA>
 80025a4:	e07c      	b.n	80026a0 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80025ae:	b29b      	uxth	r3, r3
 80025b0:	461a      	mov	r2, r3
 80025b2:	68bb      	ldr	r3, [r7, #8]
 80025b4:	781b      	ldrb	r3, [r3, #0]
 80025b6:	00db      	lsls	r3, r3, #3
 80025b8:	4413      	add	r3, r2
 80025ba:	3306      	adds	r3, #6
 80025bc:	005b      	lsls	r3, r3, #1
 80025be:	68fa      	ldr	r2, [r7, #12]
 80025c0:	6812      	ldr	r2, [r2, #0]
 80025c2:	4413      	add	r3, r2
 80025c4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80025c8:	881b      	ldrh	r3, [r3, #0]
 80025ca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80025ce:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80025d0:	68bb      	ldr	r3, [r7, #8]
 80025d2:	699a      	ldr	r2, [r3, #24]
 80025d4:	8b7b      	ldrh	r3, [r7, #26]
 80025d6:	429a      	cmp	r2, r3
 80025d8:	d306      	bcc.n	80025e8 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 80025da:	68bb      	ldr	r3, [r7, #8]
 80025dc:	699a      	ldr	r2, [r3, #24]
 80025de:	8b7b      	ldrh	r3, [r7, #26]
 80025e0:	1ad2      	subs	r2, r2, r3
 80025e2:	68bb      	ldr	r3, [r7, #8]
 80025e4:	619a      	str	r2, [r3, #24]
 80025e6:	e002      	b.n	80025ee <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 80025e8:	68bb      	ldr	r3, [r7, #8]
 80025ea:	2200      	movs	r2, #0
 80025ec:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80025ee:	68bb      	ldr	r3, [r7, #8]
 80025f0:	699b      	ldr	r3, [r3, #24]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d123      	bne.n	800263e <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	461a      	mov	r2, r3
 80025fc:	68bb      	ldr	r3, [r7, #8]
 80025fe:	781b      	ldrb	r3, [r3, #0]
 8002600:	009b      	lsls	r3, r3, #2
 8002602:	4413      	add	r3, r2
 8002604:	881b      	ldrh	r3, [r3, #0]
 8002606:	b29b      	uxth	r3, r3
 8002608:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800260c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002610:	83fb      	strh	r3, [r7, #30]
 8002612:	8bfb      	ldrh	r3, [r7, #30]
 8002614:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002618:	83fb      	strh	r3, [r7, #30]
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	461a      	mov	r2, r3
 8002620:	68bb      	ldr	r3, [r7, #8]
 8002622:	781b      	ldrb	r3, [r3, #0]
 8002624:	009b      	lsls	r3, r3, #2
 8002626:	441a      	add	r2, r3
 8002628:	8bfb      	ldrh	r3, [r7, #30]
 800262a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800262e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002632:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002636:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800263a:	b29b      	uxth	r3, r3
 800263c:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800263e:	88fb      	ldrh	r3, [r7, #6]
 8002640:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002644:	2b00      	cmp	r3, #0
 8002646:	d11f      	bne.n	8002688 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	461a      	mov	r2, r3
 800264e:	68bb      	ldr	r3, [r7, #8]
 8002650:	781b      	ldrb	r3, [r3, #0]
 8002652:	009b      	lsls	r3, r3, #2
 8002654:	4413      	add	r3, r2
 8002656:	881b      	ldrh	r3, [r3, #0]
 8002658:	b29b      	uxth	r3, r3
 800265a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800265e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002662:	83bb      	strh	r3, [r7, #28]
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	461a      	mov	r2, r3
 800266a:	68bb      	ldr	r3, [r7, #8]
 800266c:	781b      	ldrb	r3, [r3, #0]
 800266e:	009b      	lsls	r3, r3, #2
 8002670:	441a      	add	r2, r3
 8002672:	8bbb      	ldrh	r3, [r7, #28]
 8002674:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002678:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800267c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002680:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002684:	b29b      	uxth	r3, r3
 8002686:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002688:	8b7b      	ldrh	r3, [r7, #26]
 800268a:	2b00      	cmp	r3, #0
 800268c:	d008      	beq.n	80026a0 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	6818      	ldr	r0, [r3, #0]
 8002692:	68bb      	ldr	r3, [r7, #8]
 8002694:	6959      	ldr	r1, [r3, #20]
 8002696:	68bb      	ldr	r3, [r7, #8]
 8002698:	895a      	ldrh	r2, [r3, #10]
 800269a:	8b7b      	ldrh	r3, [r7, #26]
 800269c:	f003 ffc9 	bl	8006632 <USB_ReadPMA>
    }
  }

  return count;
 80026a0:	8b7b      	ldrh	r3, [r7, #26]
}
 80026a2:	4618      	mov	r0, r3
 80026a4:	3720      	adds	r7, #32
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bd80      	pop	{r7, pc}

080026aa <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80026aa:	b580      	push	{r7, lr}
 80026ac:	b0a2      	sub	sp, #136	; 0x88
 80026ae:	af00      	add	r7, sp, #0
 80026b0:	60f8      	str	r0, [r7, #12]
 80026b2:	60b9      	str	r1, [r7, #8]
 80026b4:	4613      	mov	r3, r2
 80026b6:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80026b8:	88fb      	ldrh	r3, [r7, #6]
 80026ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026be:	2b00      	cmp	r3, #0
 80026c0:	f000 81c7 	beq.w	8002a52 <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80026cc:	b29b      	uxth	r3, r3
 80026ce:	461a      	mov	r2, r3
 80026d0:	68bb      	ldr	r3, [r7, #8]
 80026d2:	781b      	ldrb	r3, [r3, #0]
 80026d4:	00db      	lsls	r3, r3, #3
 80026d6:	4413      	add	r3, r2
 80026d8:	3302      	adds	r3, #2
 80026da:	005b      	lsls	r3, r3, #1
 80026dc:	68fa      	ldr	r2, [r7, #12]
 80026de:	6812      	ldr	r2, [r2, #0]
 80026e0:	4413      	add	r3, r2
 80026e2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80026e6:	881b      	ldrh	r3, [r3, #0]
 80026e8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80026ec:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 80026f0:	68bb      	ldr	r3, [r7, #8]
 80026f2:	699a      	ldr	r2, [r3, #24]
 80026f4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80026f8:	429a      	cmp	r2, r3
 80026fa:	d907      	bls.n	800270c <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 80026fc:	68bb      	ldr	r3, [r7, #8]
 80026fe:	699a      	ldr	r2, [r3, #24]
 8002700:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002704:	1ad2      	subs	r2, r2, r3
 8002706:	68bb      	ldr	r3, [r7, #8]
 8002708:	619a      	str	r2, [r3, #24]
 800270a:	e002      	b.n	8002712 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 800270c:	68bb      	ldr	r3, [r7, #8]
 800270e:	2200      	movs	r2, #0
 8002710:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002712:	68bb      	ldr	r3, [r7, #8]
 8002714:	699b      	ldr	r3, [r3, #24]
 8002716:	2b00      	cmp	r3, #0
 8002718:	f040 80b9 	bne.w	800288e <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800271c:	68bb      	ldr	r3, [r7, #8]
 800271e:	785b      	ldrb	r3, [r3, #1]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d126      	bne.n	8002772 <HAL_PCD_EP_DB_Transmit+0xc8>
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	62bb      	str	r3, [r7, #40]	; 0x28
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002732:	b29b      	uxth	r3, r3
 8002734:	461a      	mov	r2, r3
 8002736:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002738:	4413      	add	r3, r2
 800273a:	62bb      	str	r3, [r7, #40]	; 0x28
 800273c:	68bb      	ldr	r3, [r7, #8]
 800273e:	781b      	ldrb	r3, [r3, #0]
 8002740:	011a      	lsls	r2, r3, #4
 8002742:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002744:	4413      	add	r3, r2
 8002746:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800274a:	627b      	str	r3, [r7, #36]	; 0x24
 800274c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800274e:	881b      	ldrh	r3, [r3, #0]
 8002750:	b29b      	uxth	r3, r3
 8002752:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002756:	b29a      	uxth	r2, r3
 8002758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800275a:	801a      	strh	r2, [r3, #0]
 800275c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800275e:	881b      	ldrh	r3, [r3, #0]
 8002760:	b29b      	uxth	r3, r3
 8002762:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002766:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800276a:	b29a      	uxth	r2, r3
 800276c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800276e:	801a      	strh	r2, [r3, #0]
 8002770:	e01a      	b.n	80027a8 <HAL_PCD_EP_DB_Transmit+0xfe>
 8002772:	68bb      	ldr	r3, [r7, #8]
 8002774:	785b      	ldrb	r3, [r3, #1]
 8002776:	2b01      	cmp	r3, #1
 8002778:	d116      	bne.n	80027a8 <HAL_PCD_EP_DB_Transmit+0xfe>
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	633b      	str	r3, [r7, #48]	; 0x30
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002788:	b29b      	uxth	r3, r3
 800278a:	461a      	mov	r2, r3
 800278c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800278e:	4413      	add	r3, r2
 8002790:	633b      	str	r3, [r7, #48]	; 0x30
 8002792:	68bb      	ldr	r3, [r7, #8]
 8002794:	781b      	ldrb	r3, [r3, #0]
 8002796:	011a      	lsls	r2, r3, #4
 8002798:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800279a:	4413      	add	r3, r2
 800279c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80027a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80027a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027a4:	2200      	movs	r2, #0
 80027a6:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	623b      	str	r3, [r7, #32]
 80027ae:	68bb      	ldr	r3, [r7, #8]
 80027b0:	785b      	ldrb	r3, [r3, #1]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d126      	bne.n	8002804 <HAL_PCD_EP_DB_Transmit+0x15a>
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	61bb      	str	r3, [r7, #24]
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80027c4:	b29b      	uxth	r3, r3
 80027c6:	461a      	mov	r2, r3
 80027c8:	69bb      	ldr	r3, [r7, #24]
 80027ca:	4413      	add	r3, r2
 80027cc:	61bb      	str	r3, [r7, #24]
 80027ce:	68bb      	ldr	r3, [r7, #8]
 80027d0:	781b      	ldrb	r3, [r3, #0]
 80027d2:	011a      	lsls	r2, r3, #4
 80027d4:	69bb      	ldr	r3, [r7, #24]
 80027d6:	4413      	add	r3, r2
 80027d8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80027dc:	617b      	str	r3, [r7, #20]
 80027de:	697b      	ldr	r3, [r7, #20]
 80027e0:	881b      	ldrh	r3, [r3, #0]
 80027e2:	b29b      	uxth	r3, r3
 80027e4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80027e8:	b29a      	uxth	r2, r3
 80027ea:	697b      	ldr	r3, [r7, #20]
 80027ec:	801a      	strh	r2, [r3, #0]
 80027ee:	697b      	ldr	r3, [r7, #20]
 80027f0:	881b      	ldrh	r3, [r3, #0]
 80027f2:	b29b      	uxth	r3, r3
 80027f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80027f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80027fc:	b29a      	uxth	r2, r3
 80027fe:	697b      	ldr	r3, [r7, #20]
 8002800:	801a      	strh	r2, [r3, #0]
 8002802:	e017      	b.n	8002834 <HAL_PCD_EP_DB_Transmit+0x18a>
 8002804:	68bb      	ldr	r3, [r7, #8]
 8002806:	785b      	ldrb	r3, [r3, #1]
 8002808:	2b01      	cmp	r3, #1
 800280a:	d113      	bne.n	8002834 <HAL_PCD_EP_DB_Transmit+0x18a>
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002814:	b29b      	uxth	r3, r3
 8002816:	461a      	mov	r2, r3
 8002818:	6a3b      	ldr	r3, [r7, #32]
 800281a:	4413      	add	r3, r2
 800281c:	623b      	str	r3, [r7, #32]
 800281e:	68bb      	ldr	r3, [r7, #8]
 8002820:	781b      	ldrb	r3, [r3, #0]
 8002822:	011a      	lsls	r2, r3, #4
 8002824:	6a3b      	ldr	r3, [r7, #32]
 8002826:	4413      	add	r3, r2
 8002828:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800282c:	61fb      	str	r3, [r7, #28]
 800282e:	69fb      	ldr	r3, [r7, #28]
 8002830:	2200      	movs	r2, #0
 8002832:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002834:	68bb      	ldr	r3, [r7, #8]
 8002836:	781b      	ldrb	r3, [r3, #0]
 8002838:	4619      	mov	r1, r3
 800283a:	68f8      	ldr	r0, [r7, #12]
 800283c:	f005 fd41 	bl	80082c2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002840:	88fb      	ldrh	r3, [r7, #6]
 8002842:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002846:	2b00      	cmp	r3, #0
 8002848:	f000 82d4 	beq.w	8002df4 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	461a      	mov	r2, r3
 8002852:	68bb      	ldr	r3, [r7, #8]
 8002854:	781b      	ldrb	r3, [r3, #0]
 8002856:	009b      	lsls	r3, r3, #2
 8002858:	4413      	add	r3, r2
 800285a:	881b      	ldrh	r3, [r3, #0]
 800285c:	b29b      	uxth	r3, r3
 800285e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002862:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002866:	827b      	strh	r3, [r7, #18]
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	461a      	mov	r2, r3
 800286e:	68bb      	ldr	r3, [r7, #8]
 8002870:	781b      	ldrb	r3, [r3, #0]
 8002872:	009b      	lsls	r3, r3, #2
 8002874:	441a      	add	r2, r3
 8002876:	8a7b      	ldrh	r3, [r7, #18]
 8002878:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800287c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002880:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002884:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002888:	b29b      	uxth	r3, r3
 800288a:	8013      	strh	r3, [r2, #0]
 800288c:	e2b2      	b.n	8002df4 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800288e:	88fb      	ldrh	r3, [r7, #6]
 8002890:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002894:	2b00      	cmp	r3, #0
 8002896:	d021      	beq.n	80028dc <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	461a      	mov	r2, r3
 800289e:	68bb      	ldr	r3, [r7, #8]
 80028a0:	781b      	ldrb	r3, [r3, #0]
 80028a2:	009b      	lsls	r3, r3, #2
 80028a4:	4413      	add	r3, r2
 80028a6:	881b      	ldrh	r3, [r3, #0]
 80028a8:	b29b      	uxth	r3, r3
 80028aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80028ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028b2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	461a      	mov	r2, r3
 80028bc:	68bb      	ldr	r3, [r7, #8]
 80028be:	781b      	ldrb	r3, [r3, #0]
 80028c0:	009b      	lsls	r3, r3, #2
 80028c2:	441a      	add	r2, r3
 80028c4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80028c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80028cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80028d0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80028d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80028d8:	b29b      	uxth	r3, r3
 80028da:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80028dc:	68bb      	ldr	r3, [r7, #8]
 80028de:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80028e2:	2b01      	cmp	r3, #1
 80028e4:	f040 8286 	bne.w	8002df4 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 80028e8:	68bb      	ldr	r3, [r7, #8]
 80028ea:	695a      	ldr	r2, [r3, #20]
 80028ec:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80028f0:	441a      	add	r2, r3
 80028f2:	68bb      	ldr	r3, [r7, #8]
 80028f4:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80028f6:	68bb      	ldr	r3, [r7, #8]
 80028f8:	69da      	ldr	r2, [r3, #28]
 80028fa:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80028fe:	441a      	add	r2, r3
 8002900:	68bb      	ldr	r3, [r7, #8]
 8002902:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002904:	68bb      	ldr	r3, [r7, #8]
 8002906:	6a1a      	ldr	r2, [r3, #32]
 8002908:	68bb      	ldr	r3, [r7, #8]
 800290a:	691b      	ldr	r3, [r3, #16]
 800290c:	429a      	cmp	r2, r3
 800290e:	d309      	bcc.n	8002924 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8002910:	68bb      	ldr	r3, [r7, #8]
 8002912:	691b      	ldr	r3, [r3, #16]
 8002914:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8002916:	68bb      	ldr	r3, [r7, #8]
 8002918:	6a1a      	ldr	r2, [r3, #32]
 800291a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800291c:	1ad2      	subs	r2, r2, r3
 800291e:	68bb      	ldr	r3, [r7, #8]
 8002920:	621a      	str	r2, [r3, #32]
 8002922:	e015      	b.n	8002950 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8002924:	68bb      	ldr	r3, [r7, #8]
 8002926:	6a1b      	ldr	r3, [r3, #32]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d107      	bne.n	800293c <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 800292c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002930:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8002932:	68bb      	ldr	r3, [r7, #8]
 8002934:	2200      	movs	r2, #0
 8002936:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800293a:	e009      	b.n	8002950 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800293c:	68bb      	ldr	r3, [r7, #8]
 800293e:	2200      	movs	r2, #0
 8002940:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8002944:	68bb      	ldr	r3, [r7, #8]
 8002946:	6a1b      	ldr	r3, [r3, #32]
 8002948:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 800294a:	68bb      	ldr	r3, [r7, #8]
 800294c:	2200      	movs	r2, #0
 800294e:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002950:	68bb      	ldr	r3, [r7, #8]
 8002952:	785b      	ldrb	r3, [r3, #1]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d155      	bne.n	8002a04 <HAL_PCD_EP_DB_Transmit+0x35a>
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	63bb      	str	r3, [r7, #56]	; 0x38
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002966:	b29b      	uxth	r3, r3
 8002968:	461a      	mov	r2, r3
 800296a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800296c:	4413      	add	r3, r2
 800296e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002970:	68bb      	ldr	r3, [r7, #8]
 8002972:	781b      	ldrb	r3, [r3, #0]
 8002974:	011a      	lsls	r2, r3, #4
 8002976:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002978:	4413      	add	r3, r2
 800297a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800297e:	637b      	str	r3, [r7, #52]	; 0x34
 8002980:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002982:	2b00      	cmp	r3, #0
 8002984:	d112      	bne.n	80029ac <HAL_PCD_EP_DB_Transmit+0x302>
 8002986:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002988:	881b      	ldrh	r3, [r3, #0]
 800298a:	b29b      	uxth	r3, r3
 800298c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002990:	b29a      	uxth	r2, r3
 8002992:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002994:	801a      	strh	r2, [r3, #0]
 8002996:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002998:	881b      	ldrh	r3, [r3, #0]
 800299a:	b29b      	uxth	r3, r3
 800299c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80029a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80029a4:	b29a      	uxth	r2, r3
 80029a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029a8:	801a      	strh	r2, [r3, #0]
 80029aa:	e047      	b.n	8002a3c <HAL_PCD_EP_DB_Transmit+0x392>
 80029ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80029ae:	2b3e      	cmp	r3, #62	; 0x3e
 80029b0:	d811      	bhi.n	80029d6 <HAL_PCD_EP_DB_Transmit+0x32c>
 80029b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80029b4:	085b      	lsrs	r3, r3, #1
 80029b6:	64bb      	str	r3, [r7, #72]	; 0x48
 80029b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80029ba:	f003 0301 	and.w	r3, r3, #1
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d002      	beq.n	80029c8 <HAL_PCD_EP_DB_Transmit+0x31e>
 80029c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80029c4:	3301      	adds	r3, #1
 80029c6:	64bb      	str	r3, [r7, #72]	; 0x48
 80029c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80029ca:	b29b      	uxth	r3, r3
 80029cc:	029b      	lsls	r3, r3, #10
 80029ce:	b29a      	uxth	r2, r3
 80029d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029d2:	801a      	strh	r2, [r3, #0]
 80029d4:	e032      	b.n	8002a3c <HAL_PCD_EP_DB_Transmit+0x392>
 80029d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80029d8:	095b      	lsrs	r3, r3, #5
 80029da:	64bb      	str	r3, [r7, #72]	; 0x48
 80029dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80029de:	f003 031f 	and.w	r3, r3, #31
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d102      	bne.n	80029ec <HAL_PCD_EP_DB_Transmit+0x342>
 80029e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80029e8:	3b01      	subs	r3, #1
 80029ea:	64bb      	str	r3, [r7, #72]	; 0x48
 80029ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80029ee:	b29b      	uxth	r3, r3
 80029f0:	029b      	lsls	r3, r3, #10
 80029f2:	b29b      	uxth	r3, r3
 80029f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80029f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80029fc:	b29a      	uxth	r2, r3
 80029fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a00:	801a      	strh	r2, [r3, #0]
 8002a02:	e01b      	b.n	8002a3c <HAL_PCD_EP_DB_Transmit+0x392>
 8002a04:	68bb      	ldr	r3, [r7, #8]
 8002a06:	785b      	ldrb	r3, [r3, #1]
 8002a08:	2b01      	cmp	r3, #1
 8002a0a:	d117      	bne.n	8002a3c <HAL_PCD_EP_DB_Transmit+0x392>
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	643b      	str	r3, [r7, #64]	; 0x40
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a1a:	b29b      	uxth	r3, r3
 8002a1c:	461a      	mov	r2, r3
 8002a1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a20:	4413      	add	r3, r2
 8002a22:	643b      	str	r3, [r7, #64]	; 0x40
 8002a24:	68bb      	ldr	r3, [r7, #8]
 8002a26:	781b      	ldrb	r3, [r3, #0]
 8002a28:	011a      	lsls	r2, r3, #4
 8002a2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a2c:	4413      	add	r3, r2
 8002a2e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002a32:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a34:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a36:	b29a      	uxth	r2, r3
 8002a38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a3a:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	6818      	ldr	r0, [r3, #0]
 8002a40:	68bb      	ldr	r3, [r7, #8]
 8002a42:	6959      	ldr	r1, [r3, #20]
 8002a44:	68bb      	ldr	r3, [r7, #8]
 8002a46:	891a      	ldrh	r2, [r3, #8]
 8002a48:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a4a:	b29b      	uxth	r3, r3
 8002a4c:	f003 fdac 	bl	80065a8 <USB_WritePMA>
 8002a50:	e1d0      	b.n	8002df4 <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a5a:	b29b      	uxth	r3, r3
 8002a5c:	461a      	mov	r2, r3
 8002a5e:	68bb      	ldr	r3, [r7, #8]
 8002a60:	781b      	ldrb	r3, [r3, #0]
 8002a62:	00db      	lsls	r3, r3, #3
 8002a64:	4413      	add	r3, r2
 8002a66:	3306      	adds	r3, #6
 8002a68:	005b      	lsls	r3, r3, #1
 8002a6a:	68fa      	ldr	r2, [r7, #12]
 8002a6c:	6812      	ldr	r2, [r2, #0]
 8002a6e:	4413      	add	r3, r2
 8002a70:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002a74:	881b      	ldrh	r3, [r3, #0]
 8002a76:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002a7a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 8002a7e:	68bb      	ldr	r3, [r7, #8]
 8002a80:	699a      	ldr	r2, [r3, #24]
 8002a82:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002a86:	429a      	cmp	r2, r3
 8002a88:	d307      	bcc.n	8002a9a <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 8002a8a:	68bb      	ldr	r3, [r7, #8]
 8002a8c:	699a      	ldr	r2, [r3, #24]
 8002a8e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002a92:	1ad2      	subs	r2, r2, r3
 8002a94:	68bb      	ldr	r3, [r7, #8]
 8002a96:	619a      	str	r2, [r3, #24]
 8002a98:	e002      	b.n	8002aa0 <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 8002a9a:	68bb      	ldr	r3, [r7, #8]
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002aa0:	68bb      	ldr	r3, [r7, #8]
 8002aa2:	699b      	ldr	r3, [r3, #24]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	f040 80c4 	bne.w	8002c32 <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002aaa:	68bb      	ldr	r3, [r7, #8]
 8002aac:	785b      	ldrb	r3, [r3, #1]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d126      	bne.n	8002b00 <HAL_PCD_EP_DB_Transmit+0x456>
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ac0:	b29b      	uxth	r3, r3
 8002ac2:	461a      	mov	r2, r3
 8002ac4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ac6:	4413      	add	r3, r2
 8002ac8:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002aca:	68bb      	ldr	r3, [r7, #8]
 8002acc:	781b      	ldrb	r3, [r3, #0]
 8002ace:	011a      	lsls	r2, r3, #4
 8002ad0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ad2:	4413      	add	r3, r2
 8002ad4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002ad8:	66bb      	str	r3, [r7, #104]	; 0x68
 8002ada:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002adc:	881b      	ldrh	r3, [r3, #0]
 8002ade:	b29b      	uxth	r3, r3
 8002ae0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002ae4:	b29a      	uxth	r2, r3
 8002ae6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002ae8:	801a      	strh	r2, [r3, #0]
 8002aea:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002aec:	881b      	ldrh	r3, [r3, #0]
 8002aee:	b29b      	uxth	r3, r3
 8002af0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002af4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002af8:	b29a      	uxth	r2, r3
 8002afa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002afc:	801a      	strh	r2, [r3, #0]
 8002afe:	e01a      	b.n	8002b36 <HAL_PCD_EP_DB_Transmit+0x48c>
 8002b00:	68bb      	ldr	r3, [r7, #8]
 8002b02:	785b      	ldrb	r3, [r3, #1]
 8002b04:	2b01      	cmp	r3, #1
 8002b06:	d116      	bne.n	8002b36 <HAL_PCD_EP_DB_Transmit+0x48c>
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	677b      	str	r3, [r7, #116]	; 0x74
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b16:	b29b      	uxth	r3, r3
 8002b18:	461a      	mov	r2, r3
 8002b1a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b1c:	4413      	add	r3, r2
 8002b1e:	677b      	str	r3, [r7, #116]	; 0x74
 8002b20:	68bb      	ldr	r3, [r7, #8]
 8002b22:	781b      	ldrb	r3, [r3, #0]
 8002b24:	011a      	lsls	r2, r3, #4
 8002b26:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b28:	4413      	add	r3, r2
 8002b2a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002b2e:	673b      	str	r3, [r7, #112]	; 0x70
 8002b30:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002b32:	2200      	movs	r2, #0
 8002b34:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	67bb      	str	r3, [r7, #120]	; 0x78
 8002b3c:	68bb      	ldr	r3, [r7, #8]
 8002b3e:	785b      	ldrb	r3, [r3, #1]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d12f      	bne.n	8002ba4 <HAL_PCD_EP_DB_Transmit+0x4fa>
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b54:	b29b      	uxth	r3, r3
 8002b56:	461a      	mov	r2, r3
 8002b58:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002b5c:	4413      	add	r3, r2
 8002b5e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002b62:	68bb      	ldr	r3, [r7, #8]
 8002b64:	781b      	ldrb	r3, [r3, #0]
 8002b66:	011a      	lsls	r2, r3, #4
 8002b68:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002b6c:	4413      	add	r3, r2
 8002b6e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002b72:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002b76:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002b7a:	881b      	ldrh	r3, [r3, #0]
 8002b7c:	b29b      	uxth	r3, r3
 8002b7e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002b82:	b29a      	uxth	r2, r3
 8002b84:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002b88:	801a      	strh	r2, [r3, #0]
 8002b8a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002b8e:	881b      	ldrh	r3, [r3, #0]
 8002b90:	b29b      	uxth	r3, r3
 8002b92:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002b96:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002b9a:	b29a      	uxth	r2, r3
 8002b9c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002ba0:	801a      	strh	r2, [r3, #0]
 8002ba2:	e017      	b.n	8002bd4 <HAL_PCD_EP_DB_Transmit+0x52a>
 8002ba4:	68bb      	ldr	r3, [r7, #8]
 8002ba6:	785b      	ldrb	r3, [r3, #1]
 8002ba8:	2b01      	cmp	r3, #1
 8002baa:	d113      	bne.n	8002bd4 <HAL_PCD_EP_DB_Transmit+0x52a>
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002bb4:	b29b      	uxth	r3, r3
 8002bb6:	461a      	mov	r2, r3
 8002bb8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002bba:	4413      	add	r3, r2
 8002bbc:	67bb      	str	r3, [r7, #120]	; 0x78
 8002bbe:	68bb      	ldr	r3, [r7, #8]
 8002bc0:	781b      	ldrb	r3, [r3, #0]
 8002bc2:	011a      	lsls	r2, r3, #4
 8002bc4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002bc6:	4413      	add	r3, r2
 8002bc8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002bcc:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002bce:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002bd4:	68bb      	ldr	r3, [r7, #8]
 8002bd6:	781b      	ldrb	r3, [r3, #0]
 8002bd8:	4619      	mov	r1, r3
 8002bda:	68f8      	ldr	r0, [r7, #12]
 8002bdc:	f005 fb71 	bl	80082c2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002be0:	88fb      	ldrh	r3, [r7, #6]
 8002be2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	f040 8104 	bne.w	8002df4 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	461a      	mov	r2, r3
 8002bf2:	68bb      	ldr	r3, [r7, #8]
 8002bf4:	781b      	ldrb	r3, [r3, #0]
 8002bf6:	009b      	lsls	r3, r3, #2
 8002bf8:	4413      	add	r3, r2
 8002bfa:	881b      	ldrh	r3, [r3, #0]
 8002bfc:	b29b      	uxth	r3, r3
 8002bfe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c06:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	461a      	mov	r2, r3
 8002c10:	68bb      	ldr	r3, [r7, #8]
 8002c12:	781b      	ldrb	r3, [r3, #0]
 8002c14:	009b      	lsls	r3, r3, #2
 8002c16:	441a      	add	r2, r3
 8002c18:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8002c1c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002c20:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002c24:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002c28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c2c:	b29b      	uxth	r3, r3
 8002c2e:	8013      	strh	r3, [r2, #0]
 8002c30:	e0e0      	b.n	8002df4 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002c32:	88fb      	ldrh	r3, [r7, #6]
 8002c34:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d121      	bne.n	8002c80 <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	461a      	mov	r2, r3
 8002c42:	68bb      	ldr	r3, [r7, #8]
 8002c44:	781b      	ldrb	r3, [r3, #0]
 8002c46:	009b      	lsls	r3, r3, #2
 8002c48:	4413      	add	r3, r2
 8002c4a:	881b      	ldrh	r3, [r3, #0]
 8002c4c:	b29b      	uxth	r3, r3
 8002c4e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c56:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	461a      	mov	r2, r3
 8002c60:	68bb      	ldr	r3, [r7, #8]
 8002c62:	781b      	ldrb	r3, [r3, #0]
 8002c64:	009b      	lsls	r3, r3, #2
 8002c66:	441a      	add	r2, r3
 8002c68:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002c6c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002c70:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002c74:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002c78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c7c:	b29b      	uxth	r3, r3
 8002c7e:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002c80:	68bb      	ldr	r3, [r7, #8]
 8002c82:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002c86:	2b01      	cmp	r3, #1
 8002c88:	f040 80b4 	bne.w	8002df4 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8002c8c:	68bb      	ldr	r3, [r7, #8]
 8002c8e:	695a      	ldr	r2, [r3, #20]
 8002c90:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002c94:	441a      	add	r2, r3
 8002c96:	68bb      	ldr	r3, [r7, #8]
 8002c98:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002c9a:	68bb      	ldr	r3, [r7, #8]
 8002c9c:	69da      	ldr	r2, [r3, #28]
 8002c9e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002ca2:	441a      	add	r2, r3
 8002ca4:	68bb      	ldr	r3, [r7, #8]
 8002ca6:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002ca8:	68bb      	ldr	r3, [r7, #8]
 8002caa:	6a1a      	ldr	r2, [r3, #32]
 8002cac:	68bb      	ldr	r3, [r7, #8]
 8002cae:	691b      	ldr	r3, [r3, #16]
 8002cb0:	429a      	cmp	r2, r3
 8002cb2:	d309      	bcc.n	8002cc8 <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 8002cb4:	68bb      	ldr	r3, [r7, #8]
 8002cb6:	691b      	ldr	r3, [r3, #16]
 8002cb8:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8002cba:	68bb      	ldr	r3, [r7, #8]
 8002cbc:	6a1a      	ldr	r2, [r3, #32]
 8002cbe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002cc0:	1ad2      	subs	r2, r2, r3
 8002cc2:	68bb      	ldr	r3, [r7, #8]
 8002cc4:	621a      	str	r2, [r3, #32]
 8002cc6:	e015      	b.n	8002cf4 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 8002cc8:	68bb      	ldr	r3, [r7, #8]
 8002cca:	6a1b      	ldr	r3, [r3, #32]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d107      	bne.n	8002ce0 <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 8002cd0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002cd4:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8002cd6:	68bb      	ldr	r3, [r7, #8]
 8002cd8:	2200      	movs	r2, #0
 8002cda:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002cde:	e009      	b.n	8002cf4 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 8002ce0:	68bb      	ldr	r3, [r7, #8]
 8002ce2:	6a1b      	ldr	r3, [r3, #32]
 8002ce4:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8002ce6:	68bb      	ldr	r3, [r7, #8]
 8002ce8:	2200      	movs	r2, #0
 8002cea:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002cec:	68bb      	ldr	r3, [r7, #8]
 8002cee:	2200      	movs	r2, #0
 8002cf0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	667b      	str	r3, [r7, #100]	; 0x64
 8002cfa:	68bb      	ldr	r3, [r7, #8]
 8002cfc:	785b      	ldrb	r3, [r3, #1]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d155      	bne.n	8002dae <HAL_PCD_EP_DB_Transmit+0x704>
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d10:	b29b      	uxth	r3, r3
 8002d12:	461a      	mov	r2, r3
 8002d14:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d16:	4413      	add	r3, r2
 8002d18:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002d1a:	68bb      	ldr	r3, [r7, #8]
 8002d1c:	781b      	ldrb	r3, [r3, #0]
 8002d1e:	011a      	lsls	r2, r3, #4
 8002d20:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d22:	4413      	add	r3, r2
 8002d24:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002d28:	65bb      	str	r3, [r7, #88]	; 0x58
 8002d2a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d112      	bne.n	8002d56 <HAL_PCD_EP_DB_Transmit+0x6ac>
 8002d30:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002d32:	881b      	ldrh	r3, [r3, #0]
 8002d34:	b29b      	uxth	r3, r3
 8002d36:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002d3a:	b29a      	uxth	r2, r3
 8002d3c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002d3e:	801a      	strh	r2, [r3, #0]
 8002d40:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002d42:	881b      	ldrh	r3, [r3, #0]
 8002d44:	b29b      	uxth	r3, r3
 8002d46:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002d4a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002d4e:	b29a      	uxth	r2, r3
 8002d50:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002d52:	801a      	strh	r2, [r3, #0]
 8002d54:	e044      	b.n	8002de0 <HAL_PCD_EP_DB_Transmit+0x736>
 8002d56:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d58:	2b3e      	cmp	r3, #62	; 0x3e
 8002d5a:	d811      	bhi.n	8002d80 <HAL_PCD_EP_DB_Transmit+0x6d6>
 8002d5c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d5e:	085b      	lsrs	r3, r3, #1
 8002d60:	657b      	str	r3, [r7, #84]	; 0x54
 8002d62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d64:	f003 0301 	and.w	r3, r3, #1
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d002      	beq.n	8002d72 <HAL_PCD_EP_DB_Transmit+0x6c8>
 8002d6c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d6e:	3301      	adds	r3, #1
 8002d70:	657b      	str	r3, [r7, #84]	; 0x54
 8002d72:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d74:	b29b      	uxth	r3, r3
 8002d76:	029b      	lsls	r3, r3, #10
 8002d78:	b29a      	uxth	r2, r3
 8002d7a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002d7c:	801a      	strh	r2, [r3, #0]
 8002d7e:	e02f      	b.n	8002de0 <HAL_PCD_EP_DB_Transmit+0x736>
 8002d80:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d82:	095b      	lsrs	r3, r3, #5
 8002d84:	657b      	str	r3, [r7, #84]	; 0x54
 8002d86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d88:	f003 031f 	and.w	r3, r3, #31
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d102      	bne.n	8002d96 <HAL_PCD_EP_DB_Transmit+0x6ec>
 8002d90:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d92:	3b01      	subs	r3, #1
 8002d94:	657b      	str	r3, [r7, #84]	; 0x54
 8002d96:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d98:	b29b      	uxth	r3, r3
 8002d9a:	029b      	lsls	r3, r3, #10
 8002d9c:	b29b      	uxth	r3, r3
 8002d9e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002da2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002da6:	b29a      	uxth	r2, r3
 8002da8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002daa:	801a      	strh	r2, [r3, #0]
 8002dac:	e018      	b.n	8002de0 <HAL_PCD_EP_DB_Transmit+0x736>
 8002dae:	68bb      	ldr	r3, [r7, #8]
 8002db0:	785b      	ldrb	r3, [r3, #1]
 8002db2:	2b01      	cmp	r3, #1
 8002db4:	d114      	bne.n	8002de0 <HAL_PCD_EP_DB_Transmit+0x736>
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002dbe:	b29b      	uxth	r3, r3
 8002dc0:	461a      	mov	r2, r3
 8002dc2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002dc4:	4413      	add	r3, r2
 8002dc6:	667b      	str	r3, [r7, #100]	; 0x64
 8002dc8:	68bb      	ldr	r3, [r7, #8]
 8002dca:	781b      	ldrb	r3, [r3, #0]
 8002dcc:	011a      	lsls	r2, r3, #4
 8002dce:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002dd0:	4413      	add	r3, r2
 8002dd2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002dd6:	663b      	str	r3, [r7, #96]	; 0x60
 8002dd8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002dda:	b29a      	uxth	r2, r3
 8002ddc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002dde:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	6818      	ldr	r0, [r3, #0]
 8002de4:	68bb      	ldr	r3, [r7, #8]
 8002de6:	6959      	ldr	r1, [r3, #20]
 8002de8:	68bb      	ldr	r3, [r7, #8]
 8002dea:	895a      	ldrh	r2, [r3, #10]
 8002dec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002dee:	b29b      	uxth	r3, r3
 8002df0:	f003 fbda 	bl	80065a8 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	461a      	mov	r2, r3
 8002dfa:	68bb      	ldr	r3, [r7, #8]
 8002dfc:	781b      	ldrb	r3, [r3, #0]
 8002dfe:	009b      	lsls	r3, r3, #2
 8002e00:	4413      	add	r3, r2
 8002e02:	881b      	ldrh	r3, [r3, #0]
 8002e04:	b29b      	uxth	r3, r3
 8002e06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e0a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002e0e:	823b      	strh	r3, [r7, #16]
 8002e10:	8a3b      	ldrh	r3, [r7, #16]
 8002e12:	f083 0310 	eor.w	r3, r3, #16
 8002e16:	823b      	strh	r3, [r7, #16]
 8002e18:	8a3b      	ldrh	r3, [r7, #16]
 8002e1a:	f083 0320 	eor.w	r3, r3, #32
 8002e1e:	823b      	strh	r3, [r7, #16]
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	461a      	mov	r2, r3
 8002e26:	68bb      	ldr	r3, [r7, #8]
 8002e28:	781b      	ldrb	r3, [r3, #0]
 8002e2a:	009b      	lsls	r3, r3, #2
 8002e2c:	441a      	add	r2, r3
 8002e2e:	8a3b      	ldrh	r3, [r7, #16]
 8002e30:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002e34:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002e38:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e40:	b29b      	uxth	r3, r3
 8002e42:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8002e44:	2300      	movs	r3, #0
}
 8002e46:	4618      	mov	r0, r3
 8002e48:	3788      	adds	r7, #136	; 0x88
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bd80      	pop	{r7, pc}

08002e4e <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002e4e:	b480      	push	{r7}
 8002e50:	b087      	sub	sp, #28
 8002e52:	af00      	add	r7, sp, #0
 8002e54:	60f8      	str	r0, [r7, #12]
 8002e56:	607b      	str	r3, [r7, #4]
 8002e58:	460b      	mov	r3, r1
 8002e5a:	817b      	strh	r3, [r7, #10]
 8002e5c:	4613      	mov	r3, r2
 8002e5e:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002e60:	897b      	ldrh	r3, [r7, #10]
 8002e62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e66:	b29b      	uxth	r3, r3
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d00b      	beq.n	8002e84 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e6c:	897b      	ldrh	r3, [r7, #10]
 8002e6e:	f003 0307 	and.w	r3, r3, #7
 8002e72:	1c5a      	adds	r2, r3, #1
 8002e74:	4613      	mov	r3, r2
 8002e76:	009b      	lsls	r3, r3, #2
 8002e78:	4413      	add	r3, r2
 8002e7a:	00db      	lsls	r3, r3, #3
 8002e7c:	68fa      	ldr	r2, [r7, #12]
 8002e7e:	4413      	add	r3, r2
 8002e80:	617b      	str	r3, [r7, #20]
 8002e82:	e009      	b.n	8002e98 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002e84:	897a      	ldrh	r2, [r7, #10]
 8002e86:	4613      	mov	r3, r2
 8002e88:	009b      	lsls	r3, r3, #2
 8002e8a:	4413      	add	r3, r2
 8002e8c:	00db      	lsls	r3, r3, #3
 8002e8e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002e92:	68fa      	ldr	r2, [r7, #12]
 8002e94:	4413      	add	r3, r2
 8002e96:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002e98:	893b      	ldrh	r3, [r7, #8]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d107      	bne.n	8002eae <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002e9e:	697b      	ldr	r3, [r7, #20]
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	b29a      	uxth	r2, r3
 8002ea8:	697b      	ldr	r3, [r7, #20]
 8002eaa:	80da      	strh	r2, [r3, #6]
 8002eac:	e00b      	b.n	8002ec6 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002eae:	697b      	ldr	r3, [r7, #20]
 8002eb0:	2201      	movs	r2, #1
 8002eb2:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	b29a      	uxth	r2, r3
 8002eb8:	697b      	ldr	r3, [r7, #20]
 8002eba:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	0c1b      	lsrs	r3, r3, #16
 8002ec0:	b29a      	uxth	r2, r3
 8002ec2:	697b      	ldr	r3, [r7, #20]
 8002ec4:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8002ec6:	2300      	movs	r3, #0
}
 8002ec8:	4618      	mov	r0, r3
 8002eca:	371c      	adds	r7, #28
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	bc80      	pop	{r7}
 8002ed0:	4770      	bx	lr
	...

08002ed4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b086      	sub	sp, #24
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d101      	bne.n	8002ee6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	e272      	b.n	80033cc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f003 0301 	and.w	r3, r3, #1
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	f000 8087 	beq.w	8003002 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002ef4:	4b92      	ldr	r3, [pc, #584]	; (8003140 <HAL_RCC_OscConfig+0x26c>)
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	f003 030c 	and.w	r3, r3, #12
 8002efc:	2b04      	cmp	r3, #4
 8002efe:	d00c      	beq.n	8002f1a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002f00:	4b8f      	ldr	r3, [pc, #572]	; (8003140 <HAL_RCC_OscConfig+0x26c>)
 8002f02:	685b      	ldr	r3, [r3, #4]
 8002f04:	f003 030c 	and.w	r3, r3, #12
 8002f08:	2b08      	cmp	r3, #8
 8002f0a:	d112      	bne.n	8002f32 <HAL_RCC_OscConfig+0x5e>
 8002f0c:	4b8c      	ldr	r3, [pc, #560]	; (8003140 <HAL_RCC_OscConfig+0x26c>)
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f18:	d10b      	bne.n	8002f32 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f1a:	4b89      	ldr	r3, [pc, #548]	; (8003140 <HAL_RCC_OscConfig+0x26c>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d06c      	beq.n	8003000 <HAL_RCC_OscConfig+0x12c>
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	685b      	ldr	r3, [r3, #4]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d168      	bne.n	8003000 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	e24c      	b.n	80033cc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	685b      	ldr	r3, [r3, #4]
 8002f36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f3a:	d106      	bne.n	8002f4a <HAL_RCC_OscConfig+0x76>
 8002f3c:	4b80      	ldr	r3, [pc, #512]	; (8003140 <HAL_RCC_OscConfig+0x26c>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4a7f      	ldr	r2, [pc, #508]	; (8003140 <HAL_RCC_OscConfig+0x26c>)
 8002f42:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f46:	6013      	str	r3, [r2, #0]
 8002f48:	e02e      	b.n	8002fa8 <HAL_RCC_OscConfig+0xd4>
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d10c      	bne.n	8002f6c <HAL_RCC_OscConfig+0x98>
 8002f52:	4b7b      	ldr	r3, [pc, #492]	; (8003140 <HAL_RCC_OscConfig+0x26c>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4a7a      	ldr	r2, [pc, #488]	; (8003140 <HAL_RCC_OscConfig+0x26c>)
 8002f58:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f5c:	6013      	str	r3, [r2, #0]
 8002f5e:	4b78      	ldr	r3, [pc, #480]	; (8003140 <HAL_RCC_OscConfig+0x26c>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4a77      	ldr	r2, [pc, #476]	; (8003140 <HAL_RCC_OscConfig+0x26c>)
 8002f64:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f68:	6013      	str	r3, [r2, #0]
 8002f6a:	e01d      	b.n	8002fa8 <HAL_RCC_OscConfig+0xd4>
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f74:	d10c      	bne.n	8002f90 <HAL_RCC_OscConfig+0xbc>
 8002f76:	4b72      	ldr	r3, [pc, #456]	; (8003140 <HAL_RCC_OscConfig+0x26c>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4a71      	ldr	r2, [pc, #452]	; (8003140 <HAL_RCC_OscConfig+0x26c>)
 8002f7c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f80:	6013      	str	r3, [r2, #0]
 8002f82:	4b6f      	ldr	r3, [pc, #444]	; (8003140 <HAL_RCC_OscConfig+0x26c>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4a6e      	ldr	r2, [pc, #440]	; (8003140 <HAL_RCC_OscConfig+0x26c>)
 8002f88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f8c:	6013      	str	r3, [r2, #0]
 8002f8e:	e00b      	b.n	8002fa8 <HAL_RCC_OscConfig+0xd4>
 8002f90:	4b6b      	ldr	r3, [pc, #428]	; (8003140 <HAL_RCC_OscConfig+0x26c>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4a6a      	ldr	r2, [pc, #424]	; (8003140 <HAL_RCC_OscConfig+0x26c>)
 8002f96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f9a:	6013      	str	r3, [r2, #0]
 8002f9c:	4b68      	ldr	r3, [pc, #416]	; (8003140 <HAL_RCC_OscConfig+0x26c>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4a67      	ldr	r2, [pc, #412]	; (8003140 <HAL_RCC_OscConfig+0x26c>)
 8002fa2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002fa6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d013      	beq.n	8002fd8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fb0:	f7fd ffa2 	bl	8000ef8 <HAL_GetTick>
 8002fb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fb6:	e008      	b.n	8002fca <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002fb8:	f7fd ff9e 	bl	8000ef8 <HAL_GetTick>
 8002fbc:	4602      	mov	r2, r0
 8002fbe:	693b      	ldr	r3, [r7, #16]
 8002fc0:	1ad3      	subs	r3, r2, r3
 8002fc2:	2b64      	cmp	r3, #100	; 0x64
 8002fc4:	d901      	bls.n	8002fca <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002fc6:	2303      	movs	r3, #3
 8002fc8:	e200      	b.n	80033cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fca:	4b5d      	ldr	r3, [pc, #372]	; (8003140 <HAL_RCC_OscConfig+0x26c>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d0f0      	beq.n	8002fb8 <HAL_RCC_OscConfig+0xe4>
 8002fd6:	e014      	b.n	8003002 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fd8:	f7fd ff8e 	bl	8000ef8 <HAL_GetTick>
 8002fdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fde:	e008      	b.n	8002ff2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002fe0:	f7fd ff8a 	bl	8000ef8 <HAL_GetTick>
 8002fe4:	4602      	mov	r2, r0
 8002fe6:	693b      	ldr	r3, [r7, #16]
 8002fe8:	1ad3      	subs	r3, r2, r3
 8002fea:	2b64      	cmp	r3, #100	; 0x64
 8002fec:	d901      	bls.n	8002ff2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002fee:	2303      	movs	r3, #3
 8002ff0:	e1ec      	b.n	80033cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ff2:	4b53      	ldr	r3, [pc, #332]	; (8003140 <HAL_RCC_OscConfig+0x26c>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d1f0      	bne.n	8002fe0 <HAL_RCC_OscConfig+0x10c>
 8002ffe:	e000      	b.n	8003002 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003000:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f003 0302 	and.w	r3, r3, #2
 800300a:	2b00      	cmp	r3, #0
 800300c:	d063      	beq.n	80030d6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800300e:	4b4c      	ldr	r3, [pc, #304]	; (8003140 <HAL_RCC_OscConfig+0x26c>)
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	f003 030c 	and.w	r3, r3, #12
 8003016:	2b00      	cmp	r3, #0
 8003018:	d00b      	beq.n	8003032 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800301a:	4b49      	ldr	r3, [pc, #292]	; (8003140 <HAL_RCC_OscConfig+0x26c>)
 800301c:	685b      	ldr	r3, [r3, #4]
 800301e:	f003 030c 	and.w	r3, r3, #12
 8003022:	2b08      	cmp	r3, #8
 8003024:	d11c      	bne.n	8003060 <HAL_RCC_OscConfig+0x18c>
 8003026:	4b46      	ldr	r3, [pc, #280]	; (8003140 <HAL_RCC_OscConfig+0x26c>)
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800302e:	2b00      	cmp	r3, #0
 8003030:	d116      	bne.n	8003060 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003032:	4b43      	ldr	r3, [pc, #268]	; (8003140 <HAL_RCC_OscConfig+0x26c>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f003 0302 	and.w	r3, r3, #2
 800303a:	2b00      	cmp	r3, #0
 800303c:	d005      	beq.n	800304a <HAL_RCC_OscConfig+0x176>
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	691b      	ldr	r3, [r3, #16]
 8003042:	2b01      	cmp	r3, #1
 8003044:	d001      	beq.n	800304a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003046:	2301      	movs	r3, #1
 8003048:	e1c0      	b.n	80033cc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800304a:	4b3d      	ldr	r3, [pc, #244]	; (8003140 <HAL_RCC_OscConfig+0x26c>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	695b      	ldr	r3, [r3, #20]
 8003056:	00db      	lsls	r3, r3, #3
 8003058:	4939      	ldr	r1, [pc, #228]	; (8003140 <HAL_RCC_OscConfig+0x26c>)
 800305a:	4313      	orrs	r3, r2
 800305c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800305e:	e03a      	b.n	80030d6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	691b      	ldr	r3, [r3, #16]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d020      	beq.n	80030aa <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003068:	4b36      	ldr	r3, [pc, #216]	; (8003144 <HAL_RCC_OscConfig+0x270>)
 800306a:	2201      	movs	r2, #1
 800306c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800306e:	f7fd ff43 	bl	8000ef8 <HAL_GetTick>
 8003072:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003074:	e008      	b.n	8003088 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003076:	f7fd ff3f 	bl	8000ef8 <HAL_GetTick>
 800307a:	4602      	mov	r2, r0
 800307c:	693b      	ldr	r3, [r7, #16]
 800307e:	1ad3      	subs	r3, r2, r3
 8003080:	2b02      	cmp	r3, #2
 8003082:	d901      	bls.n	8003088 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003084:	2303      	movs	r3, #3
 8003086:	e1a1      	b.n	80033cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003088:	4b2d      	ldr	r3, [pc, #180]	; (8003140 <HAL_RCC_OscConfig+0x26c>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f003 0302 	and.w	r3, r3, #2
 8003090:	2b00      	cmp	r3, #0
 8003092:	d0f0      	beq.n	8003076 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003094:	4b2a      	ldr	r3, [pc, #168]	; (8003140 <HAL_RCC_OscConfig+0x26c>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	695b      	ldr	r3, [r3, #20]
 80030a0:	00db      	lsls	r3, r3, #3
 80030a2:	4927      	ldr	r1, [pc, #156]	; (8003140 <HAL_RCC_OscConfig+0x26c>)
 80030a4:	4313      	orrs	r3, r2
 80030a6:	600b      	str	r3, [r1, #0]
 80030a8:	e015      	b.n	80030d6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80030aa:	4b26      	ldr	r3, [pc, #152]	; (8003144 <HAL_RCC_OscConfig+0x270>)
 80030ac:	2200      	movs	r2, #0
 80030ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030b0:	f7fd ff22 	bl	8000ef8 <HAL_GetTick>
 80030b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030b6:	e008      	b.n	80030ca <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030b8:	f7fd ff1e 	bl	8000ef8 <HAL_GetTick>
 80030bc:	4602      	mov	r2, r0
 80030be:	693b      	ldr	r3, [r7, #16]
 80030c0:	1ad3      	subs	r3, r2, r3
 80030c2:	2b02      	cmp	r3, #2
 80030c4:	d901      	bls.n	80030ca <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80030c6:	2303      	movs	r3, #3
 80030c8:	e180      	b.n	80033cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030ca:	4b1d      	ldr	r3, [pc, #116]	; (8003140 <HAL_RCC_OscConfig+0x26c>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f003 0302 	and.w	r3, r3, #2
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d1f0      	bne.n	80030b8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f003 0308 	and.w	r3, r3, #8
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d03a      	beq.n	8003158 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	699b      	ldr	r3, [r3, #24]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d019      	beq.n	800311e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80030ea:	4b17      	ldr	r3, [pc, #92]	; (8003148 <HAL_RCC_OscConfig+0x274>)
 80030ec:	2201      	movs	r2, #1
 80030ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030f0:	f7fd ff02 	bl	8000ef8 <HAL_GetTick>
 80030f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030f6:	e008      	b.n	800310a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030f8:	f7fd fefe 	bl	8000ef8 <HAL_GetTick>
 80030fc:	4602      	mov	r2, r0
 80030fe:	693b      	ldr	r3, [r7, #16]
 8003100:	1ad3      	subs	r3, r2, r3
 8003102:	2b02      	cmp	r3, #2
 8003104:	d901      	bls.n	800310a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003106:	2303      	movs	r3, #3
 8003108:	e160      	b.n	80033cc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800310a:	4b0d      	ldr	r3, [pc, #52]	; (8003140 <HAL_RCC_OscConfig+0x26c>)
 800310c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800310e:	f003 0302 	and.w	r3, r3, #2
 8003112:	2b00      	cmp	r3, #0
 8003114:	d0f0      	beq.n	80030f8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003116:	2001      	movs	r0, #1
 8003118:	f000 fada 	bl	80036d0 <RCC_Delay>
 800311c:	e01c      	b.n	8003158 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800311e:	4b0a      	ldr	r3, [pc, #40]	; (8003148 <HAL_RCC_OscConfig+0x274>)
 8003120:	2200      	movs	r2, #0
 8003122:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003124:	f7fd fee8 	bl	8000ef8 <HAL_GetTick>
 8003128:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800312a:	e00f      	b.n	800314c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800312c:	f7fd fee4 	bl	8000ef8 <HAL_GetTick>
 8003130:	4602      	mov	r2, r0
 8003132:	693b      	ldr	r3, [r7, #16]
 8003134:	1ad3      	subs	r3, r2, r3
 8003136:	2b02      	cmp	r3, #2
 8003138:	d908      	bls.n	800314c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800313a:	2303      	movs	r3, #3
 800313c:	e146      	b.n	80033cc <HAL_RCC_OscConfig+0x4f8>
 800313e:	bf00      	nop
 8003140:	40021000 	.word	0x40021000
 8003144:	42420000 	.word	0x42420000
 8003148:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800314c:	4b92      	ldr	r3, [pc, #584]	; (8003398 <HAL_RCC_OscConfig+0x4c4>)
 800314e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003150:	f003 0302 	and.w	r3, r3, #2
 8003154:	2b00      	cmp	r3, #0
 8003156:	d1e9      	bne.n	800312c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f003 0304 	and.w	r3, r3, #4
 8003160:	2b00      	cmp	r3, #0
 8003162:	f000 80a6 	beq.w	80032b2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003166:	2300      	movs	r3, #0
 8003168:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800316a:	4b8b      	ldr	r3, [pc, #556]	; (8003398 <HAL_RCC_OscConfig+0x4c4>)
 800316c:	69db      	ldr	r3, [r3, #28]
 800316e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003172:	2b00      	cmp	r3, #0
 8003174:	d10d      	bne.n	8003192 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003176:	4b88      	ldr	r3, [pc, #544]	; (8003398 <HAL_RCC_OscConfig+0x4c4>)
 8003178:	69db      	ldr	r3, [r3, #28]
 800317a:	4a87      	ldr	r2, [pc, #540]	; (8003398 <HAL_RCC_OscConfig+0x4c4>)
 800317c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003180:	61d3      	str	r3, [r2, #28]
 8003182:	4b85      	ldr	r3, [pc, #532]	; (8003398 <HAL_RCC_OscConfig+0x4c4>)
 8003184:	69db      	ldr	r3, [r3, #28]
 8003186:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800318a:	60bb      	str	r3, [r7, #8]
 800318c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800318e:	2301      	movs	r3, #1
 8003190:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003192:	4b82      	ldr	r3, [pc, #520]	; (800339c <HAL_RCC_OscConfig+0x4c8>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800319a:	2b00      	cmp	r3, #0
 800319c:	d118      	bne.n	80031d0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800319e:	4b7f      	ldr	r3, [pc, #508]	; (800339c <HAL_RCC_OscConfig+0x4c8>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4a7e      	ldr	r2, [pc, #504]	; (800339c <HAL_RCC_OscConfig+0x4c8>)
 80031a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80031aa:	f7fd fea5 	bl	8000ef8 <HAL_GetTick>
 80031ae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031b0:	e008      	b.n	80031c4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031b2:	f7fd fea1 	bl	8000ef8 <HAL_GetTick>
 80031b6:	4602      	mov	r2, r0
 80031b8:	693b      	ldr	r3, [r7, #16]
 80031ba:	1ad3      	subs	r3, r2, r3
 80031bc:	2b64      	cmp	r3, #100	; 0x64
 80031be:	d901      	bls.n	80031c4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80031c0:	2303      	movs	r3, #3
 80031c2:	e103      	b.n	80033cc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031c4:	4b75      	ldr	r3, [pc, #468]	; (800339c <HAL_RCC_OscConfig+0x4c8>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d0f0      	beq.n	80031b2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	68db      	ldr	r3, [r3, #12]
 80031d4:	2b01      	cmp	r3, #1
 80031d6:	d106      	bne.n	80031e6 <HAL_RCC_OscConfig+0x312>
 80031d8:	4b6f      	ldr	r3, [pc, #444]	; (8003398 <HAL_RCC_OscConfig+0x4c4>)
 80031da:	6a1b      	ldr	r3, [r3, #32]
 80031dc:	4a6e      	ldr	r2, [pc, #440]	; (8003398 <HAL_RCC_OscConfig+0x4c4>)
 80031de:	f043 0301 	orr.w	r3, r3, #1
 80031e2:	6213      	str	r3, [r2, #32]
 80031e4:	e02d      	b.n	8003242 <HAL_RCC_OscConfig+0x36e>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	68db      	ldr	r3, [r3, #12]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d10c      	bne.n	8003208 <HAL_RCC_OscConfig+0x334>
 80031ee:	4b6a      	ldr	r3, [pc, #424]	; (8003398 <HAL_RCC_OscConfig+0x4c4>)
 80031f0:	6a1b      	ldr	r3, [r3, #32]
 80031f2:	4a69      	ldr	r2, [pc, #420]	; (8003398 <HAL_RCC_OscConfig+0x4c4>)
 80031f4:	f023 0301 	bic.w	r3, r3, #1
 80031f8:	6213      	str	r3, [r2, #32]
 80031fa:	4b67      	ldr	r3, [pc, #412]	; (8003398 <HAL_RCC_OscConfig+0x4c4>)
 80031fc:	6a1b      	ldr	r3, [r3, #32]
 80031fe:	4a66      	ldr	r2, [pc, #408]	; (8003398 <HAL_RCC_OscConfig+0x4c4>)
 8003200:	f023 0304 	bic.w	r3, r3, #4
 8003204:	6213      	str	r3, [r2, #32]
 8003206:	e01c      	b.n	8003242 <HAL_RCC_OscConfig+0x36e>
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	68db      	ldr	r3, [r3, #12]
 800320c:	2b05      	cmp	r3, #5
 800320e:	d10c      	bne.n	800322a <HAL_RCC_OscConfig+0x356>
 8003210:	4b61      	ldr	r3, [pc, #388]	; (8003398 <HAL_RCC_OscConfig+0x4c4>)
 8003212:	6a1b      	ldr	r3, [r3, #32]
 8003214:	4a60      	ldr	r2, [pc, #384]	; (8003398 <HAL_RCC_OscConfig+0x4c4>)
 8003216:	f043 0304 	orr.w	r3, r3, #4
 800321a:	6213      	str	r3, [r2, #32]
 800321c:	4b5e      	ldr	r3, [pc, #376]	; (8003398 <HAL_RCC_OscConfig+0x4c4>)
 800321e:	6a1b      	ldr	r3, [r3, #32]
 8003220:	4a5d      	ldr	r2, [pc, #372]	; (8003398 <HAL_RCC_OscConfig+0x4c4>)
 8003222:	f043 0301 	orr.w	r3, r3, #1
 8003226:	6213      	str	r3, [r2, #32]
 8003228:	e00b      	b.n	8003242 <HAL_RCC_OscConfig+0x36e>
 800322a:	4b5b      	ldr	r3, [pc, #364]	; (8003398 <HAL_RCC_OscConfig+0x4c4>)
 800322c:	6a1b      	ldr	r3, [r3, #32]
 800322e:	4a5a      	ldr	r2, [pc, #360]	; (8003398 <HAL_RCC_OscConfig+0x4c4>)
 8003230:	f023 0301 	bic.w	r3, r3, #1
 8003234:	6213      	str	r3, [r2, #32]
 8003236:	4b58      	ldr	r3, [pc, #352]	; (8003398 <HAL_RCC_OscConfig+0x4c4>)
 8003238:	6a1b      	ldr	r3, [r3, #32]
 800323a:	4a57      	ldr	r2, [pc, #348]	; (8003398 <HAL_RCC_OscConfig+0x4c4>)
 800323c:	f023 0304 	bic.w	r3, r3, #4
 8003240:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	68db      	ldr	r3, [r3, #12]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d015      	beq.n	8003276 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800324a:	f7fd fe55 	bl	8000ef8 <HAL_GetTick>
 800324e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003250:	e00a      	b.n	8003268 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003252:	f7fd fe51 	bl	8000ef8 <HAL_GetTick>
 8003256:	4602      	mov	r2, r0
 8003258:	693b      	ldr	r3, [r7, #16]
 800325a:	1ad3      	subs	r3, r2, r3
 800325c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003260:	4293      	cmp	r3, r2
 8003262:	d901      	bls.n	8003268 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003264:	2303      	movs	r3, #3
 8003266:	e0b1      	b.n	80033cc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003268:	4b4b      	ldr	r3, [pc, #300]	; (8003398 <HAL_RCC_OscConfig+0x4c4>)
 800326a:	6a1b      	ldr	r3, [r3, #32]
 800326c:	f003 0302 	and.w	r3, r3, #2
 8003270:	2b00      	cmp	r3, #0
 8003272:	d0ee      	beq.n	8003252 <HAL_RCC_OscConfig+0x37e>
 8003274:	e014      	b.n	80032a0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003276:	f7fd fe3f 	bl	8000ef8 <HAL_GetTick>
 800327a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800327c:	e00a      	b.n	8003294 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800327e:	f7fd fe3b 	bl	8000ef8 <HAL_GetTick>
 8003282:	4602      	mov	r2, r0
 8003284:	693b      	ldr	r3, [r7, #16]
 8003286:	1ad3      	subs	r3, r2, r3
 8003288:	f241 3288 	movw	r2, #5000	; 0x1388
 800328c:	4293      	cmp	r3, r2
 800328e:	d901      	bls.n	8003294 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003290:	2303      	movs	r3, #3
 8003292:	e09b      	b.n	80033cc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003294:	4b40      	ldr	r3, [pc, #256]	; (8003398 <HAL_RCC_OscConfig+0x4c4>)
 8003296:	6a1b      	ldr	r3, [r3, #32]
 8003298:	f003 0302 	and.w	r3, r3, #2
 800329c:	2b00      	cmp	r3, #0
 800329e:	d1ee      	bne.n	800327e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80032a0:	7dfb      	ldrb	r3, [r7, #23]
 80032a2:	2b01      	cmp	r3, #1
 80032a4:	d105      	bne.n	80032b2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032a6:	4b3c      	ldr	r3, [pc, #240]	; (8003398 <HAL_RCC_OscConfig+0x4c4>)
 80032a8:	69db      	ldr	r3, [r3, #28]
 80032aa:	4a3b      	ldr	r2, [pc, #236]	; (8003398 <HAL_RCC_OscConfig+0x4c4>)
 80032ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80032b0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	69db      	ldr	r3, [r3, #28]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	f000 8087 	beq.w	80033ca <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80032bc:	4b36      	ldr	r3, [pc, #216]	; (8003398 <HAL_RCC_OscConfig+0x4c4>)
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	f003 030c 	and.w	r3, r3, #12
 80032c4:	2b08      	cmp	r3, #8
 80032c6:	d061      	beq.n	800338c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	69db      	ldr	r3, [r3, #28]
 80032cc:	2b02      	cmp	r3, #2
 80032ce:	d146      	bne.n	800335e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032d0:	4b33      	ldr	r3, [pc, #204]	; (80033a0 <HAL_RCC_OscConfig+0x4cc>)
 80032d2:	2200      	movs	r2, #0
 80032d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032d6:	f7fd fe0f 	bl	8000ef8 <HAL_GetTick>
 80032da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80032dc:	e008      	b.n	80032f0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032de:	f7fd fe0b 	bl	8000ef8 <HAL_GetTick>
 80032e2:	4602      	mov	r2, r0
 80032e4:	693b      	ldr	r3, [r7, #16]
 80032e6:	1ad3      	subs	r3, r2, r3
 80032e8:	2b02      	cmp	r3, #2
 80032ea:	d901      	bls.n	80032f0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80032ec:	2303      	movs	r3, #3
 80032ee:	e06d      	b.n	80033cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80032f0:	4b29      	ldr	r3, [pc, #164]	; (8003398 <HAL_RCC_OscConfig+0x4c4>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d1f0      	bne.n	80032de <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6a1b      	ldr	r3, [r3, #32]
 8003300:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003304:	d108      	bne.n	8003318 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003306:	4b24      	ldr	r3, [pc, #144]	; (8003398 <HAL_RCC_OscConfig+0x4c4>)
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	689b      	ldr	r3, [r3, #8]
 8003312:	4921      	ldr	r1, [pc, #132]	; (8003398 <HAL_RCC_OscConfig+0x4c4>)
 8003314:	4313      	orrs	r3, r2
 8003316:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003318:	4b1f      	ldr	r3, [pc, #124]	; (8003398 <HAL_RCC_OscConfig+0x4c4>)
 800331a:	685b      	ldr	r3, [r3, #4]
 800331c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6a19      	ldr	r1, [r3, #32]
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003328:	430b      	orrs	r3, r1
 800332a:	491b      	ldr	r1, [pc, #108]	; (8003398 <HAL_RCC_OscConfig+0x4c4>)
 800332c:	4313      	orrs	r3, r2
 800332e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003330:	4b1b      	ldr	r3, [pc, #108]	; (80033a0 <HAL_RCC_OscConfig+0x4cc>)
 8003332:	2201      	movs	r2, #1
 8003334:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003336:	f7fd fddf 	bl	8000ef8 <HAL_GetTick>
 800333a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800333c:	e008      	b.n	8003350 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800333e:	f7fd fddb 	bl	8000ef8 <HAL_GetTick>
 8003342:	4602      	mov	r2, r0
 8003344:	693b      	ldr	r3, [r7, #16]
 8003346:	1ad3      	subs	r3, r2, r3
 8003348:	2b02      	cmp	r3, #2
 800334a:	d901      	bls.n	8003350 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800334c:	2303      	movs	r3, #3
 800334e:	e03d      	b.n	80033cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003350:	4b11      	ldr	r3, [pc, #68]	; (8003398 <HAL_RCC_OscConfig+0x4c4>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003358:	2b00      	cmp	r3, #0
 800335a:	d0f0      	beq.n	800333e <HAL_RCC_OscConfig+0x46a>
 800335c:	e035      	b.n	80033ca <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800335e:	4b10      	ldr	r3, [pc, #64]	; (80033a0 <HAL_RCC_OscConfig+0x4cc>)
 8003360:	2200      	movs	r2, #0
 8003362:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003364:	f7fd fdc8 	bl	8000ef8 <HAL_GetTick>
 8003368:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800336a:	e008      	b.n	800337e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800336c:	f7fd fdc4 	bl	8000ef8 <HAL_GetTick>
 8003370:	4602      	mov	r2, r0
 8003372:	693b      	ldr	r3, [r7, #16]
 8003374:	1ad3      	subs	r3, r2, r3
 8003376:	2b02      	cmp	r3, #2
 8003378:	d901      	bls.n	800337e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800337a:	2303      	movs	r3, #3
 800337c:	e026      	b.n	80033cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800337e:	4b06      	ldr	r3, [pc, #24]	; (8003398 <HAL_RCC_OscConfig+0x4c4>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003386:	2b00      	cmp	r3, #0
 8003388:	d1f0      	bne.n	800336c <HAL_RCC_OscConfig+0x498>
 800338a:	e01e      	b.n	80033ca <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	69db      	ldr	r3, [r3, #28]
 8003390:	2b01      	cmp	r3, #1
 8003392:	d107      	bne.n	80033a4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003394:	2301      	movs	r3, #1
 8003396:	e019      	b.n	80033cc <HAL_RCC_OscConfig+0x4f8>
 8003398:	40021000 	.word	0x40021000
 800339c:	40007000 	.word	0x40007000
 80033a0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80033a4:	4b0b      	ldr	r3, [pc, #44]	; (80033d4 <HAL_RCC_OscConfig+0x500>)
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6a1b      	ldr	r3, [r3, #32]
 80033b4:	429a      	cmp	r2, r3
 80033b6:	d106      	bne.n	80033c6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033c2:	429a      	cmp	r2, r3
 80033c4:	d001      	beq.n	80033ca <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80033c6:	2301      	movs	r3, #1
 80033c8:	e000      	b.n	80033cc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80033ca:	2300      	movs	r3, #0
}
 80033cc:	4618      	mov	r0, r3
 80033ce:	3718      	adds	r7, #24
 80033d0:	46bd      	mov	sp, r7
 80033d2:	bd80      	pop	{r7, pc}
 80033d4:	40021000 	.word	0x40021000

080033d8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b084      	sub	sp, #16
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
 80033e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d101      	bne.n	80033ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80033e8:	2301      	movs	r3, #1
 80033ea:	e0d0      	b.n	800358e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80033ec:	4b6a      	ldr	r3, [pc, #424]	; (8003598 <HAL_RCC_ClockConfig+0x1c0>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f003 0307 	and.w	r3, r3, #7
 80033f4:	683a      	ldr	r2, [r7, #0]
 80033f6:	429a      	cmp	r2, r3
 80033f8:	d910      	bls.n	800341c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033fa:	4b67      	ldr	r3, [pc, #412]	; (8003598 <HAL_RCC_ClockConfig+0x1c0>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f023 0207 	bic.w	r2, r3, #7
 8003402:	4965      	ldr	r1, [pc, #404]	; (8003598 <HAL_RCC_ClockConfig+0x1c0>)
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	4313      	orrs	r3, r2
 8003408:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800340a:	4b63      	ldr	r3, [pc, #396]	; (8003598 <HAL_RCC_ClockConfig+0x1c0>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f003 0307 	and.w	r3, r3, #7
 8003412:	683a      	ldr	r2, [r7, #0]
 8003414:	429a      	cmp	r2, r3
 8003416:	d001      	beq.n	800341c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003418:	2301      	movs	r3, #1
 800341a:	e0b8      	b.n	800358e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f003 0302 	and.w	r3, r3, #2
 8003424:	2b00      	cmp	r3, #0
 8003426:	d020      	beq.n	800346a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f003 0304 	and.w	r3, r3, #4
 8003430:	2b00      	cmp	r3, #0
 8003432:	d005      	beq.n	8003440 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003434:	4b59      	ldr	r3, [pc, #356]	; (800359c <HAL_RCC_ClockConfig+0x1c4>)
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	4a58      	ldr	r2, [pc, #352]	; (800359c <HAL_RCC_ClockConfig+0x1c4>)
 800343a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800343e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f003 0308 	and.w	r3, r3, #8
 8003448:	2b00      	cmp	r3, #0
 800344a:	d005      	beq.n	8003458 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800344c:	4b53      	ldr	r3, [pc, #332]	; (800359c <HAL_RCC_ClockConfig+0x1c4>)
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	4a52      	ldr	r2, [pc, #328]	; (800359c <HAL_RCC_ClockConfig+0x1c4>)
 8003452:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003456:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003458:	4b50      	ldr	r3, [pc, #320]	; (800359c <HAL_RCC_ClockConfig+0x1c4>)
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	689b      	ldr	r3, [r3, #8]
 8003464:	494d      	ldr	r1, [pc, #308]	; (800359c <HAL_RCC_ClockConfig+0x1c4>)
 8003466:	4313      	orrs	r3, r2
 8003468:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f003 0301 	and.w	r3, r3, #1
 8003472:	2b00      	cmp	r3, #0
 8003474:	d040      	beq.n	80034f8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	2b01      	cmp	r3, #1
 800347c:	d107      	bne.n	800348e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800347e:	4b47      	ldr	r3, [pc, #284]	; (800359c <HAL_RCC_ClockConfig+0x1c4>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003486:	2b00      	cmp	r3, #0
 8003488:	d115      	bne.n	80034b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800348a:	2301      	movs	r3, #1
 800348c:	e07f      	b.n	800358e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	685b      	ldr	r3, [r3, #4]
 8003492:	2b02      	cmp	r3, #2
 8003494:	d107      	bne.n	80034a6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003496:	4b41      	ldr	r3, [pc, #260]	; (800359c <HAL_RCC_ClockConfig+0x1c4>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d109      	bne.n	80034b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034a2:	2301      	movs	r3, #1
 80034a4:	e073      	b.n	800358e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034a6:	4b3d      	ldr	r3, [pc, #244]	; (800359c <HAL_RCC_ClockConfig+0x1c4>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f003 0302 	and.w	r3, r3, #2
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d101      	bne.n	80034b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034b2:	2301      	movs	r3, #1
 80034b4:	e06b      	b.n	800358e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80034b6:	4b39      	ldr	r3, [pc, #228]	; (800359c <HAL_RCC_ClockConfig+0x1c4>)
 80034b8:	685b      	ldr	r3, [r3, #4]
 80034ba:	f023 0203 	bic.w	r2, r3, #3
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	685b      	ldr	r3, [r3, #4]
 80034c2:	4936      	ldr	r1, [pc, #216]	; (800359c <HAL_RCC_ClockConfig+0x1c4>)
 80034c4:	4313      	orrs	r3, r2
 80034c6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80034c8:	f7fd fd16 	bl	8000ef8 <HAL_GetTick>
 80034cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034ce:	e00a      	b.n	80034e6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034d0:	f7fd fd12 	bl	8000ef8 <HAL_GetTick>
 80034d4:	4602      	mov	r2, r0
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	1ad3      	subs	r3, r2, r3
 80034da:	f241 3288 	movw	r2, #5000	; 0x1388
 80034de:	4293      	cmp	r3, r2
 80034e0:	d901      	bls.n	80034e6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80034e2:	2303      	movs	r3, #3
 80034e4:	e053      	b.n	800358e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034e6:	4b2d      	ldr	r3, [pc, #180]	; (800359c <HAL_RCC_ClockConfig+0x1c4>)
 80034e8:	685b      	ldr	r3, [r3, #4]
 80034ea:	f003 020c 	and.w	r2, r3, #12
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	685b      	ldr	r3, [r3, #4]
 80034f2:	009b      	lsls	r3, r3, #2
 80034f4:	429a      	cmp	r2, r3
 80034f6:	d1eb      	bne.n	80034d0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80034f8:	4b27      	ldr	r3, [pc, #156]	; (8003598 <HAL_RCC_ClockConfig+0x1c0>)
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f003 0307 	and.w	r3, r3, #7
 8003500:	683a      	ldr	r2, [r7, #0]
 8003502:	429a      	cmp	r2, r3
 8003504:	d210      	bcs.n	8003528 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003506:	4b24      	ldr	r3, [pc, #144]	; (8003598 <HAL_RCC_ClockConfig+0x1c0>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f023 0207 	bic.w	r2, r3, #7
 800350e:	4922      	ldr	r1, [pc, #136]	; (8003598 <HAL_RCC_ClockConfig+0x1c0>)
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	4313      	orrs	r3, r2
 8003514:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003516:	4b20      	ldr	r3, [pc, #128]	; (8003598 <HAL_RCC_ClockConfig+0x1c0>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f003 0307 	and.w	r3, r3, #7
 800351e:	683a      	ldr	r2, [r7, #0]
 8003520:	429a      	cmp	r2, r3
 8003522:	d001      	beq.n	8003528 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003524:	2301      	movs	r3, #1
 8003526:	e032      	b.n	800358e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f003 0304 	and.w	r3, r3, #4
 8003530:	2b00      	cmp	r3, #0
 8003532:	d008      	beq.n	8003546 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003534:	4b19      	ldr	r3, [pc, #100]	; (800359c <HAL_RCC_ClockConfig+0x1c4>)
 8003536:	685b      	ldr	r3, [r3, #4]
 8003538:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	68db      	ldr	r3, [r3, #12]
 8003540:	4916      	ldr	r1, [pc, #88]	; (800359c <HAL_RCC_ClockConfig+0x1c4>)
 8003542:	4313      	orrs	r3, r2
 8003544:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f003 0308 	and.w	r3, r3, #8
 800354e:	2b00      	cmp	r3, #0
 8003550:	d009      	beq.n	8003566 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003552:	4b12      	ldr	r3, [pc, #72]	; (800359c <HAL_RCC_ClockConfig+0x1c4>)
 8003554:	685b      	ldr	r3, [r3, #4]
 8003556:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	691b      	ldr	r3, [r3, #16]
 800355e:	00db      	lsls	r3, r3, #3
 8003560:	490e      	ldr	r1, [pc, #56]	; (800359c <HAL_RCC_ClockConfig+0x1c4>)
 8003562:	4313      	orrs	r3, r2
 8003564:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003566:	f000 f821 	bl	80035ac <HAL_RCC_GetSysClockFreq>
 800356a:	4602      	mov	r2, r0
 800356c:	4b0b      	ldr	r3, [pc, #44]	; (800359c <HAL_RCC_ClockConfig+0x1c4>)
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	091b      	lsrs	r3, r3, #4
 8003572:	f003 030f 	and.w	r3, r3, #15
 8003576:	490a      	ldr	r1, [pc, #40]	; (80035a0 <HAL_RCC_ClockConfig+0x1c8>)
 8003578:	5ccb      	ldrb	r3, [r1, r3]
 800357a:	fa22 f303 	lsr.w	r3, r2, r3
 800357e:	4a09      	ldr	r2, [pc, #36]	; (80035a4 <HAL_RCC_ClockConfig+0x1cc>)
 8003580:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003582:	4b09      	ldr	r3, [pc, #36]	; (80035a8 <HAL_RCC_ClockConfig+0x1d0>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4618      	mov	r0, r3
 8003588:	f7fd fc74 	bl	8000e74 <HAL_InitTick>

  return HAL_OK;
 800358c:	2300      	movs	r3, #0
}
 800358e:	4618      	mov	r0, r3
 8003590:	3710      	adds	r7, #16
 8003592:	46bd      	mov	sp, r7
 8003594:	bd80      	pop	{r7, pc}
 8003596:	bf00      	nop
 8003598:	40022000 	.word	0x40022000
 800359c:	40021000 	.word	0x40021000
 80035a0:	080092d8 	.word	0x080092d8
 80035a4:	20000000 	.word	0x20000000
 80035a8:	20000004 	.word	0x20000004

080035ac <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80035ac:	b490      	push	{r4, r7}
 80035ae:	b08a      	sub	sp, #40	; 0x28
 80035b0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80035b2:	4b29      	ldr	r3, [pc, #164]	; (8003658 <HAL_RCC_GetSysClockFreq+0xac>)
 80035b4:	1d3c      	adds	r4, r7, #4
 80035b6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80035b8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80035bc:	f240 2301 	movw	r3, #513	; 0x201
 80035c0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80035c2:	2300      	movs	r3, #0
 80035c4:	61fb      	str	r3, [r7, #28]
 80035c6:	2300      	movs	r3, #0
 80035c8:	61bb      	str	r3, [r7, #24]
 80035ca:	2300      	movs	r3, #0
 80035cc:	627b      	str	r3, [r7, #36]	; 0x24
 80035ce:	2300      	movs	r3, #0
 80035d0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80035d2:	2300      	movs	r3, #0
 80035d4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80035d6:	4b21      	ldr	r3, [pc, #132]	; (800365c <HAL_RCC_GetSysClockFreq+0xb0>)
 80035d8:	685b      	ldr	r3, [r3, #4]
 80035da:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80035dc:	69fb      	ldr	r3, [r7, #28]
 80035de:	f003 030c 	and.w	r3, r3, #12
 80035e2:	2b04      	cmp	r3, #4
 80035e4:	d002      	beq.n	80035ec <HAL_RCC_GetSysClockFreq+0x40>
 80035e6:	2b08      	cmp	r3, #8
 80035e8:	d003      	beq.n	80035f2 <HAL_RCC_GetSysClockFreq+0x46>
 80035ea:	e02b      	b.n	8003644 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80035ec:	4b1c      	ldr	r3, [pc, #112]	; (8003660 <HAL_RCC_GetSysClockFreq+0xb4>)
 80035ee:	623b      	str	r3, [r7, #32]
      break;
 80035f0:	e02b      	b.n	800364a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80035f2:	69fb      	ldr	r3, [r7, #28]
 80035f4:	0c9b      	lsrs	r3, r3, #18
 80035f6:	f003 030f 	and.w	r3, r3, #15
 80035fa:	3328      	adds	r3, #40	; 0x28
 80035fc:	443b      	add	r3, r7
 80035fe:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003602:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003604:	69fb      	ldr	r3, [r7, #28]
 8003606:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800360a:	2b00      	cmp	r3, #0
 800360c:	d012      	beq.n	8003634 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800360e:	4b13      	ldr	r3, [pc, #76]	; (800365c <HAL_RCC_GetSysClockFreq+0xb0>)
 8003610:	685b      	ldr	r3, [r3, #4]
 8003612:	0c5b      	lsrs	r3, r3, #17
 8003614:	f003 0301 	and.w	r3, r3, #1
 8003618:	3328      	adds	r3, #40	; 0x28
 800361a:	443b      	add	r3, r7
 800361c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003620:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003622:	697b      	ldr	r3, [r7, #20]
 8003624:	4a0e      	ldr	r2, [pc, #56]	; (8003660 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003626:	fb03 f202 	mul.w	r2, r3, r2
 800362a:	69bb      	ldr	r3, [r7, #24]
 800362c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003630:	627b      	str	r3, [r7, #36]	; 0x24
 8003632:	e004      	b.n	800363e <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003634:	697b      	ldr	r3, [r7, #20]
 8003636:	4a0b      	ldr	r2, [pc, #44]	; (8003664 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003638:	fb02 f303 	mul.w	r3, r2, r3
 800363c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800363e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003640:	623b      	str	r3, [r7, #32]
      break;
 8003642:	e002      	b.n	800364a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003644:	4b08      	ldr	r3, [pc, #32]	; (8003668 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003646:	623b      	str	r3, [r7, #32]
      break;
 8003648:	bf00      	nop
    }
  }
  return sysclockfreq;
 800364a:	6a3b      	ldr	r3, [r7, #32]
}
 800364c:	4618      	mov	r0, r3
 800364e:	3728      	adds	r7, #40	; 0x28
 8003650:	46bd      	mov	sp, r7
 8003652:	bc90      	pop	{r4, r7}
 8003654:	4770      	bx	lr
 8003656:	bf00      	nop
 8003658:	08009280 	.word	0x08009280
 800365c:	40021000 	.word	0x40021000
 8003660:	00f42400 	.word	0x00f42400
 8003664:	003d0900 	.word	0x003d0900
 8003668:	007a1200 	.word	0x007a1200

0800366c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800366c:	b480      	push	{r7}
 800366e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003670:	4b02      	ldr	r3, [pc, #8]	; (800367c <HAL_RCC_GetHCLKFreq+0x10>)
 8003672:	681b      	ldr	r3, [r3, #0]
}
 8003674:	4618      	mov	r0, r3
 8003676:	46bd      	mov	sp, r7
 8003678:	bc80      	pop	{r7}
 800367a:	4770      	bx	lr
 800367c:	20000000 	.word	0x20000000

08003680 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003684:	f7ff fff2 	bl	800366c <HAL_RCC_GetHCLKFreq>
 8003688:	4602      	mov	r2, r0
 800368a:	4b05      	ldr	r3, [pc, #20]	; (80036a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800368c:	685b      	ldr	r3, [r3, #4]
 800368e:	0a1b      	lsrs	r3, r3, #8
 8003690:	f003 0307 	and.w	r3, r3, #7
 8003694:	4903      	ldr	r1, [pc, #12]	; (80036a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003696:	5ccb      	ldrb	r3, [r1, r3]
 8003698:	fa22 f303 	lsr.w	r3, r2, r3
}
 800369c:	4618      	mov	r0, r3
 800369e:	bd80      	pop	{r7, pc}
 80036a0:	40021000 	.word	0x40021000
 80036a4:	080092e8 	.word	0x080092e8

080036a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80036ac:	f7ff ffde 	bl	800366c <HAL_RCC_GetHCLKFreq>
 80036b0:	4602      	mov	r2, r0
 80036b2:	4b05      	ldr	r3, [pc, #20]	; (80036c8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80036b4:	685b      	ldr	r3, [r3, #4]
 80036b6:	0adb      	lsrs	r3, r3, #11
 80036b8:	f003 0307 	and.w	r3, r3, #7
 80036bc:	4903      	ldr	r1, [pc, #12]	; (80036cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80036be:	5ccb      	ldrb	r3, [r1, r3]
 80036c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036c4:	4618      	mov	r0, r3
 80036c6:	bd80      	pop	{r7, pc}
 80036c8:	40021000 	.word	0x40021000
 80036cc:	080092e8 	.word	0x080092e8

080036d0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80036d0:	b480      	push	{r7}
 80036d2:	b085      	sub	sp, #20
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80036d8:	4b0a      	ldr	r3, [pc, #40]	; (8003704 <RCC_Delay+0x34>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4a0a      	ldr	r2, [pc, #40]	; (8003708 <RCC_Delay+0x38>)
 80036de:	fba2 2303 	umull	r2, r3, r2, r3
 80036e2:	0a5b      	lsrs	r3, r3, #9
 80036e4:	687a      	ldr	r2, [r7, #4]
 80036e6:	fb02 f303 	mul.w	r3, r2, r3
 80036ea:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80036ec:	bf00      	nop
  }
  while (Delay --);
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	1e5a      	subs	r2, r3, #1
 80036f2:	60fa      	str	r2, [r7, #12]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d1f9      	bne.n	80036ec <RCC_Delay+0x1c>
}
 80036f8:	bf00      	nop
 80036fa:	bf00      	nop
 80036fc:	3714      	adds	r7, #20
 80036fe:	46bd      	mov	sp, r7
 8003700:	bc80      	pop	{r7}
 8003702:	4770      	bx	lr
 8003704:	20000000 	.word	0x20000000
 8003708:	10624dd3 	.word	0x10624dd3

0800370c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b086      	sub	sp, #24
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003714:	2300      	movs	r3, #0
 8003716:	613b      	str	r3, [r7, #16]
 8003718:	2300      	movs	r3, #0
 800371a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f003 0301 	and.w	r3, r3, #1
 8003724:	2b00      	cmp	r3, #0
 8003726:	d07d      	beq.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003728:	2300      	movs	r3, #0
 800372a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800372c:	4b4f      	ldr	r3, [pc, #316]	; (800386c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800372e:	69db      	ldr	r3, [r3, #28]
 8003730:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003734:	2b00      	cmp	r3, #0
 8003736:	d10d      	bne.n	8003754 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003738:	4b4c      	ldr	r3, [pc, #304]	; (800386c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800373a:	69db      	ldr	r3, [r3, #28]
 800373c:	4a4b      	ldr	r2, [pc, #300]	; (800386c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800373e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003742:	61d3      	str	r3, [r2, #28]
 8003744:	4b49      	ldr	r3, [pc, #292]	; (800386c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003746:	69db      	ldr	r3, [r3, #28]
 8003748:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800374c:	60bb      	str	r3, [r7, #8]
 800374e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003750:	2301      	movs	r3, #1
 8003752:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003754:	4b46      	ldr	r3, [pc, #280]	; (8003870 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800375c:	2b00      	cmp	r3, #0
 800375e:	d118      	bne.n	8003792 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003760:	4b43      	ldr	r3, [pc, #268]	; (8003870 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4a42      	ldr	r2, [pc, #264]	; (8003870 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003766:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800376a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800376c:	f7fd fbc4 	bl	8000ef8 <HAL_GetTick>
 8003770:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003772:	e008      	b.n	8003786 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003774:	f7fd fbc0 	bl	8000ef8 <HAL_GetTick>
 8003778:	4602      	mov	r2, r0
 800377a:	693b      	ldr	r3, [r7, #16]
 800377c:	1ad3      	subs	r3, r2, r3
 800377e:	2b64      	cmp	r3, #100	; 0x64
 8003780:	d901      	bls.n	8003786 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003782:	2303      	movs	r3, #3
 8003784:	e06d      	b.n	8003862 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003786:	4b3a      	ldr	r3, [pc, #232]	; (8003870 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800378e:	2b00      	cmp	r3, #0
 8003790:	d0f0      	beq.n	8003774 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003792:	4b36      	ldr	r3, [pc, #216]	; (800386c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003794:	6a1b      	ldr	r3, [r3, #32]
 8003796:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800379a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d02e      	beq.n	8003800 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	685b      	ldr	r3, [r3, #4]
 80037a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037aa:	68fa      	ldr	r2, [r7, #12]
 80037ac:	429a      	cmp	r2, r3
 80037ae:	d027      	beq.n	8003800 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80037b0:	4b2e      	ldr	r3, [pc, #184]	; (800386c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037b2:	6a1b      	ldr	r3, [r3, #32]
 80037b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037b8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80037ba:	4b2e      	ldr	r3, [pc, #184]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80037bc:	2201      	movs	r2, #1
 80037be:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80037c0:	4b2c      	ldr	r3, [pc, #176]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80037c2:	2200      	movs	r2, #0
 80037c4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80037c6:	4a29      	ldr	r2, [pc, #164]	; (800386c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	f003 0301 	and.w	r3, r3, #1
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d014      	beq.n	8003800 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037d6:	f7fd fb8f 	bl	8000ef8 <HAL_GetTick>
 80037da:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037dc:	e00a      	b.n	80037f4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037de:	f7fd fb8b 	bl	8000ef8 <HAL_GetTick>
 80037e2:	4602      	mov	r2, r0
 80037e4:	693b      	ldr	r3, [r7, #16]
 80037e6:	1ad3      	subs	r3, r2, r3
 80037e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d901      	bls.n	80037f4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80037f0:	2303      	movs	r3, #3
 80037f2:	e036      	b.n	8003862 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037f4:	4b1d      	ldr	r3, [pc, #116]	; (800386c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037f6:	6a1b      	ldr	r3, [r3, #32]
 80037f8:	f003 0302 	and.w	r3, r3, #2
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d0ee      	beq.n	80037de <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003800:	4b1a      	ldr	r3, [pc, #104]	; (800386c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003802:	6a1b      	ldr	r3, [r3, #32]
 8003804:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	685b      	ldr	r3, [r3, #4]
 800380c:	4917      	ldr	r1, [pc, #92]	; (800386c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800380e:	4313      	orrs	r3, r2
 8003810:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003812:	7dfb      	ldrb	r3, [r7, #23]
 8003814:	2b01      	cmp	r3, #1
 8003816:	d105      	bne.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003818:	4b14      	ldr	r3, [pc, #80]	; (800386c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800381a:	69db      	ldr	r3, [r3, #28]
 800381c:	4a13      	ldr	r2, [pc, #76]	; (800386c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800381e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003822:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f003 0302 	and.w	r3, r3, #2
 800382c:	2b00      	cmp	r3, #0
 800382e:	d008      	beq.n	8003842 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003830:	4b0e      	ldr	r3, [pc, #56]	; (800386c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003832:	685b      	ldr	r3, [r3, #4]
 8003834:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	689b      	ldr	r3, [r3, #8]
 800383c:	490b      	ldr	r1, [pc, #44]	; (800386c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800383e:	4313      	orrs	r3, r2
 8003840:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f003 0310 	and.w	r3, r3, #16
 800384a:	2b00      	cmp	r3, #0
 800384c:	d008      	beq.n	8003860 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800384e:	4b07      	ldr	r3, [pc, #28]	; (800386c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	68db      	ldr	r3, [r3, #12]
 800385a:	4904      	ldr	r1, [pc, #16]	; (800386c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800385c:	4313      	orrs	r3, r2
 800385e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003860:	2300      	movs	r3, #0
}
 8003862:	4618      	mov	r0, r3
 8003864:	3718      	adds	r7, #24
 8003866:	46bd      	mov	sp, r7
 8003868:	bd80      	pop	{r7, pc}
 800386a:	bf00      	nop
 800386c:	40021000 	.word	0x40021000
 8003870:	40007000 	.word	0x40007000
 8003874:	42420440 	.word	0x42420440

08003878 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b082      	sub	sp, #8
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d101      	bne.n	800388a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003886:	2301      	movs	r3, #1
 8003888:	e076      	b.n	8003978 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800388e:	2b00      	cmp	r3, #0
 8003890:	d108      	bne.n	80038a4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	685b      	ldr	r3, [r3, #4]
 8003896:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800389a:	d009      	beq.n	80038b0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2200      	movs	r2, #0
 80038a0:	61da      	str	r2, [r3, #28]
 80038a2:	e005      	b.n	80038b0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2200      	movs	r2, #0
 80038a8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2200      	movs	r2, #0
 80038ae:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2200      	movs	r2, #0
 80038b4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80038bc:	b2db      	uxtb	r3, r3
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d106      	bne.n	80038d0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2200      	movs	r2, #0
 80038c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80038ca:	6878      	ldr	r0, [r7, #4]
 80038cc:	f7fd f98c 	bl	8000be8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2202      	movs	r2, #2
 80038d4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	681a      	ldr	r2, [r3, #0]
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80038e6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	685b      	ldr	r3, [r3, #4]
 80038ec:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	689b      	ldr	r3, [r3, #8]
 80038f4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80038f8:	431a      	orrs	r2, r3
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	68db      	ldr	r3, [r3, #12]
 80038fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003902:	431a      	orrs	r2, r3
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	691b      	ldr	r3, [r3, #16]
 8003908:	f003 0302 	and.w	r3, r3, #2
 800390c:	431a      	orrs	r2, r3
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	695b      	ldr	r3, [r3, #20]
 8003912:	f003 0301 	and.w	r3, r3, #1
 8003916:	431a      	orrs	r2, r3
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	699b      	ldr	r3, [r3, #24]
 800391c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003920:	431a      	orrs	r2, r3
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	69db      	ldr	r3, [r3, #28]
 8003926:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800392a:	431a      	orrs	r2, r3
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6a1b      	ldr	r3, [r3, #32]
 8003930:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003934:	ea42 0103 	orr.w	r1, r2, r3
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800393c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	430a      	orrs	r2, r1
 8003946:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	699b      	ldr	r3, [r3, #24]
 800394c:	0c1a      	lsrs	r2, r3, #16
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f002 0204 	and.w	r2, r2, #4
 8003956:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	69da      	ldr	r2, [r3, #28]
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003966:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2200      	movs	r2, #0
 800396c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2201      	movs	r2, #1
 8003972:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003976:	2300      	movs	r3, #0
}
 8003978:	4618      	mov	r0, r3
 800397a:	3708      	adds	r7, #8
 800397c:	46bd      	mov	sp, r7
 800397e:	bd80      	pop	{r7, pc}

08003980 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b082      	sub	sp, #8
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d101      	bne.n	8003992 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800398e:	2301      	movs	r3, #1
 8003990:	e03f      	b.n	8003a12 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003998:	b2db      	uxtb	r3, r3
 800399a:	2b00      	cmp	r3, #0
 800399c:	d106      	bne.n	80039ac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2200      	movs	r2, #0
 80039a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80039a6:	6878      	ldr	r0, [r7, #4]
 80039a8:	f7fd f968 	bl	8000c7c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2224      	movs	r2, #36	; 0x24
 80039b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	68da      	ldr	r2, [r3, #12]
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80039c2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80039c4:	6878      	ldr	r0, [r7, #4]
 80039c6:	f000 f829 	bl	8003a1c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	691a      	ldr	r2, [r3, #16]
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80039d8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	695a      	ldr	r2, [r3, #20]
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80039e8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	68da      	ldr	r2, [r3, #12]
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80039f8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2200      	movs	r2, #0
 80039fe:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2220      	movs	r2, #32
 8003a04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2220      	movs	r2, #32
 8003a0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003a10:	2300      	movs	r3, #0
}
 8003a12:	4618      	mov	r0, r3
 8003a14:	3708      	adds	r7, #8
 8003a16:	46bd      	mov	sp, r7
 8003a18:	bd80      	pop	{r7, pc}
	...

08003a1c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b084      	sub	sp, #16
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	691b      	ldr	r3, [r3, #16]
 8003a2a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	68da      	ldr	r2, [r3, #12]
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	430a      	orrs	r2, r1
 8003a38:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	689a      	ldr	r2, [r3, #8]
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	691b      	ldr	r3, [r3, #16]
 8003a42:	431a      	orrs	r2, r3
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	695b      	ldr	r3, [r3, #20]
 8003a48:	4313      	orrs	r3, r2
 8003a4a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	68db      	ldr	r3, [r3, #12]
 8003a52:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003a56:	f023 030c 	bic.w	r3, r3, #12
 8003a5a:	687a      	ldr	r2, [r7, #4]
 8003a5c:	6812      	ldr	r2, [r2, #0]
 8003a5e:	68b9      	ldr	r1, [r7, #8]
 8003a60:	430b      	orrs	r3, r1
 8003a62:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	695b      	ldr	r3, [r3, #20]
 8003a6a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	699a      	ldr	r2, [r3, #24]
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	430a      	orrs	r2, r1
 8003a78:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	4a2c      	ldr	r2, [pc, #176]	; (8003b30 <UART_SetConfig+0x114>)
 8003a80:	4293      	cmp	r3, r2
 8003a82:	d103      	bne.n	8003a8c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003a84:	f7ff fe10 	bl	80036a8 <HAL_RCC_GetPCLK2Freq>
 8003a88:	60f8      	str	r0, [r7, #12]
 8003a8a:	e002      	b.n	8003a92 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003a8c:	f7ff fdf8 	bl	8003680 <HAL_RCC_GetPCLK1Freq>
 8003a90:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003a92:	68fa      	ldr	r2, [r7, #12]
 8003a94:	4613      	mov	r3, r2
 8003a96:	009b      	lsls	r3, r3, #2
 8003a98:	4413      	add	r3, r2
 8003a9a:	009a      	lsls	r2, r3, #2
 8003a9c:	441a      	add	r2, r3
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	009b      	lsls	r3, r3, #2
 8003aa4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003aa8:	4a22      	ldr	r2, [pc, #136]	; (8003b34 <UART_SetConfig+0x118>)
 8003aaa:	fba2 2303 	umull	r2, r3, r2, r3
 8003aae:	095b      	lsrs	r3, r3, #5
 8003ab0:	0119      	lsls	r1, r3, #4
 8003ab2:	68fa      	ldr	r2, [r7, #12]
 8003ab4:	4613      	mov	r3, r2
 8003ab6:	009b      	lsls	r3, r3, #2
 8003ab8:	4413      	add	r3, r2
 8003aba:	009a      	lsls	r2, r3, #2
 8003abc:	441a      	add	r2, r3
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	685b      	ldr	r3, [r3, #4]
 8003ac2:	009b      	lsls	r3, r3, #2
 8003ac4:	fbb2 f2f3 	udiv	r2, r2, r3
 8003ac8:	4b1a      	ldr	r3, [pc, #104]	; (8003b34 <UART_SetConfig+0x118>)
 8003aca:	fba3 0302 	umull	r0, r3, r3, r2
 8003ace:	095b      	lsrs	r3, r3, #5
 8003ad0:	2064      	movs	r0, #100	; 0x64
 8003ad2:	fb00 f303 	mul.w	r3, r0, r3
 8003ad6:	1ad3      	subs	r3, r2, r3
 8003ad8:	011b      	lsls	r3, r3, #4
 8003ada:	3332      	adds	r3, #50	; 0x32
 8003adc:	4a15      	ldr	r2, [pc, #84]	; (8003b34 <UART_SetConfig+0x118>)
 8003ade:	fba2 2303 	umull	r2, r3, r2, r3
 8003ae2:	095b      	lsrs	r3, r3, #5
 8003ae4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003ae8:	4419      	add	r1, r3
 8003aea:	68fa      	ldr	r2, [r7, #12]
 8003aec:	4613      	mov	r3, r2
 8003aee:	009b      	lsls	r3, r3, #2
 8003af0:	4413      	add	r3, r2
 8003af2:	009a      	lsls	r2, r3, #2
 8003af4:	441a      	add	r2, r3
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	009b      	lsls	r3, r3, #2
 8003afc:	fbb2 f2f3 	udiv	r2, r2, r3
 8003b00:	4b0c      	ldr	r3, [pc, #48]	; (8003b34 <UART_SetConfig+0x118>)
 8003b02:	fba3 0302 	umull	r0, r3, r3, r2
 8003b06:	095b      	lsrs	r3, r3, #5
 8003b08:	2064      	movs	r0, #100	; 0x64
 8003b0a:	fb00 f303 	mul.w	r3, r0, r3
 8003b0e:	1ad3      	subs	r3, r2, r3
 8003b10:	011b      	lsls	r3, r3, #4
 8003b12:	3332      	adds	r3, #50	; 0x32
 8003b14:	4a07      	ldr	r2, [pc, #28]	; (8003b34 <UART_SetConfig+0x118>)
 8003b16:	fba2 2303 	umull	r2, r3, r2, r3
 8003b1a:	095b      	lsrs	r3, r3, #5
 8003b1c:	f003 020f 	and.w	r2, r3, #15
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	440a      	add	r2, r1
 8003b26:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003b28:	bf00      	nop
 8003b2a:	3710      	adds	r7, #16
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	bd80      	pop	{r7, pc}
 8003b30:	40013800 	.word	0x40013800
 8003b34:	51eb851f 	.word	0x51eb851f

08003b38 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003b38:	b084      	sub	sp, #16
 8003b3a:	b480      	push	{r7}
 8003b3c:	b083      	sub	sp, #12
 8003b3e:	af00      	add	r7, sp, #0
 8003b40:	6078      	str	r0, [r7, #4]
 8003b42:	f107 0014 	add.w	r0, r7, #20
 8003b46:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8003b4a:	2300      	movs	r3, #0
}
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	370c      	adds	r7, #12
 8003b50:	46bd      	mov	sp, r7
 8003b52:	bc80      	pop	{r7}
 8003b54:	b004      	add	sp, #16
 8003b56:	4770      	bx	lr

08003b58 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8003b58:	b480      	push	{r7}
 8003b5a:	b085      	sub	sp, #20
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2200      	movs	r2, #0
 8003b64:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003b68:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8003b6c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	b29a      	uxth	r2, r3
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003b78:	2300      	movs	r3, #0
}
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	3714      	adds	r7, #20
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	bc80      	pop	{r7}
 8003b82:	4770      	bx	lr

08003b84 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8003b84:	b480      	push	{r7}
 8003b86:	b085      	sub	sp, #20
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003b8c:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8003b90:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003b98:	b29a      	uxth	r2, r3
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	b29b      	uxth	r3, r3
 8003b9e:	43db      	mvns	r3, r3
 8003ba0:	b29b      	uxth	r3, r3
 8003ba2:	4013      	ands	r3, r2
 8003ba4:	b29a      	uxth	r2, r3
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003bac:	2300      	movs	r3, #0
}
 8003bae:	4618      	mov	r0, r3
 8003bb0:	3714      	adds	r7, #20
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	bc80      	pop	{r7}
 8003bb6:	4770      	bx	lr

08003bb8 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8003bb8:	b480      	push	{r7}
 8003bba:	b083      	sub	sp, #12
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
 8003bc0:	460b      	mov	r3, r1
 8003bc2:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8003bc4:	2300      	movs	r3, #0
}
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	370c      	adds	r7, #12
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	bc80      	pop	{r7}
 8003bce:	4770      	bx	lr

08003bd0 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003bd0:	b084      	sub	sp, #16
 8003bd2:	b480      	push	{r7}
 8003bd4:	b083      	sub	sp, #12
 8003bd6:	af00      	add	r7, sp, #0
 8003bd8:	6078      	str	r0, [r7, #4]
 8003bda:	f107 0014 	add.w	r0, r7, #20
 8003bde:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2201      	movs	r2, #1
 8003be6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2200      	movs	r2, #0
 8003bee:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8003c02:	2300      	movs	r3, #0
}
 8003c04:	4618      	mov	r0, r3
 8003c06:	370c      	adds	r7, #12
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	bc80      	pop	{r7}
 8003c0c:	b004      	add	sp, #16
 8003c0e:	4770      	bx	lr

08003c10 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003c10:	b480      	push	{r7}
 8003c12:	b09b      	sub	sp, #108	; 0x6c
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
 8003c18:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8003c20:	687a      	ldr	r2, [r7, #4]
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	781b      	ldrb	r3, [r3, #0]
 8003c26:	009b      	lsls	r3, r3, #2
 8003c28:	4413      	add	r3, r2
 8003c2a:	881b      	ldrh	r3, [r3, #0]
 8003c2c:	b29b      	uxth	r3, r3
 8003c2e:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8003c32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c36:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	78db      	ldrb	r3, [r3, #3]
 8003c3e:	2b03      	cmp	r3, #3
 8003c40:	d81f      	bhi.n	8003c82 <USB_ActivateEndpoint+0x72>
 8003c42:	a201      	add	r2, pc, #4	; (adr r2, 8003c48 <USB_ActivateEndpoint+0x38>)
 8003c44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c48:	08003c59 	.word	0x08003c59
 8003c4c:	08003c75 	.word	0x08003c75
 8003c50:	08003c8b 	.word	0x08003c8b
 8003c54:	08003c67 	.word	0x08003c67
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8003c58:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003c5c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003c60:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8003c64:	e012      	b.n	8003c8c <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8003c66:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003c6a:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8003c6e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8003c72:	e00b      	b.n	8003c8c <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8003c74:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003c78:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003c7c:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8003c80:	e004      	b.n	8003c8c <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8003c82:	2301      	movs	r3, #1
 8003c84:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8003c88:	e000      	b.n	8003c8c <USB_ActivateEndpoint+0x7c>
      break;
 8003c8a:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8003c8c:	687a      	ldr	r2, [r7, #4]
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	781b      	ldrb	r3, [r3, #0]
 8003c92:	009b      	lsls	r3, r3, #2
 8003c94:	441a      	add	r2, r3
 8003c96:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003c9a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003c9e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003ca2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ca6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003caa:	b29b      	uxth	r3, r3
 8003cac:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8003cae:	687a      	ldr	r2, [r7, #4]
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	781b      	ldrb	r3, [r3, #0]
 8003cb4:	009b      	lsls	r3, r3, #2
 8003cb6:	4413      	add	r3, r2
 8003cb8:	881b      	ldrh	r3, [r3, #0]
 8003cba:	b29b      	uxth	r3, r3
 8003cbc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003cc0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cc4:	b29a      	uxth	r2, r3
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	781b      	ldrb	r3, [r3, #0]
 8003cca:	b29b      	uxth	r3, r3
 8003ccc:	4313      	orrs	r3, r2
 8003cce:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8003cd2:	687a      	ldr	r2, [r7, #4]
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	781b      	ldrb	r3, [r3, #0]
 8003cd8:	009b      	lsls	r3, r3, #2
 8003cda:	441a      	add	r2, r3
 8003cdc:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8003ce0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003ce4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003ce8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003cec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003cf0:	b29b      	uxth	r3, r3
 8003cf2:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	7b1b      	ldrb	r3, [r3, #12]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	f040 8149 	bne.w	8003f90 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	785b      	ldrb	r3, [r3, #1]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	f000 8084 	beq.w	8003e10 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	617b      	str	r3, [r7, #20]
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003d12:	b29b      	uxth	r3, r3
 8003d14:	461a      	mov	r2, r3
 8003d16:	697b      	ldr	r3, [r7, #20]
 8003d18:	4413      	add	r3, r2
 8003d1a:	617b      	str	r3, [r7, #20]
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	781b      	ldrb	r3, [r3, #0]
 8003d20:	011a      	lsls	r2, r3, #4
 8003d22:	697b      	ldr	r3, [r7, #20]
 8003d24:	4413      	add	r3, r2
 8003d26:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003d2a:	613b      	str	r3, [r7, #16]
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	88db      	ldrh	r3, [r3, #6]
 8003d30:	085b      	lsrs	r3, r3, #1
 8003d32:	b29b      	uxth	r3, r3
 8003d34:	005b      	lsls	r3, r3, #1
 8003d36:	b29a      	uxth	r2, r3
 8003d38:	693b      	ldr	r3, [r7, #16]
 8003d3a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003d3c:	687a      	ldr	r2, [r7, #4]
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	781b      	ldrb	r3, [r3, #0]
 8003d42:	009b      	lsls	r3, r3, #2
 8003d44:	4413      	add	r3, r2
 8003d46:	881b      	ldrh	r3, [r3, #0]
 8003d48:	81fb      	strh	r3, [r7, #14]
 8003d4a:	89fb      	ldrh	r3, [r7, #14]
 8003d4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d01b      	beq.n	8003d8c <USB_ActivateEndpoint+0x17c>
 8003d54:	687a      	ldr	r2, [r7, #4]
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	781b      	ldrb	r3, [r3, #0]
 8003d5a:	009b      	lsls	r3, r3, #2
 8003d5c:	4413      	add	r3, r2
 8003d5e:	881b      	ldrh	r3, [r3, #0]
 8003d60:	b29b      	uxth	r3, r3
 8003d62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d6a:	81bb      	strh	r3, [r7, #12]
 8003d6c:	687a      	ldr	r2, [r7, #4]
 8003d6e:	683b      	ldr	r3, [r7, #0]
 8003d70:	781b      	ldrb	r3, [r3, #0]
 8003d72:	009b      	lsls	r3, r3, #2
 8003d74:	441a      	add	r2, r3
 8003d76:	89bb      	ldrh	r3, [r7, #12]
 8003d78:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003d7c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003d80:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d84:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003d88:	b29b      	uxth	r3, r3
 8003d8a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	78db      	ldrb	r3, [r3, #3]
 8003d90:	2b01      	cmp	r3, #1
 8003d92:	d020      	beq.n	8003dd6 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003d94:	687a      	ldr	r2, [r7, #4]
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	781b      	ldrb	r3, [r3, #0]
 8003d9a:	009b      	lsls	r3, r3, #2
 8003d9c:	4413      	add	r3, r2
 8003d9e:	881b      	ldrh	r3, [r3, #0]
 8003da0:	b29b      	uxth	r3, r3
 8003da2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003da6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003daa:	813b      	strh	r3, [r7, #8]
 8003dac:	893b      	ldrh	r3, [r7, #8]
 8003dae:	f083 0320 	eor.w	r3, r3, #32
 8003db2:	813b      	strh	r3, [r7, #8]
 8003db4:	687a      	ldr	r2, [r7, #4]
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	781b      	ldrb	r3, [r3, #0]
 8003dba:	009b      	lsls	r3, r3, #2
 8003dbc:	441a      	add	r2, r3
 8003dbe:	893b      	ldrh	r3, [r7, #8]
 8003dc0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003dc4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003dc8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003dcc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003dd0:	b29b      	uxth	r3, r3
 8003dd2:	8013      	strh	r3, [r2, #0]
 8003dd4:	e27f      	b.n	80042d6 <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003dd6:	687a      	ldr	r2, [r7, #4]
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	781b      	ldrb	r3, [r3, #0]
 8003ddc:	009b      	lsls	r3, r3, #2
 8003dde:	4413      	add	r3, r2
 8003de0:	881b      	ldrh	r3, [r3, #0]
 8003de2:	b29b      	uxth	r3, r3
 8003de4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003de8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003dec:	817b      	strh	r3, [r7, #10]
 8003dee:	687a      	ldr	r2, [r7, #4]
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	781b      	ldrb	r3, [r3, #0]
 8003df4:	009b      	lsls	r3, r3, #2
 8003df6:	441a      	add	r2, r3
 8003df8:	897b      	ldrh	r3, [r7, #10]
 8003dfa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003dfe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003e02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e0a:	b29b      	uxth	r3, r3
 8003e0c:	8013      	strh	r3, [r2, #0]
 8003e0e:	e262      	b.n	80042d6 <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e1a:	b29b      	uxth	r3, r3
 8003e1c:	461a      	mov	r2, r3
 8003e1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e20:	4413      	add	r3, r2
 8003e22:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	781b      	ldrb	r3, [r3, #0]
 8003e28:	011a      	lsls	r2, r3, #4
 8003e2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e2c:	4413      	add	r3, r2
 8003e2e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8003e32:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	88db      	ldrh	r3, [r3, #6]
 8003e38:	085b      	lsrs	r3, r3, #1
 8003e3a:	b29b      	uxth	r3, r3
 8003e3c:	005b      	lsls	r3, r3, #1
 8003e3e:	b29a      	uxth	r2, r3
 8003e40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e42:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	627b      	str	r3, [r7, #36]	; 0x24
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e4e:	b29b      	uxth	r3, r3
 8003e50:	461a      	mov	r2, r3
 8003e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e54:	4413      	add	r3, r2
 8003e56:	627b      	str	r3, [r7, #36]	; 0x24
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	781b      	ldrb	r3, [r3, #0]
 8003e5c:	011a      	lsls	r2, r3, #4
 8003e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e60:	4413      	add	r3, r2
 8003e62:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003e66:	623b      	str	r3, [r7, #32]
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	691b      	ldr	r3, [r3, #16]
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d112      	bne.n	8003e96 <USB_ActivateEndpoint+0x286>
 8003e70:	6a3b      	ldr	r3, [r7, #32]
 8003e72:	881b      	ldrh	r3, [r3, #0]
 8003e74:	b29b      	uxth	r3, r3
 8003e76:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003e7a:	b29a      	uxth	r2, r3
 8003e7c:	6a3b      	ldr	r3, [r7, #32]
 8003e7e:	801a      	strh	r2, [r3, #0]
 8003e80:	6a3b      	ldr	r3, [r7, #32]
 8003e82:	881b      	ldrh	r3, [r3, #0]
 8003e84:	b29b      	uxth	r3, r3
 8003e86:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003e8a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003e8e:	b29a      	uxth	r2, r3
 8003e90:	6a3b      	ldr	r3, [r7, #32]
 8003e92:	801a      	strh	r2, [r3, #0]
 8003e94:	e02f      	b.n	8003ef6 <USB_ActivateEndpoint+0x2e6>
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	691b      	ldr	r3, [r3, #16]
 8003e9a:	2b3e      	cmp	r3, #62	; 0x3e
 8003e9c:	d813      	bhi.n	8003ec6 <USB_ActivateEndpoint+0x2b6>
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	691b      	ldr	r3, [r3, #16]
 8003ea2:	085b      	lsrs	r3, r3, #1
 8003ea4:	663b      	str	r3, [r7, #96]	; 0x60
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	691b      	ldr	r3, [r3, #16]
 8003eaa:	f003 0301 	and.w	r3, r3, #1
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d002      	beq.n	8003eb8 <USB_ActivateEndpoint+0x2a8>
 8003eb2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003eb4:	3301      	adds	r3, #1
 8003eb6:	663b      	str	r3, [r7, #96]	; 0x60
 8003eb8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003eba:	b29b      	uxth	r3, r3
 8003ebc:	029b      	lsls	r3, r3, #10
 8003ebe:	b29a      	uxth	r2, r3
 8003ec0:	6a3b      	ldr	r3, [r7, #32]
 8003ec2:	801a      	strh	r2, [r3, #0]
 8003ec4:	e017      	b.n	8003ef6 <USB_ActivateEndpoint+0x2e6>
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	691b      	ldr	r3, [r3, #16]
 8003eca:	095b      	lsrs	r3, r3, #5
 8003ecc:	663b      	str	r3, [r7, #96]	; 0x60
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	691b      	ldr	r3, [r3, #16]
 8003ed2:	f003 031f 	and.w	r3, r3, #31
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d102      	bne.n	8003ee0 <USB_ActivateEndpoint+0x2d0>
 8003eda:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003edc:	3b01      	subs	r3, #1
 8003ede:	663b      	str	r3, [r7, #96]	; 0x60
 8003ee0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003ee2:	b29b      	uxth	r3, r3
 8003ee4:	029b      	lsls	r3, r3, #10
 8003ee6:	b29b      	uxth	r3, r3
 8003ee8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003eec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003ef0:	b29a      	uxth	r2, r3
 8003ef2:	6a3b      	ldr	r3, [r7, #32]
 8003ef4:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003ef6:	687a      	ldr	r2, [r7, #4]
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	781b      	ldrb	r3, [r3, #0]
 8003efc:	009b      	lsls	r3, r3, #2
 8003efe:	4413      	add	r3, r2
 8003f00:	881b      	ldrh	r3, [r3, #0]
 8003f02:	83fb      	strh	r3, [r7, #30]
 8003f04:	8bfb      	ldrh	r3, [r7, #30]
 8003f06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d01b      	beq.n	8003f46 <USB_ActivateEndpoint+0x336>
 8003f0e:	687a      	ldr	r2, [r7, #4]
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	781b      	ldrb	r3, [r3, #0]
 8003f14:	009b      	lsls	r3, r3, #2
 8003f16:	4413      	add	r3, r2
 8003f18:	881b      	ldrh	r3, [r3, #0]
 8003f1a:	b29b      	uxth	r3, r3
 8003f1c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f24:	83bb      	strh	r3, [r7, #28]
 8003f26:	687a      	ldr	r2, [r7, #4]
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	781b      	ldrb	r3, [r3, #0]
 8003f2c:	009b      	lsls	r3, r3, #2
 8003f2e:	441a      	add	r2, r3
 8003f30:	8bbb      	ldrh	r3, [r7, #28]
 8003f32:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003f36:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003f3a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003f3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f42:	b29b      	uxth	r3, r3
 8003f44:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003f46:	687a      	ldr	r2, [r7, #4]
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	781b      	ldrb	r3, [r3, #0]
 8003f4c:	009b      	lsls	r3, r3, #2
 8003f4e:	4413      	add	r3, r2
 8003f50:	881b      	ldrh	r3, [r3, #0]
 8003f52:	b29b      	uxth	r3, r3
 8003f54:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003f58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f5c:	837b      	strh	r3, [r7, #26]
 8003f5e:	8b7b      	ldrh	r3, [r7, #26]
 8003f60:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003f64:	837b      	strh	r3, [r7, #26]
 8003f66:	8b7b      	ldrh	r3, [r7, #26]
 8003f68:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003f6c:	837b      	strh	r3, [r7, #26]
 8003f6e:	687a      	ldr	r2, [r7, #4]
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	781b      	ldrb	r3, [r3, #0]
 8003f74:	009b      	lsls	r3, r3, #2
 8003f76:	441a      	add	r2, r3
 8003f78:	8b7b      	ldrh	r3, [r7, #26]
 8003f7a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003f7e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003f82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f8a:	b29b      	uxth	r3, r3
 8003f8c:	8013      	strh	r3, [r2, #0]
 8003f8e:	e1a2      	b.n	80042d6 <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8003f90:	687a      	ldr	r2, [r7, #4]
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	781b      	ldrb	r3, [r3, #0]
 8003f96:	009b      	lsls	r3, r3, #2
 8003f98:	4413      	add	r3, r2
 8003f9a:	881b      	ldrh	r3, [r3, #0]
 8003f9c:	b29b      	uxth	r3, r3
 8003f9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003fa2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fa6:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8003faa:	687a      	ldr	r2, [r7, #4]
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	781b      	ldrb	r3, [r3, #0]
 8003fb0:	009b      	lsls	r3, r3, #2
 8003fb2:	441a      	add	r2, r3
 8003fb4:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8003fb8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003fbc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003fc0:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8003fc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003fc8:	b29b      	uxth	r3, r3
 8003fca:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	65bb      	str	r3, [r7, #88]	; 0x58
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003fd6:	b29b      	uxth	r3, r3
 8003fd8:	461a      	mov	r2, r3
 8003fda:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003fdc:	4413      	add	r3, r2
 8003fde:	65bb      	str	r3, [r7, #88]	; 0x58
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	781b      	ldrb	r3, [r3, #0]
 8003fe4:	011a      	lsls	r2, r3, #4
 8003fe6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003fe8:	4413      	add	r3, r2
 8003fea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003fee:	657b      	str	r3, [r7, #84]	; 0x54
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	891b      	ldrh	r3, [r3, #8]
 8003ff4:	085b      	lsrs	r3, r3, #1
 8003ff6:	b29b      	uxth	r3, r3
 8003ff8:	005b      	lsls	r3, r3, #1
 8003ffa:	b29a      	uxth	r2, r3
 8003ffc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ffe:	801a      	strh	r2, [r3, #0]
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	653b      	str	r3, [r7, #80]	; 0x50
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800400a:	b29b      	uxth	r3, r3
 800400c:	461a      	mov	r2, r3
 800400e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004010:	4413      	add	r3, r2
 8004012:	653b      	str	r3, [r7, #80]	; 0x50
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	781b      	ldrb	r3, [r3, #0]
 8004018:	011a      	lsls	r2, r3, #4
 800401a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800401c:	4413      	add	r3, r2
 800401e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004022:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	895b      	ldrh	r3, [r3, #10]
 8004028:	085b      	lsrs	r3, r3, #1
 800402a:	b29b      	uxth	r3, r3
 800402c:	005b      	lsls	r3, r3, #1
 800402e:	b29a      	uxth	r2, r3
 8004030:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004032:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	785b      	ldrb	r3, [r3, #1]
 8004038:	2b00      	cmp	r3, #0
 800403a:	f040 8091 	bne.w	8004160 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800403e:	687a      	ldr	r2, [r7, #4]
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	781b      	ldrb	r3, [r3, #0]
 8004044:	009b      	lsls	r3, r3, #2
 8004046:	4413      	add	r3, r2
 8004048:	881b      	ldrh	r3, [r3, #0]
 800404a:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800404c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800404e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004052:	2b00      	cmp	r3, #0
 8004054:	d01b      	beq.n	800408e <USB_ActivateEndpoint+0x47e>
 8004056:	687a      	ldr	r2, [r7, #4]
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	781b      	ldrb	r3, [r3, #0]
 800405c:	009b      	lsls	r3, r3, #2
 800405e:	4413      	add	r3, r2
 8004060:	881b      	ldrh	r3, [r3, #0]
 8004062:	b29b      	uxth	r3, r3
 8004064:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004068:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800406c:	877b      	strh	r3, [r7, #58]	; 0x3a
 800406e:	687a      	ldr	r2, [r7, #4]
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	781b      	ldrb	r3, [r3, #0]
 8004074:	009b      	lsls	r3, r3, #2
 8004076:	441a      	add	r2, r3
 8004078:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800407a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800407e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004082:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004086:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800408a:	b29b      	uxth	r3, r3
 800408c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800408e:	687a      	ldr	r2, [r7, #4]
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	781b      	ldrb	r3, [r3, #0]
 8004094:	009b      	lsls	r3, r3, #2
 8004096:	4413      	add	r3, r2
 8004098:	881b      	ldrh	r3, [r3, #0]
 800409a:	873b      	strh	r3, [r7, #56]	; 0x38
 800409c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800409e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d01b      	beq.n	80040de <USB_ActivateEndpoint+0x4ce>
 80040a6:	687a      	ldr	r2, [r7, #4]
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	781b      	ldrb	r3, [r3, #0]
 80040ac:	009b      	lsls	r3, r3, #2
 80040ae:	4413      	add	r3, r2
 80040b0:	881b      	ldrh	r3, [r3, #0]
 80040b2:	b29b      	uxth	r3, r3
 80040b4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80040b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040bc:	86fb      	strh	r3, [r7, #54]	; 0x36
 80040be:	687a      	ldr	r2, [r7, #4]
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	781b      	ldrb	r3, [r3, #0]
 80040c4:	009b      	lsls	r3, r3, #2
 80040c6:	441a      	add	r2, r3
 80040c8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80040ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80040ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80040d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80040d6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80040da:	b29b      	uxth	r3, r3
 80040dc:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80040de:	687a      	ldr	r2, [r7, #4]
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	781b      	ldrb	r3, [r3, #0]
 80040e4:	009b      	lsls	r3, r3, #2
 80040e6:	4413      	add	r3, r2
 80040e8:	881b      	ldrh	r3, [r3, #0]
 80040ea:	b29b      	uxth	r3, r3
 80040ec:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80040f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040f4:	86bb      	strh	r3, [r7, #52]	; 0x34
 80040f6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80040f8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80040fc:	86bb      	strh	r3, [r7, #52]	; 0x34
 80040fe:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004100:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004104:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004106:	687a      	ldr	r2, [r7, #4]
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	781b      	ldrb	r3, [r3, #0]
 800410c:	009b      	lsls	r3, r3, #2
 800410e:	441a      	add	r2, r3
 8004110:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004112:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004116:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800411a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800411e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004122:	b29b      	uxth	r3, r3
 8004124:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004126:	687a      	ldr	r2, [r7, #4]
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	781b      	ldrb	r3, [r3, #0]
 800412c:	009b      	lsls	r3, r3, #2
 800412e:	4413      	add	r3, r2
 8004130:	881b      	ldrh	r3, [r3, #0]
 8004132:	b29b      	uxth	r3, r3
 8004134:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004138:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800413c:	867b      	strh	r3, [r7, #50]	; 0x32
 800413e:	687a      	ldr	r2, [r7, #4]
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	781b      	ldrb	r3, [r3, #0]
 8004144:	009b      	lsls	r3, r3, #2
 8004146:	441a      	add	r2, r3
 8004148:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800414a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800414e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004152:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004156:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800415a:	b29b      	uxth	r3, r3
 800415c:	8013      	strh	r3, [r2, #0]
 800415e:	e0ba      	b.n	80042d6 <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004160:	687a      	ldr	r2, [r7, #4]
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	781b      	ldrb	r3, [r3, #0]
 8004166:	009b      	lsls	r3, r3, #2
 8004168:	4413      	add	r3, r2
 800416a:	881b      	ldrh	r3, [r3, #0]
 800416c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8004170:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004174:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004178:	2b00      	cmp	r3, #0
 800417a:	d01d      	beq.n	80041b8 <USB_ActivateEndpoint+0x5a8>
 800417c:	687a      	ldr	r2, [r7, #4]
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	781b      	ldrb	r3, [r3, #0]
 8004182:	009b      	lsls	r3, r3, #2
 8004184:	4413      	add	r3, r2
 8004186:	881b      	ldrh	r3, [r3, #0]
 8004188:	b29b      	uxth	r3, r3
 800418a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800418e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004192:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8004196:	687a      	ldr	r2, [r7, #4]
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	781b      	ldrb	r3, [r3, #0]
 800419c:	009b      	lsls	r3, r3, #2
 800419e:	441a      	add	r2, r3
 80041a0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80041a4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80041a8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80041ac:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80041b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80041b4:	b29b      	uxth	r3, r3
 80041b6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80041b8:	687a      	ldr	r2, [r7, #4]
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	781b      	ldrb	r3, [r3, #0]
 80041be:	009b      	lsls	r3, r3, #2
 80041c0:	4413      	add	r3, r2
 80041c2:	881b      	ldrh	r3, [r3, #0]
 80041c4:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80041c8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80041cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d01d      	beq.n	8004210 <USB_ActivateEndpoint+0x600>
 80041d4:	687a      	ldr	r2, [r7, #4]
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	781b      	ldrb	r3, [r3, #0]
 80041da:	009b      	lsls	r3, r3, #2
 80041dc:	4413      	add	r3, r2
 80041de:	881b      	ldrh	r3, [r3, #0]
 80041e0:	b29b      	uxth	r3, r3
 80041e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80041e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041ea:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80041ee:	687a      	ldr	r2, [r7, #4]
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	781b      	ldrb	r3, [r3, #0]
 80041f4:	009b      	lsls	r3, r3, #2
 80041f6:	441a      	add	r2, r3
 80041f8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80041fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004200:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004204:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004208:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800420c:	b29b      	uxth	r3, r3
 800420e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	78db      	ldrb	r3, [r3, #3]
 8004214:	2b01      	cmp	r3, #1
 8004216:	d024      	beq.n	8004262 <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004218:	687a      	ldr	r2, [r7, #4]
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	781b      	ldrb	r3, [r3, #0]
 800421e:	009b      	lsls	r3, r3, #2
 8004220:	4413      	add	r3, r2
 8004222:	881b      	ldrh	r3, [r3, #0]
 8004224:	b29b      	uxth	r3, r3
 8004226:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800422a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800422e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8004232:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004236:	f083 0320 	eor.w	r3, r3, #32
 800423a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800423e:	687a      	ldr	r2, [r7, #4]
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	781b      	ldrb	r3, [r3, #0]
 8004244:	009b      	lsls	r3, r3, #2
 8004246:	441a      	add	r2, r3
 8004248:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800424c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004250:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004254:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004258:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800425c:	b29b      	uxth	r3, r3
 800425e:	8013      	strh	r3, [r2, #0]
 8004260:	e01d      	b.n	800429e <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004262:	687a      	ldr	r2, [r7, #4]
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	781b      	ldrb	r3, [r3, #0]
 8004268:	009b      	lsls	r3, r3, #2
 800426a:	4413      	add	r3, r2
 800426c:	881b      	ldrh	r3, [r3, #0]
 800426e:	b29b      	uxth	r3, r3
 8004270:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004274:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004278:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800427c:	687a      	ldr	r2, [r7, #4]
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	781b      	ldrb	r3, [r3, #0]
 8004282:	009b      	lsls	r3, r3, #2
 8004284:	441a      	add	r2, r3
 8004286:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800428a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800428e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004292:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004296:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800429a:	b29b      	uxth	r3, r3
 800429c:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800429e:	687a      	ldr	r2, [r7, #4]
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	781b      	ldrb	r3, [r3, #0]
 80042a4:	009b      	lsls	r3, r3, #2
 80042a6:	4413      	add	r3, r2
 80042a8:	881b      	ldrh	r3, [r3, #0]
 80042aa:	b29b      	uxth	r3, r3
 80042ac:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80042b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042b4:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80042b6:	687a      	ldr	r2, [r7, #4]
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	781b      	ldrb	r3, [r3, #0]
 80042bc:	009b      	lsls	r3, r3, #2
 80042be:	441a      	add	r2, r3
 80042c0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80042c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80042c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80042ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80042ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042d2:	b29b      	uxth	r3, r3
 80042d4:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 80042d6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80042da:	4618      	mov	r0, r3
 80042dc:	376c      	adds	r7, #108	; 0x6c
 80042de:	46bd      	mov	sp, r7
 80042e0:	bc80      	pop	{r7}
 80042e2:	4770      	bx	lr

080042e4 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80042e4:	b480      	push	{r7}
 80042e6:	b08d      	sub	sp, #52	; 0x34
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
 80042ec:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	7b1b      	ldrb	r3, [r3, #12]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	f040 808e 	bne.w	8004414 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	785b      	ldrb	r3, [r3, #1]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d044      	beq.n	800438a <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004300:	687a      	ldr	r2, [r7, #4]
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	781b      	ldrb	r3, [r3, #0]
 8004306:	009b      	lsls	r3, r3, #2
 8004308:	4413      	add	r3, r2
 800430a:	881b      	ldrh	r3, [r3, #0]
 800430c:	81bb      	strh	r3, [r7, #12]
 800430e:	89bb      	ldrh	r3, [r7, #12]
 8004310:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004314:	2b00      	cmp	r3, #0
 8004316:	d01b      	beq.n	8004350 <USB_DeactivateEndpoint+0x6c>
 8004318:	687a      	ldr	r2, [r7, #4]
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	781b      	ldrb	r3, [r3, #0]
 800431e:	009b      	lsls	r3, r3, #2
 8004320:	4413      	add	r3, r2
 8004322:	881b      	ldrh	r3, [r3, #0]
 8004324:	b29b      	uxth	r3, r3
 8004326:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800432a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800432e:	817b      	strh	r3, [r7, #10]
 8004330:	687a      	ldr	r2, [r7, #4]
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	781b      	ldrb	r3, [r3, #0]
 8004336:	009b      	lsls	r3, r3, #2
 8004338:	441a      	add	r2, r3
 800433a:	897b      	ldrh	r3, [r7, #10]
 800433c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004340:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004344:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004348:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800434c:	b29b      	uxth	r3, r3
 800434e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004350:	687a      	ldr	r2, [r7, #4]
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	781b      	ldrb	r3, [r3, #0]
 8004356:	009b      	lsls	r3, r3, #2
 8004358:	4413      	add	r3, r2
 800435a:	881b      	ldrh	r3, [r3, #0]
 800435c:	b29b      	uxth	r3, r3
 800435e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004362:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004366:	813b      	strh	r3, [r7, #8]
 8004368:	687a      	ldr	r2, [r7, #4]
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	781b      	ldrb	r3, [r3, #0]
 800436e:	009b      	lsls	r3, r3, #2
 8004370:	441a      	add	r2, r3
 8004372:	893b      	ldrh	r3, [r7, #8]
 8004374:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004378:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800437c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004380:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004384:	b29b      	uxth	r3, r3
 8004386:	8013      	strh	r3, [r2, #0]
 8004388:	e192      	b.n	80046b0 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800438a:	687a      	ldr	r2, [r7, #4]
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	781b      	ldrb	r3, [r3, #0]
 8004390:	009b      	lsls	r3, r3, #2
 8004392:	4413      	add	r3, r2
 8004394:	881b      	ldrh	r3, [r3, #0]
 8004396:	827b      	strh	r3, [r7, #18]
 8004398:	8a7b      	ldrh	r3, [r7, #18]
 800439a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d01b      	beq.n	80043da <USB_DeactivateEndpoint+0xf6>
 80043a2:	687a      	ldr	r2, [r7, #4]
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	781b      	ldrb	r3, [r3, #0]
 80043a8:	009b      	lsls	r3, r3, #2
 80043aa:	4413      	add	r3, r2
 80043ac:	881b      	ldrh	r3, [r3, #0]
 80043ae:	b29b      	uxth	r3, r3
 80043b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80043b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043b8:	823b      	strh	r3, [r7, #16]
 80043ba:	687a      	ldr	r2, [r7, #4]
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	781b      	ldrb	r3, [r3, #0]
 80043c0:	009b      	lsls	r3, r3, #2
 80043c2:	441a      	add	r2, r3
 80043c4:	8a3b      	ldrh	r3, [r7, #16]
 80043c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80043ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80043ce:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80043d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043d6:	b29b      	uxth	r3, r3
 80043d8:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80043da:	687a      	ldr	r2, [r7, #4]
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	781b      	ldrb	r3, [r3, #0]
 80043e0:	009b      	lsls	r3, r3, #2
 80043e2:	4413      	add	r3, r2
 80043e4:	881b      	ldrh	r3, [r3, #0]
 80043e6:	b29b      	uxth	r3, r3
 80043e8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80043ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043f0:	81fb      	strh	r3, [r7, #14]
 80043f2:	687a      	ldr	r2, [r7, #4]
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	781b      	ldrb	r3, [r3, #0]
 80043f8:	009b      	lsls	r3, r3, #2
 80043fa:	441a      	add	r2, r3
 80043fc:	89fb      	ldrh	r3, [r7, #14]
 80043fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004402:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004406:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800440a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800440e:	b29b      	uxth	r3, r3
 8004410:	8013      	strh	r3, [r2, #0]
 8004412:	e14d      	b.n	80046b0 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	785b      	ldrb	r3, [r3, #1]
 8004418:	2b00      	cmp	r3, #0
 800441a:	f040 80a5 	bne.w	8004568 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800441e:	687a      	ldr	r2, [r7, #4]
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	781b      	ldrb	r3, [r3, #0]
 8004424:	009b      	lsls	r3, r3, #2
 8004426:	4413      	add	r3, r2
 8004428:	881b      	ldrh	r3, [r3, #0]
 800442a:	843b      	strh	r3, [r7, #32]
 800442c:	8c3b      	ldrh	r3, [r7, #32]
 800442e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004432:	2b00      	cmp	r3, #0
 8004434:	d01b      	beq.n	800446e <USB_DeactivateEndpoint+0x18a>
 8004436:	687a      	ldr	r2, [r7, #4]
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	781b      	ldrb	r3, [r3, #0]
 800443c:	009b      	lsls	r3, r3, #2
 800443e:	4413      	add	r3, r2
 8004440:	881b      	ldrh	r3, [r3, #0]
 8004442:	b29b      	uxth	r3, r3
 8004444:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004448:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800444c:	83fb      	strh	r3, [r7, #30]
 800444e:	687a      	ldr	r2, [r7, #4]
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	781b      	ldrb	r3, [r3, #0]
 8004454:	009b      	lsls	r3, r3, #2
 8004456:	441a      	add	r2, r3
 8004458:	8bfb      	ldrh	r3, [r7, #30]
 800445a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800445e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004462:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004466:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800446a:	b29b      	uxth	r3, r3
 800446c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800446e:	687a      	ldr	r2, [r7, #4]
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	781b      	ldrb	r3, [r3, #0]
 8004474:	009b      	lsls	r3, r3, #2
 8004476:	4413      	add	r3, r2
 8004478:	881b      	ldrh	r3, [r3, #0]
 800447a:	83bb      	strh	r3, [r7, #28]
 800447c:	8bbb      	ldrh	r3, [r7, #28]
 800447e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004482:	2b00      	cmp	r3, #0
 8004484:	d01b      	beq.n	80044be <USB_DeactivateEndpoint+0x1da>
 8004486:	687a      	ldr	r2, [r7, #4]
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	781b      	ldrb	r3, [r3, #0]
 800448c:	009b      	lsls	r3, r3, #2
 800448e:	4413      	add	r3, r2
 8004490:	881b      	ldrh	r3, [r3, #0]
 8004492:	b29b      	uxth	r3, r3
 8004494:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004498:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800449c:	837b      	strh	r3, [r7, #26]
 800449e:	687a      	ldr	r2, [r7, #4]
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	781b      	ldrb	r3, [r3, #0]
 80044a4:	009b      	lsls	r3, r3, #2
 80044a6:	441a      	add	r2, r3
 80044a8:	8b7b      	ldrh	r3, [r7, #26]
 80044aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80044ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80044b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80044b6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80044ba:	b29b      	uxth	r3, r3
 80044bc:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80044be:	687a      	ldr	r2, [r7, #4]
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	781b      	ldrb	r3, [r3, #0]
 80044c4:	009b      	lsls	r3, r3, #2
 80044c6:	4413      	add	r3, r2
 80044c8:	881b      	ldrh	r3, [r3, #0]
 80044ca:	b29b      	uxth	r3, r3
 80044cc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80044d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044d4:	833b      	strh	r3, [r7, #24]
 80044d6:	687a      	ldr	r2, [r7, #4]
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	781b      	ldrb	r3, [r3, #0]
 80044dc:	009b      	lsls	r3, r3, #2
 80044de:	441a      	add	r2, r3
 80044e0:	8b3b      	ldrh	r3, [r7, #24]
 80044e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80044e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80044ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80044ee:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80044f2:	b29b      	uxth	r3, r3
 80044f4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80044f6:	687a      	ldr	r2, [r7, #4]
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	781b      	ldrb	r3, [r3, #0]
 80044fc:	009b      	lsls	r3, r3, #2
 80044fe:	4413      	add	r3, r2
 8004500:	881b      	ldrh	r3, [r3, #0]
 8004502:	b29b      	uxth	r3, r3
 8004504:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004508:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800450c:	82fb      	strh	r3, [r7, #22]
 800450e:	687a      	ldr	r2, [r7, #4]
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	781b      	ldrb	r3, [r3, #0]
 8004514:	009b      	lsls	r3, r3, #2
 8004516:	441a      	add	r2, r3
 8004518:	8afb      	ldrh	r3, [r7, #22]
 800451a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800451e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004522:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004526:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800452a:	b29b      	uxth	r3, r3
 800452c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800452e:	687a      	ldr	r2, [r7, #4]
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	781b      	ldrb	r3, [r3, #0]
 8004534:	009b      	lsls	r3, r3, #2
 8004536:	4413      	add	r3, r2
 8004538:	881b      	ldrh	r3, [r3, #0]
 800453a:	b29b      	uxth	r3, r3
 800453c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004540:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004544:	82bb      	strh	r3, [r7, #20]
 8004546:	687a      	ldr	r2, [r7, #4]
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	781b      	ldrb	r3, [r3, #0]
 800454c:	009b      	lsls	r3, r3, #2
 800454e:	441a      	add	r2, r3
 8004550:	8abb      	ldrh	r3, [r7, #20]
 8004552:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004556:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800455a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800455e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004562:	b29b      	uxth	r3, r3
 8004564:	8013      	strh	r3, [r2, #0]
 8004566:	e0a3      	b.n	80046b0 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004568:	687a      	ldr	r2, [r7, #4]
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	781b      	ldrb	r3, [r3, #0]
 800456e:	009b      	lsls	r3, r3, #2
 8004570:	4413      	add	r3, r2
 8004572:	881b      	ldrh	r3, [r3, #0]
 8004574:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004576:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004578:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800457c:	2b00      	cmp	r3, #0
 800457e:	d01b      	beq.n	80045b8 <USB_DeactivateEndpoint+0x2d4>
 8004580:	687a      	ldr	r2, [r7, #4]
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	781b      	ldrb	r3, [r3, #0]
 8004586:	009b      	lsls	r3, r3, #2
 8004588:	4413      	add	r3, r2
 800458a:	881b      	ldrh	r3, [r3, #0]
 800458c:	b29b      	uxth	r3, r3
 800458e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004592:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004596:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8004598:	687a      	ldr	r2, [r7, #4]
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	781b      	ldrb	r3, [r3, #0]
 800459e:	009b      	lsls	r3, r3, #2
 80045a0:	441a      	add	r2, r3
 80045a2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80045a4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80045a8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80045ac:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80045b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80045b4:	b29b      	uxth	r3, r3
 80045b6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80045b8:	687a      	ldr	r2, [r7, #4]
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	781b      	ldrb	r3, [r3, #0]
 80045be:	009b      	lsls	r3, r3, #2
 80045c0:	4413      	add	r3, r2
 80045c2:	881b      	ldrh	r3, [r3, #0]
 80045c4:	857b      	strh	r3, [r7, #42]	; 0x2a
 80045c6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80045c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d01b      	beq.n	8004608 <USB_DeactivateEndpoint+0x324>
 80045d0:	687a      	ldr	r2, [r7, #4]
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	781b      	ldrb	r3, [r3, #0]
 80045d6:	009b      	lsls	r3, r3, #2
 80045d8:	4413      	add	r3, r2
 80045da:	881b      	ldrh	r3, [r3, #0]
 80045dc:	b29b      	uxth	r3, r3
 80045de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80045e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045e6:	853b      	strh	r3, [r7, #40]	; 0x28
 80045e8:	687a      	ldr	r2, [r7, #4]
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	781b      	ldrb	r3, [r3, #0]
 80045ee:	009b      	lsls	r3, r3, #2
 80045f0:	441a      	add	r2, r3
 80045f2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80045f4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80045f8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80045fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004600:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004604:	b29b      	uxth	r3, r3
 8004606:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8004608:	687a      	ldr	r2, [r7, #4]
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	781b      	ldrb	r3, [r3, #0]
 800460e:	009b      	lsls	r3, r3, #2
 8004610:	4413      	add	r3, r2
 8004612:	881b      	ldrh	r3, [r3, #0]
 8004614:	b29b      	uxth	r3, r3
 8004616:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800461a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800461e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004620:	687a      	ldr	r2, [r7, #4]
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	781b      	ldrb	r3, [r3, #0]
 8004626:	009b      	lsls	r3, r3, #2
 8004628:	441a      	add	r2, r3
 800462a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800462c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004630:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004634:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004638:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800463c:	b29b      	uxth	r3, r3
 800463e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004640:	687a      	ldr	r2, [r7, #4]
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	781b      	ldrb	r3, [r3, #0]
 8004646:	009b      	lsls	r3, r3, #2
 8004648:	4413      	add	r3, r2
 800464a:	881b      	ldrh	r3, [r3, #0]
 800464c:	b29b      	uxth	r3, r3
 800464e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004652:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004656:	84bb      	strh	r3, [r7, #36]	; 0x24
 8004658:	687a      	ldr	r2, [r7, #4]
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	781b      	ldrb	r3, [r3, #0]
 800465e:	009b      	lsls	r3, r3, #2
 8004660:	441a      	add	r2, r3
 8004662:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004664:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004668:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800466c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004670:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004674:	b29b      	uxth	r3, r3
 8004676:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004678:	687a      	ldr	r2, [r7, #4]
 800467a:	683b      	ldr	r3, [r7, #0]
 800467c:	781b      	ldrb	r3, [r3, #0]
 800467e:	009b      	lsls	r3, r3, #2
 8004680:	4413      	add	r3, r2
 8004682:	881b      	ldrh	r3, [r3, #0]
 8004684:	b29b      	uxth	r3, r3
 8004686:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800468a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800468e:	847b      	strh	r3, [r7, #34]	; 0x22
 8004690:	687a      	ldr	r2, [r7, #4]
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	781b      	ldrb	r3, [r3, #0]
 8004696:	009b      	lsls	r3, r3, #2
 8004698:	441a      	add	r2, r3
 800469a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800469c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80046a0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80046a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80046a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046ac:	b29b      	uxth	r3, r3
 80046ae:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80046b0:	2300      	movs	r3, #0
}
 80046b2:	4618      	mov	r0, r3
 80046b4:	3734      	adds	r7, #52	; 0x34
 80046b6:	46bd      	mov	sp, r7
 80046b8:	bc80      	pop	{r7}
 80046ba:	4770      	bx	lr

080046bc <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80046bc:	b580      	push	{r7, lr}
 80046be:	b0cc      	sub	sp, #304	; 0x130
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80046c6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80046ca:	6018      	str	r0, [r3, #0]
 80046cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80046d0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80046d4:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80046d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80046da:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	785b      	ldrb	r3, [r3, #1]
 80046e2:	2b01      	cmp	r3, #1
 80046e4:	f041 817d 	bne.w	80059e2 <USB_EPStartXfer+0x1326>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80046e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80046ec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	699a      	ldr	r2, [r3, #24]
 80046f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80046f8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	691b      	ldr	r3, [r3, #16]
 8004700:	429a      	cmp	r2, r3
 8004702:	d908      	bls.n	8004716 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8004704:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004708:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	691b      	ldr	r3, [r3, #16]
 8004710:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8004714:	e007      	b.n	8004726 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8004716:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800471a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	699b      	ldr	r3, [r3, #24]
 8004722:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8004726:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800472a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	7b1b      	ldrb	r3, [r3, #12]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d152      	bne.n	80047dc <USB_EPStartXfer+0x120>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8004736:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800473a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	6959      	ldr	r1, [r3, #20]
 8004742:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004746:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	88da      	ldrh	r2, [r3, #6]
 800474e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004752:	b29b      	uxth	r3, r3
 8004754:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8004758:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800475c:	6800      	ldr	r0, [r0, #0]
 800475e:	f001 ff23 	bl	80065a8 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004762:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004766:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800476a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800476e:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8004772:	6812      	ldr	r2, [r2, #0]
 8004774:	601a      	str	r2, [r3, #0]
 8004776:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800477a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004784:	b29b      	uxth	r3, r3
 8004786:	4619      	mov	r1, r3
 8004788:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800478c:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004790:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004794:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 8004798:	6812      	ldr	r2, [r2, #0]
 800479a:	440a      	add	r2, r1
 800479c:	601a      	str	r2, [r3, #0]
 800479e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80047a2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	781b      	ldrb	r3, [r3, #0]
 80047aa:	011a      	lsls	r2, r3, #4
 80047ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80047b0:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	4413      	add	r3, r2
 80047b8:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80047bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80047c0:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80047c4:	601a      	str	r2, [r3, #0]
 80047c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80047ca:	b29a      	uxth	r2, r3
 80047cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80047d0:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	801a      	strh	r2, [r3, #0]
 80047d8:	f001 b8b5 	b.w	8005946 <USB_EPStartXfer+0x128a>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80047dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80047e0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	78db      	ldrb	r3, [r3, #3]
 80047e8:	2b02      	cmp	r3, #2
 80047ea:	f040 84c6 	bne.w	800517a <USB_EPStartXfer+0xabe>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80047ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80047f2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	6a1a      	ldr	r2, [r3, #32]
 80047fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80047fe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	691b      	ldr	r3, [r3, #16]
 8004806:	429a      	cmp	r2, r3
 8004808:	f240 8443 	bls.w	8005092 <USB_EPStartXfer+0x9d6>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 800480c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004810:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004814:	681a      	ldr	r2, [r3, #0]
 8004816:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800481a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	781b      	ldrb	r3, [r3, #0]
 8004822:	009b      	lsls	r3, r3, #2
 8004824:	4413      	add	r3, r2
 8004826:	881b      	ldrh	r3, [r3, #0]
 8004828:	b29b      	uxth	r3, r3
 800482a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800482e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004832:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8004836:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800483a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800483e:	681a      	ldr	r2, [r3, #0]
 8004840:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004844:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	781b      	ldrb	r3, [r3, #0]
 800484c:	009b      	lsls	r3, r3, #2
 800484e:	441a      	add	r2, r3
 8004850:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8004854:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004858:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800485c:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004860:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004864:	b29b      	uxth	r3, r3
 8004866:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8004868:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800486c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	6a1a      	ldr	r2, [r3, #32]
 8004874:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004878:	1ad2      	subs	r2, r2, r3
 800487a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800487e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004886:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800488a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800488e:	681a      	ldr	r2, [r3, #0]
 8004890:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004894:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	781b      	ldrb	r3, [r3, #0]
 800489c:	009b      	lsls	r3, r3, #2
 800489e:	4413      	add	r3, r2
 80048a0:	881b      	ldrh	r3, [r3, #0]
 80048a2:	b29b      	uxth	r3, r3
 80048a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	f000 823e 	beq.w	8004d2a <USB_EPStartXfer+0x66e>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80048ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80048b2:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80048b6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80048ba:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80048be:	6812      	ldr	r2, [r2, #0]
 80048c0:	601a      	str	r2, [r3, #0]
 80048c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80048c6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	785b      	ldrb	r3, [r3, #1]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	f040 809a 	bne.w	8004a08 <USB_EPStartXfer+0x34c>
 80048d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80048d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80048dc:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80048e0:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80048e4:	6812      	ldr	r2, [r2, #0]
 80048e6:	601a      	str	r2, [r3, #0]
 80048e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80048ec:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80048f6:	b29b      	uxth	r3, r3
 80048f8:	4619      	mov	r1, r3
 80048fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80048fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004902:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004906:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 800490a:	6812      	ldr	r2, [r2, #0]
 800490c:	440a      	add	r2, r1
 800490e:	601a      	str	r2, [r3, #0]
 8004910:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004914:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	781b      	ldrb	r3, [r3, #0]
 800491c:	011a      	lsls	r2, r3, #4
 800491e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004922:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	4413      	add	r3, r2
 800492a:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 800492e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004932:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004936:	601a      	str	r2, [r3, #0]
 8004938:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800493c:	2b00      	cmp	r3, #0
 800493e:	d122      	bne.n	8004986 <USB_EPStartXfer+0x2ca>
 8004940:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004944:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	881b      	ldrh	r3, [r3, #0]
 800494c:	b29b      	uxth	r3, r3
 800494e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004952:	b29a      	uxth	r2, r3
 8004954:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004958:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	801a      	strh	r2, [r3, #0]
 8004960:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004964:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	881b      	ldrh	r3, [r3, #0]
 800496c:	b29b      	uxth	r3, r3
 800496e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004972:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004976:	b29a      	uxth	r2, r3
 8004978:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800497c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	801a      	strh	r2, [r3, #0]
 8004984:	e079      	b.n	8004a7a <USB_EPStartXfer+0x3be>
 8004986:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800498a:	2b3e      	cmp	r3, #62	; 0x3e
 800498c:	d81b      	bhi.n	80049c6 <USB_EPStartXfer+0x30a>
 800498e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004992:	085b      	lsrs	r3, r3, #1
 8004994:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8004998:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800499c:	f003 0301 	and.w	r3, r3, #1
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d004      	beq.n	80049ae <USB_EPStartXfer+0x2f2>
 80049a4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80049a8:	3301      	adds	r3, #1
 80049aa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80049ae:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80049b2:	b29b      	uxth	r3, r3
 80049b4:	029b      	lsls	r3, r3, #10
 80049b6:	b29a      	uxth	r2, r3
 80049b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80049bc:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	801a      	strh	r2, [r3, #0]
 80049c4:	e059      	b.n	8004a7a <USB_EPStartXfer+0x3be>
 80049c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80049ca:	095b      	lsrs	r3, r3, #5
 80049cc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80049d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80049d4:	f003 031f 	and.w	r3, r3, #31
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d104      	bne.n	80049e6 <USB_EPStartXfer+0x32a>
 80049dc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80049e0:	3b01      	subs	r3, #1
 80049e2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80049e6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80049ea:	b29b      	uxth	r3, r3
 80049ec:	029b      	lsls	r3, r3, #10
 80049ee:	b29b      	uxth	r3, r3
 80049f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80049f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80049f8:	b29a      	uxth	r2, r3
 80049fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80049fe:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	801a      	strh	r2, [r3, #0]
 8004a06:	e038      	b.n	8004a7a <USB_EPStartXfer+0x3be>
 8004a08:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a0c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	785b      	ldrb	r3, [r3, #1]
 8004a14:	2b01      	cmp	r3, #1
 8004a16:	d130      	bne.n	8004a7a <USB_EPStartXfer+0x3be>
 8004a18:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a1c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a26:	b29b      	uxth	r3, r3
 8004a28:	4619      	mov	r1, r3
 8004a2a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a2e:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004a32:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004a36:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 8004a3a:	6812      	ldr	r2, [r2, #0]
 8004a3c:	440a      	add	r2, r1
 8004a3e:	601a      	str	r2, [r3, #0]
 8004a40:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a44:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	781b      	ldrb	r3, [r3, #0]
 8004a4c:	011a      	lsls	r2, r3, #4
 8004a4e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a52:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	4413      	add	r3, r2
 8004a5a:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8004a5e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a62:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004a66:	601a      	str	r2, [r3, #0]
 8004a68:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004a6c:	b29a      	uxth	r2, r3
 8004a6e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a72:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8004a7a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a7e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	895b      	ldrh	r3, [r3, #10]
 8004a86:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004a8a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a8e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	6959      	ldr	r1, [r3, #20]
 8004a96:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004a9a:	b29b      	uxth	r3, r3
 8004a9c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004aa0:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8004aa4:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8004aa8:	6800      	ldr	r0, [r0, #0]
 8004aaa:	f001 fd7d 	bl	80065a8 <USB_WritePMA>
            ep->xfer_buff += len;
 8004aae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ab2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	695a      	ldr	r2, [r3, #20]
 8004aba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004abe:	441a      	add	r2, r3
 8004ac0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ac4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8004acc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ad0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	6a1a      	ldr	r2, [r3, #32]
 8004ad8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004adc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	691b      	ldr	r3, [r3, #16]
 8004ae4:	429a      	cmp	r2, r3
 8004ae6:	d90f      	bls.n	8004b08 <USB_EPStartXfer+0x44c>
            {
              ep->xfer_len_db -= len;
 8004ae8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004aec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	6a1a      	ldr	r2, [r3, #32]
 8004af4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004af8:	1ad2      	subs	r2, r2, r3
 8004afa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004afe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	621a      	str	r2, [r3, #32]
 8004b06:	e00e      	b.n	8004b26 <USB_EPStartXfer+0x46a>
            }
            else
            {
              len = ep->xfer_len_db;
 8004b08:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b0c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	6a1b      	ldr	r3, [r3, #32]
 8004b14:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8004b18:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b1c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	2200      	movs	r2, #0
 8004b24:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004b26:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b2a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	785b      	ldrb	r3, [r3, #1]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	f040 809a 	bne.w	8004c6c <USB_EPStartXfer+0x5b0>
 8004b38:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b3c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004b40:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004b44:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8004b48:	6812      	ldr	r2, [r2, #0]
 8004b4a:	601a      	str	r2, [r3, #0]
 8004b4c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b50:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b5a:	b29b      	uxth	r3, r3
 8004b5c:	4619      	mov	r1, r3
 8004b5e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b62:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004b66:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004b6a:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 8004b6e:	6812      	ldr	r2, [r2, #0]
 8004b70:	440a      	add	r2, r1
 8004b72:	601a      	str	r2, [r3, #0]
 8004b74:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b78:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	781b      	ldrb	r3, [r3, #0]
 8004b80:	011a      	lsls	r2, r3, #4
 8004b82:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b86:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	4413      	add	r3, r2
 8004b8e:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8004b92:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b96:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004b9a:	601a      	str	r2, [r3, #0]
 8004b9c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d122      	bne.n	8004bea <USB_EPStartXfer+0x52e>
 8004ba4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ba8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	881b      	ldrh	r3, [r3, #0]
 8004bb0:	b29b      	uxth	r3, r3
 8004bb2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004bb6:	b29a      	uxth	r2, r3
 8004bb8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004bbc:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	801a      	strh	r2, [r3, #0]
 8004bc4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004bc8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	881b      	ldrh	r3, [r3, #0]
 8004bd0:	b29b      	uxth	r3, r3
 8004bd2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004bd6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004bda:	b29a      	uxth	r2, r3
 8004bdc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004be0:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	801a      	strh	r2, [r3, #0]
 8004be8:	e083      	b.n	8004cf2 <USB_EPStartXfer+0x636>
 8004bea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004bee:	2b3e      	cmp	r3, #62	; 0x3e
 8004bf0:	d81b      	bhi.n	8004c2a <USB_EPStartXfer+0x56e>
 8004bf2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004bf6:	085b      	lsrs	r3, r3, #1
 8004bf8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004bfc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004c00:	f003 0301 	and.w	r3, r3, #1
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d004      	beq.n	8004c12 <USB_EPStartXfer+0x556>
 8004c08:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004c0c:	3301      	adds	r3, #1
 8004c0e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004c12:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004c16:	b29b      	uxth	r3, r3
 8004c18:	029b      	lsls	r3, r3, #10
 8004c1a:	b29a      	uxth	r2, r3
 8004c1c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c20:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	801a      	strh	r2, [r3, #0]
 8004c28:	e063      	b.n	8004cf2 <USB_EPStartXfer+0x636>
 8004c2a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004c2e:	095b      	lsrs	r3, r3, #5
 8004c30:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004c34:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004c38:	f003 031f 	and.w	r3, r3, #31
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d104      	bne.n	8004c4a <USB_EPStartXfer+0x58e>
 8004c40:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004c44:	3b01      	subs	r3, #1
 8004c46:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004c4a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004c4e:	b29b      	uxth	r3, r3
 8004c50:	029b      	lsls	r3, r3, #10
 8004c52:	b29b      	uxth	r3, r3
 8004c54:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004c58:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004c5c:	b29a      	uxth	r2, r3
 8004c5e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c62:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	801a      	strh	r2, [r3, #0]
 8004c6a:	e042      	b.n	8004cf2 <USB_EPStartXfer+0x636>
 8004c6c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c70:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	785b      	ldrb	r3, [r3, #1]
 8004c78:	2b01      	cmp	r3, #1
 8004c7a:	d13a      	bne.n	8004cf2 <USB_EPStartXfer+0x636>
 8004c7c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c80:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004c84:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004c88:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8004c8c:	6812      	ldr	r2, [r2, #0]
 8004c8e:	601a      	str	r2, [r3, #0]
 8004c90:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c94:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c9e:	b29b      	uxth	r3, r3
 8004ca0:	4619      	mov	r1, r3
 8004ca2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ca6:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004caa:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004cae:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8004cb2:	6812      	ldr	r2, [r2, #0]
 8004cb4:	440a      	add	r2, r1
 8004cb6:	601a      	str	r2, [r3, #0]
 8004cb8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004cbc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	781b      	ldrb	r3, [r3, #0]
 8004cc4:	011a      	lsls	r2, r3, #4
 8004cc6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004cca:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	4413      	add	r3, r2
 8004cd2:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8004cd6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004cda:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004cde:	601a      	str	r2, [r3, #0]
 8004ce0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004ce4:	b29a      	uxth	r2, r3
 8004ce6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004cea:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8004cf2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004cf6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	891b      	ldrh	r3, [r3, #8]
 8004cfe:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004d02:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d06:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	6959      	ldr	r1, [r3, #20]
 8004d0e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004d12:	b29b      	uxth	r3, r3
 8004d14:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004d18:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8004d1c:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8004d20:	6800      	ldr	r0, [r0, #0]
 8004d22:	f001 fc41 	bl	80065a8 <USB_WritePMA>
 8004d26:	f000 be0e 	b.w	8005946 <USB_EPStartXfer+0x128a>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004d2a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d2e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	785b      	ldrb	r3, [r3, #1]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d16d      	bne.n	8004e16 <USB_EPStartXfer+0x75a>
 8004d3a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d3e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	64bb      	str	r3, [r7, #72]	; 0x48
 8004d46:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d4a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d54:	b29b      	uxth	r3, r3
 8004d56:	461a      	mov	r2, r3
 8004d58:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004d5a:	4413      	add	r3, r2
 8004d5c:	64bb      	str	r3, [r7, #72]	; 0x48
 8004d5e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d62:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	781b      	ldrb	r3, [r3, #0]
 8004d6a:	011a      	lsls	r2, r3, #4
 8004d6c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004d6e:	4413      	add	r3, r2
 8004d70:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004d74:	647b      	str	r3, [r7, #68]	; 0x44
 8004d76:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d112      	bne.n	8004da4 <USB_EPStartXfer+0x6e8>
 8004d7e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d80:	881b      	ldrh	r3, [r3, #0]
 8004d82:	b29b      	uxth	r3, r3
 8004d84:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004d88:	b29a      	uxth	r2, r3
 8004d8a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d8c:	801a      	strh	r2, [r3, #0]
 8004d8e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d90:	881b      	ldrh	r3, [r3, #0]
 8004d92:	b29b      	uxth	r3, r3
 8004d94:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004d98:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004d9c:	b29a      	uxth	r2, r3
 8004d9e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004da0:	801a      	strh	r2, [r3, #0]
 8004da2:	e063      	b.n	8004e6c <USB_EPStartXfer+0x7b0>
 8004da4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004da8:	2b3e      	cmp	r3, #62	; 0x3e
 8004daa:	d817      	bhi.n	8004ddc <USB_EPStartXfer+0x720>
 8004dac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004db0:	085b      	lsrs	r3, r3, #1
 8004db2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004db6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004dba:	f003 0301 	and.w	r3, r3, #1
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d004      	beq.n	8004dcc <USB_EPStartXfer+0x710>
 8004dc2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004dc6:	3301      	adds	r3, #1
 8004dc8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004dcc:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004dd0:	b29b      	uxth	r3, r3
 8004dd2:	029b      	lsls	r3, r3, #10
 8004dd4:	b29a      	uxth	r2, r3
 8004dd6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004dd8:	801a      	strh	r2, [r3, #0]
 8004dda:	e047      	b.n	8004e6c <USB_EPStartXfer+0x7b0>
 8004ddc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004de0:	095b      	lsrs	r3, r3, #5
 8004de2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004de6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004dea:	f003 031f 	and.w	r3, r3, #31
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d104      	bne.n	8004dfc <USB_EPStartXfer+0x740>
 8004df2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004df6:	3b01      	subs	r3, #1
 8004df8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004dfc:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004e00:	b29b      	uxth	r3, r3
 8004e02:	029b      	lsls	r3, r3, #10
 8004e04:	b29b      	uxth	r3, r3
 8004e06:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e0a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e0e:	b29a      	uxth	r2, r3
 8004e10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e12:	801a      	strh	r2, [r3, #0]
 8004e14:	e02a      	b.n	8004e6c <USB_EPStartXfer+0x7b0>
 8004e16:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e1a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	785b      	ldrb	r3, [r3, #1]
 8004e22:	2b01      	cmp	r3, #1
 8004e24:	d122      	bne.n	8004e6c <USB_EPStartXfer+0x7b0>
 8004e26:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e2a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	653b      	str	r3, [r7, #80]	; 0x50
 8004e32:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e36:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e40:	b29b      	uxth	r3, r3
 8004e42:	461a      	mov	r2, r3
 8004e44:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e46:	4413      	add	r3, r2
 8004e48:	653b      	str	r3, [r7, #80]	; 0x50
 8004e4a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e4e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	781b      	ldrb	r3, [r3, #0]
 8004e56:	011a      	lsls	r2, r3, #4
 8004e58:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e5a:	4413      	add	r3, r2
 8004e5c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004e60:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004e62:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004e66:	b29a      	uxth	r2, r3
 8004e68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e6a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8004e6c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e70:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	891b      	ldrh	r3, [r3, #8]
 8004e78:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004e7c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e80:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	6959      	ldr	r1, [r3, #20]
 8004e88:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004e8c:	b29b      	uxth	r3, r3
 8004e8e:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004e92:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8004e96:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8004e9a:	6800      	ldr	r0, [r0, #0]
 8004e9c:	f001 fb84 	bl	80065a8 <USB_WritePMA>
            ep->xfer_buff += len;
 8004ea0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ea4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	695a      	ldr	r2, [r3, #20]
 8004eac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004eb0:	441a      	add	r2, r3
 8004eb2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004eb6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8004ebe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ec2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	6a1a      	ldr	r2, [r3, #32]
 8004eca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ece:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	691b      	ldr	r3, [r3, #16]
 8004ed6:	429a      	cmp	r2, r3
 8004ed8:	d90f      	bls.n	8004efa <USB_EPStartXfer+0x83e>
            {
              ep->xfer_len_db -= len;
 8004eda:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ede:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	6a1a      	ldr	r2, [r3, #32]
 8004ee6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004eea:	1ad2      	subs	r2, r2, r3
 8004eec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ef0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	621a      	str	r2, [r3, #32]
 8004ef8:	e00e      	b.n	8004f18 <USB_EPStartXfer+0x85c>
            }
            else
            {
              len = ep->xfer_len_db;
 8004efa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004efe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	6a1b      	ldr	r3, [r3, #32]
 8004f06:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8004f0a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f0e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	2200      	movs	r2, #0
 8004f16:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004f18:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f1c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	643b      	str	r3, [r7, #64]	; 0x40
 8004f24:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f28:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	785b      	ldrb	r3, [r3, #1]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d16d      	bne.n	8005010 <USB_EPStartXfer+0x954>
 8004f34:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f38:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004f40:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f44:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f4e:	b29b      	uxth	r3, r3
 8004f50:	461a      	mov	r2, r3
 8004f52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f54:	4413      	add	r3, r2
 8004f56:	63bb      	str	r3, [r7, #56]	; 0x38
 8004f58:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f5c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	781b      	ldrb	r3, [r3, #0]
 8004f64:	011a      	lsls	r2, r3, #4
 8004f66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f68:	4413      	add	r3, r2
 8004f6a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004f6e:	637b      	str	r3, [r7, #52]	; 0x34
 8004f70:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d112      	bne.n	8004f9e <USB_EPStartXfer+0x8e2>
 8004f78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f7a:	881b      	ldrh	r3, [r3, #0]
 8004f7c:	b29b      	uxth	r3, r3
 8004f7e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004f82:	b29a      	uxth	r2, r3
 8004f84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f86:	801a      	strh	r2, [r3, #0]
 8004f88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f8a:	881b      	ldrh	r3, [r3, #0]
 8004f8c:	b29b      	uxth	r3, r3
 8004f8e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f92:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f96:	b29a      	uxth	r2, r3
 8004f98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f9a:	801a      	strh	r2, [r3, #0]
 8004f9c:	e05d      	b.n	800505a <USB_EPStartXfer+0x99e>
 8004f9e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004fa2:	2b3e      	cmp	r3, #62	; 0x3e
 8004fa4:	d817      	bhi.n	8004fd6 <USB_EPStartXfer+0x91a>
 8004fa6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004faa:	085b      	lsrs	r3, r3, #1
 8004fac:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8004fb0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004fb4:	f003 0301 	and.w	r3, r3, #1
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d004      	beq.n	8004fc6 <USB_EPStartXfer+0x90a>
 8004fbc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004fc0:	3301      	adds	r3, #1
 8004fc2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8004fc6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004fca:	b29b      	uxth	r3, r3
 8004fcc:	029b      	lsls	r3, r3, #10
 8004fce:	b29a      	uxth	r2, r3
 8004fd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fd2:	801a      	strh	r2, [r3, #0]
 8004fd4:	e041      	b.n	800505a <USB_EPStartXfer+0x99e>
 8004fd6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004fda:	095b      	lsrs	r3, r3, #5
 8004fdc:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8004fe0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004fe4:	f003 031f 	and.w	r3, r3, #31
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d104      	bne.n	8004ff6 <USB_EPStartXfer+0x93a>
 8004fec:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004ff0:	3b01      	subs	r3, #1
 8004ff2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8004ff6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004ffa:	b29b      	uxth	r3, r3
 8004ffc:	029b      	lsls	r3, r3, #10
 8004ffe:	b29b      	uxth	r3, r3
 8005000:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005004:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005008:	b29a      	uxth	r2, r3
 800500a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800500c:	801a      	strh	r2, [r3, #0]
 800500e:	e024      	b.n	800505a <USB_EPStartXfer+0x99e>
 8005010:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005014:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	785b      	ldrb	r3, [r3, #1]
 800501c:	2b01      	cmp	r3, #1
 800501e:	d11c      	bne.n	800505a <USB_EPStartXfer+0x99e>
 8005020:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005024:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800502e:	b29b      	uxth	r3, r3
 8005030:	461a      	mov	r2, r3
 8005032:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005034:	4413      	add	r3, r2
 8005036:	643b      	str	r3, [r7, #64]	; 0x40
 8005038:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800503c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	781b      	ldrb	r3, [r3, #0]
 8005044:	011a      	lsls	r2, r3, #4
 8005046:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005048:	4413      	add	r3, r2
 800504a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800504e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005050:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005054:	b29a      	uxth	r2, r3
 8005056:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005058:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800505a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800505e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	895b      	ldrh	r3, [r3, #10]
 8005066:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800506a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800506e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	6959      	ldr	r1, [r3, #20]
 8005076:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800507a:	b29b      	uxth	r3, r3
 800507c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005080:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005084:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005088:	6800      	ldr	r0, [r0, #0]
 800508a:	f001 fa8d 	bl	80065a8 <USB_WritePMA>
 800508e:	f000 bc5a 	b.w	8005946 <USB_EPStartXfer+0x128a>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8005092:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005096:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	6a1b      	ldr	r3, [r3, #32]
 800509e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 80050a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80050a6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80050aa:	681a      	ldr	r2, [r3, #0]
 80050ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80050b0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	781b      	ldrb	r3, [r3, #0]
 80050b8:	009b      	lsls	r3, r3, #2
 80050ba:	4413      	add	r3, r2
 80050bc:	881b      	ldrh	r3, [r3, #0]
 80050be:	b29b      	uxth	r3, r3
 80050c0:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80050c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050c8:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80050cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80050d0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80050d4:	681a      	ldr	r2, [r3, #0]
 80050d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80050da:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	781b      	ldrb	r3, [r3, #0]
 80050e2:	009b      	lsls	r3, r3, #2
 80050e4:	441a      	add	r2, r3
 80050e6:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80050ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80050ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80050f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80050f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050fa:	b29b      	uxth	r3, r3
 80050fc:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80050fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005102:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	65fb      	str	r3, [r7, #92]	; 0x5c
 800510a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800510e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005118:	b29b      	uxth	r3, r3
 800511a:	461a      	mov	r2, r3
 800511c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800511e:	4413      	add	r3, r2
 8005120:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005122:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005126:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	781b      	ldrb	r3, [r3, #0]
 800512e:	011a      	lsls	r2, r3, #4
 8005130:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005132:	4413      	add	r3, r2
 8005134:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005138:	65bb      	str	r3, [r7, #88]	; 0x58
 800513a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800513e:	b29a      	uxth	r2, r3
 8005140:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005142:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005144:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005148:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	891b      	ldrh	r3, [r3, #8]
 8005150:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005154:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005158:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	6959      	ldr	r1, [r3, #20]
 8005160:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005164:	b29b      	uxth	r3, r3
 8005166:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800516a:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800516e:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005172:	6800      	ldr	r0, [r0, #0]
 8005174:	f001 fa18 	bl	80065a8 <USB_WritePMA>
 8005178:	e3e5      	b.n	8005946 <USB_EPStartXfer+0x128a>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 800517a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800517e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005182:	681a      	ldr	r2, [r3, #0]
 8005184:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005188:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	781b      	ldrb	r3, [r3, #0]
 8005190:	009b      	lsls	r3, r3, #2
 8005192:	4413      	add	r3, r2
 8005194:	881b      	ldrh	r3, [r3, #0]
 8005196:	b29b      	uxth	r3, r3
 8005198:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800519c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051a0:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 80051a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051a8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80051ac:	681a      	ldr	r2, [r3, #0]
 80051ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051b2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	781b      	ldrb	r3, [r3, #0]
 80051ba:	009b      	lsls	r3, r3, #2
 80051bc:	441a      	add	r2, r3
 80051be:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 80051c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80051c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80051ca:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80051ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051d2:	b29b      	uxth	r3, r3
 80051d4:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80051d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051da:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	6a1a      	ldr	r2, [r3, #32]
 80051e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80051e6:	1ad2      	subs	r2, r2, r3
 80051e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051ec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80051f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051f8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80051fc:	681a      	ldr	r2, [r3, #0]
 80051fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005202:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	781b      	ldrb	r3, [r3, #0]
 800520a:	009b      	lsls	r3, r3, #2
 800520c:	4413      	add	r3, r2
 800520e:	881b      	ldrh	r3, [r3, #0]
 8005210:	b29b      	uxth	r3, r3
 8005212:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005216:	2b00      	cmp	r3, #0
 8005218:	f000 81bc 	beq.w	8005594 <USB_EPStartXfer+0xed8>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800521c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005220:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800522a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800522e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	785b      	ldrb	r3, [r3, #1]
 8005236:	2b00      	cmp	r3, #0
 8005238:	d16d      	bne.n	8005316 <USB_EPStartXfer+0xc5a>
 800523a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800523e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	67bb      	str	r3, [r7, #120]	; 0x78
 8005246:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800524a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005254:	b29b      	uxth	r3, r3
 8005256:	461a      	mov	r2, r3
 8005258:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800525a:	4413      	add	r3, r2
 800525c:	67bb      	str	r3, [r7, #120]	; 0x78
 800525e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005262:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	781b      	ldrb	r3, [r3, #0]
 800526a:	011a      	lsls	r2, r3, #4
 800526c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800526e:	4413      	add	r3, r2
 8005270:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005274:	677b      	str	r3, [r7, #116]	; 0x74
 8005276:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800527a:	2b00      	cmp	r3, #0
 800527c:	d112      	bne.n	80052a4 <USB_EPStartXfer+0xbe8>
 800527e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005280:	881b      	ldrh	r3, [r3, #0]
 8005282:	b29b      	uxth	r3, r3
 8005284:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005288:	b29a      	uxth	r2, r3
 800528a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800528c:	801a      	strh	r2, [r3, #0]
 800528e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005290:	881b      	ldrh	r3, [r3, #0]
 8005292:	b29b      	uxth	r3, r3
 8005294:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005298:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800529c:	b29a      	uxth	r2, r3
 800529e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80052a0:	801a      	strh	r2, [r3, #0]
 80052a2:	e060      	b.n	8005366 <USB_EPStartXfer+0xcaa>
 80052a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80052a8:	2b3e      	cmp	r3, #62	; 0x3e
 80052aa:	d817      	bhi.n	80052dc <USB_EPStartXfer+0xc20>
 80052ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80052b0:	085b      	lsrs	r3, r3, #1
 80052b2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80052b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80052ba:	f003 0301 	and.w	r3, r3, #1
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d004      	beq.n	80052cc <USB_EPStartXfer+0xc10>
 80052c2:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80052c6:	3301      	adds	r3, #1
 80052c8:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80052cc:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80052d0:	b29b      	uxth	r3, r3
 80052d2:	029b      	lsls	r3, r3, #10
 80052d4:	b29a      	uxth	r2, r3
 80052d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80052d8:	801a      	strh	r2, [r3, #0]
 80052da:	e044      	b.n	8005366 <USB_EPStartXfer+0xcaa>
 80052dc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80052e0:	095b      	lsrs	r3, r3, #5
 80052e2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80052e6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80052ea:	f003 031f 	and.w	r3, r3, #31
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d104      	bne.n	80052fc <USB_EPStartXfer+0xc40>
 80052f2:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80052f6:	3b01      	subs	r3, #1
 80052f8:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80052fc:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005300:	b29b      	uxth	r3, r3
 8005302:	029b      	lsls	r3, r3, #10
 8005304:	b29b      	uxth	r3, r3
 8005306:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800530a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800530e:	b29a      	uxth	r2, r3
 8005310:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005312:	801a      	strh	r2, [r3, #0]
 8005314:	e027      	b.n	8005366 <USB_EPStartXfer+0xcaa>
 8005316:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800531a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	785b      	ldrb	r3, [r3, #1]
 8005322:	2b01      	cmp	r3, #1
 8005324:	d11f      	bne.n	8005366 <USB_EPStartXfer+0xcaa>
 8005326:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800532a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005334:	b29b      	uxth	r3, r3
 8005336:	461a      	mov	r2, r3
 8005338:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800533c:	4413      	add	r3, r2
 800533e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005342:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005346:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	781b      	ldrb	r3, [r3, #0]
 800534e:	011a      	lsls	r2, r3, #4
 8005350:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005354:	4413      	add	r3, r2
 8005356:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800535a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800535c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005360:	b29a      	uxth	r2, r3
 8005362:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005364:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8005366:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800536a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	895b      	ldrh	r3, [r3, #10]
 8005372:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005376:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800537a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	6959      	ldr	r1, [r3, #20]
 8005382:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005386:	b29b      	uxth	r3, r3
 8005388:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800538c:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005390:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005394:	6800      	ldr	r0, [r0, #0]
 8005396:	f001 f907 	bl	80065a8 <USB_WritePMA>
          ep->xfer_buff += len;
 800539a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800539e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	695a      	ldr	r2, [r3, #20]
 80053a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80053aa:	441a      	add	r2, r3
 80053ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053b0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 80053b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053bc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	6a1a      	ldr	r2, [r3, #32]
 80053c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053c8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	691b      	ldr	r3, [r3, #16]
 80053d0:	429a      	cmp	r2, r3
 80053d2:	d90f      	bls.n	80053f4 <USB_EPStartXfer+0xd38>
          {
            ep->xfer_len_db -= len;
 80053d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053d8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	6a1a      	ldr	r2, [r3, #32]
 80053e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80053e4:	1ad2      	subs	r2, r2, r3
 80053e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053ea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	621a      	str	r2, [r3, #32]
 80053f2:	e00e      	b.n	8005412 <USB_EPStartXfer+0xd56>
          }
          else
          {
            len = ep->xfer_len_db;
 80053f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053f8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	6a1b      	ldr	r3, [r3, #32]
 8005400:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8005404:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005408:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	2200      	movs	r2, #0
 8005410:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8005412:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005416:	2b00      	cmp	r3, #0
 8005418:	f000 8295 	beq.w	8005946 <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800541c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005420:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	785b      	ldrb	r3, [r3, #1]
 8005428:	2b00      	cmp	r3, #0
 800542a:	d16d      	bne.n	8005508 <USB_EPStartXfer+0xe4c>
 800542c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005430:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	66bb      	str	r3, [r7, #104]	; 0x68
 8005438:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800543c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005446:	b29b      	uxth	r3, r3
 8005448:	461a      	mov	r2, r3
 800544a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800544c:	4413      	add	r3, r2
 800544e:	66bb      	str	r3, [r7, #104]	; 0x68
 8005450:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005454:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	781b      	ldrb	r3, [r3, #0]
 800545c:	011a      	lsls	r2, r3, #4
 800545e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005460:	4413      	add	r3, r2
 8005462:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005466:	667b      	str	r3, [r7, #100]	; 0x64
 8005468:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800546c:	2b00      	cmp	r3, #0
 800546e:	d112      	bne.n	8005496 <USB_EPStartXfer+0xdda>
 8005470:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005472:	881b      	ldrh	r3, [r3, #0]
 8005474:	b29b      	uxth	r3, r3
 8005476:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800547a:	b29a      	uxth	r2, r3
 800547c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800547e:	801a      	strh	r2, [r3, #0]
 8005480:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005482:	881b      	ldrh	r3, [r3, #0]
 8005484:	b29b      	uxth	r3, r3
 8005486:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800548a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800548e:	b29a      	uxth	r2, r3
 8005490:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005492:	801a      	strh	r2, [r3, #0]
 8005494:	e063      	b.n	800555e <USB_EPStartXfer+0xea2>
 8005496:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800549a:	2b3e      	cmp	r3, #62	; 0x3e
 800549c:	d817      	bhi.n	80054ce <USB_EPStartXfer+0xe12>
 800549e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80054a2:	085b      	lsrs	r3, r3, #1
 80054a4:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80054a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80054ac:	f003 0301 	and.w	r3, r3, #1
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d004      	beq.n	80054be <USB_EPStartXfer+0xe02>
 80054b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80054b8:	3301      	adds	r3, #1
 80054ba:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80054be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80054c2:	b29b      	uxth	r3, r3
 80054c4:	029b      	lsls	r3, r3, #10
 80054c6:	b29a      	uxth	r2, r3
 80054c8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80054ca:	801a      	strh	r2, [r3, #0]
 80054cc:	e047      	b.n	800555e <USB_EPStartXfer+0xea2>
 80054ce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80054d2:	095b      	lsrs	r3, r3, #5
 80054d4:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80054d8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80054dc:	f003 031f 	and.w	r3, r3, #31
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d104      	bne.n	80054ee <USB_EPStartXfer+0xe32>
 80054e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80054e8:	3b01      	subs	r3, #1
 80054ea:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80054ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80054f2:	b29b      	uxth	r3, r3
 80054f4:	029b      	lsls	r3, r3, #10
 80054f6:	b29b      	uxth	r3, r3
 80054f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80054fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005500:	b29a      	uxth	r2, r3
 8005502:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005504:	801a      	strh	r2, [r3, #0]
 8005506:	e02a      	b.n	800555e <USB_EPStartXfer+0xea2>
 8005508:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800550c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	785b      	ldrb	r3, [r3, #1]
 8005514:	2b01      	cmp	r3, #1
 8005516:	d122      	bne.n	800555e <USB_EPStartXfer+0xea2>
 8005518:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800551c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	673b      	str	r3, [r7, #112]	; 0x70
 8005524:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005528:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005532:	b29b      	uxth	r3, r3
 8005534:	461a      	mov	r2, r3
 8005536:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005538:	4413      	add	r3, r2
 800553a:	673b      	str	r3, [r7, #112]	; 0x70
 800553c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005540:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	781b      	ldrb	r3, [r3, #0]
 8005548:	011a      	lsls	r2, r3, #4
 800554a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800554c:	4413      	add	r3, r2
 800554e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005552:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005554:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005558:	b29a      	uxth	r2, r3
 800555a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800555c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800555e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005562:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	891b      	ldrh	r3, [r3, #8]
 800556a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800556e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005572:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	6959      	ldr	r1, [r3, #20]
 800557a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800557e:	b29b      	uxth	r3, r3
 8005580:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005584:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005588:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800558c:	6800      	ldr	r0, [r0, #0]
 800558e:	f001 f80b 	bl	80065a8 <USB_WritePMA>
 8005592:	e1d8      	b.n	8005946 <USB_EPStartXfer+0x128a>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005594:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005598:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	785b      	ldrb	r3, [r3, #1]
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d178      	bne.n	8005696 <USB_EPStartXfer+0xfda>
 80055a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80055a8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80055b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80055b6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80055c0:	b29b      	uxth	r3, r3
 80055c2:	461a      	mov	r2, r3
 80055c4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80055c8:	4413      	add	r3, r2
 80055ca:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80055ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80055d2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	781b      	ldrb	r3, [r3, #0]
 80055da:	011a      	lsls	r2, r3, #4
 80055dc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80055e0:	4413      	add	r3, r2
 80055e2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80055e6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80055ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d116      	bne.n	8005620 <USB_EPStartXfer+0xf64>
 80055f2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80055f6:	881b      	ldrh	r3, [r3, #0]
 80055f8:	b29b      	uxth	r3, r3
 80055fa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80055fe:	b29a      	uxth	r2, r3
 8005600:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005604:	801a      	strh	r2, [r3, #0]
 8005606:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800560a:	881b      	ldrh	r3, [r3, #0]
 800560c:	b29b      	uxth	r3, r3
 800560e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005612:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005616:	b29a      	uxth	r2, r3
 8005618:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800561c:	801a      	strh	r2, [r3, #0]
 800561e:	e06b      	b.n	80056f8 <USB_EPStartXfer+0x103c>
 8005620:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005624:	2b3e      	cmp	r3, #62	; 0x3e
 8005626:	d818      	bhi.n	800565a <USB_EPStartXfer+0xf9e>
 8005628:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800562c:	085b      	lsrs	r3, r3, #1
 800562e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8005632:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005636:	f003 0301 	and.w	r3, r3, #1
 800563a:	2b00      	cmp	r3, #0
 800563c:	d004      	beq.n	8005648 <USB_EPStartXfer+0xf8c>
 800563e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005642:	3301      	adds	r3, #1
 8005644:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8005648:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800564c:	b29b      	uxth	r3, r3
 800564e:	029b      	lsls	r3, r3, #10
 8005650:	b29a      	uxth	r2, r3
 8005652:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005656:	801a      	strh	r2, [r3, #0]
 8005658:	e04e      	b.n	80056f8 <USB_EPStartXfer+0x103c>
 800565a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800565e:	095b      	lsrs	r3, r3, #5
 8005660:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8005664:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005668:	f003 031f 	and.w	r3, r3, #31
 800566c:	2b00      	cmp	r3, #0
 800566e:	d104      	bne.n	800567a <USB_EPStartXfer+0xfbe>
 8005670:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005674:	3b01      	subs	r3, #1
 8005676:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800567a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800567e:	b29b      	uxth	r3, r3
 8005680:	029b      	lsls	r3, r3, #10
 8005682:	b29b      	uxth	r3, r3
 8005684:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005688:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800568c:	b29a      	uxth	r2, r3
 800568e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005692:	801a      	strh	r2, [r3, #0]
 8005694:	e030      	b.n	80056f8 <USB_EPStartXfer+0x103c>
 8005696:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800569a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	785b      	ldrb	r3, [r3, #1]
 80056a2:	2b01      	cmp	r3, #1
 80056a4:	d128      	bne.n	80056f8 <USB_EPStartXfer+0x103c>
 80056a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056aa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80056b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056b8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80056c2:	b29b      	uxth	r3, r3
 80056c4:	461a      	mov	r2, r3
 80056c6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80056ca:	4413      	add	r3, r2
 80056cc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80056d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056d4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	781b      	ldrb	r3, [r3, #0]
 80056dc:	011a      	lsls	r2, r3, #4
 80056de:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80056e2:	4413      	add	r3, r2
 80056e4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80056e8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80056ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80056f0:	b29a      	uxth	r2, r3
 80056f2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80056f6:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80056f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056fc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	891b      	ldrh	r3, [r3, #8]
 8005704:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005708:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800570c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	6959      	ldr	r1, [r3, #20]
 8005714:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005718:	b29b      	uxth	r3, r3
 800571a:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800571e:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005722:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005726:	6800      	ldr	r0, [r0, #0]
 8005728:	f000 ff3e 	bl	80065a8 <USB_WritePMA>
          ep->xfer_buff += len;
 800572c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005730:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	695a      	ldr	r2, [r3, #20]
 8005738:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800573c:	441a      	add	r2, r3
 800573e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005742:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 800574a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800574e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	6a1a      	ldr	r2, [r3, #32]
 8005756:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800575a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	691b      	ldr	r3, [r3, #16]
 8005762:	429a      	cmp	r2, r3
 8005764:	d90f      	bls.n	8005786 <USB_EPStartXfer+0x10ca>
          {
            ep->xfer_len_db -= len;
 8005766:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800576a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	6a1a      	ldr	r2, [r3, #32]
 8005772:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005776:	1ad2      	subs	r2, r2, r3
 8005778:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800577c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	621a      	str	r2, [r3, #32]
 8005784:	e00e      	b.n	80057a4 <USB_EPStartXfer+0x10e8>
          }
          else
          {
            len = ep->xfer_len_db;
 8005786:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800578a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	6a1b      	ldr	r3, [r3, #32]
 8005792:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8005796:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800579a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	2200      	movs	r2, #0
 80057a2:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 80057a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	f000 80cc 	beq.w	8005946 <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80057ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057b2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80057bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057c0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	785b      	ldrb	r3, [r3, #1]
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d178      	bne.n	80058be <USB_EPStartXfer+0x1202>
 80057cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057d0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80057da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057de:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80057e8:	b29b      	uxth	r3, r3
 80057ea:	461a      	mov	r2, r3
 80057ec:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80057f0:	4413      	add	r3, r2
 80057f2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80057f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057fa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	781b      	ldrb	r3, [r3, #0]
 8005802:	011a      	lsls	r2, r3, #4
 8005804:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005808:	4413      	add	r3, r2
 800580a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800580e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005812:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005816:	2b00      	cmp	r3, #0
 8005818:	d116      	bne.n	8005848 <USB_EPStartXfer+0x118c>
 800581a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800581e:	881b      	ldrh	r3, [r3, #0]
 8005820:	b29b      	uxth	r3, r3
 8005822:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005826:	b29a      	uxth	r2, r3
 8005828:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800582c:	801a      	strh	r2, [r3, #0]
 800582e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005832:	881b      	ldrh	r3, [r3, #0]
 8005834:	b29b      	uxth	r3, r3
 8005836:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800583a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800583e:	b29a      	uxth	r2, r3
 8005840:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005844:	801a      	strh	r2, [r3, #0]
 8005846:	e064      	b.n	8005912 <USB_EPStartXfer+0x1256>
 8005848:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800584c:	2b3e      	cmp	r3, #62	; 0x3e
 800584e:	d818      	bhi.n	8005882 <USB_EPStartXfer+0x11c6>
 8005850:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005854:	085b      	lsrs	r3, r3, #1
 8005856:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800585a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800585e:	f003 0301 	and.w	r3, r3, #1
 8005862:	2b00      	cmp	r3, #0
 8005864:	d004      	beq.n	8005870 <USB_EPStartXfer+0x11b4>
 8005866:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800586a:	3301      	adds	r3, #1
 800586c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005870:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005874:	b29b      	uxth	r3, r3
 8005876:	029b      	lsls	r3, r3, #10
 8005878:	b29a      	uxth	r2, r3
 800587a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800587e:	801a      	strh	r2, [r3, #0]
 8005880:	e047      	b.n	8005912 <USB_EPStartXfer+0x1256>
 8005882:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005886:	095b      	lsrs	r3, r3, #5
 8005888:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800588c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005890:	f003 031f 	and.w	r3, r3, #31
 8005894:	2b00      	cmp	r3, #0
 8005896:	d104      	bne.n	80058a2 <USB_EPStartXfer+0x11e6>
 8005898:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800589c:	3b01      	subs	r3, #1
 800589e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80058a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80058a6:	b29b      	uxth	r3, r3
 80058a8:	029b      	lsls	r3, r3, #10
 80058aa:	b29b      	uxth	r3, r3
 80058ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80058b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80058b4:	b29a      	uxth	r2, r3
 80058b6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80058ba:	801a      	strh	r2, [r3, #0]
 80058bc:	e029      	b.n	8005912 <USB_EPStartXfer+0x1256>
 80058be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058c2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	785b      	ldrb	r3, [r3, #1]
 80058ca:	2b01      	cmp	r3, #1
 80058cc:	d121      	bne.n	8005912 <USB_EPStartXfer+0x1256>
 80058ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058d2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80058dc:	b29b      	uxth	r3, r3
 80058de:	461a      	mov	r2, r3
 80058e0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80058e4:	4413      	add	r3, r2
 80058e6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80058ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058ee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	781b      	ldrb	r3, [r3, #0]
 80058f6:	011a      	lsls	r2, r3, #4
 80058f8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80058fc:	4413      	add	r3, r2
 80058fe:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005902:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8005906:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800590a:	b29a      	uxth	r2, r3
 800590c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005910:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005912:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005916:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	895b      	ldrh	r3, [r3, #10]
 800591e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005922:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005926:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	6959      	ldr	r1, [r3, #20]
 800592e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005932:	b29b      	uxth	r3, r3
 8005934:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005938:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800593c:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005940:	6800      	ldr	r0, [r0, #0]
 8005942:	f000 fe31 	bl	80065a8 <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8005946:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800594a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800594e:	681a      	ldr	r2, [r3, #0]
 8005950:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005954:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	781b      	ldrb	r3, [r3, #0]
 800595c:	009b      	lsls	r3, r3, #2
 800595e:	4413      	add	r3, r2
 8005960:	881b      	ldrh	r3, [r3, #0]
 8005962:	b29b      	uxth	r3, r3
 8005964:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005968:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 800596c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005970:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005974:	8013      	strh	r3, [r2, #0]
 8005976:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800597a:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 800597e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005982:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8005986:	8812      	ldrh	r2, [r2, #0]
 8005988:	f082 0210 	eor.w	r2, r2, #16
 800598c:	801a      	strh	r2, [r3, #0]
 800598e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005992:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8005996:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800599a:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 800599e:	8812      	ldrh	r2, [r2, #0]
 80059a0:	f082 0220 	eor.w	r2, r2, #32
 80059a4:	801a      	strh	r2, [r3, #0]
 80059a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059aa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80059ae:	681a      	ldr	r2, [r3, #0]
 80059b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059b4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	781b      	ldrb	r3, [r3, #0]
 80059bc:	009b      	lsls	r3, r3, #2
 80059be:	441a      	add	r2, r3
 80059c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059c4:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 80059c8:	881b      	ldrh	r3, [r3, #0]
 80059ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80059ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80059d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80059d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80059da:	b29b      	uxth	r3, r3
 80059dc:	8013      	strh	r3, [r2, #0]
 80059de:	f000 bc9f 	b.w	8006320 <USB_EPStartXfer+0x1c64>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80059e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059e6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	7b1b      	ldrb	r3, [r3, #12]
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	f040 80ae 	bne.w	8005b50 <USB_EPStartXfer+0x1494>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80059f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059f8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	699a      	ldr	r2, [r3, #24]
 8005a00:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a04:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	691b      	ldr	r3, [r3, #16]
 8005a0c:	429a      	cmp	r2, r3
 8005a0e:	d917      	bls.n	8005a40 <USB_EPStartXfer+0x1384>
      {
        len = ep->maxpacket;
 8005a10:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a14:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	691b      	ldr	r3, [r3, #16]
 8005a1c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 8005a20:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a24:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	699a      	ldr	r2, [r3, #24]
 8005a2c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a30:	1ad2      	subs	r2, r2, r3
 8005a32:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a36:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	619a      	str	r2, [r3, #24]
 8005a3e:	e00e      	b.n	8005a5e <USB_EPStartXfer+0x13a2>
      }
      else
      {
        len = ep->xfer_len;
 8005a40:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a44:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	699b      	ldr	r3, [r3, #24]
 8005a4c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 8005a50:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a54:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8005a5e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a62:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005a6c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a70:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a7a:	b29b      	uxth	r3, r3
 8005a7c:	461a      	mov	r2, r3
 8005a7e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005a82:	4413      	add	r3, r2
 8005a84:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005a88:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a8c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	781b      	ldrb	r3, [r3, #0]
 8005a94:	011a      	lsls	r2, r3, #4
 8005a96:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005a9a:	4413      	add	r3, r2
 8005a9c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005aa0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005aa4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d116      	bne.n	8005ada <USB_EPStartXfer+0x141e>
 8005aac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005ab0:	881b      	ldrh	r3, [r3, #0]
 8005ab2:	b29b      	uxth	r3, r3
 8005ab4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005ab8:	b29a      	uxth	r2, r3
 8005aba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005abe:	801a      	strh	r2, [r3, #0]
 8005ac0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005ac4:	881b      	ldrh	r3, [r3, #0]
 8005ac6:	b29b      	uxth	r3, r3
 8005ac8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005acc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ad0:	b29a      	uxth	r2, r3
 8005ad2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005ad6:	801a      	strh	r2, [r3, #0]
 8005ad8:	e3e8      	b.n	80062ac <USB_EPStartXfer+0x1bf0>
 8005ada:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ade:	2b3e      	cmp	r3, #62	; 0x3e
 8005ae0:	d818      	bhi.n	8005b14 <USB_EPStartXfer+0x1458>
 8005ae2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ae6:	085b      	lsrs	r3, r3, #1
 8005ae8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8005aec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005af0:	f003 0301 	and.w	r3, r3, #1
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d004      	beq.n	8005b02 <USB_EPStartXfer+0x1446>
 8005af8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005afc:	3301      	adds	r3, #1
 8005afe:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8005b02:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005b06:	b29b      	uxth	r3, r3
 8005b08:	029b      	lsls	r3, r3, #10
 8005b0a:	b29a      	uxth	r2, r3
 8005b0c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005b10:	801a      	strh	r2, [r3, #0]
 8005b12:	e3cb      	b.n	80062ac <USB_EPStartXfer+0x1bf0>
 8005b14:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b18:	095b      	lsrs	r3, r3, #5
 8005b1a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8005b1e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b22:	f003 031f 	and.w	r3, r3, #31
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d104      	bne.n	8005b34 <USB_EPStartXfer+0x1478>
 8005b2a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005b2e:	3b01      	subs	r3, #1
 8005b30:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8005b34:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005b38:	b29b      	uxth	r3, r3
 8005b3a:	029b      	lsls	r3, r3, #10
 8005b3c:	b29b      	uxth	r3, r3
 8005b3e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b42:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b46:	b29a      	uxth	r2, r3
 8005b48:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005b4c:	801a      	strh	r2, [r3, #0]
 8005b4e:	e3ad      	b.n	80062ac <USB_EPStartXfer+0x1bf0>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8005b50:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b54:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	78db      	ldrb	r3, [r3, #3]
 8005b5c:	2b02      	cmp	r3, #2
 8005b5e:	f040 8200 	bne.w	8005f62 <USB_EPStartXfer+0x18a6>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8005b62:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b66:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	785b      	ldrb	r3, [r3, #1]
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	f040 8091 	bne.w	8005c96 <USB_EPStartXfer+0x15da>
 8005b74:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b78:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005b82:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b86:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b90:	b29b      	uxth	r3, r3
 8005b92:	461a      	mov	r2, r3
 8005b94:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005b98:	4413      	add	r3, r2
 8005b9a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005b9e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ba2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	781b      	ldrb	r3, [r3, #0]
 8005baa:	011a      	lsls	r2, r3, #4
 8005bac:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005bb0:	4413      	add	r3, r2
 8005bb2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005bb6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005bba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005bbe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	691b      	ldr	r3, [r3, #16]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d116      	bne.n	8005bf8 <USB_EPStartXfer+0x153c>
 8005bca:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005bce:	881b      	ldrh	r3, [r3, #0]
 8005bd0:	b29b      	uxth	r3, r3
 8005bd2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005bd6:	b29a      	uxth	r2, r3
 8005bd8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005bdc:	801a      	strh	r2, [r3, #0]
 8005bde:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005be2:	881b      	ldrh	r3, [r3, #0]
 8005be4:	b29b      	uxth	r3, r3
 8005be6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005bea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005bee:	b29a      	uxth	r2, r3
 8005bf0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005bf4:	801a      	strh	r2, [r3, #0]
 8005bf6:	e083      	b.n	8005d00 <USB_EPStartXfer+0x1644>
 8005bf8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005bfc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	691b      	ldr	r3, [r3, #16]
 8005c04:	2b3e      	cmp	r3, #62	; 0x3e
 8005c06:	d820      	bhi.n	8005c4a <USB_EPStartXfer+0x158e>
 8005c08:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c0c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	691b      	ldr	r3, [r3, #16]
 8005c14:	085b      	lsrs	r3, r3, #1
 8005c16:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005c1a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c1e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	691b      	ldr	r3, [r3, #16]
 8005c26:	f003 0301 	and.w	r3, r3, #1
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d004      	beq.n	8005c38 <USB_EPStartXfer+0x157c>
 8005c2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c32:	3301      	adds	r3, #1
 8005c34:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005c38:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c3c:	b29b      	uxth	r3, r3
 8005c3e:	029b      	lsls	r3, r3, #10
 8005c40:	b29a      	uxth	r2, r3
 8005c42:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005c46:	801a      	strh	r2, [r3, #0]
 8005c48:	e05a      	b.n	8005d00 <USB_EPStartXfer+0x1644>
 8005c4a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c4e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	691b      	ldr	r3, [r3, #16]
 8005c56:	095b      	lsrs	r3, r3, #5
 8005c58:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005c5c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c60:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	691b      	ldr	r3, [r3, #16]
 8005c68:	f003 031f 	and.w	r3, r3, #31
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d104      	bne.n	8005c7a <USB_EPStartXfer+0x15be>
 8005c70:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c74:	3b01      	subs	r3, #1
 8005c76:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005c7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c7e:	b29b      	uxth	r3, r3
 8005c80:	029b      	lsls	r3, r3, #10
 8005c82:	b29b      	uxth	r3, r3
 8005c84:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c88:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c8c:	b29a      	uxth	r2, r3
 8005c8e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005c92:	801a      	strh	r2, [r3, #0]
 8005c94:	e034      	b.n	8005d00 <USB_EPStartXfer+0x1644>
 8005c96:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c9a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	785b      	ldrb	r3, [r3, #1]
 8005ca2:	2b01      	cmp	r3, #1
 8005ca4:	d12c      	bne.n	8005d00 <USB_EPStartXfer+0x1644>
 8005ca6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005caa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005cb4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005cb8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005cc2:	b29b      	uxth	r3, r3
 8005cc4:	461a      	mov	r2, r3
 8005cc6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005cca:	4413      	add	r3, r2
 8005ccc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005cd0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005cd4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	781b      	ldrb	r3, [r3, #0]
 8005cdc:	011a      	lsls	r2, r3, #4
 8005cde:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005ce2:	4413      	add	r3, r2
 8005ce4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005ce8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005cec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005cf0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	691b      	ldr	r3, [r3, #16]
 8005cf8:	b29a      	uxth	r2, r3
 8005cfa:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005cfe:	801a      	strh	r2, [r3, #0]
 8005d00:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d04:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005d0e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d12:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	785b      	ldrb	r3, [r3, #1]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	f040 8091 	bne.w	8005e42 <USB_EPStartXfer+0x1786>
 8005d20:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d24:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005d2e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d32:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d3c:	b29b      	uxth	r3, r3
 8005d3e:	461a      	mov	r2, r3
 8005d40:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005d44:	4413      	add	r3, r2
 8005d46:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005d4a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d4e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	781b      	ldrb	r3, [r3, #0]
 8005d56:	011a      	lsls	r2, r3, #4
 8005d58:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005d5c:	4413      	add	r3, r2
 8005d5e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005d62:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005d66:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d6a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	691b      	ldr	r3, [r3, #16]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d116      	bne.n	8005da4 <USB_EPStartXfer+0x16e8>
 8005d76:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005d7a:	881b      	ldrh	r3, [r3, #0]
 8005d7c:	b29b      	uxth	r3, r3
 8005d7e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005d82:	b29a      	uxth	r2, r3
 8005d84:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005d88:	801a      	strh	r2, [r3, #0]
 8005d8a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005d8e:	881b      	ldrh	r3, [r3, #0]
 8005d90:	b29b      	uxth	r3, r3
 8005d92:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d96:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d9a:	b29a      	uxth	r2, r3
 8005d9c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005da0:	801a      	strh	r2, [r3, #0]
 8005da2:	e07c      	b.n	8005e9e <USB_EPStartXfer+0x17e2>
 8005da4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005da8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	691b      	ldr	r3, [r3, #16]
 8005db0:	2b3e      	cmp	r3, #62	; 0x3e
 8005db2:	d820      	bhi.n	8005df6 <USB_EPStartXfer+0x173a>
 8005db4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005db8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	691b      	ldr	r3, [r3, #16]
 8005dc0:	085b      	lsrs	r3, r3, #1
 8005dc2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005dc6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005dca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	691b      	ldr	r3, [r3, #16]
 8005dd2:	f003 0301 	and.w	r3, r3, #1
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d004      	beq.n	8005de4 <USB_EPStartXfer+0x1728>
 8005dda:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005dde:	3301      	adds	r3, #1
 8005de0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005de4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005de8:	b29b      	uxth	r3, r3
 8005dea:	029b      	lsls	r3, r3, #10
 8005dec:	b29a      	uxth	r2, r3
 8005dee:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005df2:	801a      	strh	r2, [r3, #0]
 8005df4:	e053      	b.n	8005e9e <USB_EPStartXfer+0x17e2>
 8005df6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005dfa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	691b      	ldr	r3, [r3, #16]
 8005e02:	095b      	lsrs	r3, r3, #5
 8005e04:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005e08:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e0c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	691b      	ldr	r3, [r3, #16]
 8005e14:	f003 031f 	and.w	r3, r3, #31
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d104      	bne.n	8005e26 <USB_EPStartXfer+0x176a>
 8005e1c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005e20:	3b01      	subs	r3, #1
 8005e22:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005e26:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005e2a:	b29b      	uxth	r3, r3
 8005e2c:	029b      	lsls	r3, r3, #10
 8005e2e:	b29b      	uxth	r3, r3
 8005e30:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e34:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e38:	b29a      	uxth	r2, r3
 8005e3a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005e3e:	801a      	strh	r2, [r3, #0]
 8005e40:	e02d      	b.n	8005e9e <USB_EPStartXfer+0x17e2>
 8005e42:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e46:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	785b      	ldrb	r3, [r3, #1]
 8005e4e:	2b01      	cmp	r3, #1
 8005e50:	d125      	bne.n	8005e9e <USB_EPStartXfer+0x17e2>
 8005e52:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e56:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e60:	b29b      	uxth	r3, r3
 8005e62:	461a      	mov	r2, r3
 8005e64:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005e68:	4413      	add	r3, r2
 8005e6a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005e6e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e72:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	781b      	ldrb	r3, [r3, #0]
 8005e7a:	011a      	lsls	r2, r3, #4
 8005e7c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005e80:	4413      	add	r3, r2
 8005e82:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005e86:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005e8a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e8e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	691b      	ldr	r3, [r3, #16]
 8005e96:	b29a      	uxth	r2, r3
 8005e98:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005e9c:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8005e9e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ea2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	69db      	ldr	r3, [r3, #28]
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	f000 81fe 	beq.w	80062ac <USB_EPStartXfer+0x1bf0>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8005eb0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005eb4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005eb8:	681a      	ldr	r2, [r3, #0]
 8005eba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ebe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	781b      	ldrb	r3, [r3, #0]
 8005ec6:	009b      	lsls	r3, r3, #2
 8005ec8:	4413      	add	r3, r2
 8005eca:	881b      	ldrh	r3, [r3, #0]
 8005ecc:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005ed0:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8005ed4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d005      	beq.n	8005ee8 <USB_EPStartXfer+0x182c>
 8005edc:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8005ee0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d10d      	bne.n	8005f04 <USB_EPStartXfer+0x1848>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005ee8:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8005eec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	f040 81db 	bne.w	80062ac <USB_EPStartXfer+0x1bf0>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005ef6:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8005efa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	f040 81d4 	bne.w	80062ac <USB_EPStartXfer+0x1bf0>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8005f04:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f08:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005f0c:	681a      	ldr	r2, [r3, #0]
 8005f0e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f12:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	781b      	ldrb	r3, [r3, #0]
 8005f1a:	009b      	lsls	r3, r3, #2
 8005f1c:	4413      	add	r3, r2
 8005f1e:	881b      	ldrh	r3, [r3, #0]
 8005f20:	b29b      	uxth	r3, r3
 8005f22:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f2a:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 8005f2e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f32:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005f36:	681a      	ldr	r2, [r3, #0]
 8005f38:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f3c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	781b      	ldrb	r3, [r3, #0]
 8005f44:	009b      	lsls	r3, r3, #2
 8005f46:	441a      	add	r2, r3
 8005f48:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8005f4c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f50:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f54:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f58:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005f5c:	b29b      	uxth	r3, r3
 8005f5e:	8013      	strh	r3, [r2, #0]
 8005f60:	e1a4      	b.n	80062ac <USB_EPStartXfer+0x1bf0>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8005f62:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f66:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	78db      	ldrb	r3, [r3, #3]
 8005f6e:	2b01      	cmp	r3, #1
 8005f70:	f040 819a 	bne.w	80062a8 <USB_EPStartXfer+0x1bec>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8005f74:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f78:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	699a      	ldr	r2, [r3, #24]
 8005f80:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f84:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	691b      	ldr	r3, [r3, #16]
 8005f8c:	429a      	cmp	r2, r3
 8005f8e:	d917      	bls.n	8005fc0 <USB_EPStartXfer+0x1904>
        {
          len = ep->maxpacket;
 8005f90:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f94:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	691b      	ldr	r3, [r3, #16]
 8005f9c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 8005fa0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005fa4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	699a      	ldr	r2, [r3, #24]
 8005fac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005fb0:	1ad2      	subs	r2, r2, r3
 8005fb2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005fb6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	619a      	str	r2, [r3, #24]
 8005fbe:	e00e      	b.n	8005fde <USB_EPStartXfer+0x1922>
        }
        else
        {
          len = ep->xfer_len;
 8005fc0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005fc4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	699b      	ldr	r3, [r3, #24]
 8005fcc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 8005fd0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005fd4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	2200      	movs	r2, #0
 8005fdc:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8005fde:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005fe2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	785b      	ldrb	r3, [r3, #1]
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d178      	bne.n	80060e0 <USB_EPStartXfer+0x1a24>
 8005fee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ff2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005ffc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006000:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800600a:	b29b      	uxth	r3, r3
 800600c:	461a      	mov	r2, r3
 800600e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006012:	4413      	add	r3, r2
 8006014:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006018:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800601c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	781b      	ldrb	r3, [r3, #0]
 8006024:	011a      	lsls	r2, r3, #4
 8006026:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800602a:	4413      	add	r3, r2
 800602c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006030:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006034:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006038:	2b00      	cmp	r3, #0
 800603a:	d116      	bne.n	800606a <USB_EPStartXfer+0x19ae>
 800603c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006040:	881b      	ldrh	r3, [r3, #0]
 8006042:	b29b      	uxth	r3, r3
 8006044:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006048:	b29a      	uxth	r2, r3
 800604a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800604e:	801a      	strh	r2, [r3, #0]
 8006050:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006054:	881b      	ldrh	r3, [r3, #0]
 8006056:	b29b      	uxth	r3, r3
 8006058:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800605c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006060:	b29a      	uxth	r2, r3
 8006062:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006066:	801a      	strh	r2, [r3, #0]
 8006068:	e06b      	b.n	8006142 <USB_EPStartXfer+0x1a86>
 800606a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800606e:	2b3e      	cmp	r3, #62	; 0x3e
 8006070:	d818      	bhi.n	80060a4 <USB_EPStartXfer+0x19e8>
 8006072:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006076:	085b      	lsrs	r3, r3, #1
 8006078:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800607c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006080:	f003 0301 	and.w	r3, r3, #1
 8006084:	2b00      	cmp	r3, #0
 8006086:	d004      	beq.n	8006092 <USB_EPStartXfer+0x19d6>
 8006088:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800608c:	3301      	adds	r3, #1
 800608e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006092:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006096:	b29b      	uxth	r3, r3
 8006098:	029b      	lsls	r3, r3, #10
 800609a:	b29a      	uxth	r2, r3
 800609c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80060a0:	801a      	strh	r2, [r3, #0]
 80060a2:	e04e      	b.n	8006142 <USB_EPStartXfer+0x1a86>
 80060a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80060a8:	095b      	lsrs	r3, r3, #5
 80060aa:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80060ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80060b2:	f003 031f 	and.w	r3, r3, #31
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d104      	bne.n	80060c4 <USB_EPStartXfer+0x1a08>
 80060ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80060be:	3b01      	subs	r3, #1
 80060c0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80060c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80060c8:	b29b      	uxth	r3, r3
 80060ca:	029b      	lsls	r3, r3, #10
 80060cc:	b29b      	uxth	r3, r3
 80060ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80060d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80060d6:	b29a      	uxth	r2, r3
 80060d8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80060dc:	801a      	strh	r2, [r3, #0]
 80060de:	e030      	b.n	8006142 <USB_EPStartXfer+0x1a86>
 80060e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060e4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	785b      	ldrb	r3, [r3, #1]
 80060ec:	2b01      	cmp	r3, #1
 80060ee:	d128      	bne.n	8006142 <USB_EPStartXfer+0x1a86>
 80060f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060f4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80060fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006102:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800610c:	b29b      	uxth	r3, r3
 800610e:	461a      	mov	r2, r3
 8006110:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006114:	4413      	add	r3, r2
 8006116:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800611a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800611e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	781b      	ldrb	r3, [r3, #0]
 8006126:	011a      	lsls	r2, r3, #4
 8006128:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800612c:	4413      	add	r3, r2
 800612e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006132:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006136:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800613a:	b29a      	uxth	r2, r3
 800613c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006140:	801a      	strh	r2, [r3, #0]
 8006142:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006146:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006150:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006154:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	785b      	ldrb	r3, [r3, #1]
 800615c:	2b00      	cmp	r3, #0
 800615e:	d178      	bne.n	8006252 <USB_EPStartXfer+0x1b96>
 8006160:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006164:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800616e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006172:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800617c:	b29b      	uxth	r3, r3
 800617e:	461a      	mov	r2, r3
 8006180:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006184:	4413      	add	r3, r2
 8006186:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800618a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800618e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	781b      	ldrb	r3, [r3, #0]
 8006196:	011a      	lsls	r2, r3, #4
 8006198:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800619c:	4413      	add	r3, r2
 800619e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80061a2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80061a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d116      	bne.n	80061dc <USB_EPStartXfer+0x1b20>
 80061ae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80061b2:	881b      	ldrh	r3, [r3, #0]
 80061b4:	b29b      	uxth	r3, r3
 80061b6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80061ba:	b29a      	uxth	r2, r3
 80061bc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80061c0:	801a      	strh	r2, [r3, #0]
 80061c2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80061c6:	881b      	ldrh	r3, [r3, #0]
 80061c8:	b29b      	uxth	r3, r3
 80061ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80061ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80061d2:	b29a      	uxth	r2, r3
 80061d4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80061d8:	801a      	strh	r2, [r3, #0]
 80061da:	e067      	b.n	80062ac <USB_EPStartXfer+0x1bf0>
 80061dc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80061e0:	2b3e      	cmp	r3, #62	; 0x3e
 80061e2:	d818      	bhi.n	8006216 <USB_EPStartXfer+0x1b5a>
 80061e4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80061e8:	085b      	lsrs	r3, r3, #1
 80061ea:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80061ee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80061f2:	f003 0301 	and.w	r3, r3, #1
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d004      	beq.n	8006204 <USB_EPStartXfer+0x1b48>
 80061fa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80061fe:	3301      	adds	r3, #1
 8006200:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006204:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006208:	b29b      	uxth	r3, r3
 800620a:	029b      	lsls	r3, r3, #10
 800620c:	b29a      	uxth	r2, r3
 800620e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006212:	801a      	strh	r2, [r3, #0]
 8006214:	e04a      	b.n	80062ac <USB_EPStartXfer+0x1bf0>
 8006216:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800621a:	095b      	lsrs	r3, r3, #5
 800621c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006220:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006224:	f003 031f 	and.w	r3, r3, #31
 8006228:	2b00      	cmp	r3, #0
 800622a:	d104      	bne.n	8006236 <USB_EPStartXfer+0x1b7a>
 800622c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006230:	3b01      	subs	r3, #1
 8006232:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006236:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800623a:	b29b      	uxth	r3, r3
 800623c:	029b      	lsls	r3, r3, #10
 800623e:	b29b      	uxth	r3, r3
 8006240:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006244:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006248:	b29a      	uxth	r2, r3
 800624a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800624e:	801a      	strh	r2, [r3, #0]
 8006250:	e02c      	b.n	80062ac <USB_EPStartXfer+0x1bf0>
 8006252:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006256:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	785b      	ldrb	r3, [r3, #1]
 800625e:	2b01      	cmp	r3, #1
 8006260:	d124      	bne.n	80062ac <USB_EPStartXfer+0x1bf0>
 8006262:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006266:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006270:	b29b      	uxth	r3, r3
 8006272:	461a      	mov	r2, r3
 8006274:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006278:	4413      	add	r3, r2
 800627a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800627e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006282:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	781b      	ldrb	r3, [r3, #0]
 800628a:	011a      	lsls	r2, r3, #4
 800628c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006290:	4413      	add	r3, r2
 8006292:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006296:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800629a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800629e:	b29a      	uxth	r2, r3
 80062a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80062a4:	801a      	strh	r2, [r3, #0]
 80062a6:	e001      	b.n	80062ac <USB_EPStartXfer+0x1bf0>
      }
      else
      {
        return HAL_ERROR;
 80062a8:	2301      	movs	r3, #1
 80062aa:	e03a      	b.n	8006322 <USB_EPStartXfer+0x1c66>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80062ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062b0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80062b4:	681a      	ldr	r2, [r3, #0]
 80062b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062ba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	781b      	ldrb	r3, [r3, #0]
 80062c2:	009b      	lsls	r3, r3, #2
 80062c4:	4413      	add	r3, r2
 80062c6:	881b      	ldrh	r3, [r3, #0]
 80062c8:	b29b      	uxth	r3, r3
 80062ca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80062ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062d2:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 80062d6:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80062da:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80062de:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 80062e2:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80062e6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80062ea:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 80062ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062f2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80062f6:	681a      	ldr	r2, [r3, #0]
 80062f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062fc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	781b      	ldrb	r3, [r3, #0]
 8006304:	009b      	lsls	r3, r3, #2
 8006306:	441a      	add	r2, r3
 8006308:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800630c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006310:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006314:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006318:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800631c:	b29b      	uxth	r3, r3
 800631e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006320:	2300      	movs	r3, #0
}
 8006322:	4618      	mov	r0, r3
 8006324:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8006328:	46bd      	mov	sp, r7
 800632a:	bd80      	pop	{r7, pc}

0800632c <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800632c:	b480      	push	{r7}
 800632e:	b085      	sub	sp, #20
 8006330:	af00      	add	r7, sp, #0
 8006332:	6078      	str	r0, [r7, #4]
 8006334:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8006336:	683b      	ldr	r3, [r7, #0]
 8006338:	785b      	ldrb	r3, [r3, #1]
 800633a:	2b00      	cmp	r3, #0
 800633c:	d020      	beq.n	8006380 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800633e:	687a      	ldr	r2, [r7, #4]
 8006340:	683b      	ldr	r3, [r7, #0]
 8006342:	781b      	ldrb	r3, [r3, #0]
 8006344:	009b      	lsls	r3, r3, #2
 8006346:	4413      	add	r3, r2
 8006348:	881b      	ldrh	r3, [r3, #0]
 800634a:	b29b      	uxth	r3, r3
 800634c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006350:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006354:	81bb      	strh	r3, [r7, #12]
 8006356:	89bb      	ldrh	r3, [r7, #12]
 8006358:	f083 0310 	eor.w	r3, r3, #16
 800635c:	81bb      	strh	r3, [r7, #12]
 800635e:	687a      	ldr	r2, [r7, #4]
 8006360:	683b      	ldr	r3, [r7, #0]
 8006362:	781b      	ldrb	r3, [r3, #0]
 8006364:	009b      	lsls	r3, r3, #2
 8006366:	441a      	add	r2, r3
 8006368:	89bb      	ldrh	r3, [r7, #12]
 800636a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800636e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006372:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006376:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800637a:	b29b      	uxth	r3, r3
 800637c:	8013      	strh	r3, [r2, #0]
 800637e:	e01f      	b.n	80063c0 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8006380:	687a      	ldr	r2, [r7, #4]
 8006382:	683b      	ldr	r3, [r7, #0]
 8006384:	781b      	ldrb	r3, [r3, #0]
 8006386:	009b      	lsls	r3, r3, #2
 8006388:	4413      	add	r3, r2
 800638a:	881b      	ldrh	r3, [r3, #0]
 800638c:	b29b      	uxth	r3, r3
 800638e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006392:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006396:	81fb      	strh	r3, [r7, #14]
 8006398:	89fb      	ldrh	r3, [r7, #14]
 800639a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800639e:	81fb      	strh	r3, [r7, #14]
 80063a0:	687a      	ldr	r2, [r7, #4]
 80063a2:	683b      	ldr	r3, [r7, #0]
 80063a4:	781b      	ldrb	r3, [r3, #0]
 80063a6:	009b      	lsls	r3, r3, #2
 80063a8:	441a      	add	r2, r3
 80063aa:	89fb      	ldrh	r3, [r7, #14]
 80063ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80063b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80063b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80063b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80063bc:	b29b      	uxth	r3, r3
 80063be:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80063c0:	2300      	movs	r3, #0
}
 80063c2:	4618      	mov	r0, r3
 80063c4:	3714      	adds	r7, #20
 80063c6:	46bd      	mov	sp, r7
 80063c8:	bc80      	pop	{r7}
 80063ca:	4770      	bx	lr

080063cc <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80063cc:	b480      	push	{r7}
 80063ce:	b087      	sub	sp, #28
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	6078      	str	r0, [r7, #4]
 80063d4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80063d6:	683b      	ldr	r3, [r7, #0]
 80063d8:	7b1b      	ldrb	r3, [r3, #12]
 80063da:	2b00      	cmp	r3, #0
 80063dc:	f040 809d 	bne.w	800651a <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 80063e0:	683b      	ldr	r3, [r7, #0]
 80063e2:	785b      	ldrb	r3, [r3, #1]
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d04c      	beq.n	8006482 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80063e8:	687a      	ldr	r2, [r7, #4]
 80063ea:	683b      	ldr	r3, [r7, #0]
 80063ec:	781b      	ldrb	r3, [r3, #0]
 80063ee:	009b      	lsls	r3, r3, #2
 80063f0:	4413      	add	r3, r2
 80063f2:	881b      	ldrh	r3, [r3, #0]
 80063f4:	823b      	strh	r3, [r7, #16]
 80063f6:	8a3b      	ldrh	r3, [r7, #16]
 80063f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d01b      	beq.n	8006438 <USB_EPClearStall+0x6c>
 8006400:	687a      	ldr	r2, [r7, #4]
 8006402:	683b      	ldr	r3, [r7, #0]
 8006404:	781b      	ldrb	r3, [r3, #0]
 8006406:	009b      	lsls	r3, r3, #2
 8006408:	4413      	add	r3, r2
 800640a:	881b      	ldrh	r3, [r3, #0]
 800640c:	b29b      	uxth	r3, r3
 800640e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006412:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006416:	81fb      	strh	r3, [r7, #14]
 8006418:	687a      	ldr	r2, [r7, #4]
 800641a:	683b      	ldr	r3, [r7, #0]
 800641c:	781b      	ldrb	r3, [r3, #0]
 800641e:	009b      	lsls	r3, r3, #2
 8006420:	441a      	add	r2, r3
 8006422:	89fb      	ldrh	r3, [r7, #14]
 8006424:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006428:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800642c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006430:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006434:	b29b      	uxth	r3, r3
 8006436:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006438:	683b      	ldr	r3, [r7, #0]
 800643a:	78db      	ldrb	r3, [r3, #3]
 800643c:	2b01      	cmp	r3, #1
 800643e:	d06c      	beq.n	800651a <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006440:	687a      	ldr	r2, [r7, #4]
 8006442:	683b      	ldr	r3, [r7, #0]
 8006444:	781b      	ldrb	r3, [r3, #0]
 8006446:	009b      	lsls	r3, r3, #2
 8006448:	4413      	add	r3, r2
 800644a:	881b      	ldrh	r3, [r3, #0]
 800644c:	b29b      	uxth	r3, r3
 800644e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006452:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006456:	81bb      	strh	r3, [r7, #12]
 8006458:	89bb      	ldrh	r3, [r7, #12]
 800645a:	f083 0320 	eor.w	r3, r3, #32
 800645e:	81bb      	strh	r3, [r7, #12]
 8006460:	687a      	ldr	r2, [r7, #4]
 8006462:	683b      	ldr	r3, [r7, #0]
 8006464:	781b      	ldrb	r3, [r3, #0]
 8006466:	009b      	lsls	r3, r3, #2
 8006468:	441a      	add	r2, r3
 800646a:	89bb      	ldrh	r3, [r7, #12]
 800646c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006470:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006474:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006478:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800647c:	b29b      	uxth	r3, r3
 800647e:	8013      	strh	r3, [r2, #0]
 8006480:	e04b      	b.n	800651a <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006482:	687a      	ldr	r2, [r7, #4]
 8006484:	683b      	ldr	r3, [r7, #0]
 8006486:	781b      	ldrb	r3, [r3, #0]
 8006488:	009b      	lsls	r3, r3, #2
 800648a:	4413      	add	r3, r2
 800648c:	881b      	ldrh	r3, [r3, #0]
 800648e:	82fb      	strh	r3, [r7, #22]
 8006490:	8afb      	ldrh	r3, [r7, #22]
 8006492:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006496:	2b00      	cmp	r3, #0
 8006498:	d01b      	beq.n	80064d2 <USB_EPClearStall+0x106>
 800649a:	687a      	ldr	r2, [r7, #4]
 800649c:	683b      	ldr	r3, [r7, #0]
 800649e:	781b      	ldrb	r3, [r3, #0]
 80064a0:	009b      	lsls	r3, r3, #2
 80064a2:	4413      	add	r3, r2
 80064a4:	881b      	ldrh	r3, [r3, #0]
 80064a6:	b29b      	uxth	r3, r3
 80064a8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80064ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064b0:	82bb      	strh	r3, [r7, #20]
 80064b2:	687a      	ldr	r2, [r7, #4]
 80064b4:	683b      	ldr	r3, [r7, #0]
 80064b6:	781b      	ldrb	r3, [r3, #0]
 80064b8:	009b      	lsls	r3, r3, #2
 80064ba:	441a      	add	r2, r3
 80064bc:	8abb      	ldrh	r3, [r7, #20]
 80064be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80064c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80064c6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80064ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064ce:	b29b      	uxth	r3, r3
 80064d0:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80064d2:	687a      	ldr	r2, [r7, #4]
 80064d4:	683b      	ldr	r3, [r7, #0]
 80064d6:	781b      	ldrb	r3, [r3, #0]
 80064d8:	009b      	lsls	r3, r3, #2
 80064da:	4413      	add	r3, r2
 80064dc:	881b      	ldrh	r3, [r3, #0]
 80064de:	b29b      	uxth	r3, r3
 80064e0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80064e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064e8:	827b      	strh	r3, [r7, #18]
 80064ea:	8a7b      	ldrh	r3, [r7, #18]
 80064ec:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80064f0:	827b      	strh	r3, [r7, #18]
 80064f2:	8a7b      	ldrh	r3, [r7, #18]
 80064f4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80064f8:	827b      	strh	r3, [r7, #18]
 80064fa:	687a      	ldr	r2, [r7, #4]
 80064fc:	683b      	ldr	r3, [r7, #0]
 80064fe:	781b      	ldrb	r3, [r3, #0]
 8006500:	009b      	lsls	r3, r3, #2
 8006502:	441a      	add	r2, r3
 8006504:	8a7b      	ldrh	r3, [r7, #18]
 8006506:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800650a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800650e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006512:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006516:	b29b      	uxth	r3, r3
 8006518:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800651a:	2300      	movs	r3, #0
}
 800651c:	4618      	mov	r0, r3
 800651e:	371c      	adds	r7, #28
 8006520:	46bd      	mov	sp, r7
 8006522:	bc80      	pop	{r7}
 8006524:	4770      	bx	lr

08006526 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8006526:	b480      	push	{r7}
 8006528:	b083      	sub	sp, #12
 800652a:	af00      	add	r7, sp, #0
 800652c:	6078      	str	r0, [r7, #4]
 800652e:	460b      	mov	r3, r1
 8006530:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8006532:	78fb      	ldrb	r3, [r7, #3]
 8006534:	2b00      	cmp	r3, #0
 8006536:	d103      	bne.n	8006540 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2280      	movs	r2, #128	; 0x80
 800653c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8006540:	2300      	movs	r3, #0
}
 8006542:	4618      	mov	r0, r3
 8006544:	370c      	adds	r7, #12
 8006546:	46bd      	mov	sp, r7
 8006548:	bc80      	pop	{r7}
 800654a:	4770      	bx	lr

0800654c <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800654c:	b480      	push	{r7}
 800654e:	b083      	sub	sp, #12
 8006550:	af00      	add	r7, sp, #0
 8006552:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006554:	2300      	movs	r3, #0
}
 8006556:	4618      	mov	r0, r3
 8006558:	370c      	adds	r7, #12
 800655a:	46bd      	mov	sp, r7
 800655c:	bc80      	pop	{r7}
 800655e:	4770      	bx	lr

08006560 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8006560:	b480      	push	{r7}
 8006562:	b083      	sub	sp, #12
 8006564:	af00      	add	r7, sp, #0
 8006566:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006568:	2300      	movs	r3, #0
}
 800656a:	4618      	mov	r0, r3
 800656c:	370c      	adds	r7, #12
 800656e:	46bd      	mov	sp, r7
 8006570:	bc80      	pop	{r7}
 8006572:	4770      	bx	lr

08006574 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8006574:	b480      	push	{r7}
 8006576:	b085      	sub	sp, #20
 8006578:	af00      	add	r7, sp, #0
 800657a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006582:	b29b      	uxth	r3, r3
 8006584:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8006586:	68fb      	ldr	r3, [r7, #12]
}
 8006588:	4618      	mov	r0, r3
 800658a:	3714      	adds	r7, #20
 800658c:	46bd      	mov	sp, r7
 800658e:	bc80      	pop	{r7}
 8006590:	4770      	bx	lr

08006592 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8006592:	b480      	push	{r7}
 8006594:	b083      	sub	sp, #12
 8006596:	af00      	add	r7, sp, #0
 8006598:	6078      	str	r0, [r7, #4]
 800659a:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800659c:	2300      	movs	r3, #0
}
 800659e:	4618      	mov	r0, r3
 80065a0:	370c      	adds	r7, #12
 80065a2:	46bd      	mov	sp, r7
 80065a4:	bc80      	pop	{r7}
 80065a6:	4770      	bx	lr

080065a8 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80065a8:	b480      	push	{r7}
 80065aa:	b08d      	sub	sp, #52	; 0x34
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	60f8      	str	r0, [r7, #12]
 80065b0:	60b9      	str	r1, [r7, #8]
 80065b2:	4611      	mov	r1, r2
 80065b4:	461a      	mov	r2, r3
 80065b6:	460b      	mov	r3, r1
 80065b8:	80fb      	strh	r3, [r7, #6]
 80065ba:	4613      	mov	r3, r2
 80065bc:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80065be:	88bb      	ldrh	r3, [r7, #4]
 80065c0:	3301      	adds	r3, #1
 80065c2:	085b      	lsrs	r3, r3, #1
 80065c4:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80065ca:	68bb      	ldr	r3, [r7, #8]
 80065cc:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80065ce:	88fb      	ldrh	r3, [r7, #6]
 80065d0:	005a      	lsls	r2, r3, #1
 80065d2:	69fb      	ldr	r3, [r7, #28]
 80065d4:	4413      	add	r3, r2
 80065d6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80065da:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 80065dc:	6a3b      	ldr	r3, [r7, #32]
 80065de:	62fb      	str	r3, [r7, #44]	; 0x2c
 80065e0:	e01e      	b.n	8006620 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 80065e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065e4:	781b      	ldrb	r3, [r3, #0]
 80065e6:	61bb      	str	r3, [r7, #24]
    pBuf++;
 80065e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065ea:	3301      	adds	r3, #1
 80065ec:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 80065ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065f0:	781b      	ldrb	r3, [r3, #0]
 80065f2:	b29b      	uxth	r3, r3
 80065f4:	021b      	lsls	r3, r3, #8
 80065f6:	b29b      	uxth	r3, r3
 80065f8:	461a      	mov	r2, r3
 80065fa:	69bb      	ldr	r3, [r7, #24]
 80065fc:	4313      	orrs	r3, r2
 80065fe:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8006600:	697b      	ldr	r3, [r7, #20]
 8006602:	b29a      	uxth	r2, r3
 8006604:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006606:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8006608:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800660a:	3302      	adds	r3, #2
 800660c:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 800660e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006610:	3302      	adds	r3, #2
 8006612:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8006614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006616:	3301      	adds	r3, #1
 8006618:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 800661a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800661c:	3b01      	subs	r3, #1
 800661e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006620:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006622:	2b00      	cmp	r3, #0
 8006624:	d1dd      	bne.n	80065e2 <USB_WritePMA+0x3a>
  }
}
 8006626:	bf00      	nop
 8006628:	bf00      	nop
 800662a:	3734      	adds	r7, #52	; 0x34
 800662c:	46bd      	mov	sp, r7
 800662e:	bc80      	pop	{r7}
 8006630:	4770      	bx	lr

08006632 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006632:	b480      	push	{r7}
 8006634:	b08b      	sub	sp, #44	; 0x2c
 8006636:	af00      	add	r7, sp, #0
 8006638:	60f8      	str	r0, [r7, #12]
 800663a:	60b9      	str	r1, [r7, #8]
 800663c:	4611      	mov	r1, r2
 800663e:	461a      	mov	r2, r3
 8006640:	460b      	mov	r3, r1
 8006642:	80fb      	strh	r3, [r7, #6]
 8006644:	4613      	mov	r3, r2
 8006646:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8006648:	88bb      	ldrh	r3, [r7, #4]
 800664a:	085b      	lsrs	r3, r3, #1
 800664c:	b29b      	uxth	r3, r3
 800664e:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006654:	68bb      	ldr	r3, [r7, #8]
 8006656:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006658:	88fb      	ldrh	r3, [r7, #6]
 800665a:	005a      	lsls	r2, r3, #1
 800665c:	697b      	ldr	r3, [r7, #20]
 800665e:	4413      	add	r3, r2
 8006660:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006664:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8006666:	69bb      	ldr	r3, [r7, #24]
 8006668:	627b      	str	r3, [r7, #36]	; 0x24
 800666a:	e01b      	b.n	80066a4 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 800666c:	6a3b      	ldr	r3, [r7, #32]
 800666e:	881b      	ldrh	r3, [r3, #0]
 8006670:	b29b      	uxth	r3, r3
 8006672:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8006674:	6a3b      	ldr	r3, [r7, #32]
 8006676:	3302      	adds	r3, #2
 8006678:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800667a:	693b      	ldr	r3, [r7, #16]
 800667c:	b2da      	uxtb	r2, r3
 800667e:	69fb      	ldr	r3, [r7, #28]
 8006680:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006682:	69fb      	ldr	r3, [r7, #28]
 8006684:	3301      	adds	r3, #1
 8006686:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8006688:	693b      	ldr	r3, [r7, #16]
 800668a:	0a1b      	lsrs	r3, r3, #8
 800668c:	b2da      	uxtb	r2, r3
 800668e:	69fb      	ldr	r3, [r7, #28]
 8006690:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006692:	69fb      	ldr	r3, [r7, #28]
 8006694:	3301      	adds	r3, #1
 8006696:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8006698:	6a3b      	ldr	r3, [r7, #32]
 800669a:	3302      	adds	r3, #2
 800669c:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 800669e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066a0:	3b01      	subs	r3, #1
 80066a2:	627b      	str	r3, [r7, #36]	; 0x24
 80066a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d1e0      	bne.n	800666c <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 80066aa:	88bb      	ldrh	r3, [r7, #4]
 80066ac:	f003 0301 	and.w	r3, r3, #1
 80066b0:	b29b      	uxth	r3, r3
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d007      	beq.n	80066c6 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 80066b6:	6a3b      	ldr	r3, [r7, #32]
 80066b8:	881b      	ldrh	r3, [r3, #0]
 80066ba:	b29b      	uxth	r3, r3
 80066bc:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80066be:	693b      	ldr	r3, [r7, #16]
 80066c0:	b2da      	uxtb	r2, r3
 80066c2:	69fb      	ldr	r3, [r7, #28]
 80066c4:	701a      	strb	r2, [r3, #0]
  }
}
 80066c6:	bf00      	nop
 80066c8:	372c      	adds	r7, #44	; 0x2c
 80066ca:	46bd      	mov	sp, r7
 80066cc:	bc80      	pop	{r7}
 80066ce:	4770      	bx	lr

080066d0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80066d0:	b580      	push	{r7, lr}
 80066d2:	b084      	sub	sp, #16
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	6078      	str	r0, [r7, #4]
 80066d8:	460b      	mov	r3, r1
 80066da:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80066dc:	2300      	movs	r3, #0
 80066de:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	7c1b      	ldrb	r3, [r3, #16]
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d115      	bne.n	8006714 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80066e8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80066ec:	2202      	movs	r2, #2
 80066ee:	2181      	movs	r1, #129	; 0x81
 80066f0:	6878      	ldr	r0, [r7, #4]
 80066f2:	f001 feca 	bl	800848a <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	2201      	movs	r2, #1
 80066fa:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80066fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006700:	2202      	movs	r2, #2
 8006702:	2101      	movs	r1, #1
 8006704:	6878      	ldr	r0, [r7, #4]
 8006706:	f001 fec0 	bl	800848a <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	2201      	movs	r2, #1
 800670e:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8006712:	e012      	b.n	800673a <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006714:	2340      	movs	r3, #64	; 0x40
 8006716:	2202      	movs	r2, #2
 8006718:	2181      	movs	r1, #129	; 0x81
 800671a:	6878      	ldr	r0, [r7, #4]
 800671c:	f001 feb5 	bl	800848a <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2201      	movs	r2, #1
 8006724:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006726:	2340      	movs	r3, #64	; 0x40
 8006728:	2202      	movs	r2, #2
 800672a:	2101      	movs	r1, #1
 800672c:	6878      	ldr	r0, [r7, #4]
 800672e:	f001 feac 	bl	800848a <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	2201      	movs	r2, #1
 8006736:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800673a:	2308      	movs	r3, #8
 800673c:	2203      	movs	r2, #3
 800673e:	2182      	movs	r1, #130	; 0x82
 8006740:	6878      	ldr	r0, [r7, #4]
 8006742:	f001 fea2 	bl	800848a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	2201      	movs	r2, #1
 800674a:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800674c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006750:	f001 ffc2 	bl	80086d8 <USBD_static_malloc>
 8006754:	4602      	mov	r2, r0
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006762:	2b00      	cmp	r3, #0
 8006764:	d102      	bne.n	800676c <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8006766:	2301      	movs	r3, #1
 8006768:	73fb      	strb	r3, [r7, #15]
 800676a:	e026      	b.n	80067ba <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006772:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800677e:	68bb      	ldr	r3, [r7, #8]
 8006780:	2200      	movs	r2, #0
 8006782:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8006786:	68bb      	ldr	r3, [r7, #8]
 8006788:	2200      	movs	r2, #0
 800678a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	7c1b      	ldrb	r3, [r3, #16]
 8006792:	2b00      	cmp	r3, #0
 8006794:	d109      	bne.n	80067aa <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006796:	68bb      	ldr	r3, [r7, #8]
 8006798:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800679c:	f44f 7300 	mov.w	r3, #512	; 0x200
 80067a0:	2101      	movs	r1, #1
 80067a2:	6878      	ldr	r0, [r7, #4]
 80067a4:	f001 ff62 	bl	800866c <USBD_LL_PrepareReceive>
 80067a8:	e007      	b.n	80067ba <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80067aa:	68bb      	ldr	r3, [r7, #8]
 80067ac:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80067b0:	2340      	movs	r3, #64	; 0x40
 80067b2:	2101      	movs	r1, #1
 80067b4:	6878      	ldr	r0, [r7, #4]
 80067b6:	f001 ff59 	bl	800866c <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 80067ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80067bc:	4618      	mov	r0, r3
 80067be:	3710      	adds	r7, #16
 80067c0:	46bd      	mov	sp, r7
 80067c2:	bd80      	pop	{r7, pc}

080067c4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80067c4:	b580      	push	{r7, lr}
 80067c6:	b084      	sub	sp, #16
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	6078      	str	r0, [r7, #4]
 80067cc:	460b      	mov	r3, r1
 80067ce:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80067d0:	2300      	movs	r3, #0
 80067d2:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80067d4:	2181      	movs	r1, #129	; 0x81
 80067d6:	6878      	ldr	r0, [r7, #4]
 80067d8:	f001 fe7d 	bl	80084d6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	2200      	movs	r2, #0
 80067e0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80067e2:	2101      	movs	r1, #1
 80067e4:	6878      	ldr	r0, [r7, #4]
 80067e6:	f001 fe76 	bl	80084d6 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	2200      	movs	r2, #0
 80067ee:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80067f2:	2182      	movs	r1, #130	; 0x82
 80067f4:	6878      	ldr	r0, [r7, #4]
 80067f6:	f001 fe6e 	bl	80084d6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	2200      	movs	r2, #0
 80067fe:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006806:	2b00      	cmp	r3, #0
 8006808:	d00e      	beq.n	8006828 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006810:	685b      	ldr	r3, [r3, #4]
 8006812:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800681a:	4618      	mov	r0, r3
 800681c:	f001 ff68 	bl	80086f0 <USBD_static_free>
    pdev->pClassData = NULL;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	2200      	movs	r2, #0
 8006824:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8006828:	7bfb      	ldrb	r3, [r7, #15]
}
 800682a:	4618      	mov	r0, r3
 800682c:	3710      	adds	r7, #16
 800682e:	46bd      	mov	sp, r7
 8006830:	bd80      	pop	{r7, pc}

08006832 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8006832:	b580      	push	{r7, lr}
 8006834:	b086      	sub	sp, #24
 8006836:	af00      	add	r7, sp, #0
 8006838:	6078      	str	r0, [r7, #4]
 800683a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006842:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8006844:	2300      	movs	r3, #0
 8006846:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8006848:	2300      	movs	r3, #0
 800684a:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800684c:	2300      	movs	r3, #0
 800684e:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006850:	683b      	ldr	r3, [r7, #0]
 8006852:	781b      	ldrb	r3, [r3, #0]
 8006854:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006858:	2b00      	cmp	r3, #0
 800685a:	d039      	beq.n	80068d0 <USBD_CDC_Setup+0x9e>
 800685c:	2b20      	cmp	r3, #32
 800685e:	d17f      	bne.n	8006960 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8006860:	683b      	ldr	r3, [r7, #0]
 8006862:	88db      	ldrh	r3, [r3, #6]
 8006864:	2b00      	cmp	r3, #0
 8006866:	d029      	beq.n	80068bc <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8006868:	683b      	ldr	r3, [r7, #0]
 800686a:	781b      	ldrb	r3, [r3, #0]
 800686c:	b25b      	sxtb	r3, r3
 800686e:	2b00      	cmp	r3, #0
 8006870:	da11      	bge.n	8006896 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006878:	689b      	ldr	r3, [r3, #8]
 800687a:	683a      	ldr	r2, [r7, #0]
 800687c:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 800687e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006880:	683a      	ldr	r2, [r7, #0]
 8006882:	88d2      	ldrh	r2, [r2, #6]
 8006884:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006886:	6939      	ldr	r1, [r7, #16]
 8006888:	683b      	ldr	r3, [r7, #0]
 800688a:	88db      	ldrh	r3, [r3, #6]
 800688c:	461a      	mov	r2, r3
 800688e:	6878      	ldr	r0, [r7, #4]
 8006890:	f001 fa09 	bl	8007ca6 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8006894:	e06b      	b.n	800696e <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8006896:	683b      	ldr	r3, [r7, #0]
 8006898:	785a      	ldrb	r2, [r3, #1]
 800689a:	693b      	ldr	r3, [r7, #16]
 800689c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80068a0:	683b      	ldr	r3, [r7, #0]
 80068a2:	88db      	ldrh	r3, [r3, #6]
 80068a4:	b2da      	uxtb	r2, r3
 80068a6:	693b      	ldr	r3, [r7, #16]
 80068a8:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80068ac:	6939      	ldr	r1, [r7, #16]
 80068ae:	683b      	ldr	r3, [r7, #0]
 80068b0:	88db      	ldrh	r3, [r3, #6]
 80068b2:	461a      	mov	r2, r3
 80068b4:	6878      	ldr	r0, [r7, #4]
 80068b6:	f001 fa24 	bl	8007d02 <USBD_CtlPrepareRx>
      break;
 80068ba:	e058      	b.n	800696e <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80068c2:	689b      	ldr	r3, [r3, #8]
 80068c4:	683a      	ldr	r2, [r7, #0]
 80068c6:	7850      	ldrb	r0, [r2, #1]
 80068c8:	2200      	movs	r2, #0
 80068ca:	6839      	ldr	r1, [r7, #0]
 80068cc:	4798      	blx	r3
      break;
 80068ce:	e04e      	b.n	800696e <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80068d0:	683b      	ldr	r3, [r7, #0]
 80068d2:	785b      	ldrb	r3, [r3, #1]
 80068d4:	2b0b      	cmp	r3, #11
 80068d6:	d02e      	beq.n	8006936 <USBD_CDC_Setup+0x104>
 80068d8:	2b0b      	cmp	r3, #11
 80068da:	dc38      	bgt.n	800694e <USBD_CDC_Setup+0x11c>
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d002      	beq.n	80068e6 <USBD_CDC_Setup+0xb4>
 80068e0:	2b0a      	cmp	r3, #10
 80068e2:	d014      	beq.n	800690e <USBD_CDC_Setup+0xdc>
 80068e4:	e033      	b.n	800694e <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80068ec:	2b03      	cmp	r3, #3
 80068ee:	d107      	bne.n	8006900 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 80068f0:	f107 030c 	add.w	r3, r7, #12
 80068f4:	2202      	movs	r2, #2
 80068f6:	4619      	mov	r1, r3
 80068f8:	6878      	ldr	r0, [r7, #4]
 80068fa:	f001 f9d4 	bl	8007ca6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80068fe:	e02e      	b.n	800695e <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8006900:	6839      	ldr	r1, [r7, #0]
 8006902:	6878      	ldr	r0, [r7, #4]
 8006904:	f001 f965 	bl	8007bd2 <USBD_CtlError>
            ret = USBD_FAIL;
 8006908:	2302      	movs	r3, #2
 800690a:	75fb      	strb	r3, [r7, #23]
          break;
 800690c:	e027      	b.n	800695e <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006914:	2b03      	cmp	r3, #3
 8006916:	d107      	bne.n	8006928 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8006918:	f107 030f 	add.w	r3, r7, #15
 800691c:	2201      	movs	r2, #1
 800691e:	4619      	mov	r1, r3
 8006920:	6878      	ldr	r0, [r7, #4]
 8006922:	f001 f9c0 	bl	8007ca6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006926:	e01a      	b.n	800695e <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8006928:	6839      	ldr	r1, [r7, #0]
 800692a:	6878      	ldr	r0, [r7, #4]
 800692c:	f001 f951 	bl	8007bd2 <USBD_CtlError>
            ret = USBD_FAIL;
 8006930:	2302      	movs	r3, #2
 8006932:	75fb      	strb	r3, [r7, #23]
          break;
 8006934:	e013      	b.n	800695e <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800693c:	2b03      	cmp	r3, #3
 800693e:	d00d      	beq.n	800695c <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8006940:	6839      	ldr	r1, [r7, #0]
 8006942:	6878      	ldr	r0, [r7, #4]
 8006944:	f001 f945 	bl	8007bd2 <USBD_CtlError>
            ret = USBD_FAIL;
 8006948:	2302      	movs	r3, #2
 800694a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800694c:	e006      	b.n	800695c <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 800694e:	6839      	ldr	r1, [r7, #0]
 8006950:	6878      	ldr	r0, [r7, #4]
 8006952:	f001 f93e 	bl	8007bd2 <USBD_CtlError>
          ret = USBD_FAIL;
 8006956:	2302      	movs	r3, #2
 8006958:	75fb      	strb	r3, [r7, #23]
          break;
 800695a:	e000      	b.n	800695e <USBD_CDC_Setup+0x12c>
          break;
 800695c:	bf00      	nop
      }
      break;
 800695e:	e006      	b.n	800696e <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8006960:	6839      	ldr	r1, [r7, #0]
 8006962:	6878      	ldr	r0, [r7, #4]
 8006964:	f001 f935 	bl	8007bd2 <USBD_CtlError>
      ret = USBD_FAIL;
 8006968:	2302      	movs	r3, #2
 800696a:	75fb      	strb	r3, [r7, #23]
      break;
 800696c:	bf00      	nop
  }

  return ret;
 800696e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006970:	4618      	mov	r0, r3
 8006972:	3718      	adds	r7, #24
 8006974:	46bd      	mov	sp, r7
 8006976:	bd80      	pop	{r7, pc}

08006978 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006978:	b580      	push	{r7, lr}
 800697a:	b084      	sub	sp, #16
 800697c:	af00      	add	r7, sp, #0
 800697e:	6078      	str	r0, [r7, #4]
 8006980:	460b      	mov	r3, r1
 8006982:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800698a:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006992:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800699a:	2b00      	cmp	r3, #0
 800699c:	d03a      	beq.n	8006a14 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800699e:	78fa      	ldrb	r2, [r7, #3]
 80069a0:	6879      	ldr	r1, [r7, #4]
 80069a2:	4613      	mov	r3, r2
 80069a4:	009b      	lsls	r3, r3, #2
 80069a6:	4413      	add	r3, r2
 80069a8:	009b      	lsls	r3, r3, #2
 80069aa:	440b      	add	r3, r1
 80069ac:	331c      	adds	r3, #28
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d029      	beq.n	8006a08 <USBD_CDC_DataIn+0x90>
 80069b4:	78fa      	ldrb	r2, [r7, #3]
 80069b6:	6879      	ldr	r1, [r7, #4]
 80069b8:	4613      	mov	r3, r2
 80069ba:	009b      	lsls	r3, r3, #2
 80069bc:	4413      	add	r3, r2
 80069be:	009b      	lsls	r3, r3, #2
 80069c0:	440b      	add	r3, r1
 80069c2:	331c      	adds	r3, #28
 80069c4:	681a      	ldr	r2, [r3, #0]
 80069c6:	78f9      	ldrb	r1, [r7, #3]
 80069c8:	68b8      	ldr	r0, [r7, #8]
 80069ca:	460b      	mov	r3, r1
 80069cc:	009b      	lsls	r3, r3, #2
 80069ce:	440b      	add	r3, r1
 80069d0:	00db      	lsls	r3, r3, #3
 80069d2:	4403      	add	r3, r0
 80069d4:	3338      	adds	r3, #56	; 0x38
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	fbb2 f1f3 	udiv	r1, r2, r3
 80069dc:	fb01 f303 	mul.w	r3, r1, r3
 80069e0:	1ad3      	subs	r3, r2, r3
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d110      	bne.n	8006a08 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 80069e6:	78fa      	ldrb	r2, [r7, #3]
 80069e8:	6879      	ldr	r1, [r7, #4]
 80069ea:	4613      	mov	r3, r2
 80069ec:	009b      	lsls	r3, r3, #2
 80069ee:	4413      	add	r3, r2
 80069f0:	009b      	lsls	r3, r3, #2
 80069f2:	440b      	add	r3, r1
 80069f4:	331c      	adds	r3, #28
 80069f6:	2200      	movs	r2, #0
 80069f8:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80069fa:	78f9      	ldrb	r1, [r7, #3]
 80069fc:	2300      	movs	r3, #0
 80069fe:	2200      	movs	r2, #0
 8006a00:	6878      	ldr	r0, [r7, #4]
 8006a02:	f001 fe10 	bl	8008626 <USBD_LL_Transmit>
 8006a06:	e003      	b.n	8006a10 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	2200      	movs	r2, #0
 8006a0c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8006a10:	2300      	movs	r3, #0
 8006a12:	e000      	b.n	8006a16 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8006a14:	2302      	movs	r3, #2
  }
}
 8006a16:	4618      	mov	r0, r3
 8006a18:	3710      	adds	r7, #16
 8006a1a:	46bd      	mov	sp, r7
 8006a1c:	bd80      	pop	{r7, pc}

08006a1e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006a1e:	b580      	push	{r7, lr}
 8006a20:	b084      	sub	sp, #16
 8006a22:	af00      	add	r7, sp, #0
 8006a24:	6078      	str	r0, [r7, #4]
 8006a26:	460b      	mov	r3, r1
 8006a28:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a30:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006a32:	78fb      	ldrb	r3, [r7, #3]
 8006a34:	4619      	mov	r1, r3
 8006a36:	6878      	ldr	r0, [r7, #4]
 8006a38:	f001 fe3b 	bl	80086b2 <USBD_LL_GetRxDataSize>
 8006a3c:	4602      	mov	r2, r0
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d00d      	beq.n	8006a6a <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006a54:	68db      	ldr	r3, [r3, #12]
 8006a56:	68fa      	ldr	r2, [r7, #12]
 8006a58:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006a5c:	68fa      	ldr	r2, [r7, #12]
 8006a5e:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006a62:	4611      	mov	r1, r2
 8006a64:	4798      	blx	r3

    return USBD_OK;
 8006a66:	2300      	movs	r3, #0
 8006a68:	e000      	b.n	8006a6c <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8006a6a:	2302      	movs	r3, #2
  }
}
 8006a6c:	4618      	mov	r0, r3
 8006a6e:	3710      	adds	r7, #16
 8006a70:	46bd      	mov	sp, r7
 8006a72:	bd80      	pop	{r7, pc}

08006a74 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006a74:	b580      	push	{r7, lr}
 8006a76:	b084      	sub	sp, #16
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a82:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d015      	beq.n	8006aba <USBD_CDC_EP0_RxReady+0x46>
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006a94:	2bff      	cmp	r3, #255	; 0xff
 8006a96:	d010      	beq.n	8006aba <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006a9e:	689b      	ldr	r3, [r3, #8]
 8006aa0:	68fa      	ldr	r2, [r7, #12]
 8006aa2:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8006aa6:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8006aa8:	68fa      	ldr	r2, [r7, #12]
 8006aaa:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006aae:	b292      	uxth	r2, r2
 8006ab0:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	22ff      	movs	r2, #255	; 0xff
 8006ab6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8006aba:	2300      	movs	r3, #0
}
 8006abc:	4618      	mov	r0, r3
 8006abe:	3710      	adds	r7, #16
 8006ac0:	46bd      	mov	sp, r7
 8006ac2:	bd80      	pop	{r7, pc}

08006ac4 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006ac4:	b480      	push	{r7}
 8006ac6:	b083      	sub	sp, #12
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	2243      	movs	r2, #67	; 0x43
 8006ad0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8006ad2:	4b03      	ldr	r3, [pc, #12]	; (8006ae0 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8006ad4:	4618      	mov	r0, r3
 8006ad6:	370c      	adds	r7, #12
 8006ad8:	46bd      	mov	sp, r7
 8006ada:	bc80      	pop	{r7}
 8006adc:	4770      	bx	lr
 8006ade:	bf00      	nop
 8006ae0:	20000094 	.word	0x20000094

08006ae4 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006ae4:	b480      	push	{r7}
 8006ae6:	b083      	sub	sp, #12
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	2243      	movs	r2, #67	; 0x43
 8006af0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8006af2:	4b03      	ldr	r3, [pc, #12]	; (8006b00 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8006af4:	4618      	mov	r0, r3
 8006af6:	370c      	adds	r7, #12
 8006af8:	46bd      	mov	sp, r7
 8006afa:	bc80      	pop	{r7}
 8006afc:	4770      	bx	lr
 8006afe:	bf00      	nop
 8006b00:	20000050 	.word	0x20000050

08006b04 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006b04:	b480      	push	{r7}
 8006b06:	b083      	sub	sp, #12
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	2243      	movs	r2, #67	; 0x43
 8006b10:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8006b12:	4b03      	ldr	r3, [pc, #12]	; (8006b20 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8006b14:	4618      	mov	r0, r3
 8006b16:	370c      	adds	r7, #12
 8006b18:	46bd      	mov	sp, r7
 8006b1a:	bc80      	pop	{r7}
 8006b1c:	4770      	bx	lr
 8006b1e:	bf00      	nop
 8006b20:	200000d8 	.word	0x200000d8

08006b24 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006b24:	b480      	push	{r7}
 8006b26:	b083      	sub	sp, #12
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	220a      	movs	r2, #10
 8006b30:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8006b32:	4b03      	ldr	r3, [pc, #12]	; (8006b40 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006b34:	4618      	mov	r0, r3
 8006b36:	370c      	adds	r7, #12
 8006b38:	46bd      	mov	sp, r7
 8006b3a:	bc80      	pop	{r7}
 8006b3c:	4770      	bx	lr
 8006b3e:	bf00      	nop
 8006b40:	2000000c 	.word	0x2000000c

08006b44 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8006b44:	b480      	push	{r7}
 8006b46:	b085      	sub	sp, #20
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	6078      	str	r0, [r7, #4]
 8006b4c:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8006b4e:	2302      	movs	r3, #2
 8006b50:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8006b52:	683b      	ldr	r3, [r7, #0]
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d005      	beq.n	8006b64 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	683a      	ldr	r2, [r7, #0]
 8006b5c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8006b60:	2300      	movs	r3, #0
 8006b62:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8006b64:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b66:	4618      	mov	r0, r3
 8006b68:	3714      	adds	r7, #20
 8006b6a:	46bd      	mov	sp, r7
 8006b6c:	bc80      	pop	{r7}
 8006b6e:	4770      	bx	lr

08006b70 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8006b70:	b480      	push	{r7}
 8006b72:	b087      	sub	sp, #28
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	60f8      	str	r0, [r7, #12]
 8006b78:	60b9      	str	r1, [r7, #8]
 8006b7a:	4613      	mov	r3, r2
 8006b7c:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b84:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8006b86:	697b      	ldr	r3, [r7, #20]
 8006b88:	68ba      	ldr	r2, [r7, #8]
 8006b8a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006b8e:	88fa      	ldrh	r2, [r7, #6]
 8006b90:	697b      	ldr	r3, [r7, #20]
 8006b92:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8006b96:	2300      	movs	r3, #0
}
 8006b98:	4618      	mov	r0, r3
 8006b9a:	371c      	adds	r7, #28
 8006b9c:	46bd      	mov	sp, r7
 8006b9e:	bc80      	pop	{r7}
 8006ba0:	4770      	bx	lr

08006ba2 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8006ba2:	b480      	push	{r7}
 8006ba4:	b085      	sub	sp, #20
 8006ba6:	af00      	add	r7, sp, #0
 8006ba8:	6078      	str	r0, [r7, #4]
 8006baa:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006bb2:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	683a      	ldr	r2, [r7, #0]
 8006bb8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8006bbc:	2300      	movs	r3, #0
}
 8006bbe:	4618      	mov	r0, r3
 8006bc0:	3714      	adds	r7, #20
 8006bc2:	46bd      	mov	sp, r7
 8006bc4:	bc80      	pop	{r7}
 8006bc6:	4770      	bx	lr

08006bc8 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006bc8:	b580      	push	{r7, lr}
 8006bca:	b084      	sub	sp, #16
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006bd6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d01c      	beq.n	8006c1c <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d115      	bne.n	8006c18 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	2201      	movs	r2, #1
 8006bf0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8006c0a:	b29b      	uxth	r3, r3
 8006c0c:	2181      	movs	r1, #129	; 0x81
 8006c0e:	6878      	ldr	r0, [r7, #4]
 8006c10:	f001 fd09 	bl	8008626 <USBD_LL_Transmit>

      return USBD_OK;
 8006c14:	2300      	movs	r3, #0
 8006c16:	e002      	b.n	8006c1e <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8006c18:	2301      	movs	r3, #1
 8006c1a:	e000      	b.n	8006c1e <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8006c1c:	2302      	movs	r3, #2
  }
}
 8006c1e:	4618      	mov	r0, r3
 8006c20:	3710      	adds	r7, #16
 8006c22:	46bd      	mov	sp, r7
 8006c24:	bd80      	pop	{r7, pc}

08006c26 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006c26:	b580      	push	{r7, lr}
 8006c28:	b084      	sub	sp, #16
 8006c2a:	af00      	add	r7, sp, #0
 8006c2c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c34:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d017      	beq.n	8006c70 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	7c1b      	ldrb	r3, [r3, #16]
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d109      	bne.n	8006c5c <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006c4e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006c52:	2101      	movs	r1, #1
 8006c54:	6878      	ldr	r0, [r7, #4]
 8006c56:	f001 fd09 	bl	800866c <USBD_LL_PrepareReceive>
 8006c5a:	e007      	b.n	8006c6c <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006c62:	2340      	movs	r3, #64	; 0x40
 8006c64:	2101      	movs	r1, #1
 8006c66:	6878      	ldr	r0, [r7, #4]
 8006c68:	f001 fd00 	bl	800866c <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8006c6c:	2300      	movs	r3, #0
 8006c6e:	e000      	b.n	8006c72 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8006c70:	2302      	movs	r3, #2
  }
}
 8006c72:	4618      	mov	r0, r3
 8006c74:	3710      	adds	r7, #16
 8006c76:	46bd      	mov	sp, r7
 8006c78:	bd80      	pop	{r7, pc}

08006c7a <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006c7a:	b580      	push	{r7, lr}
 8006c7c:	b084      	sub	sp, #16
 8006c7e:	af00      	add	r7, sp, #0
 8006c80:	60f8      	str	r0, [r7, #12]
 8006c82:	60b9      	str	r1, [r7, #8]
 8006c84:	4613      	mov	r3, r2
 8006c86:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d101      	bne.n	8006c92 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006c8e:	2302      	movs	r3, #2
 8006c90:	e01a      	b.n	8006cc8 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d003      	beq.n	8006ca4 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	2200      	movs	r2, #0
 8006ca0:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006ca4:	68bb      	ldr	r3, [r7, #8]
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d003      	beq.n	8006cb2 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	68ba      	ldr	r2, [r7, #8]
 8006cae:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	2201      	movs	r2, #1
 8006cb6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	79fa      	ldrb	r2, [r7, #7]
 8006cbe:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8006cc0:	68f8      	ldr	r0, [r7, #12]
 8006cc2:	f001 fb6d 	bl	80083a0 <USBD_LL_Init>

  return USBD_OK;
 8006cc6:	2300      	movs	r3, #0
}
 8006cc8:	4618      	mov	r0, r3
 8006cca:	3710      	adds	r7, #16
 8006ccc:	46bd      	mov	sp, r7
 8006cce:	bd80      	pop	{r7, pc}

08006cd0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006cd0:	b480      	push	{r7}
 8006cd2:	b085      	sub	sp, #20
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	6078      	str	r0, [r7, #4]
 8006cd8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8006cda:	2300      	movs	r3, #0
 8006cdc:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8006cde:	683b      	ldr	r3, [r7, #0]
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d006      	beq.n	8006cf2 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	683a      	ldr	r2, [r7, #0]
 8006ce8:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8006cec:	2300      	movs	r3, #0
 8006cee:	73fb      	strb	r3, [r7, #15]
 8006cf0:	e001      	b.n	8006cf6 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8006cf2:	2302      	movs	r3, #2
 8006cf4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006cf6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cf8:	4618      	mov	r0, r3
 8006cfa:	3714      	adds	r7, #20
 8006cfc:	46bd      	mov	sp, r7
 8006cfe:	bc80      	pop	{r7}
 8006d00:	4770      	bx	lr

08006d02 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006d02:	b580      	push	{r7, lr}
 8006d04:	b082      	sub	sp, #8
 8006d06:	af00      	add	r7, sp, #0
 8006d08:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8006d0a:	6878      	ldr	r0, [r7, #4]
 8006d0c:	f001 fba2 	bl	8008454 <USBD_LL_Start>

  return USBD_OK;
 8006d10:	2300      	movs	r3, #0
}
 8006d12:	4618      	mov	r0, r3
 8006d14:	3708      	adds	r7, #8
 8006d16:	46bd      	mov	sp, r7
 8006d18:	bd80      	pop	{r7, pc}

08006d1a <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8006d1a:	b480      	push	{r7}
 8006d1c:	b083      	sub	sp, #12
 8006d1e:	af00      	add	r7, sp, #0
 8006d20:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006d22:	2300      	movs	r3, #0
}
 8006d24:	4618      	mov	r0, r3
 8006d26:	370c      	adds	r7, #12
 8006d28:	46bd      	mov	sp, r7
 8006d2a:	bc80      	pop	{r7}
 8006d2c:	4770      	bx	lr

08006d2e <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006d2e:	b580      	push	{r7, lr}
 8006d30:	b084      	sub	sp, #16
 8006d32:	af00      	add	r7, sp, #0
 8006d34:	6078      	str	r0, [r7, #4]
 8006d36:	460b      	mov	r3, r1
 8006d38:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006d3a:	2302      	movs	r3, #2
 8006d3c:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d00c      	beq.n	8006d62 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	78fa      	ldrb	r2, [r7, #3]
 8006d52:	4611      	mov	r1, r2
 8006d54:	6878      	ldr	r0, [r7, #4]
 8006d56:	4798      	blx	r3
 8006d58:	4603      	mov	r3, r0
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d101      	bne.n	8006d62 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8006d5e:	2300      	movs	r3, #0
 8006d60:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8006d62:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d64:	4618      	mov	r0, r3
 8006d66:	3710      	adds	r7, #16
 8006d68:	46bd      	mov	sp, r7
 8006d6a:	bd80      	pop	{r7, pc}

08006d6c <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006d6c:	b580      	push	{r7, lr}
 8006d6e:	b082      	sub	sp, #8
 8006d70:	af00      	add	r7, sp, #0
 8006d72:	6078      	str	r0, [r7, #4]
 8006d74:	460b      	mov	r3, r1
 8006d76:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d7e:	685b      	ldr	r3, [r3, #4]
 8006d80:	78fa      	ldrb	r2, [r7, #3]
 8006d82:	4611      	mov	r1, r2
 8006d84:	6878      	ldr	r0, [r7, #4]
 8006d86:	4798      	blx	r3

  return USBD_OK;
 8006d88:	2300      	movs	r3, #0
}
 8006d8a:	4618      	mov	r0, r3
 8006d8c:	3708      	adds	r7, #8
 8006d8e:	46bd      	mov	sp, r7
 8006d90:	bd80      	pop	{r7, pc}

08006d92 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006d92:	b580      	push	{r7, lr}
 8006d94:	b082      	sub	sp, #8
 8006d96:	af00      	add	r7, sp, #0
 8006d98:	6078      	str	r0, [r7, #4]
 8006d9a:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006da2:	6839      	ldr	r1, [r7, #0]
 8006da4:	4618      	mov	r0, r3
 8006da6:	f000 fed8 	bl	8007b5a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	2201      	movs	r2, #1
 8006dae:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006db8:	461a      	mov	r2, r3
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006dc6:	f003 031f 	and.w	r3, r3, #31
 8006dca:	2b02      	cmp	r3, #2
 8006dcc:	d016      	beq.n	8006dfc <USBD_LL_SetupStage+0x6a>
 8006dce:	2b02      	cmp	r3, #2
 8006dd0:	d81c      	bhi.n	8006e0c <USBD_LL_SetupStage+0x7a>
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d002      	beq.n	8006ddc <USBD_LL_SetupStage+0x4a>
 8006dd6:	2b01      	cmp	r3, #1
 8006dd8:	d008      	beq.n	8006dec <USBD_LL_SetupStage+0x5a>
 8006dda:	e017      	b.n	8006e0c <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006de2:	4619      	mov	r1, r3
 8006de4:	6878      	ldr	r0, [r7, #4]
 8006de6:	f000 f9cb 	bl	8007180 <USBD_StdDevReq>
      break;
 8006dea:	e01a      	b.n	8006e22 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006df2:	4619      	mov	r1, r3
 8006df4:	6878      	ldr	r0, [r7, #4]
 8006df6:	f000 fa2d 	bl	8007254 <USBD_StdItfReq>
      break;
 8006dfa:	e012      	b.n	8006e22 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006e02:	4619      	mov	r1, r3
 8006e04:	6878      	ldr	r0, [r7, #4]
 8006e06:	f000 fa6d 	bl	80072e4 <USBD_StdEPReq>
      break;
 8006e0a:	e00a      	b.n	8006e22 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006e12:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006e16:	b2db      	uxtb	r3, r3
 8006e18:	4619      	mov	r1, r3
 8006e1a:	6878      	ldr	r0, [r7, #4]
 8006e1c:	f001 fb7a 	bl	8008514 <USBD_LL_StallEP>
      break;
 8006e20:	bf00      	nop
  }

  return USBD_OK;
 8006e22:	2300      	movs	r3, #0
}
 8006e24:	4618      	mov	r0, r3
 8006e26:	3708      	adds	r7, #8
 8006e28:	46bd      	mov	sp, r7
 8006e2a:	bd80      	pop	{r7, pc}

08006e2c <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006e2c:	b580      	push	{r7, lr}
 8006e2e:	b086      	sub	sp, #24
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	60f8      	str	r0, [r7, #12]
 8006e34:	460b      	mov	r3, r1
 8006e36:	607a      	str	r2, [r7, #4]
 8006e38:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006e3a:	7afb      	ldrb	r3, [r7, #11]
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d14b      	bne.n	8006ed8 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006e46:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006e4e:	2b03      	cmp	r3, #3
 8006e50:	d134      	bne.n	8006ebc <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8006e52:	697b      	ldr	r3, [r7, #20]
 8006e54:	68da      	ldr	r2, [r3, #12]
 8006e56:	697b      	ldr	r3, [r7, #20]
 8006e58:	691b      	ldr	r3, [r3, #16]
 8006e5a:	429a      	cmp	r2, r3
 8006e5c:	d919      	bls.n	8006e92 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8006e5e:	697b      	ldr	r3, [r7, #20]
 8006e60:	68da      	ldr	r2, [r3, #12]
 8006e62:	697b      	ldr	r3, [r7, #20]
 8006e64:	691b      	ldr	r3, [r3, #16]
 8006e66:	1ad2      	subs	r2, r2, r3
 8006e68:	697b      	ldr	r3, [r7, #20]
 8006e6a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006e6c:	697b      	ldr	r3, [r7, #20]
 8006e6e:	68da      	ldr	r2, [r3, #12]
 8006e70:	697b      	ldr	r3, [r7, #20]
 8006e72:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006e74:	429a      	cmp	r2, r3
 8006e76:	d203      	bcs.n	8006e80 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006e78:	697b      	ldr	r3, [r7, #20]
 8006e7a:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8006e7c:	b29b      	uxth	r3, r3
 8006e7e:	e002      	b.n	8006e86 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006e80:	697b      	ldr	r3, [r7, #20]
 8006e82:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006e84:	b29b      	uxth	r3, r3
 8006e86:	461a      	mov	r2, r3
 8006e88:	6879      	ldr	r1, [r7, #4]
 8006e8a:	68f8      	ldr	r0, [r7, #12]
 8006e8c:	f000 ff57 	bl	8007d3e <USBD_CtlContinueRx>
 8006e90:	e038      	b.n	8006f04 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e98:	691b      	ldr	r3, [r3, #16]
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d00a      	beq.n	8006eb4 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006ea4:	2b03      	cmp	r3, #3
 8006ea6:	d105      	bne.n	8006eb4 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006eae:	691b      	ldr	r3, [r3, #16]
 8006eb0:	68f8      	ldr	r0, [r7, #12]
 8006eb2:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8006eb4:	68f8      	ldr	r0, [r7, #12]
 8006eb6:	f000 ff54 	bl	8007d62 <USBD_CtlSendStatus>
 8006eba:	e023      	b.n	8006f04 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006ec2:	2b05      	cmp	r3, #5
 8006ec4:	d11e      	bne.n	8006f04 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	2200      	movs	r2, #0
 8006eca:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8006ece:	2100      	movs	r1, #0
 8006ed0:	68f8      	ldr	r0, [r7, #12]
 8006ed2:	f001 fb1f 	bl	8008514 <USBD_LL_StallEP>
 8006ed6:	e015      	b.n	8006f04 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ede:	699b      	ldr	r3, [r3, #24]
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d00d      	beq.n	8006f00 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8006eea:	2b03      	cmp	r3, #3
 8006eec:	d108      	bne.n	8006f00 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ef4:	699b      	ldr	r3, [r3, #24]
 8006ef6:	7afa      	ldrb	r2, [r7, #11]
 8006ef8:	4611      	mov	r1, r2
 8006efa:	68f8      	ldr	r0, [r7, #12]
 8006efc:	4798      	blx	r3
 8006efe:	e001      	b.n	8006f04 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006f00:	2302      	movs	r3, #2
 8006f02:	e000      	b.n	8006f06 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8006f04:	2300      	movs	r3, #0
}
 8006f06:	4618      	mov	r0, r3
 8006f08:	3718      	adds	r7, #24
 8006f0a:	46bd      	mov	sp, r7
 8006f0c:	bd80      	pop	{r7, pc}

08006f0e <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006f0e:	b580      	push	{r7, lr}
 8006f10:	b086      	sub	sp, #24
 8006f12:	af00      	add	r7, sp, #0
 8006f14:	60f8      	str	r0, [r7, #12]
 8006f16:	460b      	mov	r3, r1
 8006f18:	607a      	str	r2, [r7, #4]
 8006f1a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006f1c:	7afb      	ldrb	r3, [r7, #11]
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d17f      	bne.n	8007022 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	3314      	adds	r3, #20
 8006f26:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006f2e:	2b02      	cmp	r3, #2
 8006f30:	d15c      	bne.n	8006fec <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8006f32:	697b      	ldr	r3, [r7, #20]
 8006f34:	68da      	ldr	r2, [r3, #12]
 8006f36:	697b      	ldr	r3, [r7, #20]
 8006f38:	691b      	ldr	r3, [r3, #16]
 8006f3a:	429a      	cmp	r2, r3
 8006f3c:	d915      	bls.n	8006f6a <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8006f3e:	697b      	ldr	r3, [r7, #20]
 8006f40:	68da      	ldr	r2, [r3, #12]
 8006f42:	697b      	ldr	r3, [r7, #20]
 8006f44:	691b      	ldr	r3, [r3, #16]
 8006f46:	1ad2      	subs	r2, r2, r3
 8006f48:	697b      	ldr	r3, [r7, #20]
 8006f4a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8006f4c:	697b      	ldr	r3, [r7, #20]
 8006f4e:	68db      	ldr	r3, [r3, #12]
 8006f50:	b29b      	uxth	r3, r3
 8006f52:	461a      	mov	r2, r3
 8006f54:	6879      	ldr	r1, [r7, #4]
 8006f56:	68f8      	ldr	r0, [r7, #12]
 8006f58:	f000 fec1 	bl	8007cde <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006f5c:	2300      	movs	r3, #0
 8006f5e:	2200      	movs	r2, #0
 8006f60:	2100      	movs	r1, #0
 8006f62:	68f8      	ldr	r0, [r7, #12]
 8006f64:	f001 fb82 	bl	800866c <USBD_LL_PrepareReceive>
 8006f68:	e04e      	b.n	8007008 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006f6a:	697b      	ldr	r3, [r7, #20]
 8006f6c:	689b      	ldr	r3, [r3, #8]
 8006f6e:	697a      	ldr	r2, [r7, #20]
 8006f70:	6912      	ldr	r2, [r2, #16]
 8006f72:	fbb3 f1f2 	udiv	r1, r3, r2
 8006f76:	fb01 f202 	mul.w	r2, r1, r2
 8006f7a:	1a9b      	subs	r3, r3, r2
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d11c      	bne.n	8006fba <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8006f80:	697b      	ldr	r3, [r7, #20]
 8006f82:	689a      	ldr	r2, [r3, #8]
 8006f84:	697b      	ldr	r3, [r7, #20]
 8006f86:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006f88:	429a      	cmp	r2, r3
 8006f8a:	d316      	bcc.n	8006fba <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8006f8c:	697b      	ldr	r3, [r7, #20]
 8006f8e:	689a      	ldr	r2, [r3, #8]
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006f96:	429a      	cmp	r2, r3
 8006f98:	d20f      	bcs.n	8006fba <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006f9a:	2200      	movs	r2, #0
 8006f9c:	2100      	movs	r1, #0
 8006f9e:	68f8      	ldr	r0, [r7, #12]
 8006fa0:	f000 fe9d 	bl	8007cde <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	2200      	movs	r2, #0
 8006fa8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006fac:	2300      	movs	r3, #0
 8006fae:	2200      	movs	r2, #0
 8006fb0:	2100      	movs	r1, #0
 8006fb2:	68f8      	ldr	r0, [r7, #12]
 8006fb4:	f001 fb5a 	bl	800866c <USBD_LL_PrepareReceive>
 8006fb8:	e026      	b.n	8007008 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006fc0:	68db      	ldr	r3, [r3, #12]
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d00a      	beq.n	8006fdc <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006fcc:	2b03      	cmp	r3, #3
 8006fce:	d105      	bne.n	8006fdc <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006fd6:	68db      	ldr	r3, [r3, #12]
 8006fd8:	68f8      	ldr	r0, [r7, #12]
 8006fda:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8006fdc:	2180      	movs	r1, #128	; 0x80
 8006fde:	68f8      	ldr	r0, [r7, #12]
 8006fe0:	f001 fa98 	bl	8008514 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8006fe4:	68f8      	ldr	r0, [r7, #12]
 8006fe6:	f000 fecf 	bl	8007d88 <USBD_CtlReceiveStatus>
 8006fea:	e00d      	b.n	8007008 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006ff2:	2b04      	cmp	r3, #4
 8006ff4:	d004      	beq.n	8007000 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d103      	bne.n	8007008 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8007000:	2180      	movs	r1, #128	; 0x80
 8007002:	68f8      	ldr	r0, [r7, #12]
 8007004:	f001 fa86 	bl	8008514 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800700e:	2b01      	cmp	r3, #1
 8007010:	d11d      	bne.n	800704e <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8007012:	68f8      	ldr	r0, [r7, #12]
 8007014:	f7ff fe81 	bl	8006d1a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	2200      	movs	r2, #0
 800701c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007020:	e015      	b.n	800704e <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007028:	695b      	ldr	r3, [r3, #20]
 800702a:	2b00      	cmp	r3, #0
 800702c:	d00d      	beq.n	800704a <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8007034:	2b03      	cmp	r3, #3
 8007036:	d108      	bne.n	800704a <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800703e:	695b      	ldr	r3, [r3, #20]
 8007040:	7afa      	ldrb	r2, [r7, #11]
 8007042:	4611      	mov	r1, r2
 8007044:	68f8      	ldr	r0, [r7, #12]
 8007046:	4798      	blx	r3
 8007048:	e001      	b.n	800704e <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800704a:	2302      	movs	r3, #2
 800704c:	e000      	b.n	8007050 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800704e:	2300      	movs	r3, #0
}
 8007050:	4618      	mov	r0, r3
 8007052:	3718      	adds	r7, #24
 8007054:	46bd      	mov	sp, r7
 8007056:	bd80      	pop	{r7, pc}

08007058 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007058:	b580      	push	{r7, lr}
 800705a:	b082      	sub	sp, #8
 800705c:	af00      	add	r7, sp, #0
 800705e:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007060:	2340      	movs	r3, #64	; 0x40
 8007062:	2200      	movs	r2, #0
 8007064:	2100      	movs	r1, #0
 8007066:	6878      	ldr	r0, [r7, #4]
 8007068:	f001 fa0f 	bl	800848a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	2201      	movs	r2, #1
 8007070:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	2240      	movs	r2, #64	; 0x40
 8007078:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800707c:	2340      	movs	r3, #64	; 0x40
 800707e:	2200      	movs	r2, #0
 8007080:	2180      	movs	r1, #128	; 0x80
 8007082:	6878      	ldr	r0, [r7, #4]
 8007084:	f001 fa01 	bl	800848a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	2201      	movs	r2, #1
 800708c:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	2240      	movs	r2, #64	; 0x40
 8007092:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	2201      	movs	r2, #1
 8007098:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	2200      	movs	r2, #0
 80070a0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	2200      	movs	r2, #0
 80070a8:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	2200      	movs	r2, #0
 80070ae:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d009      	beq.n	80070d0 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80070c2:	685b      	ldr	r3, [r3, #4]
 80070c4:	687a      	ldr	r2, [r7, #4]
 80070c6:	6852      	ldr	r2, [r2, #4]
 80070c8:	b2d2      	uxtb	r2, r2
 80070ca:	4611      	mov	r1, r2
 80070cc:	6878      	ldr	r0, [r7, #4]
 80070ce:	4798      	blx	r3
  }

  return USBD_OK;
 80070d0:	2300      	movs	r3, #0
}
 80070d2:	4618      	mov	r0, r3
 80070d4:	3708      	adds	r7, #8
 80070d6:	46bd      	mov	sp, r7
 80070d8:	bd80      	pop	{r7, pc}

080070da <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80070da:	b480      	push	{r7}
 80070dc:	b083      	sub	sp, #12
 80070de:	af00      	add	r7, sp, #0
 80070e0:	6078      	str	r0, [r7, #4]
 80070e2:	460b      	mov	r3, r1
 80070e4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	78fa      	ldrb	r2, [r7, #3]
 80070ea:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80070ec:	2300      	movs	r3, #0
}
 80070ee:	4618      	mov	r0, r3
 80070f0:	370c      	adds	r7, #12
 80070f2:	46bd      	mov	sp, r7
 80070f4:	bc80      	pop	{r7}
 80070f6:	4770      	bx	lr

080070f8 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80070f8:	b480      	push	{r7}
 80070fa:	b083      	sub	sp, #12
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	2204      	movs	r2, #4
 8007110:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007114:	2300      	movs	r3, #0
}
 8007116:	4618      	mov	r0, r3
 8007118:	370c      	adds	r7, #12
 800711a:	46bd      	mov	sp, r7
 800711c:	bc80      	pop	{r7}
 800711e:	4770      	bx	lr

08007120 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007120:	b480      	push	{r7}
 8007122:	b083      	sub	sp, #12
 8007124:	af00      	add	r7, sp, #0
 8007126:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800712e:	2b04      	cmp	r3, #4
 8007130:	d105      	bne.n	800713e <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800713e:	2300      	movs	r3, #0
}
 8007140:	4618      	mov	r0, r3
 8007142:	370c      	adds	r7, #12
 8007144:	46bd      	mov	sp, r7
 8007146:	bc80      	pop	{r7}
 8007148:	4770      	bx	lr

0800714a <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800714a:	b580      	push	{r7, lr}
 800714c:	b082      	sub	sp, #8
 800714e:	af00      	add	r7, sp, #0
 8007150:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007158:	2b03      	cmp	r3, #3
 800715a:	d10b      	bne.n	8007174 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007162:	69db      	ldr	r3, [r3, #28]
 8007164:	2b00      	cmp	r3, #0
 8007166:	d005      	beq.n	8007174 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800716e:	69db      	ldr	r3, [r3, #28]
 8007170:	6878      	ldr	r0, [r7, #4]
 8007172:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007174:	2300      	movs	r3, #0
}
 8007176:	4618      	mov	r0, r3
 8007178:	3708      	adds	r7, #8
 800717a:	46bd      	mov	sp, r7
 800717c:	bd80      	pop	{r7, pc}
	...

08007180 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8007180:	b580      	push	{r7, lr}
 8007182:	b084      	sub	sp, #16
 8007184:	af00      	add	r7, sp, #0
 8007186:	6078      	str	r0, [r7, #4]
 8007188:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800718a:	2300      	movs	r3, #0
 800718c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800718e:	683b      	ldr	r3, [r7, #0]
 8007190:	781b      	ldrb	r3, [r3, #0]
 8007192:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007196:	2b40      	cmp	r3, #64	; 0x40
 8007198:	d005      	beq.n	80071a6 <USBD_StdDevReq+0x26>
 800719a:	2b40      	cmp	r3, #64	; 0x40
 800719c:	d84f      	bhi.n	800723e <USBD_StdDevReq+0xbe>
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d009      	beq.n	80071b6 <USBD_StdDevReq+0x36>
 80071a2:	2b20      	cmp	r3, #32
 80071a4:	d14b      	bne.n	800723e <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80071ac:	689b      	ldr	r3, [r3, #8]
 80071ae:	6839      	ldr	r1, [r7, #0]
 80071b0:	6878      	ldr	r0, [r7, #4]
 80071b2:	4798      	blx	r3
      break;
 80071b4:	e048      	b.n	8007248 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80071b6:	683b      	ldr	r3, [r7, #0]
 80071b8:	785b      	ldrb	r3, [r3, #1]
 80071ba:	2b09      	cmp	r3, #9
 80071bc:	d839      	bhi.n	8007232 <USBD_StdDevReq+0xb2>
 80071be:	a201      	add	r2, pc, #4	; (adr r2, 80071c4 <USBD_StdDevReq+0x44>)
 80071c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071c4:	08007215 	.word	0x08007215
 80071c8:	08007229 	.word	0x08007229
 80071cc:	08007233 	.word	0x08007233
 80071d0:	0800721f 	.word	0x0800721f
 80071d4:	08007233 	.word	0x08007233
 80071d8:	080071f7 	.word	0x080071f7
 80071dc:	080071ed 	.word	0x080071ed
 80071e0:	08007233 	.word	0x08007233
 80071e4:	0800720b 	.word	0x0800720b
 80071e8:	08007201 	.word	0x08007201
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80071ec:	6839      	ldr	r1, [r7, #0]
 80071ee:	6878      	ldr	r0, [r7, #4]
 80071f0:	f000 f9dc 	bl	80075ac <USBD_GetDescriptor>
          break;
 80071f4:	e022      	b.n	800723c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80071f6:	6839      	ldr	r1, [r7, #0]
 80071f8:	6878      	ldr	r0, [r7, #4]
 80071fa:	f000 fb3f 	bl	800787c <USBD_SetAddress>
          break;
 80071fe:	e01d      	b.n	800723c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8007200:	6839      	ldr	r1, [r7, #0]
 8007202:	6878      	ldr	r0, [r7, #4]
 8007204:	f000 fb7e 	bl	8007904 <USBD_SetConfig>
          break;
 8007208:	e018      	b.n	800723c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800720a:	6839      	ldr	r1, [r7, #0]
 800720c:	6878      	ldr	r0, [r7, #4]
 800720e:	f000 fc07 	bl	8007a20 <USBD_GetConfig>
          break;
 8007212:	e013      	b.n	800723c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007214:	6839      	ldr	r1, [r7, #0]
 8007216:	6878      	ldr	r0, [r7, #4]
 8007218:	f000 fc37 	bl	8007a8a <USBD_GetStatus>
          break;
 800721c:	e00e      	b.n	800723c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800721e:	6839      	ldr	r1, [r7, #0]
 8007220:	6878      	ldr	r0, [r7, #4]
 8007222:	f000 fc65 	bl	8007af0 <USBD_SetFeature>
          break;
 8007226:	e009      	b.n	800723c <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007228:	6839      	ldr	r1, [r7, #0]
 800722a:	6878      	ldr	r0, [r7, #4]
 800722c:	f000 fc74 	bl	8007b18 <USBD_ClrFeature>
          break;
 8007230:	e004      	b.n	800723c <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8007232:	6839      	ldr	r1, [r7, #0]
 8007234:	6878      	ldr	r0, [r7, #4]
 8007236:	f000 fccc 	bl	8007bd2 <USBD_CtlError>
          break;
 800723a:	bf00      	nop
      }
      break;
 800723c:	e004      	b.n	8007248 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800723e:	6839      	ldr	r1, [r7, #0]
 8007240:	6878      	ldr	r0, [r7, #4]
 8007242:	f000 fcc6 	bl	8007bd2 <USBD_CtlError>
      break;
 8007246:	bf00      	nop
  }

  return ret;
 8007248:	7bfb      	ldrb	r3, [r7, #15]
}
 800724a:	4618      	mov	r0, r3
 800724c:	3710      	adds	r7, #16
 800724e:	46bd      	mov	sp, r7
 8007250:	bd80      	pop	{r7, pc}
 8007252:	bf00      	nop

08007254 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8007254:	b580      	push	{r7, lr}
 8007256:	b084      	sub	sp, #16
 8007258:	af00      	add	r7, sp, #0
 800725a:	6078      	str	r0, [r7, #4]
 800725c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800725e:	2300      	movs	r3, #0
 8007260:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007262:	683b      	ldr	r3, [r7, #0]
 8007264:	781b      	ldrb	r3, [r3, #0]
 8007266:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800726a:	2b40      	cmp	r3, #64	; 0x40
 800726c:	d005      	beq.n	800727a <USBD_StdItfReq+0x26>
 800726e:	2b40      	cmp	r3, #64	; 0x40
 8007270:	d82e      	bhi.n	80072d0 <USBD_StdItfReq+0x7c>
 8007272:	2b00      	cmp	r3, #0
 8007274:	d001      	beq.n	800727a <USBD_StdItfReq+0x26>
 8007276:	2b20      	cmp	r3, #32
 8007278:	d12a      	bne.n	80072d0 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007280:	3b01      	subs	r3, #1
 8007282:	2b02      	cmp	r3, #2
 8007284:	d81d      	bhi.n	80072c2 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007286:	683b      	ldr	r3, [r7, #0]
 8007288:	889b      	ldrh	r3, [r3, #4]
 800728a:	b2db      	uxtb	r3, r3
 800728c:	2b01      	cmp	r3, #1
 800728e:	d813      	bhi.n	80072b8 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007296:	689b      	ldr	r3, [r3, #8]
 8007298:	6839      	ldr	r1, [r7, #0]
 800729a:	6878      	ldr	r0, [r7, #4]
 800729c:	4798      	blx	r3
 800729e:	4603      	mov	r3, r0
 80072a0:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80072a2:	683b      	ldr	r3, [r7, #0]
 80072a4:	88db      	ldrh	r3, [r3, #6]
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d110      	bne.n	80072cc <USBD_StdItfReq+0x78>
 80072aa:	7bfb      	ldrb	r3, [r7, #15]
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d10d      	bne.n	80072cc <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 80072b0:	6878      	ldr	r0, [r7, #4]
 80072b2:	f000 fd56 	bl	8007d62 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80072b6:	e009      	b.n	80072cc <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 80072b8:	6839      	ldr	r1, [r7, #0]
 80072ba:	6878      	ldr	r0, [r7, #4]
 80072bc:	f000 fc89 	bl	8007bd2 <USBD_CtlError>
          break;
 80072c0:	e004      	b.n	80072cc <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 80072c2:	6839      	ldr	r1, [r7, #0]
 80072c4:	6878      	ldr	r0, [r7, #4]
 80072c6:	f000 fc84 	bl	8007bd2 <USBD_CtlError>
          break;
 80072ca:	e000      	b.n	80072ce <USBD_StdItfReq+0x7a>
          break;
 80072cc:	bf00      	nop
      }
      break;
 80072ce:	e004      	b.n	80072da <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 80072d0:	6839      	ldr	r1, [r7, #0]
 80072d2:	6878      	ldr	r0, [r7, #4]
 80072d4:	f000 fc7d 	bl	8007bd2 <USBD_CtlError>
      break;
 80072d8:	bf00      	nop
  }

  return USBD_OK;
 80072da:	2300      	movs	r3, #0
}
 80072dc:	4618      	mov	r0, r3
 80072de:	3710      	adds	r7, #16
 80072e0:	46bd      	mov	sp, r7
 80072e2:	bd80      	pop	{r7, pc}

080072e4 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 80072e4:	b580      	push	{r7, lr}
 80072e6:	b084      	sub	sp, #16
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	6078      	str	r0, [r7, #4]
 80072ec:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80072ee:	2300      	movs	r3, #0
 80072f0:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 80072f2:	683b      	ldr	r3, [r7, #0]
 80072f4:	889b      	ldrh	r3, [r3, #4]
 80072f6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80072f8:	683b      	ldr	r3, [r7, #0]
 80072fa:	781b      	ldrb	r3, [r3, #0]
 80072fc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007300:	2b40      	cmp	r3, #64	; 0x40
 8007302:	d007      	beq.n	8007314 <USBD_StdEPReq+0x30>
 8007304:	2b40      	cmp	r3, #64	; 0x40
 8007306:	f200 8146 	bhi.w	8007596 <USBD_StdEPReq+0x2b2>
 800730a:	2b00      	cmp	r3, #0
 800730c:	d00a      	beq.n	8007324 <USBD_StdEPReq+0x40>
 800730e:	2b20      	cmp	r3, #32
 8007310:	f040 8141 	bne.w	8007596 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800731a:	689b      	ldr	r3, [r3, #8]
 800731c:	6839      	ldr	r1, [r7, #0]
 800731e:	6878      	ldr	r0, [r7, #4]
 8007320:	4798      	blx	r3
      break;
 8007322:	e13d      	b.n	80075a0 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8007324:	683b      	ldr	r3, [r7, #0]
 8007326:	781b      	ldrb	r3, [r3, #0]
 8007328:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800732c:	2b20      	cmp	r3, #32
 800732e:	d10a      	bne.n	8007346 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007336:	689b      	ldr	r3, [r3, #8]
 8007338:	6839      	ldr	r1, [r7, #0]
 800733a:	6878      	ldr	r0, [r7, #4]
 800733c:	4798      	blx	r3
 800733e:	4603      	mov	r3, r0
 8007340:	73fb      	strb	r3, [r7, #15]

        return ret;
 8007342:	7bfb      	ldrb	r3, [r7, #15]
 8007344:	e12d      	b.n	80075a2 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8007346:	683b      	ldr	r3, [r7, #0]
 8007348:	785b      	ldrb	r3, [r3, #1]
 800734a:	2b03      	cmp	r3, #3
 800734c:	d007      	beq.n	800735e <USBD_StdEPReq+0x7a>
 800734e:	2b03      	cmp	r3, #3
 8007350:	f300 811b 	bgt.w	800758a <USBD_StdEPReq+0x2a6>
 8007354:	2b00      	cmp	r3, #0
 8007356:	d072      	beq.n	800743e <USBD_StdEPReq+0x15a>
 8007358:	2b01      	cmp	r3, #1
 800735a:	d03a      	beq.n	80073d2 <USBD_StdEPReq+0xee>
 800735c:	e115      	b.n	800758a <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007364:	2b02      	cmp	r3, #2
 8007366:	d002      	beq.n	800736e <USBD_StdEPReq+0x8a>
 8007368:	2b03      	cmp	r3, #3
 800736a:	d015      	beq.n	8007398 <USBD_StdEPReq+0xb4>
 800736c:	e02b      	b.n	80073c6 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800736e:	7bbb      	ldrb	r3, [r7, #14]
 8007370:	2b00      	cmp	r3, #0
 8007372:	d00c      	beq.n	800738e <USBD_StdEPReq+0xaa>
 8007374:	7bbb      	ldrb	r3, [r7, #14]
 8007376:	2b80      	cmp	r3, #128	; 0x80
 8007378:	d009      	beq.n	800738e <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800737a:	7bbb      	ldrb	r3, [r7, #14]
 800737c:	4619      	mov	r1, r3
 800737e:	6878      	ldr	r0, [r7, #4]
 8007380:	f001 f8c8 	bl	8008514 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007384:	2180      	movs	r1, #128	; 0x80
 8007386:	6878      	ldr	r0, [r7, #4]
 8007388:	f001 f8c4 	bl	8008514 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800738c:	e020      	b.n	80073d0 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800738e:	6839      	ldr	r1, [r7, #0]
 8007390:	6878      	ldr	r0, [r7, #4]
 8007392:	f000 fc1e 	bl	8007bd2 <USBD_CtlError>
              break;
 8007396:	e01b      	b.n	80073d0 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007398:	683b      	ldr	r3, [r7, #0]
 800739a:	885b      	ldrh	r3, [r3, #2]
 800739c:	2b00      	cmp	r3, #0
 800739e:	d10e      	bne.n	80073be <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 80073a0:	7bbb      	ldrb	r3, [r7, #14]
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d00b      	beq.n	80073be <USBD_StdEPReq+0xda>
 80073a6:	7bbb      	ldrb	r3, [r7, #14]
 80073a8:	2b80      	cmp	r3, #128	; 0x80
 80073aa:	d008      	beq.n	80073be <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80073ac:	683b      	ldr	r3, [r7, #0]
 80073ae:	88db      	ldrh	r3, [r3, #6]
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d104      	bne.n	80073be <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 80073b4:	7bbb      	ldrb	r3, [r7, #14]
 80073b6:	4619      	mov	r1, r3
 80073b8:	6878      	ldr	r0, [r7, #4]
 80073ba:	f001 f8ab 	bl	8008514 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 80073be:	6878      	ldr	r0, [r7, #4]
 80073c0:	f000 fccf 	bl	8007d62 <USBD_CtlSendStatus>

              break;
 80073c4:	e004      	b.n	80073d0 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 80073c6:	6839      	ldr	r1, [r7, #0]
 80073c8:	6878      	ldr	r0, [r7, #4]
 80073ca:	f000 fc02 	bl	8007bd2 <USBD_CtlError>
              break;
 80073ce:	bf00      	nop
          }
          break;
 80073d0:	e0e0      	b.n	8007594 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80073d8:	2b02      	cmp	r3, #2
 80073da:	d002      	beq.n	80073e2 <USBD_StdEPReq+0xfe>
 80073dc:	2b03      	cmp	r3, #3
 80073de:	d015      	beq.n	800740c <USBD_StdEPReq+0x128>
 80073e0:	e026      	b.n	8007430 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80073e2:	7bbb      	ldrb	r3, [r7, #14]
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d00c      	beq.n	8007402 <USBD_StdEPReq+0x11e>
 80073e8:	7bbb      	ldrb	r3, [r7, #14]
 80073ea:	2b80      	cmp	r3, #128	; 0x80
 80073ec:	d009      	beq.n	8007402 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80073ee:	7bbb      	ldrb	r3, [r7, #14]
 80073f0:	4619      	mov	r1, r3
 80073f2:	6878      	ldr	r0, [r7, #4]
 80073f4:	f001 f88e 	bl	8008514 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80073f8:	2180      	movs	r1, #128	; 0x80
 80073fa:	6878      	ldr	r0, [r7, #4]
 80073fc:	f001 f88a 	bl	8008514 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007400:	e01c      	b.n	800743c <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8007402:	6839      	ldr	r1, [r7, #0]
 8007404:	6878      	ldr	r0, [r7, #4]
 8007406:	f000 fbe4 	bl	8007bd2 <USBD_CtlError>
              break;
 800740a:	e017      	b.n	800743c <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800740c:	683b      	ldr	r3, [r7, #0]
 800740e:	885b      	ldrh	r3, [r3, #2]
 8007410:	2b00      	cmp	r3, #0
 8007412:	d112      	bne.n	800743a <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007414:	7bbb      	ldrb	r3, [r7, #14]
 8007416:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800741a:	2b00      	cmp	r3, #0
 800741c:	d004      	beq.n	8007428 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800741e:	7bbb      	ldrb	r3, [r7, #14]
 8007420:	4619      	mov	r1, r3
 8007422:	6878      	ldr	r0, [r7, #4]
 8007424:	f001 f895 	bl	8008552 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8007428:	6878      	ldr	r0, [r7, #4]
 800742a:	f000 fc9a 	bl	8007d62 <USBD_CtlSendStatus>
              }
              break;
 800742e:	e004      	b.n	800743a <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8007430:	6839      	ldr	r1, [r7, #0]
 8007432:	6878      	ldr	r0, [r7, #4]
 8007434:	f000 fbcd 	bl	8007bd2 <USBD_CtlError>
              break;
 8007438:	e000      	b.n	800743c <USBD_StdEPReq+0x158>
              break;
 800743a:	bf00      	nop
          }
          break;
 800743c:	e0aa      	b.n	8007594 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007444:	2b02      	cmp	r3, #2
 8007446:	d002      	beq.n	800744e <USBD_StdEPReq+0x16a>
 8007448:	2b03      	cmp	r3, #3
 800744a:	d032      	beq.n	80074b2 <USBD_StdEPReq+0x1ce>
 800744c:	e097      	b.n	800757e <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800744e:	7bbb      	ldrb	r3, [r7, #14]
 8007450:	2b00      	cmp	r3, #0
 8007452:	d007      	beq.n	8007464 <USBD_StdEPReq+0x180>
 8007454:	7bbb      	ldrb	r3, [r7, #14]
 8007456:	2b80      	cmp	r3, #128	; 0x80
 8007458:	d004      	beq.n	8007464 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800745a:	6839      	ldr	r1, [r7, #0]
 800745c:	6878      	ldr	r0, [r7, #4]
 800745e:	f000 fbb8 	bl	8007bd2 <USBD_CtlError>
                break;
 8007462:	e091      	b.n	8007588 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007464:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007468:	2b00      	cmp	r3, #0
 800746a:	da0b      	bge.n	8007484 <USBD_StdEPReq+0x1a0>
 800746c:	7bbb      	ldrb	r3, [r7, #14]
 800746e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007472:	4613      	mov	r3, r2
 8007474:	009b      	lsls	r3, r3, #2
 8007476:	4413      	add	r3, r2
 8007478:	009b      	lsls	r3, r3, #2
 800747a:	3310      	adds	r3, #16
 800747c:	687a      	ldr	r2, [r7, #4]
 800747e:	4413      	add	r3, r2
 8007480:	3304      	adds	r3, #4
 8007482:	e00b      	b.n	800749c <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007484:	7bbb      	ldrb	r3, [r7, #14]
 8007486:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800748a:	4613      	mov	r3, r2
 800748c:	009b      	lsls	r3, r3, #2
 800748e:	4413      	add	r3, r2
 8007490:	009b      	lsls	r3, r3, #2
 8007492:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007496:	687a      	ldr	r2, [r7, #4]
 8007498:	4413      	add	r3, r2
 800749a:	3304      	adds	r3, #4
 800749c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800749e:	68bb      	ldr	r3, [r7, #8]
 80074a0:	2200      	movs	r2, #0
 80074a2:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80074a4:	68bb      	ldr	r3, [r7, #8]
 80074a6:	2202      	movs	r2, #2
 80074a8:	4619      	mov	r1, r3
 80074aa:	6878      	ldr	r0, [r7, #4]
 80074ac:	f000 fbfb 	bl	8007ca6 <USBD_CtlSendData>
              break;
 80074b0:	e06a      	b.n	8007588 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80074b2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	da11      	bge.n	80074de <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80074ba:	7bbb      	ldrb	r3, [r7, #14]
 80074bc:	f003 020f 	and.w	r2, r3, #15
 80074c0:	6879      	ldr	r1, [r7, #4]
 80074c2:	4613      	mov	r3, r2
 80074c4:	009b      	lsls	r3, r3, #2
 80074c6:	4413      	add	r3, r2
 80074c8:	009b      	lsls	r3, r3, #2
 80074ca:	440b      	add	r3, r1
 80074cc:	3318      	adds	r3, #24
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d117      	bne.n	8007504 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80074d4:	6839      	ldr	r1, [r7, #0]
 80074d6:	6878      	ldr	r0, [r7, #4]
 80074d8:	f000 fb7b 	bl	8007bd2 <USBD_CtlError>
                  break;
 80074dc:	e054      	b.n	8007588 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80074de:	7bbb      	ldrb	r3, [r7, #14]
 80074e0:	f003 020f 	and.w	r2, r3, #15
 80074e4:	6879      	ldr	r1, [r7, #4]
 80074e6:	4613      	mov	r3, r2
 80074e8:	009b      	lsls	r3, r3, #2
 80074ea:	4413      	add	r3, r2
 80074ec:	009b      	lsls	r3, r3, #2
 80074ee:	440b      	add	r3, r1
 80074f0:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d104      	bne.n	8007504 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80074fa:	6839      	ldr	r1, [r7, #0]
 80074fc:	6878      	ldr	r0, [r7, #4]
 80074fe:	f000 fb68 	bl	8007bd2 <USBD_CtlError>
                  break;
 8007502:	e041      	b.n	8007588 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007504:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007508:	2b00      	cmp	r3, #0
 800750a:	da0b      	bge.n	8007524 <USBD_StdEPReq+0x240>
 800750c:	7bbb      	ldrb	r3, [r7, #14]
 800750e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007512:	4613      	mov	r3, r2
 8007514:	009b      	lsls	r3, r3, #2
 8007516:	4413      	add	r3, r2
 8007518:	009b      	lsls	r3, r3, #2
 800751a:	3310      	adds	r3, #16
 800751c:	687a      	ldr	r2, [r7, #4]
 800751e:	4413      	add	r3, r2
 8007520:	3304      	adds	r3, #4
 8007522:	e00b      	b.n	800753c <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007524:	7bbb      	ldrb	r3, [r7, #14]
 8007526:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800752a:	4613      	mov	r3, r2
 800752c:	009b      	lsls	r3, r3, #2
 800752e:	4413      	add	r3, r2
 8007530:	009b      	lsls	r3, r3, #2
 8007532:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007536:	687a      	ldr	r2, [r7, #4]
 8007538:	4413      	add	r3, r2
 800753a:	3304      	adds	r3, #4
 800753c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800753e:	7bbb      	ldrb	r3, [r7, #14]
 8007540:	2b00      	cmp	r3, #0
 8007542:	d002      	beq.n	800754a <USBD_StdEPReq+0x266>
 8007544:	7bbb      	ldrb	r3, [r7, #14]
 8007546:	2b80      	cmp	r3, #128	; 0x80
 8007548:	d103      	bne.n	8007552 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800754a:	68bb      	ldr	r3, [r7, #8]
 800754c:	2200      	movs	r2, #0
 800754e:	601a      	str	r2, [r3, #0]
 8007550:	e00e      	b.n	8007570 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8007552:	7bbb      	ldrb	r3, [r7, #14]
 8007554:	4619      	mov	r1, r3
 8007556:	6878      	ldr	r0, [r7, #4]
 8007558:	f001 f81a 	bl	8008590 <USBD_LL_IsStallEP>
 800755c:	4603      	mov	r3, r0
 800755e:	2b00      	cmp	r3, #0
 8007560:	d003      	beq.n	800756a <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8007562:	68bb      	ldr	r3, [r7, #8]
 8007564:	2201      	movs	r2, #1
 8007566:	601a      	str	r2, [r3, #0]
 8007568:	e002      	b.n	8007570 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800756a:	68bb      	ldr	r3, [r7, #8]
 800756c:	2200      	movs	r2, #0
 800756e:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007570:	68bb      	ldr	r3, [r7, #8]
 8007572:	2202      	movs	r2, #2
 8007574:	4619      	mov	r1, r3
 8007576:	6878      	ldr	r0, [r7, #4]
 8007578:	f000 fb95 	bl	8007ca6 <USBD_CtlSendData>
              break;
 800757c:	e004      	b.n	8007588 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800757e:	6839      	ldr	r1, [r7, #0]
 8007580:	6878      	ldr	r0, [r7, #4]
 8007582:	f000 fb26 	bl	8007bd2 <USBD_CtlError>
              break;
 8007586:	bf00      	nop
          }
          break;
 8007588:	e004      	b.n	8007594 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800758a:	6839      	ldr	r1, [r7, #0]
 800758c:	6878      	ldr	r0, [r7, #4]
 800758e:	f000 fb20 	bl	8007bd2 <USBD_CtlError>
          break;
 8007592:	bf00      	nop
      }
      break;
 8007594:	e004      	b.n	80075a0 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8007596:	6839      	ldr	r1, [r7, #0]
 8007598:	6878      	ldr	r0, [r7, #4]
 800759a:	f000 fb1a 	bl	8007bd2 <USBD_CtlError>
      break;
 800759e:	bf00      	nop
  }

  return ret;
 80075a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80075a2:	4618      	mov	r0, r3
 80075a4:	3710      	adds	r7, #16
 80075a6:	46bd      	mov	sp, r7
 80075a8:	bd80      	pop	{r7, pc}
	...

080075ac <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80075ac:	b580      	push	{r7, lr}
 80075ae:	b084      	sub	sp, #16
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	6078      	str	r0, [r7, #4]
 80075b4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80075b6:	2300      	movs	r3, #0
 80075b8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80075ba:	2300      	movs	r3, #0
 80075bc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80075be:	2300      	movs	r3, #0
 80075c0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80075c2:	683b      	ldr	r3, [r7, #0]
 80075c4:	885b      	ldrh	r3, [r3, #2]
 80075c6:	0a1b      	lsrs	r3, r3, #8
 80075c8:	b29b      	uxth	r3, r3
 80075ca:	3b01      	subs	r3, #1
 80075cc:	2b06      	cmp	r3, #6
 80075ce:	f200 8128 	bhi.w	8007822 <USBD_GetDescriptor+0x276>
 80075d2:	a201      	add	r2, pc, #4	; (adr r2, 80075d8 <USBD_GetDescriptor+0x2c>)
 80075d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075d8:	080075f5 	.word	0x080075f5
 80075dc:	0800760d 	.word	0x0800760d
 80075e0:	0800764d 	.word	0x0800764d
 80075e4:	08007823 	.word	0x08007823
 80075e8:	08007823 	.word	0x08007823
 80075ec:	080077c3 	.word	0x080077c3
 80075f0:	080077ef 	.word	0x080077ef
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	687a      	ldr	r2, [r7, #4]
 80075fe:	7c12      	ldrb	r2, [r2, #16]
 8007600:	f107 0108 	add.w	r1, r7, #8
 8007604:	4610      	mov	r0, r2
 8007606:	4798      	blx	r3
 8007608:	60f8      	str	r0, [r7, #12]
      break;
 800760a:	e112      	b.n	8007832 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	7c1b      	ldrb	r3, [r3, #16]
 8007610:	2b00      	cmp	r3, #0
 8007612:	d10d      	bne.n	8007630 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800761a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800761c:	f107 0208 	add.w	r2, r7, #8
 8007620:	4610      	mov	r0, r2
 8007622:	4798      	blx	r3
 8007624:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	3301      	adds	r3, #1
 800762a:	2202      	movs	r2, #2
 800762c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800762e:	e100      	b.n	8007832 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007638:	f107 0208 	add.w	r2, r7, #8
 800763c:	4610      	mov	r0, r2
 800763e:	4798      	blx	r3
 8007640:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	3301      	adds	r3, #1
 8007646:	2202      	movs	r2, #2
 8007648:	701a      	strb	r2, [r3, #0]
      break;
 800764a:	e0f2      	b.n	8007832 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800764c:	683b      	ldr	r3, [r7, #0]
 800764e:	885b      	ldrh	r3, [r3, #2]
 8007650:	b2db      	uxtb	r3, r3
 8007652:	2b05      	cmp	r3, #5
 8007654:	f200 80ac 	bhi.w	80077b0 <USBD_GetDescriptor+0x204>
 8007658:	a201      	add	r2, pc, #4	; (adr r2, 8007660 <USBD_GetDescriptor+0xb4>)
 800765a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800765e:	bf00      	nop
 8007660:	08007679 	.word	0x08007679
 8007664:	080076ad 	.word	0x080076ad
 8007668:	080076e1 	.word	0x080076e1
 800766c:	08007715 	.word	0x08007715
 8007670:	08007749 	.word	0x08007749
 8007674:	0800777d 	.word	0x0800777d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800767e:	685b      	ldr	r3, [r3, #4]
 8007680:	2b00      	cmp	r3, #0
 8007682:	d00b      	beq.n	800769c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800768a:	685b      	ldr	r3, [r3, #4]
 800768c:	687a      	ldr	r2, [r7, #4]
 800768e:	7c12      	ldrb	r2, [r2, #16]
 8007690:	f107 0108 	add.w	r1, r7, #8
 8007694:	4610      	mov	r0, r2
 8007696:	4798      	blx	r3
 8007698:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800769a:	e091      	b.n	80077c0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800769c:	6839      	ldr	r1, [r7, #0]
 800769e:	6878      	ldr	r0, [r7, #4]
 80076a0:	f000 fa97 	bl	8007bd2 <USBD_CtlError>
            err++;
 80076a4:	7afb      	ldrb	r3, [r7, #11]
 80076a6:	3301      	adds	r3, #1
 80076a8:	72fb      	strb	r3, [r7, #11]
          break;
 80076aa:	e089      	b.n	80077c0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80076b2:	689b      	ldr	r3, [r3, #8]
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d00b      	beq.n	80076d0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80076be:	689b      	ldr	r3, [r3, #8]
 80076c0:	687a      	ldr	r2, [r7, #4]
 80076c2:	7c12      	ldrb	r2, [r2, #16]
 80076c4:	f107 0108 	add.w	r1, r7, #8
 80076c8:	4610      	mov	r0, r2
 80076ca:	4798      	blx	r3
 80076cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80076ce:	e077      	b.n	80077c0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80076d0:	6839      	ldr	r1, [r7, #0]
 80076d2:	6878      	ldr	r0, [r7, #4]
 80076d4:	f000 fa7d 	bl	8007bd2 <USBD_CtlError>
            err++;
 80076d8:	7afb      	ldrb	r3, [r7, #11]
 80076da:	3301      	adds	r3, #1
 80076dc:	72fb      	strb	r3, [r7, #11]
          break;
 80076de:	e06f      	b.n	80077c0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80076e6:	68db      	ldr	r3, [r3, #12]
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d00b      	beq.n	8007704 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80076f2:	68db      	ldr	r3, [r3, #12]
 80076f4:	687a      	ldr	r2, [r7, #4]
 80076f6:	7c12      	ldrb	r2, [r2, #16]
 80076f8:	f107 0108 	add.w	r1, r7, #8
 80076fc:	4610      	mov	r0, r2
 80076fe:	4798      	blx	r3
 8007700:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007702:	e05d      	b.n	80077c0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007704:	6839      	ldr	r1, [r7, #0]
 8007706:	6878      	ldr	r0, [r7, #4]
 8007708:	f000 fa63 	bl	8007bd2 <USBD_CtlError>
            err++;
 800770c:	7afb      	ldrb	r3, [r7, #11]
 800770e:	3301      	adds	r3, #1
 8007710:	72fb      	strb	r3, [r7, #11]
          break;
 8007712:	e055      	b.n	80077c0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800771a:	691b      	ldr	r3, [r3, #16]
 800771c:	2b00      	cmp	r3, #0
 800771e:	d00b      	beq.n	8007738 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007726:	691b      	ldr	r3, [r3, #16]
 8007728:	687a      	ldr	r2, [r7, #4]
 800772a:	7c12      	ldrb	r2, [r2, #16]
 800772c:	f107 0108 	add.w	r1, r7, #8
 8007730:	4610      	mov	r0, r2
 8007732:	4798      	blx	r3
 8007734:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007736:	e043      	b.n	80077c0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007738:	6839      	ldr	r1, [r7, #0]
 800773a:	6878      	ldr	r0, [r7, #4]
 800773c:	f000 fa49 	bl	8007bd2 <USBD_CtlError>
            err++;
 8007740:	7afb      	ldrb	r3, [r7, #11]
 8007742:	3301      	adds	r3, #1
 8007744:	72fb      	strb	r3, [r7, #11]
          break;
 8007746:	e03b      	b.n	80077c0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800774e:	695b      	ldr	r3, [r3, #20]
 8007750:	2b00      	cmp	r3, #0
 8007752:	d00b      	beq.n	800776c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800775a:	695b      	ldr	r3, [r3, #20]
 800775c:	687a      	ldr	r2, [r7, #4]
 800775e:	7c12      	ldrb	r2, [r2, #16]
 8007760:	f107 0108 	add.w	r1, r7, #8
 8007764:	4610      	mov	r0, r2
 8007766:	4798      	blx	r3
 8007768:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800776a:	e029      	b.n	80077c0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800776c:	6839      	ldr	r1, [r7, #0]
 800776e:	6878      	ldr	r0, [r7, #4]
 8007770:	f000 fa2f 	bl	8007bd2 <USBD_CtlError>
            err++;
 8007774:	7afb      	ldrb	r3, [r7, #11]
 8007776:	3301      	adds	r3, #1
 8007778:	72fb      	strb	r3, [r7, #11]
          break;
 800777a:	e021      	b.n	80077c0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007782:	699b      	ldr	r3, [r3, #24]
 8007784:	2b00      	cmp	r3, #0
 8007786:	d00b      	beq.n	80077a0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800778e:	699b      	ldr	r3, [r3, #24]
 8007790:	687a      	ldr	r2, [r7, #4]
 8007792:	7c12      	ldrb	r2, [r2, #16]
 8007794:	f107 0108 	add.w	r1, r7, #8
 8007798:	4610      	mov	r0, r2
 800779a:	4798      	blx	r3
 800779c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800779e:	e00f      	b.n	80077c0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80077a0:	6839      	ldr	r1, [r7, #0]
 80077a2:	6878      	ldr	r0, [r7, #4]
 80077a4:	f000 fa15 	bl	8007bd2 <USBD_CtlError>
            err++;
 80077a8:	7afb      	ldrb	r3, [r7, #11]
 80077aa:	3301      	adds	r3, #1
 80077ac:	72fb      	strb	r3, [r7, #11]
          break;
 80077ae:	e007      	b.n	80077c0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 80077b0:	6839      	ldr	r1, [r7, #0]
 80077b2:	6878      	ldr	r0, [r7, #4]
 80077b4:	f000 fa0d 	bl	8007bd2 <USBD_CtlError>
          err++;
 80077b8:	7afb      	ldrb	r3, [r7, #11]
 80077ba:	3301      	adds	r3, #1
 80077bc:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 80077be:	e038      	b.n	8007832 <USBD_GetDescriptor+0x286>
 80077c0:	e037      	b.n	8007832 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	7c1b      	ldrb	r3, [r3, #16]
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d109      	bne.n	80077de <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80077d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077d2:	f107 0208 	add.w	r2, r7, #8
 80077d6:	4610      	mov	r0, r2
 80077d8:	4798      	blx	r3
 80077da:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80077dc:	e029      	b.n	8007832 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80077de:	6839      	ldr	r1, [r7, #0]
 80077e0:	6878      	ldr	r0, [r7, #4]
 80077e2:	f000 f9f6 	bl	8007bd2 <USBD_CtlError>
        err++;
 80077e6:	7afb      	ldrb	r3, [r7, #11]
 80077e8:	3301      	adds	r3, #1
 80077ea:	72fb      	strb	r3, [r7, #11]
      break;
 80077ec:	e021      	b.n	8007832 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	7c1b      	ldrb	r3, [r3, #16]
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d10d      	bne.n	8007812 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80077fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077fe:	f107 0208 	add.w	r2, r7, #8
 8007802:	4610      	mov	r0, r2
 8007804:	4798      	blx	r3
 8007806:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	3301      	adds	r3, #1
 800780c:	2207      	movs	r2, #7
 800780e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007810:	e00f      	b.n	8007832 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007812:	6839      	ldr	r1, [r7, #0]
 8007814:	6878      	ldr	r0, [r7, #4]
 8007816:	f000 f9dc 	bl	8007bd2 <USBD_CtlError>
        err++;
 800781a:	7afb      	ldrb	r3, [r7, #11]
 800781c:	3301      	adds	r3, #1
 800781e:	72fb      	strb	r3, [r7, #11]
      break;
 8007820:	e007      	b.n	8007832 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007822:	6839      	ldr	r1, [r7, #0]
 8007824:	6878      	ldr	r0, [r7, #4]
 8007826:	f000 f9d4 	bl	8007bd2 <USBD_CtlError>
      err++;
 800782a:	7afb      	ldrb	r3, [r7, #11]
 800782c:	3301      	adds	r3, #1
 800782e:	72fb      	strb	r3, [r7, #11]
      break;
 8007830:	bf00      	nop
  }

  if (err != 0U)
 8007832:	7afb      	ldrb	r3, [r7, #11]
 8007834:	2b00      	cmp	r3, #0
 8007836:	d11c      	bne.n	8007872 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8007838:	893b      	ldrh	r3, [r7, #8]
 800783a:	2b00      	cmp	r3, #0
 800783c:	d011      	beq.n	8007862 <USBD_GetDescriptor+0x2b6>
 800783e:	683b      	ldr	r3, [r7, #0]
 8007840:	88db      	ldrh	r3, [r3, #6]
 8007842:	2b00      	cmp	r3, #0
 8007844:	d00d      	beq.n	8007862 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8007846:	683b      	ldr	r3, [r7, #0]
 8007848:	88da      	ldrh	r2, [r3, #6]
 800784a:	893b      	ldrh	r3, [r7, #8]
 800784c:	4293      	cmp	r3, r2
 800784e:	bf28      	it	cs
 8007850:	4613      	movcs	r3, r2
 8007852:	b29b      	uxth	r3, r3
 8007854:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007856:	893b      	ldrh	r3, [r7, #8]
 8007858:	461a      	mov	r2, r3
 800785a:	68f9      	ldr	r1, [r7, #12]
 800785c:	6878      	ldr	r0, [r7, #4]
 800785e:	f000 fa22 	bl	8007ca6 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8007862:	683b      	ldr	r3, [r7, #0]
 8007864:	88db      	ldrh	r3, [r3, #6]
 8007866:	2b00      	cmp	r3, #0
 8007868:	d104      	bne.n	8007874 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800786a:	6878      	ldr	r0, [r7, #4]
 800786c:	f000 fa79 	bl	8007d62 <USBD_CtlSendStatus>
 8007870:	e000      	b.n	8007874 <USBD_GetDescriptor+0x2c8>
    return;
 8007872:	bf00      	nop
    }
  }
}
 8007874:	3710      	adds	r7, #16
 8007876:	46bd      	mov	sp, r7
 8007878:	bd80      	pop	{r7, pc}
 800787a:	bf00      	nop

0800787c <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800787c:	b580      	push	{r7, lr}
 800787e:	b084      	sub	sp, #16
 8007880:	af00      	add	r7, sp, #0
 8007882:	6078      	str	r0, [r7, #4]
 8007884:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007886:	683b      	ldr	r3, [r7, #0]
 8007888:	889b      	ldrh	r3, [r3, #4]
 800788a:	2b00      	cmp	r3, #0
 800788c:	d130      	bne.n	80078f0 <USBD_SetAddress+0x74>
 800788e:	683b      	ldr	r3, [r7, #0]
 8007890:	88db      	ldrh	r3, [r3, #6]
 8007892:	2b00      	cmp	r3, #0
 8007894:	d12c      	bne.n	80078f0 <USBD_SetAddress+0x74>
 8007896:	683b      	ldr	r3, [r7, #0]
 8007898:	885b      	ldrh	r3, [r3, #2]
 800789a:	2b7f      	cmp	r3, #127	; 0x7f
 800789c:	d828      	bhi.n	80078f0 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800789e:	683b      	ldr	r3, [r7, #0]
 80078a0:	885b      	ldrh	r3, [r3, #2]
 80078a2:	b2db      	uxtb	r3, r3
 80078a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80078a8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80078b0:	2b03      	cmp	r3, #3
 80078b2:	d104      	bne.n	80078be <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 80078b4:	6839      	ldr	r1, [r7, #0]
 80078b6:	6878      	ldr	r0, [r7, #4]
 80078b8:	f000 f98b 	bl	8007bd2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80078bc:	e01d      	b.n	80078fa <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	7bfa      	ldrb	r2, [r7, #15]
 80078c2:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80078c6:	7bfb      	ldrb	r3, [r7, #15]
 80078c8:	4619      	mov	r1, r3
 80078ca:	6878      	ldr	r0, [r7, #4]
 80078cc:	f000 fe8c 	bl	80085e8 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80078d0:	6878      	ldr	r0, [r7, #4]
 80078d2:	f000 fa46 	bl	8007d62 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80078d6:	7bfb      	ldrb	r3, [r7, #15]
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d004      	beq.n	80078e6 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	2202      	movs	r2, #2
 80078e0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80078e4:	e009      	b.n	80078fa <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	2201      	movs	r2, #1
 80078ea:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80078ee:	e004      	b.n	80078fa <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80078f0:	6839      	ldr	r1, [r7, #0]
 80078f2:	6878      	ldr	r0, [r7, #4]
 80078f4:	f000 f96d 	bl	8007bd2 <USBD_CtlError>
  }
}
 80078f8:	bf00      	nop
 80078fa:	bf00      	nop
 80078fc:	3710      	adds	r7, #16
 80078fe:	46bd      	mov	sp, r7
 8007900:	bd80      	pop	{r7, pc}
	...

08007904 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007904:	b580      	push	{r7, lr}
 8007906:	b082      	sub	sp, #8
 8007908:	af00      	add	r7, sp, #0
 800790a:	6078      	str	r0, [r7, #4]
 800790c:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800790e:	683b      	ldr	r3, [r7, #0]
 8007910:	885b      	ldrh	r3, [r3, #2]
 8007912:	b2da      	uxtb	r2, r3
 8007914:	4b41      	ldr	r3, [pc, #260]	; (8007a1c <USBD_SetConfig+0x118>)
 8007916:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007918:	4b40      	ldr	r3, [pc, #256]	; (8007a1c <USBD_SetConfig+0x118>)
 800791a:	781b      	ldrb	r3, [r3, #0]
 800791c:	2b01      	cmp	r3, #1
 800791e:	d904      	bls.n	800792a <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8007920:	6839      	ldr	r1, [r7, #0]
 8007922:	6878      	ldr	r0, [r7, #4]
 8007924:	f000 f955 	bl	8007bd2 <USBD_CtlError>
 8007928:	e075      	b.n	8007a16 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007930:	2b02      	cmp	r3, #2
 8007932:	d002      	beq.n	800793a <USBD_SetConfig+0x36>
 8007934:	2b03      	cmp	r3, #3
 8007936:	d023      	beq.n	8007980 <USBD_SetConfig+0x7c>
 8007938:	e062      	b.n	8007a00 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800793a:	4b38      	ldr	r3, [pc, #224]	; (8007a1c <USBD_SetConfig+0x118>)
 800793c:	781b      	ldrb	r3, [r3, #0]
 800793e:	2b00      	cmp	r3, #0
 8007940:	d01a      	beq.n	8007978 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8007942:	4b36      	ldr	r3, [pc, #216]	; (8007a1c <USBD_SetConfig+0x118>)
 8007944:	781b      	ldrb	r3, [r3, #0]
 8007946:	461a      	mov	r2, r3
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	2203      	movs	r2, #3
 8007950:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007954:	4b31      	ldr	r3, [pc, #196]	; (8007a1c <USBD_SetConfig+0x118>)
 8007956:	781b      	ldrb	r3, [r3, #0]
 8007958:	4619      	mov	r1, r3
 800795a:	6878      	ldr	r0, [r7, #4]
 800795c:	f7ff f9e7 	bl	8006d2e <USBD_SetClassConfig>
 8007960:	4603      	mov	r3, r0
 8007962:	2b02      	cmp	r3, #2
 8007964:	d104      	bne.n	8007970 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8007966:	6839      	ldr	r1, [r7, #0]
 8007968:	6878      	ldr	r0, [r7, #4]
 800796a:	f000 f932 	bl	8007bd2 <USBD_CtlError>
            return;
 800796e:	e052      	b.n	8007a16 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8007970:	6878      	ldr	r0, [r7, #4]
 8007972:	f000 f9f6 	bl	8007d62 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007976:	e04e      	b.n	8007a16 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007978:	6878      	ldr	r0, [r7, #4]
 800797a:	f000 f9f2 	bl	8007d62 <USBD_CtlSendStatus>
        break;
 800797e:	e04a      	b.n	8007a16 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8007980:	4b26      	ldr	r3, [pc, #152]	; (8007a1c <USBD_SetConfig+0x118>)
 8007982:	781b      	ldrb	r3, [r3, #0]
 8007984:	2b00      	cmp	r3, #0
 8007986:	d112      	bne.n	80079ae <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	2202      	movs	r2, #2
 800798c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8007990:	4b22      	ldr	r3, [pc, #136]	; (8007a1c <USBD_SetConfig+0x118>)
 8007992:	781b      	ldrb	r3, [r3, #0]
 8007994:	461a      	mov	r2, r3
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800799a:	4b20      	ldr	r3, [pc, #128]	; (8007a1c <USBD_SetConfig+0x118>)
 800799c:	781b      	ldrb	r3, [r3, #0]
 800799e:	4619      	mov	r1, r3
 80079a0:	6878      	ldr	r0, [r7, #4]
 80079a2:	f7ff f9e3 	bl	8006d6c <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 80079a6:	6878      	ldr	r0, [r7, #4]
 80079a8:	f000 f9db 	bl	8007d62 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80079ac:	e033      	b.n	8007a16 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 80079ae:	4b1b      	ldr	r3, [pc, #108]	; (8007a1c <USBD_SetConfig+0x118>)
 80079b0:	781b      	ldrb	r3, [r3, #0]
 80079b2:	461a      	mov	r2, r3
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	685b      	ldr	r3, [r3, #4]
 80079b8:	429a      	cmp	r2, r3
 80079ba:	d01d      	beq.n	80079f8 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	685b      	ldr	r3, [r3, #4]
 80079c0:	b2db      	uxtb	r3, r3
 80079c2:	4619      	mov	r1, r3
 80079c4:	6878      	ldr	r0, [r7, #4]
 80079c6:	f7ff f9d1 	bl	8006d6c <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 80079ca:	4b14      	ldr	r3, [pc, #80]	; (8007a1c <USBD_SetConfig+0x118>)
 80079cc:	781b      	ldrb	r3, [r3, #0]
 80079ce:	461a      	mov	r2, r3
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80079d4:	4b11      	ldr	r3, [pc, #68]	; (8007a1c <USBD_SetConfig+0x118>)
 80079d6:	781b      	ldrb	r3, [r3, #0]
 80079d8:	4619      	mov	r1, r3
 80079da:	6878      	ldr	r0, [r7, #4]
 80079dc:	f7ff f9a7 	bl	8006d2e <USBD_SetClassConfig>
 80079e0:	4603      	mov	r3, r0
 80079e2:	2b02      	cmp	r3, #2
 80079e4:	d104      	bne.n	80079f0 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 80079e6:	6839      	ldr	r1, [r7, #0]
 80079e8:	6878      	ldr	r0, [r7, #4]
 80079ea:	f000 f8f2 	bl	8007bd2 <USBD_CtlError>
            return;
 80079ee:	e012      	b.n	8007a16 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80079f0:	6878      	ldr	r0, [r7, #4]
 80079f2:	f000 f9b6 	bl	8007d62 <USBD_CtlSendStatus>
        break;
 80079f6:	e00e      	b.n	8007a16 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80079f8:	6878      	ldr	r0, [r7, #4]
 80079fa:	f000 f9b2 	bl	8007d62 <USBD_CtlSendStatus>
        break;
 80079fe:	e00a      	b.n	8007a16 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8007a00:	6839      	ldr	r1, [r7, #0]
 8007a02:	6878      	ldr	r0, [r7, #4]
 8007a04:	f000 f8e5 	bl	8007bd2 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8007a08:	4b04      	ldr	r3, [pc, #16]	; (8007a1c <USBD_SetConfig+0x118>)
 8007a0a:	781b      	ldrb	r3, [r3, #0]
 8007a0c:	4619      	mov	r1, r3
 8007a0e:	6878      	ldr	r0, [r7, #4]
 8007a10:	f7ff f9ac 	bl	8006d6c <USBD_ClrClassConfig>
        break;
 8007a14:	bf00      	nop
    }
  }
}
 8007a16:	3708      	adds	r7, #8
 8007a18:	46bd      	mov	sp, r7
 8007a1a:	bd80      	pop	{r7, pc}
 8007a1c:	20000294 	.word	0x20000294

08007a20 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007a20:	b580      	push	{r7, lr}
 8007a22:	b082      	sub	sp, #8
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	6078      	str	r0, [r7, #4]
 8007a28:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007a2a:	683b      	ldr	r3, [r7, #0]
 8007a2c:	88db      	ldrh	r3, [r3, #6]
 8007a2e:	2b01      	cmp	r3, #1
 8007a30:	d004      	beq.n	8007a3c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007a32:	6839      	ldr	r1, [r7, #0]
 8007a34:	6878      	ldr	r0, [r7, #4]
 8007a36:	f000 f8cc 	bl	8007bd2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007a3a:	e022      	b.n	8007a82 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a42:	2b02      	cmp	r3, #2
 8007a44:	dc02      	bgt.n	8007a4c <USBD_GetConfig+0x2c>
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	dc03      	bgt.n	8007a52 <USBD_GetConfig+0x32>
 8007a4a:	e015      	b.n	8007a78 <USBD_GetConfig+0x58>
 8007a4c:	2b03      	cmp	r3, #3
 8007a4e:	d00b      	beq.n	8007a68 <USBD_GetConfig+0x48>
 8007a50:	e012      	b.n	8007a78 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	2200      	movs	r2, #0
 8007a56:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	3308      	adds	r3, #8
 8007a5c:	2201      	movs	r2, #1
 8007a5e:	4619      	mov	r1, r3
 8007a60:	6878      	ldr	r0, [r7, #4]
 8007a62:	f000 f920 	bl	8007ca6 <USBD_CtlSendData>
        break;
 8007a66:	e00c      	b.n	8007a82 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	3304      	adds	r3, #4
 8007a6c:	2201      	movs	r2, #1
 8007a6e:	4619      	mov	r1, r3
 8007a70:	6878      	ldr	r0, [r7, #4]
 8007a72:	f000 f918 	bl	8007ca6 <USBD_CtlSendData>
        break;
 8007a76:	e004      	b.n	8007a82 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8007a78:	6839      	ldr	r1, [r7, #0]
 8007a7a:	6878      	ldr	r0, [r7, #4]
 8007a7c:	f000 f8a9 	bl	8007bd2 <USBD_CtlError>
        break;
 8007a80:	bf00      	nop
}
 8007a82:	bf00      	nop
 8007a84:	3708      	adds	r7, #8
 8007a86:	46bd      	mov	sp, r7
 8007a88:	bd80      	pop	{r7, pc}

08007a8a <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007a8a:	b580      	push	{r7, lr}
 8007a8c:	b082      	sub	sp, #8
 8007a8e:	af00      	add	r7, sp, #0
 8007a90:	6078      	str	r0, [r7, #4]
 8007a92:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a9a:	3b01      	subs	r3, #1
 8007a9c:	2b02      	cmp	r3, #2
 8007a9e:	d81e      	bhi.n	8007ade <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007aa0:	683b      	ldr	r3, [r7, #0]
 8007aa2:	88db      	ldrh	r3, [r3, #6]
 8007aa4:	2b02      	cmp	r3, #2
 8007aa6:	d004      	beq.n	8007ab2 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8007aa8:	6839      	ldr	r1, [r7, #0]
 8007aaa:	6878      	ldr	r0, [r7, #4]
 8007aac:	f000 f891 	bl	8007bd2 <USBD_CtlError>
        break;
 8007ab0:	e01a      	b.n	8007ae8 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	2201      	movs	r2, #1
 8007ab6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d005      	beq.n	8007ace <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	68db      	ldr	r3, [r3, #12]
 8007ac6:	f043 0202 	orr.w	r2, r3, #2
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	330c      	adds	r3, #12
 8007ad2:	2202      	movs	r2, #2
 8007ad4:	4619      	mov	r1, r3
 8007ad6:	6878      	ldr	r0, [r7, #4]
 8007ad8:	f000 f8e5 	bl	8007ca6 <USBD_CtlSendData>
      break;
 8007adc:	e004      	b.n	8007ae8 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8007ade:	6839      	ldr	r1, [r7, #0]
 8007ae0:	6878      	ldr	r0, [r7, #4]
 8007ae2:	f000 f876 	bl	8007bd2 <USBD_CtlError>
      break;
 8007ae6:	bf00      	nop
  }
}
 8007ae8:	bf00      	nop
 8007aea:	3708      	adds	r7, #8
 8007aec:	46bd      	mov	sp, r7
 8007aee:	bd80      	pop	{r7, pc}

08007af0 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007af0:	b580      	push	{r7, lr}
 8007af2:	b082      	sub	sp, #8
 8007af4:	af00      	add	r7, sp, #0
 8007af6:	6078      	str	r0, [r7, #4]
 8007af8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007afa:	683b      	ldr	r3, [r7, #0]
 8007afc:	885b      	ldrh	r3, [r3, #2]
 8007afe:	2b01      	cmp	r3, #1
 8007b00:	d106      	bne.n	8007b10 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	2201      	movs	r2, #1
 8007b06:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8007b0a:	6878      	ldr	r0, [r7, #4]
 8007b0c:	f000 f929 	bl	8007d62 <USBD_CtlSendStatus>
  }
}
 8007b10:	bf00      	nop
 8007b12:	3708      	adds	r7, #8
 8007b14:	46bd      	mov	sp, r7
 8007b16:	bd80      	pop	{r7, pc}

08007b18 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007b18:	b580      	push	{r7, lr}
 8007b1a:	b082      	sub	sp, #8
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	6078      	str	r0, [r7, #4]
 8007b20:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b28:	3b01      	subs	r3, #1
 8007b2a:	2b02      	cmp	r3, #2
 8007b2c:	d80b      	bhi.n	8007b46 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007b2e:	683b      	ldr	r3, [r7, #0]
 8007b30:	885b      	ldrh	r3, [r3, #2]
 8007b32:	2b01      	cmp	r3, #1
 8007b34:	d10c      	bne.n	8007b50 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	2200      	movs	r2, #0
 8007b3a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8007b3e:	6878      	ldr	r0, [r7, #4]
 8007b40:	f000 f90f 	bl	8007d62 <USBD_CtlSendStatus>
      }
      break;
 8007b44:	e004      	b.n	8007b50 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8007b46:	6839      	ldr	r1, [r7, #0]
 8007b48:	6878      	ldr	r0, [r7, #4]
 8007b4a:	f000 f842 	bl	8007bd2 <USBD_CtlError>
      break;
 8007b4e:	e000      	b.n	8007b52 <USBD_ClrFeature+0x3a>
      break;
 8007b50:	bf00      	nop
  }
}
 8007b52:	bf00      	nop
 8007b54:	3708      	adds	r7, #8
 8007b56:	46bd      	mov	sp, r7
 8007b58:	bd80      	pop	{r7, pc}

08007b5a <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007b5a:	b480      	push	{r7}
 8007b5c:	b083      	sub	sp, #12
 8007b5e:	af00      	add	r7, sp, #0
 8007b60:	6078      	str	r0, [r7, #4]
 8007b62:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8007b64:	683b      	ldr	r3, [r7, #0]
 8007b66:	781a      	ldrb	r2, [r3, #0]
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8007b6c:	683b      	ldr	r3, [r7, #0]
 8007b6e:	785a      	ldrb	r2, [r3, #1]
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8007b74:	683b      	ldr	r3, [r7, #0]
 8007b76:	3302      	adds	r3, #2
 8007b78:	781b      	ldrb	r3, [r3, #0]
 8007b7a:	b29a      	uxth	r2, r3
 8007b7c:	683b      	ldr	r3, [r7, #0]
 8007b7e:	3303      	adds	r3, #3
 8007b80:	781b      	ldrb	r3, [r3, #0]
 8007b82:	b29b      	uxth	r3, r3
 8007b84:	021b      	lsls	r3, r3, #8
 8007b86:	b29b      	uxth	r3, r3
 8007b88:	4413      	add	r3, r2
 8007b8a:	b29a      	uxth	r2, r3
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8007b90:	683b      	ldr	r3, [r7, #0]
 8007b92:	3304      	adds	r3, #4
 8007b94:	781b      	ldrb	r3, [r3, #0]
 8007b96:	b29a      	uxth	r2, r3
 8007b98:	683b      	ldr	r3, [r7, #0]
 8007b9a:	3305      	adds	r3, #5
 8007b9c:	781b      	ldrb	r3, [r3, #0]
 8007b9e:	b29b      	uxth	r3, r3
 8007ba0:	021b      	lsls	r3, r3, #8
 8007ba2:	b29b      	uxth	r3, r3
 8007ba4:	4413      	add	r3, r2
 8007ba6:	b29a      	uxth	r2, r3
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8007bac:	683b      	ldr	r3, [r7, #0]
 8007bae:	3306      	adds	r3, #6
 8007bb0:	781b      	ldrb	r3, [r3, #0]
 8007bb2:	b29a      	uxth	r2, r3
 8007bb4:	683b      	ldr	r3, [r7, #0]
 8007bb6:	3307      	adds	r3, #7
 8007bb8:	781b      	ldrb	r3, [r3, #0]
 8007bba:	b29b      	uxth	r3, r3
 8007bbc:	021b      	lsls	r3, r3, #8
 8007bbe:	b29b      	uxth	r3, r3
 8007bc0:	4413      	add	r3, r2
 8007bc2:	b29a      	uxth	r2, r3
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	80da      	strh	r2, [r3, #6]

}
 8007bc8:	bf00      	nop
 8007bca:	370c      	adds	r7, #12
 8007bcc:	46bd      	mov	sp, r7
 8007bce:	bc80      	pop	{r7}
 8007bd0:	4770      	bx	lr

08007bd2 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8007bd2:	b580      	push	{r7, lr}
 8007bd4:	b082      	sub	sp, #8
 8007bd6:	af00      	add	r7, sp, #0
 8007bd8:	6078      	str	r0, [r7, #4]
 8007bda:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8007bdc:	2180      	movs	r1, #128	; 0x80
 8007bde:	6878      	ldr	r0, [r7, #4]
 8007be0:	f000 fc98 	bl	8008514 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8007be4:	2100      	movs	r1, #0
 8007be6:	6878      	ldr	r0, [r7, #4]
 8007be8:	f000 fc94 	bl	8008514 <USBD_LL_StallEP>
}
 8007bec:	bf00      	nop
 8007bee:	3708      	adds	r7, #8
 8007bf0:	46bd      	mov	sp, r7
 8007bf2:	bd80      	pop	{r7, pc}

08007bf4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007bf4:	b580      	push	{r7, lr}
 8007bf6:	b086      	sub	sp, #24
 8007bf8:	af00      	add	r7, sp, #0
 8007bfa:	60f8      	str	r0, [r7, #12]
 8007bfc:	60b9      	str	r1, [r7, #8]
 8007bfe:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007c00:	2300      	movs	r3, #0
 8007c02:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d032      	beq.n	8007c70 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8007c0a:	68f8      	ldr	r0, [r7, #12]
 8007c0c:	f000 f834 	bl	8007c78 <USBD_GetLen>
 8007c10:	4603      	mov	r3, r0
 8007c12:	3301      	adds	r3, #1
 8007c14:	b29b      	uxth	r3, r3
 8007c16:	005b      	lsls	r3, r3, #1
 8007c18:	b29a      	uxth	r2, r3
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8007c1e:	7dfb      	ldrb	r3, [r7, #23]
 8007c20:	1c5a      	adds	r2, r3, #1
 8007c22:	75fa      	strb	r2, [r7, #23]
 8007c24:	461a      	mov	r2, r3
 8007c26:	68bb      	ldr	r3, [r7, #8]
 8007c28:	4413      	add	r3, r2
 8007c2a:	687a      	ldr	r2, [r7, #4]
 8007c2c:	7812      	ldrb	r2, [r2, #0]
 8007c2e:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8007c30:	7dfb      	ldrb	r3, [r7, #23]
 8007c32:	1c5a      	adds	r2, r3, #1
 8007c34:	75fa      	strb	r2, [r7, #23]
 8007c36:	461a      	mov	r2, r3
 8007c38:	68bb      	ldr	r3, [r7, #8]
 8007c3a:	4413      	add	r3, r2
 8007c3c:	2203      	movs	r2, #3
 8007c3e:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8007c40:	e012      	b.n	8007c68 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	1c5a      	adds	r2, r3, #1
 8007c46:	60fa      	str	r2, [r7, #12]
 8007c48:	7dfa      	ldrb	r2, [r7, #23]
 8007c4a:	1c51      	adds	r1, r2, #1
 8007c4c:	75f9      	strb	r1, [r7, #23]
 8007c4e:	4611      	mov	r1, r2
 8007c50:	68ba      	ldr	r2, [r7, #8]
 8007c52:	440a      	add	r2, r1
 8007c54:	781b      	ldrb	r3, [r3, #0]
 8007c56:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8007c58:	7dfb      	ldrb	r3, [r7, #23]
 8007c5a:	1c5a      	adds	r2, r3, #1
 8007c5c:	75fa      	strb	r2, [r7, #23]
 8007c5e:	461a      	mov	r2, r3
 8007c60:	68bb      	ldr	r3, [r7, #8]
 8007c62:	4413      	add	r3, r2
 8007c64:	2200      	movs	r2, #0
 8007c66:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	781b      	ldrb	r3, [r3, #0]
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d1e8      	bne.n	8007c42 <USBD_GetString+0x4e>
    }
  }
}
 8007c70:	bf00      	nop
 8007c72:	3718      	adds	r7, #24
 8007c74:	46bd      	mov	sp, r7
 8007c76:	bd80      	pop	{r7, pc}

08007c78 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007c78:	b480      	push	{r7}
 8007c7a:	b085      	sub	sp, #20
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007c80:	2300      	movs	r3, #0
 8007c82:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8007c84:	e005      	b.n	8007c92 <USBD_GetLen+0x1a>
  {
    len++;
 8007c86:	7bfb      	ldrb	r3, [r7, #15]
 8007c88:	3301      	adds	r3, #1
 8007c8a:	73fb      	strb	r3, [r7, #15]
    buf++;
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	3301      	adds	r3, #1
 8007c90:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	781b      	ldrb	r3, [r3, #0]
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d1f5      	bne.n	8007c86 <USBD_GetLen+0xe>
  }

  return len;
 8007c9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c9c:	4618      	mov	r0, r3
 8007c9e:	3714      	adds	r7, #20
 8007ca0:	46bd      	mov	sp, r7
 8007ca2:	bc80      	pop	{r7}
 8007ca4:	4770      	bx	lr

08007ca6 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8007ca6:	b580      	push	{r7, lr}
 8007ca8:	b084      	sub	sp, #16
 8007caa:	af00      	add	r7, sp, #0
 8007cac:	60f8      	str	r0, [r7, #12]
 8007cae:	60b9      	str	r1, [r7, #8]
 8007cb0:	4613      	mov	r3, r2
 8007cb2:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	2202      	movs	r2, #2
 8007cb8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007cbc:	88fa      	ldrh	r2, [r7, #6]
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8007cc2:	88fa      	ldrh	r2, [r7, #6]
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007cc8:	88fb      	ldrh	r3, [r7, #6]
 8007cca:	68ba      	ldr	r2, [r7, #8]
 8007ccc:	2100      	movs	r1, #0
 8007cce:	68f8      	ldr	r0, [r7, #12]
 8007cd0:	f000 fca9 	bl	8008626 <USBD_LL_Transmit>

  return USBD_OK;
 8007cd4:	2300      	movs	r3, #0
}
 8007cd6:	4618      	mov	r0, r3
 8007cd8:	3710      	adds	r7, #16
 8007cda:	46bd      	mov	sp, r7
 8007cdc:	bd80      	pop	{r7, pc}

08007cde <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8007cde:	b580      	push	{r7, lr}
 8007ce0:	b084      	sub	sp, #16
 8007ce2:	af00      	add	r7, sp, #0
 8007ce4:	60f8      	str	r0, [r7, #12]
 8007ce6:	60b9      	str	r1, [r7, #8]
 8007ce8:	4613      	mov	r3, r2
 8007cea:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007cec:	88fb      	ldrh	r3, [r7, #6]
 8007cee:	68ba      	ldr	r2, [r7, #8]
 8007cf0:	2100      	movs	r1, #0
 8007cf2:	68f8      	ldr	r0, [r7, #12]
 8007cf4:	f000 fc97 	bl	8008626 <USBD_LL_Transmit>

  return USBD_OK;
 8007cf8:	2300      	movs	r3, #0
}
 8007cfa:	4618      	mov	r0, r3
 8007cfc:	3710      	adds	r7, #16
 8007cfe:	46bd      	mov	sp, r7
 8007d00:	bd80      	pop	{r7, pc}

08007d02 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8007d02:	b580      	push	{r7, lr}
 8007d04:	b084      	sub	sp, #16
 8007d06:	af00      	add	r7, sp, #0
 8007d08:	60f8      	str	r0, [r7, #12]
 8007d0a:	60b9      	str	r1, [r7, #8]
 8007d0c:	4613      	mov	r3, r2
 8007d0e:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	2203      	movs	r2, #3
 8007d14:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007d18:	88fa      	ldrh	r2, [r7, #6]
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8007d20:	88fa      	ldrh	r2, [r7, #6]
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007d28:	88fb      	ldrh	r3, [r7, #6]
 8007d2a:	68ba      	ldr	r2, [r7, #8]
 8007d2c:	2100      	movs	r1, #0
 8007d2e:	68f8      	ldr	r0, [r7, #12]
 8007d30:	f000 fc9c 	bl	800866c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007d34:	2300      	movs	r3, #0
}
 8007d36:	4618      	mov	r0, r3
 8007d38:	3710      	adds	r7, #16
 8007d3a:	46bd      	mov	sp, r7
 8007d3c:	bd80      	pop	{r7, pc}

08007d3e <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8007d3e:	b580      	push	{r7, lr}
 8007d40:	b084      	sub	sp, #16
 8007d42:	af00      	add	r7, sp, #0
 8007d44:	60f8      	str	r0, [r7, #12]
 8007d46:	60b9      	str	r1, [r7, #8]
 8007d48:	4613      	mov	r3, r2
 8007d4a:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007d4c:	88fb      	ldrh	r3, [r7, #6]
 8007d4e:	68ba      	ldr	r2, [r7, #8]
 8007d50:	2100      	movs	r1, #0
 8007d52:	68f8      	ldr	r0, [r7, #12]
 8007d54:	f000 fc8a 	bl	800866c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007d58:	2300      	movs	r3, #0
}
 8007d5a:	4618      	mov	r0, r3
 8007d5c:	3710      	adds	r7, #16
 8007d5e:	46bd      	mov	sp, r7
 8007d60:	bd80      	pop	{r7, pc}

08007d62 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007d62:	b580      	push	{r7, lr}
 8007d64:	b082      	sub	sp, #8
 8007d66:	af00      	add	r7, sp, #0
 8007d68:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	2204      	movs	r2, #4
 8007d6e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007d72:	2300      	movs	r3, #0
 8007d74:	2200      	movs	r2, #0
 8007d76:	2100      	movs	r1, #0
 8007d78:	6878      	ldr	r0, [r7, #4]
 8007d7a:	f000 fc54 	bl	8008626 <USBD_LL_Transmit>

  return USBD_OK;
 8007d7e:	2300      	movs	r3, #0
}
 8007d80:	4618      	mov	r0, r3
 8007d82:	3708      	adds	r7, #8
 8007d84:	46bd      	mov	sp, r7
 8007d86:	bd80      	pop	{r7, pc}

08007d88 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007d88:	b580      	push	{r7, lr}
 8007d8a:	b082      	sub	sp, #8
 8007d8c:	af00      	add	r7, sp, #0
 8007d8e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	2205      	movs	r2, #5
 8007d94:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007d98:	2300      	movs	r3, #0
 8007d9a:	2200      	movs	r2, #0
 8007d9c:	2100      	movs	r1, #0
 8007d9e:	6878      	ldr	r0, [r7, #4]
 8007da0:	f000 fc64 	bl	800866c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007da4:	2300      	movs	r3, #0
}
 8007da6:	4618      	mov	r0, r3
 8007da8:	3708      	adds	r7, #8
 8007daa:	46bd      	mov	sp, r7
 8007dac:	bd80      	pop	{r7, pc}
	...

08007db0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007db0:	b580      	push	{r7, lr}
 8007db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007db4:	2200      	movs	r2, #0
 8007db6:	4912      	ldr	r1, [pc, #72]	; (8007e00 <MX_USB_DEVICE_Init+0x50>)
 8007db8:	4812      	ldr	r0, [pc, #72]	; (8007e04 <MX_USB_DEVICE_Init+0x54>)
 8007dba:	f7fe ff5e 	bl	8006c7a <USBD_Init>
 8007dbe:	4603      	mov	r3, r0
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d001      	beq.n	8007dc8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007dc4:	f7f8 fed8 	bl	8000b78 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007dc8:	490f      	ldr	r1, [pc, #60]	; (8007e08 <MX_USB_DEVICE_Init+0x58>)
 8007dca:	480e      	ldr	r0, [pc, #56]	; (8007e04 <MX_USB_DEVICE_Init+0x54>)
 8007dcc:	f7fe ff80 	bl	8006cd0 <USBD_RegisterClass>
 8007dd0:	4603      	mov	r3, r0
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d001      	beq.n	8007dda <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007dd6:	f7f8 fecf 	bl	8000b78 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007dda:	490c      	ldr	r1, [pc, #48]	; (8007e0c <MX_USB_DEVICE_Init+0x5c>)
 8007ddc:	4809      	ldr	r0, [pc, #36]	; (8007e04 <MX_USB_DEVICE_Init+0x54>)
 8007dde:	f7fe feb1 	bl	8006b44 <USBD_CDC_RegisterInterface>
 8007de2:	4603      	mov	r3, r0
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d001      	beq.n	8007dec <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007de8:	f7f8 fec6 	bl	8000b78 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007dec:	4805      	ldr	r0, [pc, #20]	; (8007e04 <MX_USB_DEVICE_Init+0x54>)
 8007dee:	f7fe ff88 	bl	8006d02 <USBD_Start>
 8007df2:	4603      	mov	r3, r0
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d001      	beq.n	8007dfc <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007df8:	f7f8 febe 	bl	8000b78 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007dfc:	bf00      	nop
 8007dfe:	bd80      	pop	{r7, pc}
 8007e00:	2000012c 	.word	0x2000012c
 8007e04:	20000298 	.word	0x20000298
 8007e08:	20000018 	.word	0x20000018
 8007e0c:	2000011c 	.word	0x2000011c

08007e10 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007e10:	b580      	push	{r7, lr}
 8007e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007e14:	2200      	movs	r2, #0
 8007e16:	4905      	ldr	r1, [pc, #20]	; (8007e2c <CDC_Init_FS+0x1c>)
 8007e18:	4805      	ldr	r0, [pc, #20]	; (8007e30 <CDC_Init_FS+0x20>)
 8007e1a:	f7fe fea9 	bl	8006b70 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007e1e:	4905      	ldr	r1, [pc, #20]	; (8007e34 <CDC_Init_FS+0x24>)
 8007e20:	4803      	ldr	r0, [pc, #12]	; (8007e30 <CDC_Init_FS+0x20>)
 8007e22:	f7fe febe 	bl	8006ba2 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8007e26:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007e28:	4618      	mov	r0, r3
 8007e2a:	bd80      	pop	{r7, pc}
 8007e2c:	20000964 	.word	0x20000964
 8007e30:	20000298 	.word	0x20000298
 8007e34:	20000564 	.word	0x20000564

08007e38 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007e38:	b480      	push	{r7}
 8007e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007e3c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007e3e:	4618      	mov	r0, r3
 8007e40:	46bd      	mov	sp, r7
 8007e42:	bc80      	pop	{r7}
 8007e44:	4770      	bx	lr
	...

08007e48 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007e48:	b480      	push	{r7}
 8007e4a:	b083      	sub	sp, #12
 8007e4c:	af00      	add	r7, sp, #0
 8007e4e:	4603      	mov	r3, r0
 8007e50:	6039      	str	r1, [r7, #0]
 8007e52:	71fb      	strb	r3, [r7, #7]
 8007e54:	4613      	mov	r3, r2
 8007e56:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007e58:	79fb      	ldrb	r3, [r7, #7]
 8007e5a:	2b23      	cmp	r3, #35	; 0x23
 8007e5c:	f200 808c 	bhi.w	8007f78 <CDC_Control_FS+0x130>
 8007e60:	a201      	add	r2, pc, #4	; (adr r2, 8007e68 <CDC_Control_FS+0x20>)
 8007e62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e66:	bf00      	nop
 8007e68:	08007f79 	.word	0x08007f79
 8007e6c:	08007f79 	.word	0x08007f79
 8007e70:	08007f79 	.word	0x08007f79
 8007e74:	08007f79 	.word	0x08007f79
 8007e78:	08007f79 	.word	0x08007f79
 8007e7c:	08007f79 	.word	0x08007f79
 8007e80:	08007f79 	.word	0x08007f79
 8007e84:	08007f79 	.word	0x08007f79
 8007e88:	08007f79 	.word	0x08007f79
 8007e8c:	08007f79 	.word	0x08007f79
 8007e90:	08007f79 	.word	0x08007f79
 8007e94:	08007f79 	.word	0x08007f79
 8007e98:	08007f79 	.word	0x08007f79
 8007e9c:	08007f79 	.word	0x08007f79
 8007ea0:	08007f79 	.word	0x08007f79
 8007ea4:	08007f79 	.word	0x08007f79
 8007ea8:	08007f79 	.word	0x08007f79
 8007eac:	08007f79 	.word	0x08007f79
 8007eb0:	08007f79 	.word	0x08007f79
 8007eb4:	08007f79 	.word	0x08007f79
 8007eb8:	08007f79 	.word	0x08007f79
 8007ebc:	08007f79 	.word	0x08007f79
 8007ec0:	08007f79 	.word	0x08007f79
 8007ec4:	08007f79 	.word	0x08007f79
 8007ec8:	08007f79 	.word	0x08007f79
 8007ecc:	08007f79 	.word	0x08007f79
 8007ed0:	08007f79 	.word	0x08007f79
 8007ed4:	08007f79 	.word	0x08007f79
 8007ed8:	08007f79 	.word	0x08007f79
 8007edc:	08007f79 	.word	0x08007f79
 8007ee0:	08007f79 	.word	0x08007f79
 8007ee4:	08007f79 	.word	0x08007f79
 8007ee8:	08007ef9 	.word	0x08007ef9
 8007eec:	08007f33 	.word	0x08007f33
 8007ef0:	08007f79 	.word	0x08007f79
 8007ef4:	08007f79 	.word	0x08007f79
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
    	buffer[0] = pbuf[0];
 8007ef8:	683b      	ldr	r3, [r7, #0]
 8007efa:	781a      	ldrb	r2, [r3, #0]
 8007efc:	4b22      	ldr	r3, [pc, #136]	; (8007f88 <CDC_Control_FS+0x140>)
 8007efe:	701a      	strb	r2, [r3, #0]
    	buffer[1] = pbuf[1];
 8007f00:	683b      	ldr	r3, [r7, #0]
 8007f02:	785a      	ldrb	r2, [r3, #1]
 8007f04:	4b20      	ldr	r3, [pc, #128]	; (8007f88 <CDC_Control_FS+0x140>)
 8007f06:	705a      	strb	r2, [r3, #1]
    	buffer[2] = pbuf[2];
 8007f08:	683b      	ldr	r3, [r7, #0]
 8007f0a:	789a      	ldrb	r2, [r3, #2]
 8007f0c:	4b1e      	ldr	r3, [pc, #120]	; (8007f88 <CDC_Control_FS+0x140>)
 8007f0e:	709a      	strb	r2, [r3, #2]
    	buffer[3] = pbuf[3];
 8007f10:	683b      	ldr	r3, [r7, #0]
 8007f12:	78da      	ldrb	r2, [r3, #3]
 8007f14:	4b1c      	ldr	r3, [pc, #112]	; (8007f88 <CDC_Control_FS+0x140>)
 8007f16:	70da      	strb	r2, [r3, #3]
    	buffer[4] = pbuf[4];
 8007f18:	683b      	ldr	r3, [r7, #0]
 8007f1a:	791a      	ldrb	r2, [r3, #4]
 8007f1c:	4b1a      	ldr	r3, [pc, #104]	; (8007f88 <CDC_Control_FS+0x140>)
 8007f1e:	711a      	strb	r2, [r3, #4]
    	buffer[5] = pbuf[5];
 8007f20:	683b      	ldr	r3, [r7, #0]
 8007f22:	795a      	ldrb	r2, [r3, #5]
 8007f24:	4b18      	ldr	r3, [pc, #96]	; (8007f88 <CDC_Control_FS+0x140>)
 8007f26:	715a      	strb	r2, [r3, #5]
    	buffer[6] = pbuf[6];
 8007f28:	683b      	ldr	r3, [r7, #0]
 8007f2a:	799a      	ldrb	r2, [r3, #6]
 8007f2c:	4b16      	ldr	r3, [pc, #88]	; (8007f88 <CDC_Control_FS+0x140>)
 8007f2e:	719a      	strb	r2, [r3, #6]
    break;
 8007f30:	e023      	b.n	8007f7a <CDC_Control_FS+0x132>

    case CDC_GET_LINE_CODING:
    	pbuf[0] = buffer[0];
 8007f32:	4b15      	ldr	r3, [pc, #84]	; (8007f88 <CDC_Control_FS+0x140>)
 8007f34:	781a      	ldrb	r2, [r3, #0]
 8007f36:	683b      	ldr	r3, [r7, #0]
 8007f38:	701a      	strb	r2, [r3, #0]
    	pbuf[1] = buffer[1];
 8007f3a:	683b      	ldr	r3, [r7, #0]
 8007f3c:	3301      	adds	r3, #1
 8007f3e:	4a12      	ldr	r2, [pc, #72]	; (8007f88 <CDC_Control_FS+0x140>)
 8007f40:	7852      	ldrb	r2, [r2, #1]
 8007f42:	701a      	strb	r2, [r3, #0]
    	pbuf[2] = buffer[2];
 8007f44:	683b      	ldr	r3, [r7, #0]
 8007f46:	3302      	adds	r3, #2
 8007f48:	4a0f      	ldr	r2, [pc, #60]	; (8007f88 <CDC_Control_FS+0x140>)
 8007f4a:	7892      	ldrb	r2, [r2, #2]
 8007f4c:	701a      	strb	r2, [r3, #0]
    	pbuf[3] = buffer[3];
 8007f4e:	683b      	ldr	r3, [r7, #0]
 8007f50:	3303      	adds	r3, #3
 8007f52:	4a0d      	ldr	r2, [pc, #52]	; (8007f88 <CDC_Control_FS+0x140>)
 8007f54:	78d2      	ldrb	r2, [r2, #3]
 8007f56:	701a      	strb	r2, [r3, #0]
    	pbuf[4] = buffer[4];
 8007f58:	683b      	ldr	r3, [r7, #0]
 8007f5a:	3304      	adds	r3, #4
 8007f5c:	4a0a      	ldr	r2, [pc, #40]	; (8007f88 <CDC_Control_FS+0x140>)
 8007f5e:	7912      	ldrb	r2, [r2, #4]
 8007f60:	701a      	strb	r2, [r3, #0]
    	pbuf[5] = buffer[5];
 8007f62:	683b      	ldr	r3, [r7, #0]
 8007f64:	3305      	adds	r3, #5
 8007f66:	4a08      	ldr	r2, [pc, #32]	; (8007f88 <CDC_Control_FS+0x140>)
 8007f68:	7952      	ldrb	r2, [r2, #5]
 8007f6a:	701a      	strb	r2, [r3, #0]
    	pbuf[6] = buffer[6];
 8007f6c:	683b      	ldr	r3, [r7, #0]
 8007f6e:	3306      	adds	r3, #6
 8007f70:	4a05      	ldr	r2, [pc, #20]	; (8007f88 <CDC_Control_FS+0x140>)
 8007f72:	7992      	ldrb	r2, [r2, #6]
 8007f74:	701a      	strb	r2, [r3, #0]

    break;
 8007f76:	e000      	b.n	8007f7a <CDC_Control_FS+0x132>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007f78:	bf00      	nop
  }

  return (USBD_OK);
 8007f7a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007f7c:	4618      	mov	r0, r3
 8007f7e:	370c      	adds	r7, #12
 8007f80:	46bd      	mov	sp, r7
 8007f82:	bc80      	pop	{r7}
 8007f84:	4770      	bx	lr
 8007f86:	bf00      	nop
 8007f88:	2000055c 	.word	0x2000055c

08007f8c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007f8c:	b580      	push	{r7, lr}
 8007f8e:	b082      	sub	sp, #8
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	6078      	str	r0, [r7, #4]
 8007f94:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007f96:	6879      	ldr	r1, [r7, #4]
 8007f98:	4805      	ldr	r0, [pc, #20]	; (8007fb0 <CDC_Receive_FS+0x24>)
 8007f9a:	f7fe fe02 	bl	8006ba2 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8007f9e:	4804      	ldr	r0, [pc, #16]	; (8007fb0 <CDC_Receive_FS+0x24>)
 8007fa0:	f7fe fe41 	bl	8006c26 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8007fa4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007fa6:	4618      	mov	r0, r3
 8007fa8:	3708      	adds	r7, #8
 8007faa:	46bd      	mov	sp, r7
 8007fac:	bd80      	pop	{r7, pc}
 8007fae:	bf00      	nop
 8007fb0:	20000298 	.word	0x20000298

08007fb4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8007fb4:	b580      	push	{r7, lr}
 8007fb6:	b084      	sub	sp, #16
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	6078      	str	r0, [r7, #4]
 8007fbc:	460b      	mov	r3, r1
 8007fbe:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8007fc0:	2300      	movs	r3, #0
 8007fc2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8007fc4:	4b0d      	ldr	r3, [pc, #52]	; (8007ffc <CDC_Transmit_FS+0x48>)
 8007fc6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007fca:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8007fcc:	68bb      	ldr	r3, [r7, #8]
 8007fce:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d001      	beq.n	8007fda <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8007fd6:	2301      	movs	r3, #1
 8007fd8:	e00b      	b.n	8007ff2 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8007fda:	887b      	ldrh	r3, [r7, #2]
 8007fdc:	461a      	mov	r2, r3
 8007fde:	6879      	ldr	r1, [r7, #4]
 8007fe0:	4806      	ldr	r0, [pc, #24]	; (8007ffc <CDC_Transmit_FS+0x48>)
 8007fe2:	f7fe fdc5 	bl	8006b70 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8007fe6:	4805      	ldr	r0, [pc, #20]	; (8007ffc <CDC_Transmit_FS+0x48>)
 8007fe8:	f7fe fdee 	bl	8006bc8 <USBD_CDC_TransmitPacket>
 8007fec:	4603      	mov	r3, r0
 8007fee:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8007ff0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ff2:	4618      	mov	r0, r3
 8007ff4:	3710      	adds	r7, #16
 8007ff6:	46bd      	mov	sp, r7
 8007ff8:	bd80      	pop	{r7, pc}
 8007ffa:	bf00      	nop
 8007ffc:	20000298 	.word	0x20000298

08008000 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008000:	b480      	push	{r7}
 8008002:	b083      	sub	sp, #12
 8008004:	af00      	add	r7, sp, #0
 8008006:	4603      	mov	r3, r0
 8008008:	6039      	str	r1, [r7, #0]
 800800a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800800c:	683b      	ldr	r3, [r7, #0]
 800800e:	2212      	movs	r2, #18
 8008010:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008012:	4b03      	ldr	r3, [pc, #12]	; (8008020 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008014:	4618      	mov	r0, r3
 8008016:	370c      	adds	r7, #12
 8008018:	46bd      	mov	sp, r7
 800801a:	bc80      	pop	{r7}
 800801c:	4770      	bx	lr
 800801e:	bf00      	nop
 8008020:	20000148 	.word	0x20000148

08008024 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008024:	b480      	push	{r7}
 8008026:	b083      	sub	sp, #12
 8008028:	af00      	add	r7, sp, #0
 800802a:	4603      	mov	r3, r0
 800802c:	6039      	str	r1, [r7, #0]
 800802e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008030:	683b      	ldr	r3, [r7, #0]
 8008032:	2204      	movs	r2, #4
 8008034:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008036:	4b03      	ldr	r3, [pc, #12]	; (8008044 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008038:	4618      	mov	r0, r3
 800803a:	370c      	adds	r7, #12
 800803c:	46bd      	mov	sp, r7
 800803e:	bc80      	pop	{r7}
 8008040:	4770      	bx	lr
 8008042:	bf00      	nop
 8008044:	2000015c 	.word	0x2000015c

08008048 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008048:	b580      	push	{r7, lr}
 800804a:	b082      	sub	sp, #8
 800804c:	af00      	add	r7, sp, #0
 800804e:	4603      	mov	r3, r0
 8008050:	6039      	str	r1, [r7, #0]
 8008052:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008054:	79fb      	ldrb	r3, [r7, #7]
 8008056:	2b00      	cmp	r3, #0
 8008058:	d105      	bne.n	8008066 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800805a:	683a      	ldr	r2, [r7, #0]
 800805c:	4907      	ldr	r1, [pc, #28]	; (800807c <USBD_FS_ProductStrDescriptor+0x34>)
 800805e:	4808      	ldr	r0, [pc, #32]	; (8008080 <USBD_FS_ProductStrDescriptor+0x38>)
 8008060:	f7ff fdc8 	bl	8007bf4 <USBD_GetString>
 8008064:	e004      	b.n	8008070 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008066:	683a      	ldr	r2, [r7, #0]
 8008068:	4904      	ldr	r1, [pc, #16]	; (800807c <USBD_FS_ProductStrDescriptor+0x34>)
 800806a:	4805      	ldr	r0, [pc, #20]	; (8008080 <USBD_FS_ProductStrDescriptor+0x38>)
 800806c:	f7ff fdc2 	bl	8007bf4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008070:	4b02      	ldr	r3, [pc, #8]	; (800807c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008072:	4618      	mov	r0, r3
 8008074:	3708      	adds	r7, #8
 8008076:	46bd      	mov	sp, r7
 8008078:	bd80      	pop	{r7, pc}
 800807a:	bf00      	nop
 800807c:	20000d64 	.word	0x20000d64
 8008080:	08009290 	.word	0x08009290

08008084 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008084:	b580      	push	{r7, lr}
 8008086:	b082      	sub	sp, #8
 8008088:	af00      	add	r7, sp, #0
 800808a:	4603      	mov	r3, r0
 800808c:	6039      	str	r1, [r7, #0]
 800808e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008090:	683a      	ldr	r2, [r7, #0]
 8008092:	4904      	ldr	r1, [pc, #16]	; (80080a4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008094:	4804      	ldr	r0, [pc, #16]	; (80080a8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008096:	f7ff fdad 	bl	8007bf4 <USBD_GetString>
  return USBD_StrDesc;
 800809a:	4b02      	ldr	r3, [pc, #8]	; (80080a4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800809c:	4618      	mov	r0, r3
 800809e:	3708      	adds	r7, #8
 80080a0:	46bd      	mov	sp, r7
 80080a2:	bd80      	pop	{r7, pc}
 80080a4:	20000d64 	.word	0x20000d64
 80080a8:	080092a8 	.word	0x080092a8

080080ac <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80080ac:	b580      	push	{r7, lr}
 80080ae:	b082      	sub	sp, #8
 80080b0:	af00      	add	r7, sp, #0
 80080b2:	4603      	mov	r3, r0
 80080b4:	6039      	str	r1, [r7, #0]
 80080b6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80080b8:	683b      	ldr	r3, [r7, #0]
 80080ba:	221a      	movs	r2, #26
 80080bc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80080be:	f000 f843 	bl	8008148 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80080c2:	4b02      	ldr	r3, [pc, #8]	; (80080cc <USBD_FS_SerialStrDescriptor+0x20>)
}
 80080c4:	4618      	mov	r0, r3
 80080c6:	3708      	adds	r7, #8
 80080c8:	46bd      	mov	sp, r7
 80080ca:	bd80      	pop	{r7, pc}
 80080cc:	20000160 	.word	0x20000160

080080d0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80080d0:	b580      	push	{r7, lr}
 80080d2:	b082      	sub	sp, #8
 80080d4:	af00      	add	r7, sp, #0
 80080d6:	4603      	mov	r3, r0
 80080d8:	6039      	str	r1, [r7, #0]
 80080da:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80080dc:	79fb      	ldrb	r3, [r7, #7]
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d105      	bne.n	80080ee <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80080e2:	683a      	ldr	r2, [r7, #0]
 80080e4:	4907      	ldr	r1, [pc, #28]	; (8008104 <USBD_FS_ConfigStrDescriptor+0x34>)
 80080e6:	4808      	ldr	r0, [pc, #32]	; (8008108 <USBD_FS_ConfigStrDescriptor+0x38>)
 80080e8:	f7ff fd84 	bl	8007bf4 <USBD_GetString>
 80080ec:	e004      	b.n	80080f8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80080ee:	683a      	ldr	r2, [r7, #0]
 80080f0:	4904      	ldr	r1, [pc, #16]	; (8008104 <USBD_FS_ConfigStrDescriptor+0x34>)
 80080f2:	4805      	ldr	r0, [pc, #20]	; (8008108 <USBD_FS_ConfigStrDescriptor+0x38>)
 80080f4:	f7ff fd7e 	bl	8007bf4 <USBD_GetString>
  }
  return USBD_StrDesc;
 80080f8:	4b02      	ldr	r3, [pc, #8]	; (8008104 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80080fa:	4618      	mov	r0, r3
 80080fc:	3708      	adds	r7, #8
 80080fe:	46bd      	mov	sp, r7
 8008100:	bd80      	pop	{r7, pc}
 8008102:	bf00      	nop
 8008104:	20000d64 	.word	0x20000d64
 8008108:	080092bc 	.word	0x080092bc

0800810c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800810c:	b580      	push	{r7, lr}
 800810e:	b082      	sub	sp, #8
 8008110:	af00      	add	r7, sp, #0
 8008112:	4603      	mov	r3, r0
 8008114:	6039      	str	r1, [r7, #0]
 8008116:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008118:	79fb      	ldrb	r3, [r7, #7]
 800811a:	2b00      	cmp	r3, #0
 800811c:	d105      	bne.n	800812a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800811e:	683a      	ldr	r2, [r7, #0]
 8008120:	4907      	ldr	r1, [pc, #28]	; (8008140 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008122:	4808      	ldr	r0, [pc, #32]	; (8008144 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008124:	f7ff fd66 	bl	8007bf4 <USBD_GetString>
 8008128:	e004      	b.n	8008134 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800812a:	683a      	ldr	r2, [r7, #0]
 800812c:	4904      	ldr	r1, [pc, #16]	; (8008140 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800812e:	4805      	ldr	r0, [pc, #20]	; (8008144 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008130:	f7ff fd60 	bl	8007bf4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008134:	4b02      	ldr	r3, [pc, #8]	; (8008140 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008136:	4618      	mov	r0, r3
 8008138:	3708      	adds	r7, #8
 800813a:	46bd      	mov	sp, r7
 800813c:	bd80      	pop	{r7, pc}
 800813e:	bf00      	nop
 8008140:	20000d64 	.word	0x20000d64
 8008144:	080092c8 	.word	0x080092c8

08008148 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008148:	b580      	push	{r7, lr}
 800814a:	b084      	sub	sp, #16
 800814c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800814e:	4b0f      	ldr	r3, [pc, #60]	; (800818c <Get_SerialNum+0x44>)
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008154:	4b0e      	ldr	r3, [pc, #56]	; (8008190 <Get_SerialNum+0x48>)
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800815a:	4b0e      	ldr	r3, [pc, #56]	; (8008194 <Get_SerialNum+0x4c>)
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008160:	68fa      	ldr	r2, [r7, #12]
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	4413      	add	r3, r2
 8008166:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	2b00      	cmp	r3, #0
 800816c:	d009      	beq.n	8008182 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800816e:	2208      	movs	r2, #8
 8008170:	4909      	ldr	r1, [pc, #36]	; (8008198 <Get_SerialNum+0x50>)
 8008172:	68f8      	ldr	r0, [r7, #12]
 8008174:	f000 f814 	bl	80081a0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008178:	2204      	movs	r2, #4
 800817a:	4908      	ldr	r1, [pc, #32]	; (800819c <Get_SerialNum+0x54>)
 800817c:	68b8      	ldr	r0, [r7, #8]
 800817e:	f000 f80f 	bl	80081a0 <IntToUnicode>
  }
}
 8008182:	bf00      	nop
 8008184:	3710      	adds	r7, #16
 8008186:	46bd      	mov	sp, r7
 8008188:	bd80      	pop	{r7, pc}
 800818a:	bf00      	nop
 800818c:	1ffff7e8 	.word	0x1ffff7e8
 8008190:	1ffff7ec 	.word	0x1ffff7ec
 8008194:	1ffff7f0 	.word	0x1ffff7f0
 8008198:	20000162 	.word	0x20000162
 800819c:	20000172 	.word	0x20000172

080081a0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80081a0:	b480      	push	{r7}
 80081a2:	b087      	sub	sp, #28
 80081a4:	af00      	add	r7, sp, #0
 80081a6:	60f8      	str	r0, [r7, #12]
 80081a8:	60b9      	str	r1, [r7, #8]
 80081aa:	4613      	mov	r3, r2
 80081ac:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80081ae:	2300      	movs	r3, #0
 80081b0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80081b2:	2300      	movs	r3, #0
 80081b4:	75fb      	strb	r3, [r7, #23]
 80081b6:	e027      	b.n	8008208 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	0f1b      	lsrs	r3, r3, #28
 80081bc:	2b09      	cmp	r3, #9
 80081be:	d80b      	bhi.n	80081d8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	0f1b      	lsrs	r3, r3, #28
 80081c4:	b2da      	uxtb	r2, r3
 80081c6:	7dfb      	ldrb	r3, [r7, #23]
 80081c8:	005b      	lsls	r3, r3, #1
 80081ca:	4619      	mov	r1, r3
 80081cc:	68bb      	ldr	r3, [r7, #8]
 80081ce:	440b      	add	r3, r1
 80081d0:	3230      	adds	r2, #48	; 0x30
 80081d2:	b2d2      	uxtb	r2, r2
 80081d4:	701a      	strb	r2, [r3, #0]
 80081d6:	e00a      	b.n	80081ee <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	0f1b      	lsrs	r3, r3, #28
 80081dc:	b2da      	uxtb	r2, r3
 80081de:	7dfb      	ldrb	r3, [r7, #23]
 80081e0:	005b      	lsls	r3, r3, #1
 80081e2:	4619      	mov	r1, r3
 80081e4:	68bb      	ldr	r3, [r7, #8]
 80081e6:	440b      	add	r3, r1
 80081e8:	3237      	adds	r2, #55	; 0x37
 80081ea:	b2d2      	uxtb	r2, r2
 80081ec:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	011b      	lsls	r3, r3, #4
 80081f2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80081f4:	7dfb      	ldrb	r3, [r7, #23]
 80081f6:	005b      	lsls	r3, r3, #1
 80081f8:	3301      	adds	r3, #1
 80081fa:	68ba      	ldr	r2, [r7, #8]
 80081fc:	4413      	add	r3, r2
 80081fe:	2200      	movs	r2, #0
 8008200:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008202:	7dfb      	ldrb	r3, [r7, #23]
 8008204:	3301      	adds	r3, #1
 8008206:	75fb      	strb	r3, [r7, #23]
 8008208:	7dfa      	ldrb	r2, [r7, #23]
 800820a:	79fb      	ldrb	r3, [r7, #7]
 800820c:	429a      	cmp	r2, r3
 800820e:	d3d3      	bcc.n	80081b8 <IntToUnicode+0x18>
  }
}
 8008210:	bf00      	nop
 8008212:	bf00      	nop
 8008214:	371c      	adds	r7, #28
 8008216:	46bd      	mov	sp, r7
 8008218:	bc80      	pop	{r7}
 800821a:	4770      	bx	lr

0800821c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800821c:	b580      	push	{r7, lr}
 800821e:	b084      	sub	sp, #16
 8008220:	af00      	add	r7, sp, #0
 8008222:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	4a0d      	ldr	r2, [pc, #52]	; (8008260 <HAL_PCD_MspInit+0x44>)
 800822a:	4293      	cmp	r3, r2
 800822c:	d113      	bne.n	8008256 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800822e:	4b0d      	ldr	r3, [pc, #52]	; (8008264 <HAL_PCD_MspInit+0x48>)
 8008230:	69db      	ldr	r3, [r3, #28]
 8008232:	4a0c      	ldr	r2, [pc, #48]	; (8008264 <HAL_PCD_MspInit+0x48>)
 8008234:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008238:	61d3      	str	r3, [r2, #28]
 800823a:	4b0a      	ldr	r3, [pc, #40]	; (8008264 <HAL_PCD_MspInit+0x48>)
 800823c:	69db      	ldr	r3, [r3, #28]
 800823e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008242:	60fb      	str	r3, [r7, #12]
 8008244:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8008246:	2200      	movs	r2, #0
 8008248:	2100      	movs	r1, #0
 800824a:	2014      	movs	r0, #20
 800824c:	f7f8 ff59 	bl	8001102 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8008250:	2014      	movs	r0, #20
 8008252:	f7f8 ff72 	bl	800113a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8008256:	bf00      	nop
 8008258:	3710      	adds	r7, #16
 800825a:	46bd      	mov	sp, r7
 800825c:	bd80      	pop	{r7, pc}
 800825e:	bf00      	nop
 8008260:	40005c00 	.word	0x40005c00
 8008264:	40021000 	.word	0x40021000

08008268 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008268:	b580      	push	{r7, lr}
 800826a:	b082      	sub	sp, #8
 800826c:	af00      	add	r7, sp, #0
 800826e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800827c:	4619      	mov	r1, r3
 800827e:	4610      	mov	r0, r2
 8008280:	f7fe fd87 	bl	8006d92 <USBD_LL_SetupStage>
}
 8008284:	bf00      	nop
 8008286:	3708      	adds	r7, #8
 8008288:	46bd      	mov	sp, r7
 800828a:	bd80      	pop	{r7, pc}

0800828c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800828c:	b580      	push	{r7, lr}
 800828e:	b082      	sub	sp, #8
 8008290:	af00      	add	r7, sp, #0
 8008292:	6078      	str	r0, [r7, #4]
 8008294:	460b      	mov	r3, r1
 8008296:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800829e:	78fa      	ldrb	r2, [r7, #3]
 80082a0:	6879      	ldr	r1, [r7, #4]
 80082a2:	4613      	mov	r3, r2
 80082a4:	009b      	lsls	r3, r3, #2
 80082a6:	4413      	add	r3, r2
 80082a8:	00db      	lsls	r3, r3, #3
 80082aa:	440b      	add	r3, r1
 80082ac:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80082b0:	681a      	ldr	r2, [r3, #0]
 80082b2:	78fb      	ldrb	r3, [r7, #3]
 80082b4:	4619      	mov	r1, r3
 80082b6:	f7fe fdb9 	bl	8006e2c <USBD_LL_DataOutStage>
}
 80082ba:	bf00      	nop
 80082bc:	3708      	adds	r7, #8
 80082be:	46bd      	mov	sp, r7
 80082c0:	bd80      	pop	{r7, pc}

080082c2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80082c2:	b580      	push	{r7, lr}
 80082c4:	b082      	sub	sp, #8
 80082c6:	af00      	add	r7, sp, #0
 80082c8:	6078      	str	r0, [r7, #4]
 80082ca:	460b      	mov	r3, r1
 80082cc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 80082d4:	78fa      	ldrb	r2, [r7, #3]
 80082d6:	6879      	ldr	r1, [r7, #4]
 80082d8:	4613      	mov	r3, r2
 80082da:	009b      	lsls	r3, r3, #2
 80082dc:	4413      	add	r3, r2
 80082de:	00db      	lsls	r3, r3, #3
 80082e0:	440b      	add	r3, r1
 80082e2:	333c      	adds	r3, #60	; 0x3c
 80082e4:	681a      	ldr	r2, [r3, #0]
 80082e6:	78fb      	ldrb	r3, [r7, #3]
 80082e8:	4619      	mov	r1, r3
 80082ea:	f7fe fe10 	bl	8006f0e <USBD_LL_DataInStage>
}
 80082ee:	bf00      	nop
 80082f0:	3708      	adds	r7, #8
 80082f2:	46bd      	mov	sp, r7
 80082f4:	bd80      	pop	{r7, pc}

080082f6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80082f6:	b580      	push	{r7, lr}
 80082f8:	b082      	sub	sp, #8
 80082fa:	af00      	add	r7, sp, #0
 80082fc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008304:	4618      	mov	r0, r3
 8008306:	f7fe ff20 	bl	800714a <USBD_LL_SOF>
}
 800830a:	bf00      	nop
 800830c:	3708      	adds	r7, #8
 800830e:	46bd      	mov	sp, r7
 8008310:	bd80      	pop	{r7, pc}

08008312 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008312:	b580      	push	{r7, lr}
 8008314:	b084      	sub	sp, #16
 8008316:	af00      	add	r7, sp, #0
 8008318:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800831a:	2301      	movs	r3, #1
 800831c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	689b      	ldr	r3, [r3, #8]
 8008322:	2b02      	cmp	r3, #2
 8008324:	d001      	beq.n	800832a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8008326:	f7f8 fc27 	bl	8000b78 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008330:	7bfa      	ldrb	r2, [r7, #15]
 8008332:	4611      	mov	r1, r2
 8008334:	4618      	mov	r0, r3
 8008336:	f7fe fed0 	bl	80070da <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008340:	4618      	mov	r0, r3
 8008342:	f7fe fe89 	bl	8007058 <USBD_LL_Reset>
}
 8008346:	bf00      	nop
 8008348:	3710      	adds	r7, #16
 800834a:	46bd      	mov	sp, r7
 800834c:	bd80      	pop	{r7, pc}
	...

08008350 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008350:	b580      	push	{r7, lr}
 8008352:	b082      	sub	sp, #8
 8008354:	af00      	add	r7, sp, #0
 8008356:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800835e:	4618      	mov	r0, r3
 8008360:	f7fe feca 	bl	80070f8 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	699b      	ldr	r3, [r3, #24]
 8008368:	2b00      	cmp	r3, #0
 800836a:	d005      	beq.n	8008378 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800836c:	4b04      	ldr	r3, [pc, #16]	; (8008380 <HAL_PCD_SuspendCallback+0x30>)
 800836e:	691b      	ldr	r3, [r3, #16]
 8008370:	4a03      	ldr	r2, [pc, #12]	; (8008380 <HAL_PCD_SuspendCallback+0x30>)
 8008372:	f043 0306 	orr.w	r3, r3, #6
 8008376:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008378:	bf00      	nop
 800837a:	3708      	adds	r7, #8
 800837c:	46bd      	mov	sp, r7
 800837e:	bd80      	pop	{r7, pc}
 8008380:	e000ed00 	.word	0xe000ed00

08008384 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008384:	b580      	push	{r7, lr}
 8008386:	b082      	sub	sp, #8
 8008388:	af00      	add	r7, sp, #0
 800838a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008392:	4618      	mov	r0, r3
 8008394:	f7fe fec4 	bl	8007120 <USBD_LL_Resume>
}
 8008398:	bf00      	nop
 800839a:	3708      	adds	r7, #8
 800839c:	46bd      	mov	sp, r7
 800839e:	bd80      	pop	{r7, pc}

080083a0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80083a0:	b580      	push	{r7, lr}
 80083a2:	b082      	sub	sp, #8
 80083a4:	af00      	add	r7, sp, #0
 80083a6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 80083a8:	4a28      	ldr	r2, [pc, #160]	; (800844c <USBD_LL_Init+0xac>)
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	4a26      	ldr	r2, [pc, #152]	; (800844c <USBD_LL_Init+0xac>)
 80083b4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 80083b8:	4b24      	ldr	r3, [pc, #144]	; (800844c <USBD_LL_Init+0xac>)
 80083ba:	4a25      	ldr	r2, [pc, #148]	; (8008450 <USBD_LL_Init+0xb0>)
 80083bc:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80083be:	4b23      	ldr	r3, [pc, #140]	; (800844c <USBD_LL_Init+0xac>)
 80083c0:	2208      	movs	r2, #8
 80083c2:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80083c4:	4b21      	ldr	r3, [pc, #132]	; (800844c <USBD_LL_Init+0xac>)
 80083c6:	2202      	movs	r2, #2
 80083c8:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80083ca:	4b20      	ldr	r3, [pc, #128]	; (800844c <USBD_LL_Init+0xac>)
 80083cc:	2200      	movs	r2, #0
 80083ce:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80083d0:	4b1e      	ldr	r3, [pc, #120]	; (800844c <USBD_LL_Init+0xac>)
 80083d2:	2200      	movs	r2, #0
 80083d4:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80083d6:	4b1d      	ldr	r3, [pc, #116]	; (800844c <USBD_LL_Init+0xac>)
 80083d8:	2200      	movs	r2, #0
 80083da:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80083dc:	481b      	ldr	r0, [pc, #108]	; (800844c <USBD_LL_Init+0xac>)
 80083de:	f7f9 f8b5 	bl	800154c <HAL_PCD_Init>
 80083e2:	4603      	mov	r3, r0
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d001      	beq.n	80083ec <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 80083e8:	f7f8 fbc6 	bl	8000b78 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80083f2:	2318      	movs	r3, #24
 80083f4:	2200      	movs	r2, #0
 80083f6:	2100      	movs	r1, #0
 80083f8:	f7fa fd29 	bl	8002e4e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008402:	2358      	movs	r3, #88	; 0x58
 8008404:	2200      	movs	r2, #0
 8008406:	2180      	movs	r1, #128	; 0x80
 8008408:	f7fa fd21 	bl	8002e4e <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008412:	23c0      	movs	r3, #192	; 0xc0
 8008414:	2200      	movs	r2, #0
 8008416:	2181      	movs	r1, #129	; 0x81
 8008418:	f7fa fd19 	bl	8002e4e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008422:	f44f 7388 	mov.w	r3, #272	; 0x110
 8008426:	2200      	movs	r2, #0
 8008428:	2101      	movs	r1, #1
 800842a:	f7fa fd10 	bl	8002e4e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008434:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008438:	2200      	movs	r2, #0
 800843a:	2182      	movs	r1, #130	; 0x82
 800843c:	f7fa fd07 	bl	8002e4e <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8008440:	2300      	movs	r3, #0
}
 8008442:	4618      	mov	r0, r3
 8008444:	3708      	adds	r7, #8
 8008446:	46bd      	mov	sp, r7
 8008448:	bd80      	pop	{r7, pc}
 800844a:	bf00      	nop
 800844c:	20000f64 	.word	0x20000f64
 8008450:	40005c00 	.word	0x40005c00

08008454 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008454:	b580      	push	{r7, lr}
 8008456:	b084      	sub	sp, #16
 8008458:	af00      	add	r7, sp, #0
 800845a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800845c:	2300      	movs	r3, #0
 800845e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008460:	2300      	movs	r3, #0
 8008462:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800846a:	4618      	mov	r0, r3
 800846c:	f7f9 f979 	bl	8001762 <HAL_PCD_Start>
 8008470:	4603      	mov	r3, r0
 8008472:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008474:	7bfb      	ldrb	r3, [r7, #15]
 8008476:	4618      	mov	r0, r3
 8008478:	f000 f94e 	bl	8008718 <USBD_Get_USB_Status>
 800847c:	4603      	mov	r3, r0
 800847e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008480:	7bbb      	ldrb	r3, [r7, #14]
}
 8008482:	4618      	mov	r0, r3
 8008484:	3710      	adds	r7, #16
 8008486:	46bd      	mov	sp, r7
 8008488:	bd80      	pop	{r7, pc}

0800848a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800848a:	b580      	push	{r7, lr}
 800848c:	b084      	sub	sp, #16
 800848e:	af00      	add	r7, sp, #0
 8008490:	6078      	str	r0, [r7, #4]
 8008492:	4608      	mov	r0, r1
 8008494:	4611      	mov	r1, r2
 8008496:	461a      	mov	r2, r3
 8008498:	4603      	mov	r3, r0
 800849a:	70fb      	strb	r3, [r7, #3]
 800849c:	460b      	mov	r3, r1
 800849e:	70bb      	strb	r3, [r7, #2]
 80084a0:	4613      	mov	r3, r2
 80084a2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80084a4:	2300      	movs	r3, #0
 80084a6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80084a8:	2300      	movs	r3, #0
 80084aa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80084b2:	78bb      	ldrb	r3, [r7, #2]
 80084b4:	883a      	ldrh	r2, [r7, #0]
 80084b6:	78f9      	ldrb	r1, [r7, #3]
 80084b8:	f7f9 faf1 	bl	8001a9e <HAL_PCD_EP_Open>
 80084bc:	4603      	mov	r3, r0
 80084be:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80084c0:	7bfb      	ldrb	r3, [r7, #15]
 80084c2:	4618      	mov	r0, r3
 80084c4:	f000 f928 	bl	8008718 <USBD_Get_USB_Status>
 80084c8:	4603      	mov	r3, r0
 80084ca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80084cc:	7bbb      	ldrb	r3, [r7, #14]
}
 80084ce:	4618      	mov	r0, r3
 80084d0:	3710      	adds	r7, #16
 80084d2:	46bd      	mov	sp, r7
 80084d4:	bd80      	pop	{r7, pc}

080084d6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80084d6:	b580      	push	{r7, lr}
 80084d8:	b084      	sub	sp, #16
 80084da:	af00      	add	r7, sp, #0
 80084dc:	6078      	str	r0, [r7, #4]
 80084de:	460b      	mov	r3, r1
 80084e0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80084e2:	2300      	movs	r3, #0
 80084e4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80084e6:	2300      	movs	r3, #0
 80084e8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80084f0:	78fa      	ldrb	r2, [r7, #3]
 80084f2:	4611      	mov	r1, r2
 80084f4:	4618      	mov	r0, r3
 80084f6:	f7f9 fb38 	bl	8001b6a <HAL_PCD_EP_Close>
 80084fa:	4603      	mov	r3, r0
 80084fc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80084fe:	7bfb      	ldrb	r3, [r7, #15]
 8008500:	4618      	mov	r0, r3
 8008502:	f000 f909 	bl	8008718 <USBD_Get_USB_Status>
 8008506:	4603      	mov	r3, r0
 8008508:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800850a:	7bbb      	ldrb	r3, [r7, #14]
}
 800850c:	4618      	mov	r0, r3
 800850e:	3710      	adds	r7, #16
 8008510:	46bd      	mov	sp, r7
 8008512:	bd80      	pop	{r7, pc}

08008514 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008514:	b580      	push	{r7, lr}
 8008516:	b084      	sub	sp, #16
 8008518:	af00      	add	r7, sp, #0
 800851a:	6078      	str	r0, [r7, #4]
 800851c:	460b      	mov	r3, r1
 800851e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008520:	2300      	movs	r3, #0
 8008522:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008524:	2300      	movs	r3, #0
 8008526:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800852e:	78fa      	ldrb	r2, [r7, #3]
 8008530:	4611      	mov	r1, r2
 8008532:	4618      	mov	r0, r3
 8008534:	f7f9 fbf8 	bl	8001d28 <HAL_PCD_EP_SetStall>
 8008538:	4603      	mov	r3, r0
 800853a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800853c:	7bfb      	ldrb	r3, [r7, #15]
 800853e:	4618      	mov	r0, r3
 8008540:	f000 f8ea 	bl	8008718 <USBD_Get_USB_Status>
 8008544:	4603      	mov	r3, r0
 8008546:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008548:	7bbb      	ldrb	r3, [r7, #14]
}
 800854a:	4618      	mov	r0, r3
 800854c:	3710      	adds	r7, #16
 800854e:	46bd      	mov	sp, r7
 8008550:	bd80      	pop	{r7, pc}

08008552 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008552:	b580      	push	{r7, lr}
 8008554:	b084      	sub	sp, #16
 8008556:	af00      	add	r7, sp, #0
 8008558:	6078      	str	r0, [r7, #4]
 800855a:	460b      	mov	r3, r1
 800855c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800855e:	2300      	movs	r3, #0
 8008560:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008562:	2300      	movs	r3, #0
 8008564:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800856c:	78fa      	ldrb	r2, [r7, #3]
 800856e:	4611      	mov	r1, r2
 8008570:	4618      	mov	r0, r3
 8008572:	f7f9 fc39 	bl	8001de8 <HAL_PCD_EP_ClrStall>
 8008576:	4603      	mov	r3, r0
 8008578:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800857a:	7bfb      	ldrb	r3, [r7, #15]
 800857c:	4618      	mov	r0, r3
 800857e:	f000 f8cb 	bl	8008718 <USBD_Get_USB_Status>
 8008582:	4603      	mov	r3, r0
 8008584:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008586:	7bbb      	ldrb	r3, [r7, #14]
}
 8008588:	4618      	mov	r0, r3
 800858a:	3710      	adds	r7, #16
 800858c:	46bd      	mov	sp, r7
 800858e:	bd80      	pop	{r7, pc}

08008590 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008590:	b480      	push	{r7}
 8008592:	b085      	sub	sp, #20
 8008594:	af00      	add	r7, sp, #0
 8008596:	6078      	str	r0, [r7, #4]
 8008598:	460b      	mov	r3, r1
 800859a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80085a2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80085a4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	da0c      	bge.n	80085c6 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80085ac:	78fb      	ldrb	r3, [r7, #3]
 80085ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80085b2:	68f9      	ldr	r1, [r7, #12]
 80085b4:	1c5a      	adds	r2, r3, #1
 80085b6:	4613      	mov	r3, r2
 80085b8:	009b      	lsls	r3, r3, #2
 80085ba:	4413      	add	r3, r2
 80085bc:	00db      	lsls	r3, r3, #3
 80085be:	440b      	add	r3, r1
 80085c0:	3302      	adds	r3, #2
 80085c2:	781b      	ldrb	r3, [r3, #0]
 80085c4:	e00b      	b.n	80085de <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80085c6:	78fb      	ldrb	r3, [r7, #3]
 80085c8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80085cc:	68f9      	ldr	r1, [r7, #12]
 80085ce:	4613      	mov	r3, r2
 80085d0:	009b      	lsls	r3, r3, #2
 80085d2:	4413      	add	r3, r2
 80085d4:	00db      	lsls	r3, r3, #3
 80085d6:	440b      	add	r3, r1
 80085d8:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 80085dc:	781b      	ldrb	r3, [r3, #0]
  }
}
 80085de:	4618      	mov	r0, r3
 80085e0:	3714      	adds	r7, #20
 80085e2:	46bd      	mov	sp, r7
 80085e4:	bc80      	pop	{r7}
 80085e6:	4770      	bx	lr

080085e8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80085e8:	b580      	push	{r7, lr}
 80085ea:	b084      	sub	sp, #16
 80085ec:	af00      	add	r7, sp, #0
 80085ee:	6078      	str	r0, [r7, #4]
 80085f0:	460b      	mov	r3, r1
 80085f2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80085f4:	2300      	movs	r3, #0
 80085f6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80085f8:	2300      	movs	r3, #0
 80085fa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008602:	78fa      	ldrb	r2, [r7, #3]
 8008604:	4611      	mov	r1, r2
 8008606:	4618      	mov	r0, r3
 8008608:	f7f9 fa24 	bl	8001a54 <HAL_PCD_SetAddress>
 800860c:	4603      	mov	r3, r0
 800860e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008610:	7bfb      	ldrb	r3, [r7, #15]
 8008612:	4618      	mov	r0, r3
 8008614:	f000 f880 	bl	8008718 <USBD_Get_USB_Status>
 8008618:	4603      	mov	r3, r0
 800861a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800861c:	7bbb      	ldrb	r3, [r7, #14]
}
 800861e:	4618      	mov	r0, r3
 8008620:	3710      	adds	r7, #16
 8008622:	46bd      	mov	sp, r7
 8008624:	bd80      	pop	{r7, pc}

08008626 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008626:	b580      	push	{r7, lr}
 8008628:	b086      	sub	sp, #24
 800862a:	af00      	add	r7, sp, #0
 800862c:	60f8      	str	r0, [r7, #12]
 800862e:	607a      	str	r2, [r7, #4]
 8008630:	461a      	mov	r2, r3
 8008632:	460b      	mov	r3, r1
 8008634:	72fb      	strb	r3, [r7, #11]
 8008636:	4613      	mov	r3, r2
 8008638:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800863a:	2300      	movs	r3, #0
 800863c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800863e:	2300      	movs	r3, #0
 8008640:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008648:	893b      	ldrh	r3, [r7, #8]
 800864a:	7af9      	ldrb	r1, [r7, #11]
 800864c:	687a      	ldr	r2, [r7, #4]
 800864e:	f7f9 fb28 	bl	8001ca2 <HAL_PCD_EP_Transmit>
 8008652:	4603      	mov	r3, r0
 8008654:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008656:	7dfb      	ldrb	r3, [r7, #23]
 8008658:	4618      	mov	r0, r3
 800865a:	f000 f85d 	bl	8008718 <USBD_Get_USB_Status>
 800865e:	4603      	mov	r3, r0
 8008660:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008662:	7dbb      	ldrb	r3, [r7, #22]
}
 8008664:	4618      	mov	r0, r3
 8008666:	3718      	adds	r7, #24
 8008668:	46bd      	mov	sp, r7
 800866a:	bd80      	pop	{r7, pc}

0800866c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800866c:	b580      	push	{r7, lr}
 800866e:	b086      	sub	sp, #24
 8008670:	af00      	add	r7, sp, #0
 8008672:	60f8      	str	r0, [r7, #12]
 8008674:	607a      	str	r2, [r7, #4]
 8008676:	461a      	mov	r2, r3
 8008678:	460b      	mov	r3, r1
 800867a:	72fb      	strb	r3, [r7, #11]
 800867c:	4613      	mov	r3, r2
 800867e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008680:	2300      	movs	r3, #0
 8008682:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008684:	2300      	movs	r3, #0
 8008686:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800868e:	893b      	ldrh	r3, [r7, #8]
 8008690:	7af9      	ldrb	r1, [r7, #11]
 8008692:	687a      	ldr	r2, [r7, #4]
 8008694:	f7f9 fab1 	bl	8001bfa <HAL_PCD_EP_Receive>
 8008698:	4603      	mov	r3, r0
 800869a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800869c:	7dfb      	ldrb	r3, [r7, #23]
 800869e:	4618      	mov	r0, r3
 80086a0:	f000 f83a 	bl	8008718 <USBD_Get_USB_Status>
 80086a4:	4603      	mov	r3, r0
 80086a6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80086a8:	7dbb      	ldrb	r3, [r7, #22]
}
 80086aa:	4618      	mov	r0, r3
 80086ac:	3718      	adds	r7, #24
 80086ae:	46bd      	mov	sp, r7
 80086b0:	bd80      	pop	{r7, pc}

080086b2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80086b2:	b580      	push	{r7, lr}
 80086b4:	b082      	sub	sp, #8
 80086b6:	af00      	add	r7, sp, #0
 80086b8:	6078      	str	r0, [r7, #4]
 80086ba:	460b      	mov	r3, r1
 80086bc:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80086c4:	78fa      	ldrb	r2, [r7, #3]
 80086c6:	4611      	mov	r1, r2
 80086c8:	4618      	mov	r0, r3
 80086ca:	f7f9 fad3 	bl	8001c74 <HAL_PCD_EP_GetRxCount>
 80086ce:	4603      	mov	r3, r0
}
 80086d0:	4618      	mov	r0, r3
 80086d2:	3708      	adds	r7, #8
 80086d4:	46bd      	mov	sp, r7
 80086d6:	bd80      	pop	{r7, pc}

080086d8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80086d8:	b480      	push	{r7}
 80086da:	b083      	sub	sp, #12
 80086dc:	af00      	add	r7, sp, #0
 80086de:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80086e0:	4b02      	ldr	r3, [pc, #8]	; (80086ec <USBD_static_malloc+0x14>)
}
 80086e2:	4618      	mov	r0, r3
 80086e4:	370c      	adds	r7, #12
 80086e6:	46bd      	mov	sp, r7
 80086e8:	bc80      	pop	{r7}
 80086ea:	4770      	bx	lr
 80086ec:	20001250 	.word	0x20001250

080086f0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80086f0:	b480      	push	{r7}
 80086f2:	b083      	sub	sp, #12
 80086f4:	af00      	add	r7, sp, #0
 80086f6:	6078      	str	r0, [r7, #4]

}
 80086f8:	bf00      	nop
 80086fa:	370c      	adds	r7, #12
 80086fc:	46bd      	mov	sp, r7
 80086fe:	bc80      	pop	{r7}
 8008700:	4770      	bx	lr

08008702 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008702:	b480      	push	{r7}
 8008704:	b083      	sub	sp, #12
 8008706:	af00      	add	r7, sp, #0
 8008708:	6078      	str	r0, [r7, #4]
 800870a:	460b      	mov	r3, r1
 800870c:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800870e:	bf00      	nop
 8008710:	370c      	adds	r7, #12
 8008712:	46bd      	mov	sp, r7
 8008714:	bc80      	pop	{r7}
 8008716:	4770      	bx	lr

08008718 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008718:	b480      	push	{r7}
 800871a:	b085      	sub	sp, #20
 800871c:	af00      	add	r7, sp, #0
 800871e:	4603      	mov	r3, r0
 8008720:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008722:	2300      	movs	r3, #0
 8008724:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008726:	79fb      	ldrb	r3, [r7, #7]
 8008728:	2b03      	cmp	r3, #3
 800872a:	d817      	bhi.n	800875c <USBD_Get_USB_Status+0x44>
 800872c:	a201      	add	r2, pc, #4	; (adr r2, 8008734 <USBD_Get_USB_Status+0x1c>)
 800872e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008732:	bf00      	nop
 8008734:	08008745 	.word	0x08008745
 8008738:	0800874b 	.word	0x0800874b
 800873c:	08008751 	.word	0x08008751
 8008740:	08008757 	.word	0x08008757
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008744:	2300      	movs	r3, #0
 8008746:	73fb      	strb	r3, [r7, #15]
    break;
 8008748:	e00b      	b.n	8008762 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800874a:	2302      	movs	r3, #2
 800874c:	73fb      	strb	r3, [r7, #15]
    break;
 800874e:	e008      	b.n	8008762 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008750:	2301      	movs	r3, #1
 8008752:	73fb      	strb	r3, [r7, #15]
    break;
 8008754:	e005      	b.n	8008762 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008756:	2302      	movs	r3, #2
 8008758:	73fb      	strb	r3, [r7, #15]
    break;
 800875a:	e002      	b.n	8008762 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800875c:	2302      	movs	r3, #2
 800875e:	73fb      	strb	r3, [r7, #15]
    break;
 8008760:	bf00      	nop
  }
  return usb_status;
 8008762:	7bfb      	ldrb	r3, [r7, #15]
}
 8008764:	4618      	mov	r0, r3
 8008766:	3714      	adds	r7, #20
 8008768:	46bd      	mov	sp, r7
 800876a:	bc80      	pop	{r7}
 800876c:	4770      	bx	lr
 800876e:	bf00      	nop

08008770 <sniprintf>:
 8008770:	b40c      	push	{r2, r3}
 8008772:	b530      	push	{r4, r5, lr}
 8008774:	4b17      	ldr	r3, [pc, #92]	; (80087d4 <sniprintf+0x64>)
 8008776:	1e0c      	subs	r4, r1, #0
 8008778:	681d      	ldr	r5, [r3, #0]
 800877a:	b09d      	sub	sp, #116	; 0x74
 800877c:	da08      	bge.n	8008790 <sniprintf+0x20>
 800877e:	238b      	movs	r3, #139	; 0x8b
 8008780:	f04f 30ff 	mov.w	r0, #4294967295
 8008784:	602b      	str	r3, [r5, #0]
 8008786:	b01d      	add	sp, #116	; 0x74
 8008788:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800878c:	b002      	add	sp, #8
 800878e:	4770      	bx	lr
 8008790:	f44f 7302 	mov.w	r3, #520	; 0x208
 8008794:	f8ad 3014 	strh.w	r3, [sp, #20]
 8008798:	bf0c      	ite	eq
 800879a:	4623      	moveq	r3, r4
 800879c:	f104 33ff 	addne.w	r3, r4, #4294967295
 80087a0:	9304      	str	r3, [sp, #16]
 80087a2:	9307      	str	r3, [sp, #28]
 80087a4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80087a8:	9002      	str	r0, [sp, #8]
 80087aa:	9006      	str	r0, [sp, #24]
 80087ac:	f8ad 3016 	strh.w	r3, [sp, #22]
 80087b0:	4628      	mov	r0, r5
 80087b2:	ab21      	add	r3, sp, #132	; 0x84
 80087b4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80087b6:	a902      	add	r1, sp, #8
 80087b8:	9301      	str	r3, [sp, #4]
 80087ba:	f000 f98f 	bl	8008adc <_svfiprintf_r>
 80087be:	1c43      	adds	r3, r0, #1
 80087c0:	bfbc      	itt	lt
 80087c2:	238b      	movlt	r3, #139	; 0x8b
 80087c4:	602b      	strlt	r3, [r5, #0]
 80087c6:	2c00      	cmp	r4, #0
 80087c8:	d0dd      	beq.n	8008786 <sniprintf+0x16>
 80087ca:	2200      	movs	r2, #0
 80087cc:	9b02      	ldr	r3, [sp, #8]
 80087ce:	701a      	strb	r2, [r3, #0]
 80087d0:	e7d9      	b.n	8008786 <sniprintf+0x16>
 80087d2:	bf00      	nop
 80087d4:	200001c8 	.word	0x200001c8

080087d8 <memset>:
 80087d8:	4603      	mov	r3, r0
 80087da:	4402      	add	r2, r0
 80087dc:	4293      	cmp	r3, r2
 80087de:	d100      	bne.n	80087e2 <memset+0xa>
 80087e0:	4770      	bx	lr
 80087e2:	f803 1b01 	strb.w	r1, [r3], #1
 80087e6:	e7f9      	b.n	80087dc <memset+0x4>

080087e8 <__errno>:
 80087e8:	4b01      	ldr	r3, [pc, #4]	; (80087f0 <__errno+0x8>)
 80087ea:	6818      	ldr	r0, [r3, #0]
 80087ec:	4770      	bx	lr
 80087ee:	bf00      	nop
 80087f0:	200001c8 	.word	0x200001c8

080087f4 <__libc_init_array>:
 80087f4:	b570      	push	{r4, r5, r6, lr}
 80087f6:	2600      	movs	r6, #0
 80087f8:	4d0c      	ldr	r5, [pc, #48]	; (800882c <__libc_init_array+0x38>)
 80087fa:	4c0d      	ldr	r4, [pc, #52]	; (8008830 <__libc_init_array+0x3c>)
 80087fc:	1b64      	subs	r4, r4, r5
 80087fe:	10a4      	asrs	r4, r4, #2
 8008800:	42a6      	cmp	r6, r4
 8008802:	d109      	bne.n	8008818 <__libc_init_array+0x24>
 8008804:	f000 fc7a 	bl	80090fc <_init>
 8008808:	2600      	movs	r6, #0
 800880a:	4d0a      	ldr	r5, [pc, #40]	; (8008834 <__libc_init_array+0x40>)
 800880c:	4c0a      	ldr	r4, [pc, #40]	; (8008838 <__libc_init_array+0x44>)
 800880e:	1b64      	subs	r4, r4, r5
 8008810:	10a4      	asrs	r4, r4, #2
 8008812:	42a6      	cmp	r6, r4
 8008814:	d105      	bne.n	8008822 <__libc_init_array+0x2e>
 8008816:	bd70      	pop	{r4, r5, r6, pc}
 8008818:	f855 3b04 	ldr.w	r3, [r5], #4
 800881c:	4798      	blx	r3
 800881e:	3601      	adds	r6, #1
 8008820:	e7ee      	b.n	8008800 <__libc_init_array+0xc>
 8008822:	f855 3b04 	ldr.w	r3, [r5], #4
 8008826:	4798      	blx	r3
 8008828:	3601      	adds	r6, #1
 800882a:	e7f2      	b.n	8008812 <__libc_init_array+0x1e>
 800882c:	08009324 	.word	0x08009324
 8008830:	08009324 	.word	0x08009324
 8008834:	08009324 	.word	0x08009324
 8008838:	08009328 	.word	0x08009328

0800883c <__retarget_lock_acquire_recursive>:
 800883c:	4770      	bx	lr

0800883e <__retarget_lock_release_recursive>:
 800883e:	4770      	bx	lr

08008840 <_free_r>:
 8008840:	b538      	push	{r3, r4, r5, lr}
 8008842:	4605      	mov	r5, r0
 8008844:	2900      	cmp	r1, #0
 8008846:	d040      	beq.n	80088ca <_free_r+0x8a>
 8008848:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800884c:	1f0c      	subs	r4, r1, #4
 800884e:	2b00      	cmp	r3, #0
 8008850:	bfb8      	it	lt
 8008852:	18e4      	addlt	r4, r4, r3
 8008854:	f000 f8dc 	bl	8008a10 <__malloc_lock>
 8008858:	4a1c      	ldr	r2, [pc, #112]	; (80088cc <_free_r+0x8c>)
 800885a:	6813      	ldr	r3, [r2, #0]
 800885c:	b933      	cbnz	r3, 800886c <_free_r+0x2c>
 800885e:	6063      	str	r3, [r4, #4]
 8008860:	6014      	str	r4, [r2, #0]
 8008862:	4628      	mov	r0, r5
 8008864:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008868:	f000 b8d8 	b.w	8008a1c <__malloc_unlock>
 800886c:	42a3      	cmp	r3, r4
 800886e:	d908      	bls.n	8008882 <_free_r+0x42>
 8008870:	6820      	ldr	r0, [r4, #0]
 8008872:	1821      	adds	r1, r4, r0
 8008874:	428b      	cmp	r3, r1
 8008876:	bf01      	itttt	eq
 8008878:	6819      	ldreq	r1, [r3, #0]
 800887a:	685b      	ldreq	r3, [r3, #4]
 800887c:	1809      	addeq	r1, r1, r0
 800887e:	6021      	streq	r1, [r4, #0]
 8008880:	e7ed      	b.n	800885e <_free_r+0x1e>
 8008882:	461a      	mov	r2, r3
 8008884:	685b      	ldr	r3, [r3, #4]
 8008886:	b10b      	cbz	r3, 800888c <_free_r+0x4c>
 8008888:	42a3      	cmp	r3, r4
 800888a:	d9fa      	bls.n	8008882 <_free_r+0x42>
 800888c:	6811      	ldr	r1, [r2, #0]
 800888e:	1850      	adds	r0, r2, r1
 8008890:	42a0      	cmp	r0, r4
 8008892:	d10b      	bne.n	80088ac <_free_r+0x6c>
 8008894:	6820      	ldr	r0, [r4, #0]
 8008896:	4401      	add	r1, r0
 8008898:	1850      	adds	r0, r2, r1
 800889a:	4283      	cmp	r3, r0
 800889c:	6011      	str	r1, [r2, #0]
 800889e:	d1e0      	bne.n	8008862 <_free_r+0x22>
 80088a0:	6818      	ldr	r0, [r3, #0]
 80088a2:	685b      	ldr	r3, [r3, #4]
 80088a4:	4408      	add	r0, r1
 80088a6:	6010      	str	r0, [r2, #0]
 80088a8:	6053      	str	r3, [r2, #4]
 80088aa:	e7da      	b.n	8008862 <_free_r+0x22>
 80088ac:	d902      	bls.n	80088b4 <_free_r+0x74>
 80088ae:	230c      	movs	r3, #12
 80088b0:	602b      	str	r3, [r5, #0]
 80088b2:	e7d6      	b.n	8008862 <_free_r+0x22>
 80088b4:	6820      	ldr	r0, [r4, #0]
 80088b6:	1821      	adds	r1, r4, r0
 80088b8:	428b      	cmp	r3, r1
 80088ba:	bf01      	itttt	eq
 80088bc:	6819      	ldreq	r1, [r3, #0]
 80088be:	685b      	ldreq	r3, [r3, #4]
 80088c0:	1809      	addeq	r1, r1, r0
 80088c2:	6021      	streq	r1, [r4, #0]
 80088c4:	6063      	str	r3, [r4, #4]
 80088c6:	6054      	str	r4, [r2, #4]
 80088c8:	e7cb      	b.n	8008862 <_free_r+0x22>
 80088ca:	bd38      	pop	{r3, r4, r5, pc}
 80088cc:	200015b0 	.word	0x200015b0

080088d0 <sbrk_aligned>:
 80088d0:	b570      	push	{r4, r5, r6, lr}
 80088d2:	4e0e      	ldr	r6, [pc, #56]	; (800890c <sbrk_aligned+0x3c>)
 80088d4:	460c      	mov	r4, r1
 80088d6:	6831      	ldr	r1, [r6, #0]
 80088d8:	4605      	mov	r5, r0
 80088da:	b911      	cbnz	r1, 80088e2 <sbrk_aligned+0x12>
 80088dc:	f000 fbaa 	bl	8009034 <_sbrk_r>
 80088e0:	6030      	str	r0, [r6, #0]
 80088e2:	4621      	mov	r1, r4
 80088e4:	4628      	mov	r0, r5
 80088e6:	f000 fba5 	bl	8009034 <_sbrk_r>
 80088ea:	1c43      	adds	r3, r0, #1
 80088ec:	d00a      	beq.n	8008904 <sbrk_aligned+0x34>
 80088ee:	1cc4      	adds	r4, r0, #3
 80088f0:	f024 0403 	bic.w	r4, r4, #3
 80088f4:	42a0      	cmp	r0, r4
 80088f6:	d007      	beq.n	8008908 <sbrk_aligned+0x38>
 80088f8:	1a21      	subs	r1, r4, r0
 80088fa:	4628      	mov	r0, r5
 80088fc:	f000 fb9a 	bl	8009034 <_sbrk_r>
 8008900:	3001      	adds	r0, #1
 8008902:	d101      	bne.n	8008908 <sbrk_aligned+0x38>
 8008904:	f04f 34ff 	mov.w	r4, #4294967295
 8008908:	4620      	mov	r0, r4
 800890a:	bd70      	pop	{r4, r5, r6, pc}
 800890c:	200015b4 	.word	0x200015b4

08008910 <_malloc_r>:
 8008910:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008914:	1ccd      	adds	r5, r1, #3
 8008916:	f025 0503 	bic.w	r5, r5, #3
 800891a:	3508      	adds	r5, #8
 800891c:	2d0c      	cmp	r5, #12
 800891e:	bf38      	it	cc
 8008920:	250c      	movcc	r5, #12
 8008922:	2d00      	cmp	r5, #0
 8008924:	4607      	mov	r7, r0
 8008926:	db01      	blt.n	800892c <_malloc_r+0x1c>
 8008928:	42a9      	cmp	r1, r5
 800892a:	d905      	bls.n	8008938 <_malloc_r+0x28>
 800892c:	230c      	movs	r3, #12
 800892e:	2600      	movs	r6, #0
 8008930:	603b      	str	r3, [r7, #0]
 8008932:	4630      	mov	r0, r6
 8008934:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008938:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008a0c <_malloc_r+0xfc>
 800893c:	f000 f868 	bl	8008a10 <__malloc_lock>
 8008940:	f8d8 3000 	ldr.w	r3, [r8]
 8008944:	461c      	mov	r4, r3
 8008946:	bb5c      	cbnz	r4, 80089a0 <_malloc_r+0x90>
 8008948:	4629      	mov	r1, r5
 800894a:	4638      	mov	r0, r7
 800894c:	f7ff ffc0 	bl	80088d0 <sbrk_aligned>
 8008950:	1c43      	adds	r3, r0, #1
 8008952:	4604      	mov	r4, r0
 8008954:	d155      	bne.n	8008a02 <_malloc_r+0xf2>
 8008956:	f8d8 4000 	ldr.w	r4, [r8]
 800895a:	4626      	mov	r6, r4
 800895c:	2e00      	cmp	r6, #0
 800895e:	d145      	bne.n	80089ec <_malloc_r+0xdc>
 8008960:	2c00      	cmp	r4, #0
 8008962:	d048      	beq.n	80089f6 <_malloc_r+0xe6>
 8008964:	6823      	ldr	r3, [r4, #0]
 8008966:	4631      	mov	r1, r6
 8008968:	4638      	mov	r0, r7
 800896a:	eb04 0903 	add.w	r9, r4, r3
 800896e:	f000 fb61 	bl	8009034 <_sbrk_r>
 8008972:	4581      	cmp	r9, r0
 8008974:	d13f      	bne.n	80089f6 <_malloc_r+0xe6>
 8008976:	6821      	ldr	r1, [r4, #0]
 8008978:	4638      	mov	r0, r7
 800897a:	1a6d      	subs	r5, r5, r1
 800897c:	4629      	mov	r1, r5
 800897e:	f7ff ffa7 	bl	80088d0 <sbrk_aligned>
 8008982:	3001      	adds	r0, #1
 8008984:	d037      	beq.n	80089f6 <_malloc_r+0xe6>
 8008986:	6823      	ldr	r3, [r4, #0]
 8008988:	442b      	add	r3, r5
 800898a:	6023      	str	r3, [r4, #0]
 800898c:	f8d8 3000 	ldr.w	r3, [r8]
 8008990:	2b00      	cmp	r3, #0
 8008992:	d038      	beq.n	8008a06 <_malloc_r+0xf6>
 8008994:	685a      	ldr	r2, [r3, #4]
 8008996:	42a2      	cmp	r2, r4
 8008998:	d12b      	bne.n	80089f2 <_malloc_r+0xe2>
 800899a:	2200      	movs	r2, #0
 800899c:	605a      	str	r2, [r3, #4]
 800899e:	e00f      	b.n	80089c0 <_malloc_r+0xb0>
 80089a0:	6822      	ldr	r2, [r4, #0]
 80089a2:	1b52      	subs	r2, r2, r5
 80089a4:	d41f      	bmi.n	80089e6 <_malloc_r+0xd6>
 80089a6:	2a0b      	cmp	r2, #11
 80089a8:	d917      	bls.n	80089da <_malloc_r+0xca>
 80089aa:	1961      	adds	r1, r4, r5
 80089ac:	42a3      	cmp	r3, r4
 80089ae:	6025      	str	r5, [r4, #0]
 80089b0:	bf18      	it	ne
 80089b2:	6059      	strne	r1, [r3, #4]
 80089b4:	6863      	ldr	r3, [r4, #4]
 80089b6:	bf08      	it	eq
 80089b8:	f8c8 1000 	streq.w	r1, [r8]
 80089bc:	5162      	str	r2, [r4, r5]
 80089be:	604b      	str	r3, [r1, #4]
 80089c0:	4638      	mov	r0, r7
 80089c2:	f104 060b 	add.w	r6, r4, #11
 80089c6:	f000 f829 	bl	8008a1c <__malloc_unlock>
 80089ca:	f026 0607 	bic.w	r6, r6, #7
 80089ce:	1d23      	adds	r3, r4, #4
 80089d0:	1af2      	subs	r2, r6, r3
 80089d2:	d0ae      	beq.n	8008932 <_malloc_r+0x22>
 80089d4:	1b9b      	subs	r3, r3, r6
 80089d6:	50a3      	str	r3, [r4, r2]
 80089d8:	e7ab      	b.n	8008932 <_malloc_r+0x22>
 80089da:	42a3      	cmp	r3, r4
 80089dc:	6862      	ldr	r2, [r4, #4]
 80089de:	d1dd      	bne.n	800899c <_malloc_r+0x8c>
 80089e0:	f8c8 2000 	str.w	r2, [r8]
 80089e4:	e7ec      	b.n	80089c0 <_malloc_r+0xb0>
 80089e6:	4623      	mov	r3, r4
 80089e8:	6864      	ldr	r4, [r4, #4]
 80089ea:	e7ac      	b.n	8008946 <_malloc_r+0x36>
 80089ec:	4634      	mov	r4, r6
 80089ee:	6876      	ldr	r6, [r6, #4]
 80089f0:	e7b4      	b.n	800895c <_malloc_r+0x4c>
 80089f2:	4613      	mov	r3, r2
 80089f4:	e7cc      	b.n	8008990 <_malloc_r+0x80>
 80089f6:	230c      	movs	r3, #12
 80089f8:	4638      	mov	r0, r7
 80089fa:	603b      	str	r3, [r7, #0]
 80089fc:	f000 f80e 	bl	8008a1c <__malloc_unlock>
 8008a00:	e797      	b.n	8008932 <_malloc_r+0x22>
 8008a02:	6025      	str	r5, [r4, #0]
 8008a04:	e7dc      	b.n	80089c0 <_malloc_r+0xb0>
 8008a06:	605b      	str	r3, [r3, #4]
 8008a08:	deff      	udf	#255	; 0xff
 8008a0a:	bf00      	nop
 8008a0c:	200015b0 	.word	0x200015b0

08008a10 <__malloc_lock>:
 8008a10:	4801      	ldr	r0, [pc, #4]	; (8008a18 <__malloc_lock+0x8>)
 8008a12:	f7ff bf13 	b.w	800883c <__retarget_lock_acquire_recursive>
 8008a16:	bf00      	nop
 8008a18:	200015ac 	.word	0x200015ac

08008a1c <__malloc_unlock>:
 8008a1c:	4801      	ldr	r0, [pc, #4]	; (8008a24 <__malloc_unlock+0x8>)
 8008a1e:	f7ff bf0e 	b.w	800883e <__retarget_lock_release_recursive>
 8008a22:	bf00      	nop
 8008a24:	200015ac 	.word	0x200015ac

08008a28 <__ssputs_r>:
 8008a28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008a2c:	461f      	mov	r7, r3
 8008a2e:	688e      	ldr	r6, [r1, #8]
 8008a30:	4682      	mov	sl, r0
 8008a32:	42be      	cmp	r6, r7
 8008a34:	460c      	mov	r4, r1
 8008a36:	4690      	mov	r8, r2
 8008a38:	680b      	ldr	r3, [r1, #0]
 8008a3a:	d82c      	bhi.n	8008a96 <__ssputs_r+0x6e>
 8008a3c:	898a      	ldrh	r2, [r1, #12]
 8008a3e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008a42:	d026      	beq.n	8008a92 <__ssputs_r+0x6a>
 8008a44:	6965      	ldr	r5, [r4, #20]
 8008a46:	6909      	ldr	r1, [r1, #16]
 8008a48:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008a4c:	eba3 0901 	sub.w	r9, r3, r1
 8008a50:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008a54:	1c7b      	adds	r3, r7, #1
 8008a56:	444b      	add	r3, r9
 8008a58:	106d      	asrs	r5, r5, #1
 8008a5a:	429d      	cmp	r5, r3
 8008a5c:	bf38      	it	cc
 8008a5e:	461d      	movcc	r5, r3
 8008a60:	0553      	lsls	r3, r2, #21
 8008a62:	d527      	bpl.n	8008ab4 <__ssputs_r+0x8c>
 8008a64:	4629      	mov	r1, r5
 8008a66:	f7ff ff53 	bl	8008910 <_malloc_r>
 8008a6a:	4606      	mov	r6, r0
 8008a6c:	b360      	cbz	r0, 8008ac8 <__ssputs_r+0xa0>
 8008a6e:	464a      	mov	r2, r9
 8008a70:	6921      	ldr	r1, [r4, #16]
 8008a72:	f000 fafd 	bl	8009070 <memcpy>
 8008a76:	89a3      	ldrh	r3, [r4, #12]
 8008a78:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008a7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008a80:	81a3      	strh	r3, [r4, #12]
 8008a82:	6126      	str	r6, [r4, #16]
 8008a84:	444e      	add	r6, r9
 8008a86:	6026      	str	r6, [r4, #0]
 8008a88:	463e      	mov	r6, r7
 8008a8a:	6165      	str	r5, [r4, #20]
 8008a8c:	eba5 0509 	sub.w	r5, r5, r9
 8008a90:	60a5      	str	r5, [r4, #8]
 8008a92:	42be      	cmp	r6, r7
 8008a94:	d900      	bls.n	8008a98 <__ssputs_r+0x70>
 8008a96:	463e      	mov	r6, r7
 8008a98:	4632      	mov	r2, r6
 8008a9a:	4641      	mov	r1, r8
 8008a9c:	6820      	ldr	r0, [r4, #0]
 8008a9e:	f000 faaf 	bl	8009000 <memmove>
 8008aa2:	2000      	movs	r0, #0
 8008aa4:	68a3      	ldr	r3, [r4, #8]
 8008aa6:	1b9b      	subs	r3, r3, r6
 8008aa8:	60a3      	str	r3, [r4, #8]
 8008aaa:	6823      	ldr	r3, [r4, #0]
 8008aac:	4433      	add	r3, r6
 8008aae:	6023      	str	r3, [r4, #0]
 8008ab0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ab4:	462a      	mov	r2, r5
 8008ab6:	f000 fae9 	bl	800908c <_realloc_r>
 8008aba:	4606      	mov	r6, r0
 8008abc:	2800      	cmp	r0, #0
 8008abe:	d1e0      	bne.n	8008a82 <__ssputs_r+0x5a>
 8008ac0:	4650      	mov	r0, sl
 8008ac2:	6921      	ldr	r1, [r4, #16]
 8008ac4:	f7ff febc 	bl	8008840 <_free_r>
 8008ac8:	230c      	movs	r3, #12
 8008aca:	f8ca 3000 	str.w	r3, [sl]
 8008ace:	89a3      	ldrh	r3, [r4, #12]
 8008ad0:	f04f 30ff 	mov.w	r0, #4294967295
 8008ad4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008ad8:	81a3      	strh	r3, [r4, #12]
 8008ada:	e7e9      	b.n	8008ab0 <__ssputs_r+0x88>

08008adc <_svfiprintf_r>:
 8008adc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ae0:	4698      	mov	r8, r3
 8008ae2:	898b      	ldrh	r3, [r1, #12]
 8008ae4:	4607      	mov	r7, r0
 8008ae6:	061b      	lsls	r3, r3, #24
 8008ae8:	460d      	mov	r5, r1
 8008aea:	4614      	mov	r4, r2
 8008aec:	b09d      	sub	sp, #116	; 0x74
 8008aee:	d50e      	bpl.n	8008b0e <_svfiprintf_r+0x32>
 8008af0:	690b      	ldr	r3, [r1, #16]
 8008af2:	b963      	cbnz	r3, 8008b0e <_svfiprintf_r+0x32>
 8008af4:	2140      	movs	r1, #64	; 0x40
 8008af6:	f7ff ff0b 	bl	8008910 <_malloc_r>
 8008afa:	6028      	str	r0, [r5, #0]
 8008afc:	6128      	str	r0, [r5, #16]
 8008afe:	b920      	cbnz	r0, 8008b0a <_svfiprintf_r+0x2e>
 8008b00:	230c      	movs	r3, #12
 8008b02:	603b      	str	r3, [r7, #0]
 8008b04:	f04f 30ff 	mov.w	r0, #4294967295
 8008b08:	e0d0      	b.n	8008cac <_svfiprintf_r+0x1d0>
 8008b0a:	2340      	movs	r3, #64	; 0x40
 8008b0c:	616b      	str	r3, [r5, #20]
 8008b0e:	2300      	movs	r3, #0
 8008b10:	9309      	str	r3, [sp, #36]	; 0x24
 8008b12:	2320      	movs	r3, #32
 8008b14:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008b18:	2330      	movs	r3, #48	; 0x30
 8008b1a:	f04f 0901 	mov.w	r9, #1
 8008b1e:	f8cd 800c 	str.w	r8, [sp, #12]
 8008b22:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8008cc4 <_svfiprintf_r+0x1e8>
 8008b26:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008b2a:	4623      	mov	r3, r4
 8008b2c:	469a      	mov	sl, r3
 8008b2e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008b32:	b10a      	cbz	r2, 8008b38 <_svfiprintf_r+0x5c>
 8008b34:	2a25      	cmp	r2, #37	; 0x25
 8008b36:	d1f9      	bne.n	8008b2c <_svfiprintf_r+0x50>
 8008b38:	ebba 0b04 	subs.w	fp, sl, r4
 8008b3c:	d00b      	beq.n	8008b56 <_svfiprintf_r+0x7a>
 8008b3e:	465b      	mov	r3, fp
 8008b40:	4622      	mov	r2, r4
 8008b42:	4629      	mov	r1, r5
 8008b44:	4638      	mov	r0, r7
 8008b46:	f7ff ff6f 	bl	8008a28 <__ssputs_r>
 8008b4a:	3001      	adds	r0, #1
 8008b4c:	f000 80a9 	beq.w	8008ca2 <_svfiprintf_r+0x1c6>
 8008b50:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008b52:	445a      	add	r2, fp
 8008b54:	9209      	str	r2, [sp, #36]	; 0x24
 8008b56:	f89a 3000 	ldrb.w	r3, [sl]
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	f000 80a1 	beq.w	8008ca2 <_svfiprintf_r+0x1c6>
 8008b60:	2300      	movs	r3, #0
 8008b62:	f04f 32ff 	mov.w	r2, #4294967295
 8008b66:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008b6a:	f10a 0a01 	add.w	sl, sl, #1
 8008b6e:	9304      	str	r3, [sp, #16]
 8008b70:	9307      	str	r3, [sp, #28]
 8008b72:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008b76:	931a      	str	r3, [sp, #104]	; 0x68
 8008b78:	4654      	mov	r4, sl
 8008b7a:	2205      	movs	r2, #5
 8008b7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b80:	4850      	ldr	r0, [pc, #320]	; (8008cc4 <_svfiprintf_r+0x1e8>)
 8008b82:	f000 fa67 	bl	8009054 <memchr>
 8008b86:	9a04      	ldr	r2, [sp, #16]
 8008b88:	b9d8      	cbnz	r0, 8008bc2 <_svfiprintf_r+0xe6>
 8008b8a:	06d0      	lsls	r0, r2, #27
 8008b8c:	bf44      	itt	mi
 8008b8e:	2320      	movmi	r3, #32
 8008b90:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008b94:	0711      	lsls	r1, r2, #28
 8008b96:	bf44      	itt	mi
 8008b98:	232b      	movmi	r3, #43	; 0x2b
 8008b9a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008b9e:	f89a 3000 	ldrb.w	r3, [sl]
 8008ba2:	2b2a      	cmp	r3, #42	; 0x2a
 8008ba4:	d015      	beq.n	8008bd2 <_svfiprintf_r+0xf6>
 8008ba6:	4654      	mov	r4, sl
 8008ba8:	2000      	movs	r0, #0
 8008baa:	f04f 0c0a 	mov.w	ip, #10
 8008bae:	9a07      	ldr	r2, [sp, #28]
 8008bb0:	4621      	mov	r1, r4
 8008bb2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008bb6:	3b30      	subs	r3, #48	; 0x30
 8008bb8:	2b09      	cmp	r3, #9
 8008bba:	d94d      	bls.n	8008c58 <_svfiprintf_r+0x17c>
 8008bbc:	b1b0      	cbz	r0, 8008bec <_svfiprintf_r+0x110>
 8008bbe:	9207      	str	r2, [sp, #28]
 8008bc0:	e014      	b.n	8008bec <_svfiprintf_r+0x110>
 8008bc2:	eba0 0308 	sub.w	r3, r0, r8
 8008bc6:	fa09 f303 	lsl.w	r3, r9, r3
 8008bca:	4313      	orrs	r3, r2
 8008bcc:	46a2      	mov	sl, r4
 8008bce:	9304      	str	r3, [sp, #16]
 8008bd0:	e7d2      	b.n	8008b78 <_svfiprintf_r+0x9c>
 8008bd2:	9b03      	ldr	r3, [sp, #12]
 8008bd4:	1d19      	adds	r1, r3, #4
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	9103      	str	r1, [sp, #12]
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	bfbb      	ittet	lt
 8008bde:	425b      	neglt	r3, r3
 8008be0:	f042 0202 	orrlt.w	r2, r2, #2
 8008be4:	9307      	strge	r3, [sp, #28]
 8008be6:	9307      	strlt	r3, [sp, #28]
 8008be8:	bfb8      	it	lt
 8008bea:	9204      	strlt	r2, [sp, #16]
 8008bec:	7823      	ldrb	r3, [r4, #0]
 8008bee:	2b2e      	cmp	r3, #46	; 0x2e
 8008bf0:	d10c      	bne.n	8008c0c <_svfiprintf_r+0x130>
 8008bf2:	7863      	ldrb	r3, [r4, #1]
 8008bf4:	2b2a      	cmp	r3, #42	; 0x2a
 8008bf6:	d134      	bne.n	8008c62 <_svfiprintf_r+0x186>
 8008bf8:	9b03      	ldr	r3, [sp, #12]
 8008bfa:	3402      	adds	r4, #2
 8008bfc:	1d1a      	adds	r2, r3, #4
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	9203      	str	r2, [sp, #12]
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	bfb8      	it	lt
 8008c06:	f04f 33ff 	movlt.w	r3, #4294967295
 8008c0a:	9305      	str	r3, [sp, #20]
 8008c0c:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8008cc8 <_svfiprintf_r+0x1ec>
 8008c10:	2203      	movs	r2, #3
 8008c12:	4650      	mov	r0, sl
 8008c14:	7821      	ldrb	r1, [r4, #0]
 8008c16:	f000 fa1d 	bl	8009054 <memchr>
 8008c1a:	b138      	cbz	r0, 8008c2c <_svfiprintf_r+0x150>
 8008c1c:	2240      	movs	r2, #64	; 0x40
 8008c1e:	9b04      	ldr	r3, [sp, #16]
 8008c20:	eba0 000a 	sub.w	r0, r0, sl
 8008c24:	4082      	lsls	r2, r0
 8008c26:	4313      	orrs	r3, r2
 8008c28:	3401      	adds	r4, #1
 8008c2a:	9304      	str	r3, [sp, #16]
 8008c2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c30:	2206      	movs	r2, #6
 8008c32:	4826      	ldr	r0, [pc, #152]	; (8008ccc <_svfiprintf_r+0x1f0>)
 8008c34:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008c38:	f000 fa0c 	bl	8009054 <memchr>
 8008c3c:	2800      	cmp	r0, #0
 8008c3e:	d038      	beq.n	8008cb2 <_svfiprintf_r+0x1d6>
 8008c40:	4b23      	ldr	r3, [pc, #140]	; (8008cd0 <_svfiprintf_r+0x1f4>)
 8008c42:	bb1b      	cbnz	r3, 8008c8c <_svfiprintf_r+0x1b0>
 8008c44:	9b03      	ldr	r3, [sp, #12]
 8008c46:	3307      	adds	r3, #7
 8008c48:	f023 0307 	bic.w	r3, r3, #7
 8008c4c:	3308      	adds	r3, #8
 8008c4e:	9303      	str	r3, [sp, #12]
 8008c50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c52:	4433      	add	r3, r6
 8008c54:	9309      	str	r3, [sp, #36]	; 0x24
 8008c56:	e768      	b.n	8008b2a <_svfiprintf_r+0x4e>
 8008c58:	460c      	mov	r4, r1
 8008c5a:	2001      	movs	r0, #1
 8008c5c:	fb0c 3202 	mla	r2, ip, r2, r3
 8008c60:	e7a6      	b.n	8008bb0 <_svfiprintf_r+0xd4>
 8008c62:	2300      	movs	r3, #0
 8008c64:	f04f 0c0a 	mov.w	ip, #10
 8008c68:	4619      	mov	r1, r3
 8008c6a:	3401      	adds	r4, #1
 8008c6c:	9305      	str	r3, [sp, #20]
 8008c6e:	4620      	mov	r0, r4
 8008c70:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008c74:	3a30      	subs	r2, #48	; 0x30
 8008c76:	2a09      	cmp	r2, #9
 8008c78:	d903      	bls.n	8008c82 <_svfiprintf_r+0x1a6>
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d0c6      	beq.n	8008c0c <_svfiprintf_r+0x130>
 8008c7e:	9105      	str	r1, [sp, #20]
 8008c80:	e7c4      	b.n	8008c0c <_svfiprintf_r+0x130>
 8008c82:	4604      	mov	r4, r0
 8008c84:	2301      	movs	r3, #1
 8008c86:	fb0c 2101 	mla	r1, ip, r1, r2
 8008c8a:	e7f0      	b.n	8008c6e <_svfiprintf_r+0x192>
 8008c8c:	ab03      	add	r3, sp, #12
 8008c8e:	9300      	str	r3, [sp, #0]
 8008c90:	462a      	mov	r2, r5
 8008c92:	4638      	mov	r0, r7
 8008c94:	4b0f      	ldr	r3, [pc, #60]	; (8008cd4 <_svfiprintf_r+0x1f8>)
 8008c96:	a904      	add	r1, sp, #16
 8008c98:	f3af 8000 	nop.w
 8008c9c:	1c42      	adds	r2, r0, #1
 8008c9e:	4606      	mov	r6, r0
 8008ca0:	d1d6      	bne.n	8008c50 <_svfiprintf_r+0x174>
 8008ca2:	89ab      	ldrh	r3, [r5, #12]
 8008ca4:	065b      	lsls	r3, r3, #25
 8008ca6:	f53f af2d 	bmi.w	8008b04 <_svfiprintf_r+0x28>
 8008caa:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008cac:	b01d      	add	sp, #116	; 0x74
 8008cae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008cb2:	ab03      	add	r3, sp, #12
 8008cb4:	9300      	str	r3, [sp, #0]
 8008cb6:	462a      	mov	r2, r5
 8008cb8:	4638      	mov	r0, r7
 8008cba:	4b06      	ldr	r3, [pc, #24]	; (8008cd4 <_svfiprintf_r+0x1f8>)
 8008cbc:	a904      	add	r1, sp, #16
 8008cbe:	f000 f87d 	bl	8008dbc <_printf_i>
 8008cc2:	e7eb      	b.n	8008c9c <_svfiprintf_r+0x1c0>
 8008cc4:	080092f0 	.word	0x080092f0
 8008cc8:	080092f6 	.word	0x080092f6
 8008ccc:	080092fa 	.word	0x080092fa
 8008cd0:	00000000 	.word	0x00000000
 8008cd4:	08008a29 	.word	0x08008a29

08008cd8 <_printf_common>:
 8008cd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008cdc:	4616      	mov	r6, r2
 8008cde:	4699      	mov	r9, r3
 8008ce0:	688a      	ldr	r2, [r1, #8]
 8008ce2:	690b      	ldr	r3, [r1, #16]
 8008ce4:	4607      	mov	r7, r0
 8008ce6:	4293      	cmp	r3, r2
 8008ce8:	bfb8      	it	lt
 8008cea:	4613      	movlt	r3, r2
 8008cec:	6033      	str	r3, [r6, #0]
 8008cee:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008cf2:	460c      	mov	r4, r1
 8008cf4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008cf8:	b10a      	cbz	r2, 8008cfe <_printf_common+0x26>
 8008cfa:	3301      	adds	r3, #1
 8008cfc:	6033      	str	r3, [r6, #0]
 8008cfe:	6823      	ldr	r3, [r4, #0]
 8008d00:	0699      	lsls	r1, r3, #26
 8008d02:	bf42      	ittt	mi
 8008d04:	6833      	ldrmi	r3, [r6, #0]
 8008d06:	3302      	addmi	r3, #2
 8008d08:	6033      	strmi	r3, [r6, #0]
 8008d0a:	6825      	ldr	r5, [r4, #0]
 8008d0c:	f015 0506 	ands.w	r5, r5, #6
 8008d10:	d106      	bne.n	8008d20 <_printf_common+0x48>
 8008d12:	f104 0a19 	add.w	sl, r4, #25
 8008d16:	68e3      	ldr	r3, [r4, #12]
 8008d18:	6832      	ldr	r2, [r6, #0]
 8008d1a:	1a9b      	subs	r3, r3, r2
 8008d1c:	42ab      	cmp	r3, r5
 8008d1e:	dc2b      	bgt.n	8008d78 <_printf_common+0xa0>
 8008d20:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008d24:	1e13      	subs	r3, r2, #0
 8008d26:	6822      	ldr	r2, [r4, #0]
 8008d28:	bf18      	it	ne
 8008d2a:	2301      	movne	r3, #1
 8008d2c:	0692      	lsls	r2, r2, #26
 8008d2e:	d430      	bmi.n	8008d92 <_printf_common+0xba>
 8008d30:	4649      	mov	r1, r9
 8008d32:	4638      	mov	r0, r7
 8008d34:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008d38:	47c0      	blx	r8
 8008d3a:	3001      	adds	r0, #1
 8008d3c:	d023      	beq.n	8008d86 <_printf_common+0xae>
 8008d3e:	6823      	ldr	r3, [r4, #0]
 8008d40:	6922      	ldr	r2, [r4, #16]
 8008d42:	f003 0306 	and.w	r3, r3, #6
 8008d46:	2b04      	cmp	r3, #4
 8008d48:	bf14      	ite	ne
 8008d4a:	2500      	movne	r5, #0
 8008d4c:	6833      	ldreq	r3, [r6, #0]
 8008d4e:	f04f 0600 	mov.w	r6, #0
 8008d52:	bf08      	it	eq
 8008d54:	68e5      	ldreq	r5, [r4, #12]
 8008d56:	f104 041a 	add.w	r4, r4, #26
 8008d5a:	bf08      	it	eq
 8008d5c:	1aed      	subeq	r5, r5, r3
 8008d5e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8008d62:	bf08      	it	eq
 8008d64:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008d68:	4293      	cmp	r3, r2
 8008d6a:	bfc4      	itt	gt
 8008d6c:	1a9b      	subgt	r3, r3, r2
 8008d6e:	18ed      	addgt	r5, r5, r3
 8008d70:	42b5      	cmp	r5, r6
 8008d72:	d11a      	bne.n	8008daa <_printf_common+0xd2>
 8008d74:	2000      	movs	r0, #0
 8008d76:	e008      	b.n	8008d8a <_printf_common+0xb2>
 8008d78:	2301      	movs	r3, #1
 8008d7a:	4652      	mov	r2, sl
 8008d7c:	4649      	mov	r1, r9
 8008d7e:	4638      	mov	r0, r7
 8008d80:	47c0      	blx	r8
 8008d82:	3001      	adds	r0, #1
 8008d84:	d103      	bne.n	8008d8e <_printf_common+0xb6>
 8008d86:	f04f 30ff 	mov.w	r0, #4294967295
 8008d8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d8e:	3501      	adds	r5, #1
 8008d90:	e7c1      	b.n	8008d16 <_printf_common+0x3e>
 8008d92:	2030      	movs	r0, #48	; 0x30
 8008d94:	18e1      	adds	r1, r4, r3
 8008d96:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008d9a:	1c5a      	adds	r2, r3, #1
 8008d9c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008da0:	4422      	add	r2, r4
 8008da2:	3302      	adds	r3, #2
 8008da4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008da8:	e7c2      	b.n	8008d30 <_printf_common+0x58>
 8008daa:	2301      	movs	r3, #1
 8008dac:	4622      	mov	r2, r4
 8008dae:	4649      	mov	r1, r9
 8008db0:	4638      	mov	r0, r7
 8008db2:	47c0      	blx	r8
 8008db4:	3001      	adds	r0, #1
 8008db6:	d0e6      	beq.n	8008d86 <_printf_common+0xae>
 8008db8:	3601      	adds	r6, #1
 8008dba:	e7d9      	b.n	8008d70 <_printf_common+0x98>

08008dbc <_printf_i>:
 8008dbc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008dc0:	7e0f      	ldrb	r7, [r1, #24]
 8008dc2:	4691      	mov	r9, r2
 8008dc4:	2f78      	cmp	r7, #120	; 0x78
 8008dc6:	4680      	mov	r8, r0
 8008dc8:	460c      	mov	r4, r1
 8008dca:	469a      	mov	sl, r3
 8008dcc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008dce:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008dd2:	d807      	bhi.n	8008de4 <_printf_i+0x28>
 8008dd4:	2f62      	cmp	r7, #98	; 0x62
 8008dd6:	d80a      	bhi.n	8008dee <_printf_i+0x32>
 8008dd8:	2f00      	cmp	r7, #0
 8008dda:	f000 80d5 	beq.w	8008f88 <_printf_i+0x1cc>
 8008dde:	2f58      	cmp	r7, #88	; 0x58
 8008de0:	f000 80c1 	beq.w	8008f66 <_printf_i+0x1aa>
 8008de4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008de8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008dec:	e03a      	b.n	8008e64 <_printf_i+0xa8>
 8008dee:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008df2:	2b15      	cmp	r3, #21
 8008df4:	d8f6      	bhi.n	8008de4 <_printf_i+0x28>
 8008df6:	a101      	add	r1, pc, #4	; (adr r1, 8008dfc <_printf_i+0x40>)
 8008df8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008dfc:	08008e55 	.word	0x08008e55
 8008e00:	08008e69 	.word	0x08008e69
 8008e04:	08008de5 	.word	0x08008de5
 8008e08:	08008de5 	.word	0x08008de5
 8008e0c:	08008de5 	.word	0x08008de5
 8008e10:	08008de5 	.word	0x08008de5
 8008e14:	08008e69 	.word	0x08008e69
 8008e18:	08008de5 	.word	0x08008de5
 8008e1c:	08008de5 	.word	0x08008de5
 8008e20:	08008de5 	.word	0x08008de5
 8008e24:	08008de5 	.word	0x08008de5
 8008e28:	08008f6f 	.word	0x08008f6f
 8008e2c:	08008e95 	.word	0x08008e95
 8008e30:	08008f29 	.word	0x08008f29
 8008e34:	08008de5 	.word	0x08008de5
 8008e38:	08008de5 	.word	0x08008de5
 8008e3c:	08008f91 	.word	0x08008f91
 8008e40:	08008de5 	.word	0x08008de5
 8008e44:	08008e95 	.word	0x08008e95
 8008e48:	08008de5 	.word	0x08008de5
 8008e4c:	08008de5 	.word	0x08008de5
 8008e50:	08008f31 	.word	0x08008f31
 8008e54:	682b      	ldr	r3, [r5, #0]
 8008e56:	1d1a      	adds	r2, r3, #4
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	602a      	str	r2, [r5, #0]
 8008e5c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008e60:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008e64:	2301      	movs	r3, #1
 8008e66:	e0a0      	b.n	8008faa <_printf_i+0x1ee>
 8008e68:	6820      	ldr	r0, [r4, #0]
 8008e6a:	682b      	ldr	r3, [r5, #0]
 8008e6c:	0607      	lsls	r7, r0, #24
 8008e6e:	f103 0104 	add.w	r1, r3, #4
 8008e72:	6029      	str	r1, [r5, #0]
 8008e74:	d501      	bpl.n	8008e7a <_printf_i+0xbe>
 8008e76:	681e      	ldr	r6, [r3, #0]
 8008e78:	e003      	b.n	8008e82 <_printf_i+0xc6>
 8008e7a:	0646      	lsls	r6, r0, #25
 8008e7c:	d5fb      	bpl.n	8008e76 <_printf_i+0xba>
 8008e7e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8008e82:	2e00      	cmp	r6, #0
 8008e84:	da03      	bge.n	8008e8e <_printf_i+0xd2>
 8008e86:	232d      	movs	r3, #45	; 0x2d
 8008e88:	4276      	negs	r6, r6
 8008e8a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008e8e:	230a      	movs	r3, #10
 8008e90:	4859      	ldr	r0, [pc, #356]	; (8008ff8 <_printf_i+0x23c>)
 8008e92:	e012      	b.n	8008eba <_printf_i+0xfe>
 8008e94:	682b      	ldr	r3, [r5, #0]
 8008e96:	6820      	ldr	r0, [r4, #0]
 8008e98:	1d19      	adds	r1, r3, #4
 8008e9a:	6029      	str	r1, [r5, #0]
 8008e9c:	0605      	lsls	r5, r0, #24
 8008e9e:	d501      	bpl.n	8008ea4 <_printf_i+0xe8>
 8008ea0:	681e      	ldr	r6, [r3, #0]
 8008ea2:	e002      	b.n	8008eaa <_printf_i+0xee>
 8008ea4:	0641      	lsls	r1, r0, #25
 8008ea6:	d5fb      	bpl.n	8008ea0 <_printf_i+0xe4>
 8008ea8:	881e      	ldrh	r6, [r3, #0]
 8008eaa:	2f6f      	cmp	r7, #111	; 0x6f
 8008eac:	bf0c      	ite	eq
 8008eae:	2308      	moveq	r3, #8
 8008eb0:	230a      	movne	r3, #10
 8008eb2:	4851      	ldr	r0, [pc, #324]	; (8008ff8 <_printf_i+0x23c>)
 8008eb4:	2100      	movs	r1, #0
 8008eb6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008eba:	6865      	ldr	r5, [r4, #4]
 8008ebc:	2d00      	cmp	r5, #0
 8008ebe:	bfa8      	it	ge
 8008ec0:	6821      	ldrge	r1, [r4, #0]
 8008ec2:	60a5      	str	r5, [r4, #8]
 8008ec4:	bfa4      	itt	ge
 8008ec6:	f021 0104 	bicge.w	r1, r1, #4
 8008eca:	6021      	strge	r1, [r4, #0]
 8008ecc:	b90e      	cbnz	r6, 8008ed2 <_printf_i+0x116>
 8008ece:	2d00      	cmp	r5, #0
 8008ed0:	d04b      	beq.n	8008f6a <_printf_i+0x1ae>
 8008ed2:	4615      	mov	r5, r2
 8008ed4:	fbb6 f1f3 	udiv	r1, r6, r3
 8008ed8:	fb03 6711 	mls	r7, r3, r1, r6
 8008edc:	5dc7      	ldrb	r7, [r0, r7]
 8008ede:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008ee2:	4637      	mov	r7, r6
 8008ee4:	42bb      	cmp	r3, r7
 8008ee6:	460e      	mov	r6, r1
 8008ee8:	d9f4      	bls.n	8008ed4 <_printf_i+0x118>
 8008eea:	2b08      	cmp	r3, #8
 8008eec:	d10b      	bne.n	8008f06 <_printf_i+0x14a>
 8008eee:	6823      	ldr	r3, [r4, #0]
 8008ef0:	07de      	lsls	r6, r3, #31
 8008ef2:	d508      	bpl.n	8008f06 <_printf_i+0x14a>
 8008ef4:	6923      	ldr	r3, [r4, #16]
 8008ef6:	6861      	ldr	r1, [r4, #4]
 8008ef8:	4299      	cmp	r1, r3
 8008efa:	bfde      	ittt	le
 8008efc:	2330      	movle	r3, #48	; 0x30
 8008efe:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008f02:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008f06:	1b52      	subs	r2, r2, r5
 8008f08:	6122      	str	r2, [r4, #16]
 8008f0a:	464b      	mov	r3, r9
 8008f0c:	4621      	mov	r1, r4
 8008f0e:	4640      	mov	r0, r8
 8008f10:	f8cd a000 	str.w	sl, [sp]
 8008f14:	aa03      	add	r2, sp, #12
 8008f16:	f7ff fedf 	bl	8008cd8 <_printf_common>
 8008f1a:	3001      	adds	r0, #1
 8008f1c:	d14a      	bne.n	8008fb4 <_printf_i+0x1f8>
 8008f1e:	f04f 30ff 	mov.w	r0, #4294967295
 8008f22:	b004      	add	sp, #16
 8008f24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f28:	6823      	ldr	r3, [r4, #0]
 8008f2a:	f043 0320 	orr.w	r3, r3, #32
 8008f2e:	6023      	str	r3, [r4, #0]
 8008f30:	2778      	movs	r7, #120	; 0x78
 8008f32:	4832      	ldr	r0, [pc, #200]	; (8008ffc <_printf_i+0x240>)
 8008f34:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008f38:	6823      	ldr	r3, [r4, #0]
 8008f3a:	6829      	ldr	r1, [r5, #0]
 8008f3c:	061f      	lsls	r7, r3, #24
 8008f3e:	f851 6b04 	ldr.w	r6, [r1], #4
 8008f42:	d402      	bmi.n	8008f4a <_printf_i+0x18e>
 8008f44:	065f      	lsls	r7, r3, #25
 8008f46:	bf48      	it	mi
 8008f48:	b2b6      	uxthmi	r6, r6
 8008f4a:	07df      	lsls	r7, r3, #31
 8008f4c:	bf48      	it	mi
 8008f4e:	f043 0320 	orrmi.w	r3, r3, #32
 8008f52:	6029      	str	r1, [r5, #0]
 8008f54:	bf48      	it	mi
 8008f56:	6023      	strmi	r3, [r4, #0]
 8008f58:	b91e      	cbnz	r6, 8008f62 <_printf_i+0x1a6>
 8008f5a:	6823      	ldr	r3, [r4, #0]
 8008f5c:	f023 0320 	bic.w	r3, r3, #32
 8008f60:	6023      	str	r3, [r4, #0]
 8008f62:	2310      	movs	r3, #16
 8008f64:	e7a6      	b.n	8008eb4 <_printf_i+0xf8>
 8008f66:	4824      	ldr	r0, [pc, #144]	; (8008ff8 <_printf_i+0x23c>)
 8008f68:	e7e4      	b.n	8008f34 <_printf_i+0x178>
 8008f6a:	4615      	mov	r5, r2
 8008f6c:	e7bd      	b.n	8008eea <_printf_i+0x12e>
 8008f6e:	682b      	ldr	r3, [r5, #0]
 8008f70:	6826      	ldr	r6, [r4, #0]
 8008f72:	1d18      	adds	r0, r3, #4
 8008f74:	6961      	ldr	r1, [r4, #20]
 8008f76:	6028      	str	r0, [r5, #0]
 8008f78:	0635      	lsls	r5, r6, #24
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	d501      	bpl.n	8008f82 <_printf_i+0x1c6>
 8008f7e:	6019      	str	r1, [r3, #0]
 8008f80:	e002      	b.n	8008f88 <_printf_i+0x1cc>
 8008f82:	0670      	lsls	r0, r6, #25
 8008f84:	d5fb      	bpl.n	8008f7e <_printf_i+0x1c2>
 8008f86:	8019      	strh	r1, [r3, #0]
 8008f88:	2300      	movs	r3, #0
 8008f8a:	4615      	mov	r5, r2
 8008f8c:	6123      	str	r3, [r4, #16]
 8008f8e:	e7bc      	b.n	8008f0a <_printf_i+0x14e>
 8008f90:	682b      	ldr	r3, [r5, #0]
 8008f92:	2100      	movs	r1, #0
 8008f94:	1d1a      	adds	r2, r3, #4
 8008f96:	602a      	str	r2, [r5, #0]
 8008f98:	681d      	ldr	r5, [r3, #0]
 8008f9a:	6862      	ldr	r2, [r4, #4]
 8008f9c:	4628      	mov	r0, r5
 8008f9e:	f000 f859 	bl	8009054 <memchr>
 8008fa2:	b108      	cbz	r0, 8008fa8 <_printf_i+0x1ec>
 8008fa4:	1b40      	subs	r0, r0, r5
 8008fa6:	6060      	str	r0, [r4, #4]
 8008fa8:	6863      	ldr	r3, [r4, #4]
 8008faa:	6123      	str	r3, [r4, #16]
 8008fac:	2300      	movs	r3, #0
 8008fae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008fb2:	e7aa      	b.n	8008f0a <_printf_i+0x14e>
 8008fb4:	462a      	mov	r2, r5
 8008fb6:	4649      	mov	r1, r9
 8008fb8:	4640      	mov	r0, r8
 8008fba:	6923      	ldr	r3, [r4, #16]
 8008fbc:	47d0      	blx	sl
 8008fbe:	3001      	adds	r0, #1
 8008fc0:	d0ad      	beq.n	8008f1e <_printf_i+0x162>
 8008fc2:	6823      	ldr	r3, [r4, #0]
 8008fc4:	079b      	lsls	r3, r3, #30
 8008fc6:	d413      	bmi.n	8008ff0 <_printf_i+0x234>
 8008fc8:	68e0      	ldr	r0, [r4, #12]
 8008fca:	9b03      	ldr	r3, [sp, #12]
 8008fcc:	4298      	cmp	r0, r3
 8008fce:	bfb8      	it	lt
 8008fd0:	4618      	movlt	r0, r3
 8008fd2:	e7a6      	b.n	8008f22 <_printf_i+0x166>
 8008fd4:	2301      	movs	r3, #1
 8008fd6:	4632      	mov	r2, r6
 8008fd8:	4649      	mov	r1, r9
 8008fda:	4640      	mov	r0, r8
 8008fdc:	47d0      	blx	sl
 8008fde:	3001      	adds	r0, #1
 8008fe0:	d09d      	beq.n	8008f1e <_printf_i+0x162>
 8008fe2:	3501      	adds	r5, #1
 8008fe4:	68e3      	ldr	r3, [r4, #12]
 8008fe6:	9903      	ldr	r1, [sp, #12]
 8008fe8:	1a5b      	subs	r3, r3, r1
 8008fea:	42ab      	cmp	r3, r5
 8008fec:	dcf2      	bgt.n	8008fd4 <_printf_i+0x218>
 8008fee:	e7eb      	b.n	8008fc8 <_printf_i+0x20c>
 8008ff0:	2500      	movs	r5, #0
 8008ff2:	f104 0619 	add.w	r6, r4, #25
 8008ff6:	e7f5      	b.n	8008fe4 <_printf_i+0x228>
 8008ff8:	08009301 	.word	0x08009301
 8008ffc:	08009312 	.word	0x08009312

08009000 <memmove>:
 8009000:	4288      	cmp	r0, r1
 8009002:	b510      	push	{r4, lr}
 8009004:	eb01 0402 	add.w	r4, r1, r2
 8009008:	d902      	bls.n	8009010 <memmove+0x10>
 800900a:	4284      	cmp	r4, r0
 800900c:	4623      	mov	r3, r4
 800900e:	d807      	bhi.n	8009020 <memmove+0x20>
 8009010:	1e43      	subs	r3, r0, #1
 8009012:	42a1      	cmp	r1, r4
 8009014:	d008      	beq.n	8009028 <memmove+0x28>
 8009016:	f811 2b01 	ldrb.w	r2, [r1], #1
 800901a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800901e:	e7f8      	b.n	8009012 <memmove+0x12>
 8009020:	4601      	mov	r1, r0
 8009022:	4402      	add	r2, r0
 8009024:	428a      	cmp	r2, r1
 8009026:	d100      	bne.n	800902a <memmove+0x2a>
 8009028:	bd10      	pop	{r4, pc}
 800902a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800902e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009032:	e7f7      	b.n	8009024 <memmove+0x24>

08009034 <_sbrk_r>:
 8009034:	b538      	push	{r3, r4, r5, lr}
 8009036:	2300      	movs	r3, #0
 8009038:	4d05      	ldr	r5, [pc, #20]	; (8009050 <_sbrk_r+0x1c>)
 800903a:	4604      	mov	r4, r0
 800903c:	4608      	mov	r0, r1
 800903e:	602b      	str	r3, [r5, #0]
 8009040:	f7f7 fea0 	bl	8000d84 <_sbrk>
 8009044:	1c43      	adds	r3, r0, #1
 8009046:	d102      	bne.n	800904e <_sbrk_r+0x1a>
 8009048:	682b      	ldr	r3, [r5, #0]
 800904a:	b103      	cbz	r3, 800904e <_sbrk_r+0x1a>
 800904c:	6023      	str	r3, [r4, #0]
 800904e:	bd38      	pop	{r3, r4, r5, pc}
 8009050:	200015a8 	.word	0x200015a8

08009054 <memchr>:
 8009054:	4603      	mov	r3, r0
 8009056:	b510      	push	{r4, lr}
 8009058:	b2c9      	uxtb	r1, r1
 800905a:	4402      	add	r2, r0
 800905c:	4293      	cmp	r3, r2
 800905e:	4618      	mov	r0, r3
 8009060:	d101      	bne.n	8009066 <memchr+0x12>
 8009062:	2000      	movs	r0, #0
 8009064:	e003      	b.n	800906e <memchr+0x1a>
 8009066:	7804      	ldrb	r4, [r0, #0]
 8009068:	3301      	adds	r3, #1
 800906a:	428c      	cmp	r4, r1
 800906c:	d1f6      	bne.n	800905c <memchr+0x8>
 800906e:	bd10      	pop	{r4, pc}

08009070 <memcpy>:
 8009070:	440a      	add	r2, r1
 8009072:	4291      	cmp	r1, r2
 8009074:	f100 33ff 	add.w	r3, r0, #4294967295
 8009078:	d100      	bne.n	800907c <memcpy+0xc>
 800907a:	4770      	bx	lr
 800907c:	b510      	push	{r4, lr}
 800907e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009082:	4291      	cmp	r1, r2
 8009084:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009088:	d1f9      	bne.n	800907e <memcpy+0xe>
 800908a:	bd10      	pop	{r4, pc}

0800908c <_realloc_r>:
 800908c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009090:	4680      	mov	r8, r0
 8009092:	4614      	mov	r4, r2
 8009094:	460e      	mov	r6, r1
 8009096:	b921      	cbnz	r1, 80090a2 <_realloc_r+0x16>
 8009098:	4611      	mov	r1, r2
 800909a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800909e:	f7ff bc37 	b.w	8008910 <_malloc_r>
 80090a2:	b92a      	cbnz	r2, 80090b0 <_realloc_r+0x24>
 80090a4:	f7ff fbcc 	bl	8008840 <_free_r>
 80090a8:	4625      	mov	r5, r4
 80090aa:	4628      	mov	r0, r5
 80090ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80090b0:	f000 f81b 	bl	80090ea <_malloc_usable_size_r>
 80090b4:	4284      	cmp	r4, r0
 80090b6:	4607      	mov	r7, r0
 80090b8:	d802      	bhi.n	80090c0 <_realloc_r+0x34>
 80090ba:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80090be:	d812      	bhi.n	80090e6 <_realloc_r+0x5a>
 80090c0:	4621      	mov	r1, r4
 80090c2:	4640      	mov	r0, r8
 80090c4:	f7ff fc24 	bl	8008910 <_malloc_r>
 80090c8:	4605      	mov	r5, r0
 80090ca:	2800      	cmp	r0, #0
 80090cc:	d0ed      	beq.n	80090aa <_realloc_r+0x1e>
 80090ce:	42bc      	cmp	r4, r7
 80090d0:	4622      	mov	r2, r4
 80090d2:	4631      	mov	r1, r6
 80090d4:	bf28      	it	cs
 80090d6:	463a      	movcs	r2, r7
 80090d8:	f7ff ffca 	bl	8009070 <memcpy>
 80090dc:	4631      	mov	r1, r6
 80090de:	4640      	mov	r0, r8
 80090e0:	f7ff fbae 	bl	8008840 <_free_r>
 80090e4:	e7e1      	b.n	80090aa <_realloc_r+0x1e>
 80090e6:	4635      	mov	r5, r6
 80090e8:	e7df      	b.n	80090aa <_realloc_r+0x1e>

080090ea <_malloc_usable_size_r>:
 80090ea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80090ee:	1f18      	subs	r0, r3, #4
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	bfbc      	itt	lt
 80090f4:	580b      	ldrlt	r3, [r1, r0]
 80090f6:	18c0      	addlt	r0, r0, r3
 80090f8:	4770      	bx	lr
	...

080090fc <_init>:
 80090fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090fe:	bf00      	nop
 8009100:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009102:	bc08      	pop	{r3}
 8009104:	469e      	mov	lr, r3
 8009106:	4770      	bx	lr

08009108 <_fini>:
 8009108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800910a:	bf00      	nop
 800910c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800910e:	bc08      	pop	{r3}
 8009110:	469e      	mov	lr, r3
 8009112:	4770      	bx	lr
