
relayDelay.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008a08  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000108  08008b14  08008b14  00018b14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008c1c  08008c1c  000201cc  2**0
                  CONTENTS
  4 .ARM          00000000  08008c1c  08008c1c  000201cc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008c1c  08008c1c  000201cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008c1c  08008c1c  00018c1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008c20  08008c20  00018c20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001cc  20000000  08008c24  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000013e8  200001cc  08008df0  000201cc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200015b4  08008df0  000215b4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201cc  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000201f5  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000fb5a  00000000  00000000  00020238  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003070  00000000  00000000  0002fd92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e90  00000000  00000000  00032e08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000af6  00000000  00000000  00033c98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00004a45  00000000  00000000  0003478e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012668  00000000  00000000  000391d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008afd4  00000000  00000000  0004b83b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003f84  00000000  00000000  000d6810  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  000da794  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200001cc 	.word	0x200001cc
 8000128:	00000000 	.word	0x00000000
 800012c:	08008afc 	.word	0x08008afc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200001d0 	.word	0x200001d0
 8000148:	08008afc 	.word	0x08008afc

0800014c <readInputs>:
static void MX_SPI1_Init(void);
static void MX_USART1_UART_Init(void);
/* USER CODE BEGIN PFP */

// Read PMB input states and create boolean struct plus debounce
InputData readInputs(void) {
 800014c:	b580      	push	{r7, lr}
 800014e:	b086      	sub	sp, #24
 8000150:	af00      	add	r7, sp, #0
    static int counter_antisafeEnabled = 0;

    InputData data;

    // Simulating the GPIO pins for each field for demonstration.
    int pin_chargeEnabled = 1;
 8000152:	2301      	movs	r3, #1
 8000154:	617b      	str	r3, [r7, #20]
    int pin_dischargeEnabled = 2;
 8000156:	2302      	movs	r3, #2
 8000158:	613b      	str	r3, [r7, #16]
    int pin_chargerDetected = 3;
 800015a:	2303      	movs	r3, #3
 800015c:	60fb      	str	r3, [r7, #12]
    int pin_antisafeEnabled = 4;
 800015e:	2304      	movs	r3, #4
 8000160:	60bb      	str	r3, [r7, #8]

    // Read for chargeEnabled
    if(HAL_GPIO_ReadPin(EN_INPUT_BUS, CH_EN) == false) { //if PB5 CH_EN low
 8000162:	2120      	movs	r1, #32
 8000164:	4820      	ldr	r0, [pc, #128]	; (80001e8 <readInputs+0x9c>)
 8000166:	f000 fe9f 	bl	8000ea8 <HAL_GPIO_ReadPin>
 800016a:	4603      	mov	r3, r0
 800016c:	2b00      	cmp	r3, #0
 800016e:	d102      	bne.n	8000176 <readInputs+0x2a>
			data.chargeEnabled = true;
 8000170:	2301      	movs	r3, #1
 8000172:	703b      	strb	r3, [r7, #0]
 8000174:	e001      	b.n	800017a <readInputs+0x2e>
	}
	else{
		data.chargeEnabled = false;
 8000176:	2300      	movs	r3, #0
 8000178:	703b      	strb	r3, [r7, #0]
	}

    // Read for dischargeEnabled
    if(HAL_GPIO_ReadPin(EN_INPUT_BUS, DSC_EN) == false) { //if PB6 DSC_EN low
 800017a:	2140      	movs	r1, #64	; 0x40
 800017c:	481a      	ldr	r0, [pc, #104]	; (80001e8 <readInputs+0x9c>)
 800017e:	f000 fe93 	bl	8000ea8 <HAL_GPIO_ReadPin>
 8000182:	4603      	mov	r3, r0
 8000184:	2b00      	cmp	r3, #0
 8000186:	d102      	bne.n	800018e <readInputs+0x42>
			data.dischargeEnabled = true;
 8000188:	2301      	movs	r3, #1
 800018a:	707b      	strb	r3, [r7, #1]
 800018c:	e001      	b.n	8000192 <readInputs+0x46>
	}
	else{
		data.dischargeEnabled = false;
 800018e:	2300      	movs	r3, #0
 8000190:	707b      	strb	r3, [r7, #1]
	}

    // Read for chargerDetected
    if(HAL_GPIO_ReadPin(EN_INPUT_BUS, SP_EN) == false) { //if SP_EN PB7 is low  (charger detected)
 8000192:	2180      	movs	r1, #128	; 0x80
 8000194:	4814      	ldr	r0, [pc, #80]	; (80001e8 <readInputs+0x9c>)
 8000196:	f000 fe87 	bl	8000ea8 <HAL_GPIO_ReadPin>
 800019a:	4603      	mov	r3, r0
 800019c:	2b00      	cmp	r3, #0
 800019e:	d102      	bne.n	80001a6 <readInputs+0x5a>
            data.chargerDetected = true;
 80001a0:	2301      	movs	r3, #1
 80001a2:	70bb      	strb	r3, [r7, #2]
 80001a4:	e001      	b.n	80001aa <readInputs+0x5e>
    }
    else{
    	data.chargerDetected = false;
 80001a6:	2300      	movs	r3, #0
 80001a8:	70bb      	strb	r3, [r7, #2]
    }

    // Read for antisafeEnabled
    if(HAL_GPIO_ReadPin(EN_INPUT_BUS, ANTISAFE_PIN) == false){ //if PB3 antisafe is low
 80001aa:	2108      	movs	r1, #8
 80001ac:	480e      	ldr	r0, [pc, #56]	; (80001e8 <readInputs+0x9c>)
 80001ae:	f000 fe7b 	bl	8000ea8 <HAL_GPIO_ReadPin>
 80001b2:	4603      	mov	r3, r0
 80001b4:	2b00      	cmp	r3, #0
 80001b6:	d102      	bne.n	80001be <readInputs+0x72>
        data.antisafeEnabled = true;
 80001b8:	2301      	movs	r3, #1
 80001ba:	70fb      	strb	r3, [r7, #3]
 80001bc:	e001      	b.n	80001c2 <readInputs+0x76>
	}
	else{
		data.antisafeEnabled = false;
 80001be:	2300      	movs	r3, #0
 80001c0:	70fb      	strb	r3, [r7, #3]
	}

    return data;
 80001c2:	683b      	ldr	r3, [r7, #0]
 80001c4:	607b      	str	r3, [r7, #4]
 80001c6:	2300      	movs	r3, #0
 80001c8:	793a      	ldrb	r2, [r7, #4]
 80001ca:	f362 0307 	bfi	r3, r2, #0, #8
 80001ce:	797a      	ldrb	r2, [r7, #5]
 80001d0:	f362 230f 	bfi	r3, r2, #8, #8
 80001d4:	79ba      	ldrb	r2, [r7, #6]
 80001d6:	f362 4317 	bfi	r3, r2, #16, #8
 80001da:	79fa      	ldrb	r2, [r7, #7]
 80001dc:	f362 631f 	bfi	r3, r2, #24, #8
}
 80001e0:	4618      	mov	r0, r3
 80001e2:	3718      	adds	r7, #24
 80001e4:	46bd      	mov	sp, r7
 80001e6:	bd80      	pop	{r7, pc}
 80001e8:	40010c00 	.word	0x40010c00

080001ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001ec:	b590      	push	{r4, r7, lr}
 80001ee:	b0a7      	sub	sp, #156	; 0x9c
 80001f0:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001f2:	f000 fb41 	bl	8000878 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001f6:	f000 f867 	bl	80002c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001fa:	f000 f921 	bl	8000440 <MX_GPIO_Init>
  MX_SPI1_Init();
 80001fe:	f000 f8bf 	bl	8000380 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000202:	f000 f8f3 	bl	80003ec <MX_USART1_UART_Init>
  MX_USB_DEVICE_Init();
 8000206:	f007 fad3 	bl	80077b0 <MX_USB_DEVICE_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  static int i = 0;
	  InputData data = readInputs();
 800020a:	f7ff ff9f 	bl	800014c <readInputs>
 800020e:	4603      	mov	r3, r0
 8000210:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80


	  if(i%10 == 0){
 8000214:	4b27      	ldr	r3, [pc, #156]	; (80002b4 <main+0xc8>)
 8000216:	6819      	ldr	r1, [r3, #0]
 8000218:	4b27      	ldr	r3, [pc, #156]	; (80002b8 <main+0xcc>)
 800021a:	fb83 2301 	smull	r2, r3, r3, r1
 800021e:	109a      	asrs	r2, r3, #2
 8000220:	17cb      	asrs	r3, r1, #31
 8000222:	1ad2      	subs	r2, r2, r3
 8000224:	4613      	mov	r3, r2
 8000226:	009b      	lsls	r3, r3, #2
 8000228:	4413      	add	r3, r2
 800022a:	005b      	lsls	r3, r3, #1
 800022c:	1aca      	subs	r2, r1, r3
 800022e:	2a00      	cmp	r2, #0
 8000230:	d136      	bne.n	80002a0 <main+0xb4>
		  uint8_t buffer[128] = {0}; // Initialize to zeros
 8000232:	2300      	movs	r3, #0
 8000234:	603b      	str	r3, [r7, #0]
 8000236:	1d3b      	adds	r3, r7, #4
 8000238:	227c      	movs	r2, #124	; 0x7c
 800023a:	2100      	movs	r1, #0
 800023c:	4618      	mov	r0, r3
 800023e:	f007 ffcb 	bl	80081d8 <memset>
		  int length = snprintf((char *)buffer, sizeof(buffer),
		  							"chargeEnabled: %s, "
		  							"dischargeEnabled: %s, "
		  							"chargerDetected: %s, "
		  							"antisafeEnabled: %s\r\n",
		  							data.chargeEnabled ? "true" : "false",
 8000242:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
		  int length = snprintf((char *)buffer, sizeof(buffer),
 8000246:	2b00      	cmp	r3, #0
 8000248:	d001      	beq.n	800024e <main+0x62>
 800024a:	4c1c      	ldr	r4, [pc, #112]	; (80002bc <main+0xd0>)
 800024c:	e000      	b.n	8000250 <main+0x64>
 800024e:	4c1c      	ldr	r4, [pc, #112]	; (80002c0 <main+0xd4>)
		  							data.dischargeEnabled ? "true" : "false",
 8000250:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
		  int length = snprintf((char *)buffer, sizeof(buffer),
 8000254:	2b00      	cmp	r3, #0
 8000256:	d001      	beq.n	800025c <main+0x70>
 8000258:	4b18      	ldr	r3, [pc, #96]	; (80002bc <main+0xd0>)
 800025a:	e000      	b.n	800025e <main+0x72>
 800025c:	4b18      	ldr	r3, [pc, #96]	; (80002c0 <main+0xd4>)
		  							data.chargerDetected ? "true" : "false",
 800025e:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
		  int length = snprintf((char *)buffer, sizeof(buffer),
 8000262:	2a00      	cmp	r2, #0
 8000264:	d001      	beq.n	800026a <main+0x7e>
 8000266:	4a15      	ldr	r2, [pc, #84]	; (80002bc <main+0xd0>)
 8000268:	e000      	b.n	800026c <main+0x80>
 800026a:	4a15      	ldr	r2, [pc, #84]	; (80002c0 <main+0xd4>)
		  							data.antisafeEnabled ? "true" : "false");
 800026c:	f897 1083 	ldrb.w	r1, [r7, #131]	; 0x83
		  int length = snprintf((char *)buffer, sizeof(buffer),
 8000270:	2900      	cmp	r1, #0
 8000272:	d001      	beq.n	8000278 <main+0x8c>
 8000274:	4911      	ldr	r1, [pc, #68]	; (80002bc <main+0xd0>)
 8000276:	e000      	b.n	800027a <main+0x8e>
 8000278:	4911      	ldr	r1, [pc, #68]	; (80002c0 <main+0xd4>)
 800027a:	4638      	mov	r0, r7
 800027c:	9102      	str	r1, [sp, #8]
 800027e:	9201      	str	r2, [sp, #4]
 8000280:	9300      	str	r3, [sp, #0]
 8000282:	4623      	mov	r3, r4
 8000284:	4a0f      	ldr	r2, [pc, #60]	; (80002c4 <main+0xd8>)
 8000286:	2180      	movs	r1, #128	; 0x80
 8000288:	f007 ff72 	bl	8008170 <sniprintf>
 800028c:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84

		  	  CDC_Transmit_FS(buffer, length);  // Use length here
 8000290:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000294:	b29a      	uxth	r2, r3
 8000296:	463b      	mov	r3, r7
 8000298:	4611      	mov	r1, r2
 800029a:	4618      	mov	r0, r3
 800029c:	f007 fb8a 	bl	80079b4 <CDC_Transmit_FS>
	  }
	  else{

	  }

	  i++;
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <main+0xc8>)
 80002a2:	681b      	ldr	r3, [r3, #0]
 80002a4:	3301      	adds	r3, #1
 80002a6:	4a03      	ldr	r2, [pc, #12]	; (80002b4 <main+0xc8>)
 80002a8:	6013      	str	r3, [r2, #0]

	  HAL_Delay(100);
 80002aa:	2064      	movs	r0, #100	; 0x64
 80002ac:	f000 fb46 	bl	800093c <HAL_Delay>
  {
 80002b0:	e7ab      	b.n	800020a <main+0x1e>
 80002b2:	bf00      	nop
 80002b4:	20000284 	.word	0x20000284
 80002b8:	66666667 	.word	0x66666667
 80002bc:	08008b14 	.word	0x08008b14
 80002c0:	08008b1c 	.word	0x08008b1c
 80002c4:	08008b24 	.word	0x08008b24

080002c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002c8:	b580      	push	{r7, lr}
 80002ca:	b094      	sub	sp, #80	; 0x50
 80002cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002ce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80002d2:	2228      	movs	r2, #40	; 0x28
 80002d4:	2100      	movs	r1, #0
 80002d6:	4618      	mov	r0, r3
 80002d8:	f007 ff7e 	bl	80081d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002dc:	f107 0314 	add.w	r3, r7, #20
 80002e0:	2200      	movs	r2, #0
 80002e2:	601a      	str	r2, [r3, #0]
 80002e4:	605a      	str	r2, [r3, #4]
 80002e6:	609a      	str	r2, [r3, #8]
 80002e8:	60da      	str	r2, [r3, #12]
 80002ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002ec:	1d3b      	adds	r3, r7, #4
 80002ee:	2200      	movs	r2, #0
 80002f0:	601a      	str	r2, [r3, #0]
 80002f2:	605a      	str	r2, [r3, #4]
 80002f4:	609a      	str	r2, [r3, #8]
 80002f6:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80002f8:	2301      	movs	r3, #1
 80002fa:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80002fc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000300:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 8000302:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000306:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000308:	2301      	movs	r3, #1
 800030a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800030c:	2302      	movs	r3, #2
 800030e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000310:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000314:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000316:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800031a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800031c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000320:	4618      	mov	r0, r3
 8000322:	f002 fad7 	bl	80028d4 <HAL_RCC_OscConfig>
 8000326:	4603      	mov	r3, r0
 8000328:	2b00      	cmp	r3, #0
 800032a:	d001      	beq.n	8000330 <SystemClock_Config+0x68>
  {
    Error_Handler();
 800032c:	f000 f93c 	bl	80005a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000330:	230f      	movs	r3, #15
 8000332:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000334:	2302      	movs	r3, #2
 8000336:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000338:	2300      	movs	r3, #0
 800033a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800033c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000340:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000342:	2300      	movs	r3, #0
 8000344:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000346:	f107 0314 	add.w	r3, r7, #20
 800034a:	2102      	movs	r1, #2
 800034c:	4618      	mov	r0, r3
 800034e:	f002 fd43 	bl	8002dd8 <HAL_RCC_ClockConfig>
 8000352:	4603      	mov	r3, r0
 8000354:	2b00      	cmp	r3, #0
 8000356:	d001      	beq.n	800035c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000358:	f000 f926 	bl	80005a8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800035c:	2310      	movs	r3, #16
 800035e:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000360:	2300      	movs	r3, #0
 8000362:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000364:	1d3b      	adds	r3, r7, #4
 8000366:	4618      	mov	r0, r3
 8000368:	f002 fed0 	bl	800310c <HAL_RCCEx_PeriphCLKConfig>
 800036c:	4603      	mov	r3, r0
 800036e:	2b00      	cmp	r3, #0
 8000370:	d001      	beq.n	8000376 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000372:	f000 f919 	bl	80005a8 <Error_Handler>
  }
}
 8000376:	bf00      	nop
 8000378:	3750      	adds	r7, #80	; 0x50
 800037a:	46bd      	mov	sp, r7
 800037c:	bd80      	pop	{r7, pc}
	...

08000380 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000380:	b580      	push	{r7, lr}
 8000382:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000384:	4b17      	ldr	r3, [pc, #92]	; (80003e4 <MX_SPI1_Init+0x64>)
 8000386:	4a18      	ldr	r2, [pc, #96]	; (80003e8 <MX_SPI1_Init+0x68>)
 8000388:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800038a:	4b16      	ldr	r3, [pc, #88]	; (80003e4 <MX_SPI1_Init+0x64>)
 800038c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000390:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000392:	4b14      	ldr	r3, [pc, #80]	; (80003e4 <MX_SPI1_Init+0x64>)
 8000394:	2200      	movs	r2, #0
 8000396:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000398:	4b12      	ldr	r3, [pc, #72]	; (80003e4 <MX_SPI1_Init+0x64>)
 800039a:	2200      	movs	r2, #0
 800039c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800039e:	4b11      	ldr	r3, [pc, #68]	; (80003e4 <MX_SPI1_Init+0x64>)
 80003a0:	2200      	movs	r2, #0
 80003a2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80003a4:	4b0f      	ldr	r3, [pc, #60]	; (80003e4 <MX_SPI1_Init+0x64>)
 80003a6:	2200      	movs	r2, #0
 80003a8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80003aa:	4b0e      	ldr	r3, [pc, #56]	; (80003e4 <MX_SPI1_Init+0x64>)
 80003ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80003b0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80003b2:	4b0c      	ldr	r3, [pc, #48]	; (80003e4 <MX_SPI1_Init+0x64>)
 80003b4:	2218      	movs	r2, #24
 80003b6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80003b8:	4b0a      	ldr	r3, [pc, #40]	; (80003e4 <MX_SPI1_Init+0x64>)
 80003ba:	2200      	movs	r2, #0
 80003bc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80003be:	4b09      	ldr	r3, [pc, #36]	; (80003e4 <MX_SPI1_Init+0x64>)
 80003c0:	2200      	movs	r2, #0
 80003c2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80003c4:	4b07      	ldr	r3, [pc, #28]	; (80003e4 <MX_SPI1_Init+0x64>)
 80003c6:	2200      	movs	r2, #0
 80003c8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80003ca:	4b06      	ldr	r3, [pc, #24]	; (80003e4 <MX_SPI1_Init+0x64>)
 80003cc:	220a      	movs	r2, #10
 80003ce:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80003d0:	4804      	ldr	r0, [pc, #16]	; (80003e4 <MX_SPI1_Init+0x64>)
 80003d2:	f002 ff51 	bl	8003278 <HAL_SPI_Init>
 80003d6:	4603      	mov	r3, r0
 80003d8:	2b00      	cmp	r3, #0
 80003da:	d001      	beq.n	80003e0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80003dc:	f000 f8e4 	bl	80005a8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80003e0:	bf00      	nop
 80003e2:	bd80      	pop	{r7, pc}
 80003e4:	200001e8 	.word	0x200001e8
 80003e8:	40013000 	.word	0x40013000

080003ec <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80003ec:	b580      	push	{r7, lr}
 80003ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80003f0:	4b11      	ldr	r3, [pc, #68]	; (8000438 <MX_USART1_UART_Init+0x4c>)
 80003f2:	4a12      	ldr	r2, [pc, #72]	; (800043c <MX_USART1_UART_Init+0x50>)
 80003f4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80003f6:	4b10      	ldr	r3, [pc, #64]	; (8000438 <MX_USART1_UART_Init+0x4c>)
 80003f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80003fc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80003fe:	4b0e      	ldr	r3, [pc, #56]	; (8000438 <MX_USART1_UART_Init+0x4c>)
 8000400:	2200      	movs	r2, #0
 8000402:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000404:	4b0c      	ldr	r3, [pc, #48]	; (8000438 <MX_USART1_UART_Init+0x4c>)
 8000406:	2200      	movs	r2, #0
 8000408:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800040a:	4b0b      	ldr	r3, [pc, #44]	; (8000438 <MX_USART1_UART_Init+0x4c>)
 800040c:	2200      	movs	r2, #0
 800040e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000410:	4b09      	ldr	r3, [pc, #36]	; (8000438 <MX_USART1_UART_Init+0x4c>)
 8000412:	220c      	movs	r2, #12
 8000414:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000416:	4b08      	ldr	r3, [pc, #32]	; (8000438 <MX_USART1_UART_Init+0x4c>)
 8000418:	2200      	movs	r2, #0
 800041a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800041c:	4b06      	ldr	r3, [pc, #24]	; (8000438 <MX_USART1_UART_Init+0x4c>)
 800041e:	2200      	movs	r2, #0
 8000420:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000422:	4805      	ldr	r0, [pc, #20]	; (8000438 <MX_USART1_UART_Init+0x4c>)
 8000424:	f002 ffac 	bl	8003380 <HAL_UART_Init>
 8000428:	4603      	mov	r3, r0
 800042a:	2b00      	cmp	r3, #0
 800042c:	d001      	beq.n	8000432 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800042e:	f000 f8bb 	bl	80005a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000432:	bf00      	nop
 8000434:	bd80      	pop	{r7, pc}
 8000436:	bf00      	nop
 8000438:	20000240 	.word	0x20000240
 800043c:	40013800 	.word	0x40013800

08000440 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000440:	b580      	push	{r7, lr}
 8000442:	b088      	sub	sp, #32
 8000444:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000446:	f107 0310 	add.w	r3, r7, #16
 800044a:	2200      	movs	r2, #0
 800044c:	601a      	str	r2, [r3, #0]
 800044e:	605a      	str	r2, [r3, #4]
 8000450:	609a      	str	r2, [r3, #8]
 8000452:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000454:	4b4f      	ldr	r3, [pc, #316]	; (8000594 <MX_GPIO_Init+0x154>)
 8000456:	699b      	ldr	r3, [r3, #24]
 8000458:	4a4e      	ldr	r2, [pc, #312]	; (8000594 <MX_GPIO_Init+0x154>)
 800045a:	f043 0310 	orr.w	r3, r3, #16
 800045e:	6193      	str	r3, [r2, #24]
 8000460:	4b4c      	ldr	r3, [pc, #304]	; (8000594 <MX_GPIO_Init+0x154>)
 8000462:	699b      	ldr	r3, [r3, #24]
 8000464:	f003 0310 	and.w	r3, r3, #16
 8000468:	60fb      	str	r3, [r7, #12]
 800046a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800046c:	4b49      	ldr	r3, [pc, #292]	; (8000594 <MX_GPIO_Init+0x154>)
 800046e:	699b      	ldr	r3, [r3, #24]
 8000470:	4a48      	ldr	r2, [pc, #288]	; (8000594 <MX_GPIO_Init+0x154>)
 8000472:	f043 0320 	orr.w	r3, r3, #32
 8000476:	6193      	str	r3, [r2, #24]
 8000478:	4b46      	ldr	r3, [pc, #280]	; (8000594 <MX_GPIO_Init+0x154>)
 800047a:	699b      	ldr	r3, [r3, #24]
 800047c:	f003 0320 	and.w	r3, r3, #32
 8000480:	60bb      	str	r3, [r7, #8]
 8000482:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000484:	4b43      	ldr	r3, [pc, #268]	; (8000594 <MX_GPIO_Init+0x154>)
 8000486:	699b      	ldr	r3, [r3, #24]
 8000488:	4a42      	ldr	r2, [pc, #264]	; (8000594 <MX_GPIO_Init+0x154>)
 800048a:	f043 0304 	orr.w	r3, r3, #4
 800048e:	6193      	str	r3, [r2, #24]
 8000490:	4b40      	ldr	r3, [pc, #256]	; (8000594 <MX_GPIO_Init+0x154>)
 8000492:	699b      	ldr	r3, [r3, #24]
 8000494:	f003 0304 	and.w	r3, r3, #4
 8000498:	607b      	str	r3, [r7, #4]
 800049a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800049c:	4b3d      	ldr	r3, [pc, #244]	; (8000594 <MX_GPIO_Init+0x154>)
 800049e:	699b      	ldr	r3, [r3, #24]
 80004a0:	4a3c      	ldr	r2, [pc, #240]	; (8000594 <MX_GPIO_Init+0x154>)
 80004a2:	f043 0308 	orr.w	r3, r3, #8
 80004a6:	6193      	str	r3, [r2, #24]
 80004a8:	4b3a      	ldr	r3, [pc, #232]	; (8000594 <MX_GPIO_Init+0x154>)
 80004aa:	699b      	ldr	r3, [r3, #24]
 80004ac:	f003 0308 	and.w	r3, r3, #8
 80004b0:	603b      	str	r3, [r7, #0]
 80004b2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80004b4:	2200      	movs	r2, #0
 80004b6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004ba:	4837      	ldr	r0, [pc, #220]	; (8000598 <MX_GPIO_Init+0x158>)
 80004bc:	f000 fd0b 	bl	8000ed6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 80004c0:	2200      	movs	r2, #0
 80004c2:	f44f 718f 	mov.w	r1, #286	; 0x11e
 80004c6:	4835      	ldr	r0, [pc, #212]	; (800059c <MX_GPIO_Init+0x15c>)
 80004c8:	f000 fd05 	bl	8000ed6 <HAL_GPIO_WritePin>
                          |GPIO_PIN_8, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11
 80004cc:	2200      	movs	r2, #0
 80004ce:	f64f 4113 	movw	r1, #64531	; 0xfc13
 80004d2:	4833      	ldr	r0, [pc, #204]	; (80005a0 <MX_GPIO_Init+0x160>)
 80004d4:	f000 fcff 	bl	8000ed6 <HAL_GPIO_WritePin>
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_4, GPIO_PIN_RESET);

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80004d8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80004dc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004de:	2301      	movs	r3, #1
 80004e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004e2:	2300      	movs	r3, #0
 80004e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004e6:	2302      	movs	r3, #2
 80004e8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80004ea:	f107 0310 	add.w	r3, r7, #16
 80004ee:	4619      	mov	r1, r3
 80004f0:	4829      	ldr	r0, [pc, #164]	; (8000598 <MX_GPIO_Init+0x158>)
 80004f2:	f000 fb55 	bl	8000ba0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80004f6:	2301      	movs	r3, #1
 80004f8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80004fa:	4b2a      	ldr	r3, [pc, #168]	; (80005a4 <MX_GPIO_Init+0x164>)
 80004fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80004fe:	2301      	movs	r3, #1
 8000500:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000502:	f107 0310 	add.w	r3, r7, #16
 8000506:	4619      	mov	r1, r3
 8000508:	4824      	ldr	r0, [pc, #144]	; (800059c <MX_GPIO_Init+0x15c>)
 800050a:	f000 fb49 	bl	8000ba0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA3 PA4
                           PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 800050e:	f44f 738f 	mov.w	r3, #286	; 0x11e
 8000512:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000514:	2301      	movs	r3, #1
 8000516:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000518:	2300      	movs	r3, #0
 800051a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800051c:	2302      	movs	r3, #2
 800051e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000520:	f107 0310 	add.w	r3, r7, #16
 8000524:	4619      	mov	r1, r3
 8000526:	481d      	ldr	r0, [pc, #116]	; (800059c <MX_GPIO_Init+0x15c>)
 8000528:	f000 fb3a 	bl	8000ba0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB10 PB11
                           PB12 PB13 PB14 PB15
                           PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11
 800052c:	f64f 4313 	movw	r3, #64531	; 0xfc13
 8000530:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000532:	2301      	movs	r3, #1
 8000534:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000536:	2300      	movs	r3, #0
 8000538:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800053a:	2302      	movs	r3, #2
 800053c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800053e:	f107 0310 	add.w	r3, r7, #16
 8000542:	4619      	mov	r1, r3
 8000544:	4816      	ldr	r0, [pc, #88]	; (80005a0 <MX_GPIO_Init+0x160>)
 8000546:	f000 fb2b 	bl	8000ba0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 800054a:	2308      	movs	r3, #8
 800054c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800054e:	2300      	movs	r3, #0
 8000550:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000552:	2301      	movs	r3, #1
 8000554:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000556:	f107 0310 	add.w	r3, r7, #16
 800055a:	4619      	mov	r1, r3
 800055c:	4810      	ldr	r0, [pc, #64]	; (80005a0 <MX_GPIO_Init+0x160>)
 800055e:	f000 fb1f 	bl	8000ba0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB5 PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000562:	23e0      	movs	r3, #224	; 0xe0
 8000564:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000566:	2300      	movs	r3, #0
 8000568:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800056a:	2300      	movs	r3, #0
 800056c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800056e:	f107 0310 	add.w	r3, r7, #16
 8000572:	4619      	mov	r1, r3
 8000574:	480a      	ldr	r0, [pc, #40]	; (80005a0 <MX_GPIO_Init+0x160>)
 8000576:	f000 fb13 	bl	8000ba0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800057a:	2200      	movs	r2, #0
 800057c:	2100      	movs	r1, #0
 800057e:	2006      	movs	r0, #6
 8000580:	f000 fad7 	bl	8000b32 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000584:	2006      	movs	r0, #6
 8000586:	f000 faf0 	bl	8000b6a <HAL_NVIC_EnableIRQ>

}
 800058a:	bf00      	nop
 800058c:	3720      	adds	r7, #32
 800058e:	46bd      	mov	sp, r7
 8000590:	bd80      	pop	{r7, pc}
 8000592:	bf00      	nop
 8000594:	40021000 	.word	0x40021000
 8000598:	40011000 	.word	0x40011000
 800059c:	40010800 	.word	0x40010800
 80005a0:	40010c00 	.word	0x40010c00
 80005a4:	10110000 	.word	0x10110000

080005a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005a8:	b480      	push	{r7}
 80005aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005ac:	b672      	cpsid	i
}
 80005ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005b0:	e7fe      	b.n	80005b0 <Error_Handler+0x8>
	...

080005b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005b4:	b480      	push	{r7}
 80005b6:	b085      	sub	sp, #20
 80005b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80005ba:	4b15      	ldr	r3, [pc, #84]	; (8000610 <HAL_MspInit+0x5c>)
 80005bc:	699b      	ldr	r3, [r3, #24]
 80005be:	4a14      	ldr	r2, [pc, #80]	; (8000610 <HAL_MspInit+0x5c>)
 80005c0:	f043 0301 	orr.w	r3, r3, #1
 80005c4:	6193      	str	r3, [r2, #24]
 80005c6:	4b12      	ldr	r3, [pc, #72]	; (8000610 <HAL_MspInit+0x5c>)
 80005c8:	699b      	ldr	r3, [r3, #24]
 80005ca:	f003 0301 	and.w	r3, r3, #1
 80005ce:	60bb      	str	r3, [r7, #8]
 80005d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005d2:	4b0f      	ldr	r3, [pc, #60]	; (8000610 <HAL_MspInit+0x5c>)
 80005d4:	69db      	ldr	r3, [r3, #28]
 80005d6:	4a0e      	ldr	r2, [pc, #56]	; (8000610 <HAL_MspInit+0x5c>)
 80005d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005dc:	61d3      	str	r3, [r2, #28]
 80005de:	4b0c      	ldr	r3, [pc, #48]	; (8000610 <HAL_MspInit+0x5c>)
 80005e0:	69db      	ldr	r3, [r3, #28]
 80005e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005e6:	607b      	str	r3, [r7, #4]
 80005e8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80005ea:	4b0a      	ldr	r3, [pc, #40]	; (8000614 <HAL_MspInit+0x60>)
 80005ec:	685b      	ldr	r3, [r3, #4]
 80005ee:	60fb      	str	r3, [r7, #12]
 80005f0:	68fb      	ldr	r3, [r7, #12]
 80005f2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80005f6:	60fb      	str	r3, [r7, #12]
 80005f8:	68fb      	ldr	r3, [r7, #12]
 80005fa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80005fe:	60fb      	str	r3, [r7, #12]
 8000600:	4a04      	ldr	r2, [pc, #16]	; (8000614 <HAL_MspInit+0x60>)
 8000602:	68fb      	ldr	r3, [r7, #12]
 8000604:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000606:	bf00      	nop
 8000608:	3714      	adds	r7, #20
 800060a:	46bd      	mov	sp, r7
 800060c:	bc80      	pop	{r7}
 800060e:	4770      	bx	lr
 8000610:	40021000 	.word	0x40021000
 8000614:	40010000 	.word	0x40010000

08000618 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b088      	sub	sp, #32
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000620:	f107 0310 	add.w	r3, r7, #16
 8000624:	2200      	movs	r2, #0
 8000626:	601a      	str	r2, [r3, #0]
 8000628:	605a      	str	r2, [r3, #4]
 800062a:	609a      	str	r2, [r3, #8]
 800062c:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	4a1b      	ldr	r2, [pc, #108]	; (80006a0 <HAL_SPI_MspInit+0x88>)
 8000634:	4293      	cmp	r3, r2
 8000636:	d12f      	bne.n	8000698 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000638:	4b1a      	ldr	r3, [pc, #104]	; (80006a4 <HAL_SPI_MspInit+0x8c>)
 800063a:	699b      	ldr	r3, [r3, #24]
 800063c:	4a19      	ldr	r2, [pc, #100]	; (80006a4 <HAL_SPI_MspInit+0x8c>)
 800063e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000642:	6193      	str	r3, [r2, #24]
 8000644:	4b17      	ldr	r3, [pc, #92]	; (80006a4 <HAL_SPI_MspInit+0x8c>)
 8000646:	699b      	ldr	r3, [r3, #24]
 8000648:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800064c:	60fb      	str	r3, [r7, #12]
 800064e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000650:	4b14      	ldr	r3, [pc, #80]	; (80006a4 <HAL_SPI_MspInit+0x8c>)
 8000652:	699b      	ldr	r3, [r3, #24]
 8000654:	4a13      	ldr	r2, [pc, #76]	; (80006a4 <HAL_SPI_MspInit+0x8c>)
 8000656:	f043 0304 	orr.w	r3, r3, #4
 800065a:	6193      	str	r3, [r2, #24]
 800065c:	4b11      	ldr	r3, [pc, #68]	; (80006a4 <HAL_SPI_MspInit+0x8c>)
 800065e:	699b      	ldr	r3, [r3, #24]
 8000660:	f003 0304 	and.w	r3, r3, #4
 8000664:	60bb      	str	r3, [r7, #8]
 8000666:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000668:	23a0      	movs	r3, #160	; 0xa0
 800066a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800066c:	2302      	movs	r3, #2
 800066e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000670:	2303      	movs	r3, #3
 8000672:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000674:	f107 0310 	add.w	r3, r7, #16
 8000678:	4619      	mov	r1, r3
 800067a:	480b      	ldr	r0, [pc, #44]	; (80006a8 <HAL_SPI_MspInit+0x90>)
 800067c:	f000 fa90 	bl	8000ba0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000680:	2340      	movs	r3, #64	; 0x40
 8000682:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000684:	2300      	movs	r3, #0
 8000686:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000688:	2300      	movs	r3, #0
 800068a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800068c:	f107 0310 	add.w	r3, r7, #16
 8000690:	4619      	mov	r1, r3
 8000692:	4805      	ldr	r0, [pc, #20]	; (80006a8 <HAL_SPI_MspInit+0x90>)
 8000694:	f000 fa84 	bl	8000ba0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000698:	bf00      	nop
 800069a:	3720      	adds	r7, #32
 800069c:	46bd      	mov	sp, r7
 800069e:	bd80      	pop	{r7, pc}
 80006a0:	40013000 	.word	0x40013000
 80006a4:	40021000 	.word	0x40021000
 80006a8:	40010800 	.word	0x40010800

080006ac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b088      	sub	sp, #32
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006b4:	f107 0310 	add.w	r3, r7, #16
 80006b8:	2200      	movs	r2, #0
 80006ba:	601a      	str	r2, [r3, #0]
 80006bc:	605a      	str	r2, [r3, #4]
 80006be:	609a      	str	r2, [r3, #8]
 80006c0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	4a1c      	ldr	r2, [pc, #112]	; (8000738 <HAL_UART_MspInit+0x8c>)
 80006c8:	4293      	cmp	r3, r2
 80006ca:	d131      	bne.n	8000730 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80006cc:	4b1b      	ldr	r3, [pc, #108]	; (800073c <HAL_UART_MspInit+0x90>)
 80006ce:	699b      	ldr	r3, [r3, #24]
 80006d0:	4a1a      	ldr	r2, [pc, #104]	; (800073c <HAL_UART_MspInit+0x90>)
 80006d2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006d6:	6193      	str	r3, [r2, #24]
 80006d8:	4b18      	ldr	r3, [pc, #96]	; (800073c <HAL_UART_MspInit+0x90>)
 80006da:	699b      	ldr	r3, [r3, #24]
 80006dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006e0:	60fb      	str	r3, [r7, #12]
 80006e2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006e4:	4b15      	ldr	r3, [pc, #84]	; (800073c <HAL_UART_MspInit+0x90>)
 80006e6:	699b      	ldr	r3, [r3, #24]
 80006e8:	4a14      	ldr	r2, [pc, #80]	; (800073c <HAL_UART_MspInit+0x90>)
 80006ea:	f043 0304 	orr.w	r3, r3, #4
 80006ee:	6193      	str	r3, [r2, #24]
 80006f0:	4b12      	ldr	r3, [pc, #72]	; (800073c <HAL_UART_MspInit+0x90>)
 80006f2:	699b      	ldr	r3, [r3, #24]
 80006f4:	f003 0304 	and.w	r3, r3, #4
 80006f8:	60bb      	str	r3, [r7, #8]
 80006fa:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80006fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000700:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000702:	2302      	movs	r3, #2
 8000704:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000706:	2303      	movs	r3, #3
 8000708:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800070a:	f107 0310 	add.w	r3, r7, #16
 800070e:	4619      	mov	r1, r3
 8000710:	480b      	ldr	r0, [pc, #44]	; (8000740 <HAL_UART_MspInit+0x94>)
 8000712:	f000 fa45 	bl	8000ba0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000716:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800071a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800071c:	2300      	movs	r3, #0
 800071e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000720:	2300      	movs	r3, #0
 8000722:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000724:	f107 0310 	add.w	r3, r7, #16
 8000728:	4619      	mov	r1, r3
 800072a:	4805      	ldr	r0, [pc, #20]	; (8000740 <HAL_UART_MspInit+0x94>)
 800072c:	f000 fa38 	bl	8000ba0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000730:	bf00      	nop
 8000732:	3720      	adds	r7, #32
 8000734:	46bd      	mov	sp, r7
 8000736:	bd80      	pop	{r7, pc}
 8000738:	40013800 	.word	0x40013800
 800073c:	40021000 	.word	0x40021000
 8000740:	40010800 	.word	0x40010800

08000744 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000744:	b480      	push	{r7}
 8000746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000748:	e7fe      	b.n	8000748 <NMI_Handler+0x4>

0800074a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800074a:	b480      	push	{r7}
 800074c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800074e:	e7fe      	b.n	800074e <HardFault_Handler+0x4>

08000750 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000750:	b480      	push	{r7}
 8000752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000754:	e7fe      	b.n	8000754 <MemManage_Handler+0x4>

08000756 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000756:	b480      	push	{r7}
 8000758:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800075a:	e7fe      	b.n	800075a <BusFault_Handler+0x4>

0800075c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800075c:	b480      	push	{r7}
 800075e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000760:	e7fe      	b.n	8000760 <UsageFault_Handler+0x4>

08000762 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000762:	b480      	push	{r7}
 8000764:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000766:	bf00      	nop
 8000768:	46bd      	mov	sp, r7
 800076a:	bc80      	pop	{r7}
 800076c:	4770      	bx	lr

0800076e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800076e:	b480      	push	{r7}
 8000770:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000772:	bf00      	nop
 8000774:	46bd      	mov	sp, r7
 8000776:	bc80      	pop	{r7}
 8000778:	4770      	bx	lr

0800077a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800077a:	b480      	push	{r7}
 800077c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800077e:	bf00      	nop
 8000780:	46bd      	mov	sp, r7
 8000782:	bc80      	pop	{r7}
 8000784:	4770      	bx	lr

08000786 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000786:	b580      	push	{r7, lr}
 8000788:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800078a:	f000 f8bb 	bl	8000904 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800078e:	bf00      	nop
 8000790:	bd80      	pop	{r7, pc}

08000792 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000792:	b580      	push	{r7, lr}
 8000794:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000796:	2001      	movs	r0, #1
 8000798:	f000 fbb6 	bl	8000f08 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800079c:	bf00      	nop
 800079e:	bd80      	pop	{r7, pc}

080007a0 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80007a4:	4802      	ldr	r0, [pc, #8]	; (80007b0 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80007a6:	f000 fd02 	bl	80011ae <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80007aa:	bf00      	nop
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	20000f60 	.word	0x20000f60

080007b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b086      	sub	sp, #24
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80007bc:	4a14      	ldr	r2, [pc, #80]	; (8000810 <_sbrk+0x5c>)
 80007be:	4b15      	ldr	r3, [pc, #84]	; (8000814 <_sbrk+0x60>)
 80007c0:	1ad3      	subs	r3, r2, r3
 80007c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80007c4:	697b      	ldr	r3, [r7, #20]
 80007c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80007c8:	4b13      	ldr	r3, [pc, #76]	; (8000818 <_sbrk+0x64>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d102      	bne.n	80007d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80007d0:	4b11      	ldr	r3, [pc, #68]	; (8000818 <_sbrk+0x64>)
 80007d2:	4a12      	ldr	r2, [pc, #72]	; (800081c <_sbrk+0x68>)
 80007d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80007d6:	4b10      	ldr	r3, [pc, #64]	; (8000818 <_sbrk+0x64>)
 80007d8:	681a      	ldr	r2, [r3, #0]
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	4413      	add	r3, r2
 80007de:	693a      	ldr	r2, [r7, #16]
 80007e0:	429a      	cmp	r2, r3
 80007e2:	d207      	bcs.n	80007f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80007e4:	f007 fd00 	bl	80081e8 <__errno>
 80007e8:	4603      	mov	r3, r0
 80007ea:	220c      	movs	r2, #12
 80007ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80007ee:	f04f 33ff 	mov.w	r3, #4294967295
 80007f2:	e009      	b.n	8000808 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80007f4:	4b08      	ldr	r3, [pc, #32]	; (8000818 <_sbrk+0x64>)
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80007fa:	4b07      	ldr	r3, [pc, #28]	; (8000818 <_sbrk+0x64>)
 80007fc:	681a      	ldr	r2, [r3, #0]
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	4413      	add	r3, r2
 8000802:	4a05      	ldr	r2, [pc, #20]	; (8000818 <_sbrk+0x64>)
 8000804:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000806:	68fb      	ldr	r3, [r7, #12]
}
 8000808:	4618      	mov	r0, r3
 800080a:	3718      	adds	r7, #24
 800080c:	46bd      	mov	sp, r7
 800080e:	bd80      	pop	{r7, pc}
 8000810:	20005000 	.word	0x20005000
 8000814:	00000400 	.word	0x00000400
 8000818:	20000288 	.word	0x20000288
 800081c:	200015b8 	.word	0x200015b8

08000820 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000820:	b480      	push	{r7}
 8000822:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000824:	bf00      	nop
 8000826:	46bd      	mov	sp, r7
 8000828:	bc80      	pop	{r7}
 800082a:	4770      	bx	lr

0800082c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800082c:	480c      	ldr	r0, [pc, #48]	; (8000860 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800082e:	490d      	ldr	r1, [pc, #52]	; (8000864 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000830:	4a0d      	ldr	r2, [pc, #52]	; (8000868 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000832:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000834:	e002      	b.n	800083c <LoopCopyDataInit>

08000836 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000836:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000838:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800083a:	3304      	adds	r3, #4

0800083c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800083c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800083e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000840:	d3f9      	bcc.n	8000836 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000842:	4a0a      	ldr	r2, [pc, #40]	; (800086c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000844:	4c0a      	ldr	r4, [pc, #40]	; (8000870 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000846:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000848:	e001      	b.n	800084e <LoopFillZerobss>

0800084a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800084a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800084c:	3204      	adds	r2, #4

0800084e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800084e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000850:	d3fb      	bcc.n	800084a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000852:	f7ff ffe5 	bl	8000820 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000856:	f007 fccd 	bl	80081f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800085a:	f7ff fcc7 	bl	80001ec <main>
  bx lr
 800085e:	4770      	bx	lr
  ldr r0, =_sdata
 8000860:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000864:	200001cc 	.word	0x200001cc
  ldr r2, =_sidata
 8000868:	08008c24 	.word	0x08008c24
  ldr r2, =_sbss
 800086c:	200001cc 	.word	0x200001cc
  ldr r4, =_ebss
 8000870:	200015b4 	.word	0x200015b4

08000874 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000874:	e7fe      	b.n	8000874 <ADC1_2_IRQHandler>
	...

08000878 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800087c:	4b08      	ldr	r3, [pc, #32]	; (80008a0 <HAL_Init+0x28>)
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	4a07      	ldr	r2, [pc, #28]	; (80008a0 <HAL_Init+0x28>)
 8000882:	f043 0310 	orr.w	r3, r3, #16
 8000886:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000888:	2003      	movs	r0, #3
 800088a:	f000 f947 	bl	8000b1c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800088e:	200f      	movs	r0, #15
 8000890:	f000 f808 	bl	80008a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000894:	f7ff fe8e 	bl	80005b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000898:	2300      	movs	r3, #0
}
 800089a:	4618      	mov	r0, r3
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	40022000 	.word	0x40022000

080008a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b082      	sub	sp, #8
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008ac:	4b12      	ldr	r3, [pc, #72]	; (80008f8 <HAL_InitTick+0x54>)
 80008ae:	681a      	ldr	r2, [r3, #0]
 80008b0:	4b12      	ldr	r3, [pc, #72]	; (80008fc <HAL_InitTick+0x58>)
 80008b2:	781b      	ldrb	r3, [r3, #0]
 80008b4:	4619      	mov	r1, r3
 80008b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80008be:	fbb2 f3f3 	udiv	r3, r2, r3
 80008c2:	4618      	mov	r0, r3
 80008c4:	f000 f95f 	bl	8000b86 <HAL_SYSTICK_Config>
 80008c8:	4603      	mov	r3, r0
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d001      	beq.n	80008d2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80008ce:	2301      	movs	r3, #1
 80008d0:	e00e      	b.n	80008f0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	2b0f      	cmp	r3, #15
 80008d6:	d80a      	bhi.n	80008ee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008d8:	2200      	movs	r2, #0
 80008da:	6879      	ldr	r1, [r7, #4]
 80008dc:	f04f 30ff 	mov.w	r0, #4294967295
 80008e0:	f000 f927 	bl	8000b32 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008e4:	4a06      	ldr	r2, [pc, #24]	; (8000900 <HAL_InitTick+0x5c>)
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80008ea:	2300      	movs	r3, #0
 80008ec:	e000      	b.n	80008f0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80008ee:	2301      	movs	r3, #1
}
 80008f0:	4618      	mov	r0, r3
 80008f2:	3708      	adds	r7, #8
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bd80      	pop	{r7, pc}
 80008f8:	20000000 	.word	0x20000000
 80008fc:	20000008 	.word	0x20000008
 8000900:	20000004 	.word	0x20000004

08000904 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000904:	b480      	push	{r7}
 8000906:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000908:	4b05      	ldr	r3, [pc, #20]	; (8000920 <HAL_IncTick+0x1c>)
 800090a:	781b      	ldrb	r3, [r3, #0]
 800090c:	461a      	mov	r2, r3
 800090e:	4b05      	ldr	r3, [pc, #20]	; (8000924 <HAL_IncTick+0x20>)
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	4413      	add	r3, r2
 8000914:	4a03      	ldr	r2, [pc, #12]	; (8000924 <HAL_IncTick+0x20>)
 8000916:	6013      	str	r3, [r2, #0]
}
 8000918:	bf00      	nop
 800091a:	46bd      	mov	sp, r7
 800091c:	bc80      	pop	{r7}
 800091e:	4770      	bx	lr
 8000920:	20000008 	.word	0x20000008
 8000924:	2000028c 	.word	0x2000028c

08000928 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000928:	b480      	push	{r7}
 800092a:	af00      	add	r7, sp, #0
  return uwTick;
 800092c:	4b02      	ldr	r3, [pc, #8]	; (8000938 <HAL_GetTick+0x10>)
 800092e:	681b      	ldr	r3, [r3, #0]
}
 8000930:	4618      	mov	r0, r3
 8000932:	46bd      	mov	sp, r7
 8000934:	bc80      	pop	{r7}
 8000936:	4770      	bx	lr
 8000938:	2000028c 	.word	0x2000028c

0800093c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b084      	sub	sp, #16
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000944:	f7ff fff0 	bl	8000928 <HAL_GetTick>
 8000948:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800094e:	68fb      	ldr	r3, [r7, #12]
 8000950:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000954:	d005      	beq.n	8000962 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000956:	4b0a      	ldr	r3, [pc, #40]	; (8000980 <HAL_Delay+0x44>)
 8000958:	781b      	ldrb	r3, [r3, #0]
 800095a:	461a      	mov	r2, r3
 800095c:	68fb      	ldr	r3, [r7, #12]
 800095e:	4413      	add	r3, r2
 8000960:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000962:	bf00      	nop
 8000964:	f7ff ffe0 	bl	8000928 <HAL_GetTick>
 8000968:	4602      	mov	r2, r0
 800096a:	68bb      	ldr	r3, [r7, #8]
 800096c:	1ad3      	subs	r3, r2, r3
 800096e:	68fa      	ldr	r2, [r7, #12]
 8000970:	429a      	cmp	r2, r3
 8000972:	d8f7      	bhi.n	8000964 <HAL_Delay+0x28>
  {
  }
}
 8000974:	bf00      	nop
 8000976:	bf00      	nop
 8000978:	3710      	adds	r7, #16
 800097a:	46bd      	mov	sp, r7
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	20000008 	.word	0x20000008

08000984 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000984:	b480      	push	{r7}
 8000986:	b085      	sub	sp, #20
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	f003 0307 	and.w	r3, r3, #7
 8000992:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000994:	4b0c      	ldr	r3, [pc, #48]	; (80009c8 <__NVIC_SetPriorityGrouping+0x44>)
 8000996:	68db      	ldr	r3, [r3, #12]
 8000998:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800099a:	68ba      	ldr	r2, [r7, #8]
 800099c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80009a0:	4013      	ands	r3, r2
 80009a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80009a4:	68fb      	ldr	r3, [r7, #12]
 80009a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009a8:	68bb      	ldr	r3, [r7, #8]
 80009aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80009b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009b6:	4a04      	ldr	r2, [pc, #16]	; (80009c8 <__NVIC_SetPriorityGrouping+0x44>)
 80009b8:	68bb      	ldr	r3, [r7, #8]
 80009ba:	60d3      	str	r3, [r2, #12]
}
 80009bc:	bf00      	nop
 80009be:	3714      	adds	r7, #20
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bc80      	pop	{r7}
 80009c4:	4770      	bx	lr
 80009c6:	bf00      	nop
 80009c8:	e000ed00 	.word	0xe000ed00

080009cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009cc:	b480      	push	{r7}
 80009ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009d0:	4b04      	ldr	r3, [pc, #16]	; (80009e4 <__NVIC_GetPriorityGrouping+0x18>)
 80009d2:	68db      	ldr	r3, [r3, #12]
 80009d4:	0a1b      	lsrs	r3, r3, #8
 80009d6:	f003 0307 	and.w	r3, r3, #7
}
 80009da:	4618      	mov	r0, r3
 80009dc:	46bd      	mov	sp, r7
 80009de:	bc80      	pop	{r7}
 80009e0:	4770      	bx	lr
 80009e2:	bf00      	nop
 80009e4:	e000ed00 	.word	0xe000ed00

080009e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009e8:	b480      	push	{r7}
 80009ea:	b083      	sub	sp, #12
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	4603      	mov	r3, r0
 80009f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	db0b      	blt.n	8000a12 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80009fa:	79fb      	ldrb	r3, [r7, #7]
 80009fc:	f003 021f 	and.w	r2, r3, #31
 8000a00:	4906      	ldr	r1, [pc, #24]	; (8000a1c <__NVIC_EnableIRQ+0x34>)
 8000a02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a06:	095b      	lsrs	r3, r3, #5
 8000a08:	2001      	movs	r0, #1
 8000a0a:	fa00 f202 	lsl.w	r2, r0, r2
 8000a0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000a12:	bf00      	nop
 8000a14:	370c      	adds	r7, #12
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bc80      	pop	{r7}
 8000a1a:	4770      	bx	lr
 8000a1c:	e000e100 	.word	0xe000e100

08000a20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a20:	b480      	push	{r7}
 8000a22:	b083      	sub	sp, #12
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	4603      	mov	r3, r0
 8000a28:	6039      	str	r1, [r7, #0]
 8000a2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	db0a      	blt.n	8000a4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a34:	683b      	ldr	r3, [r7, #0]
 8000a36:	b2da      	uxtb	r2, r3
 8000a38:	490c      	ldr	r1, [pc, #48]	; (8000a6c <__NVIC_SetPriority+0x4c>)
 8000a3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a3e:	0112      	lsls	r2, r2, #4
 8000a40:	b2d2      	uxtb	r2, r2
 8000a42:	440b      	add	r3, r1
 8000a44:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a48:	e00a      	b.n	8000a60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a4a:	683b      	ldr	r3, [r7, #0]
 8000a4c:	b2da      	uxtb	r2, r3
 8000a4e:	4908      	ldr	r1, [pc, #32]	; (8000a70 <__NVIC_SetPriority+0x50>)
 8000a50:	79fb      	ldrb	r3, [r7, #7]
 8000a52:	f003 030f 	and.w	r3, r3, #15
 8000a56:	3b04      	subs	r3, #4
 8000a58:	0112      	lsls	r2, r2, #4
 8000a5a:	b2d2      	uxtb	r2, r2
 8000a5c:	440b      	add	r3, r1
 8000a5e:	761a      	strb	r2, [r3, #24]
}
 8000a60:	bf00      	nop
 8000a62:	370c      	adds	r7, #12
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bc80      	pop	{r7}
 8000a68:	4770      	bx	lr
 8000a6a:	bf00      	nop
 8000a6c:	e000e100 	.word	0xe000e100
 8000a70:	e000ed00 	.word	0xe000ed00

08000a74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a74:	b480      	push	{r7}
 8000a76:	b089      	sub	sp, #36	; 0x24
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	60f8      	str	r0, [r7, #12]
 8000a7c:	60b9      	str	r1, [r7, #8]
 8000a7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a80:	68fb      	ldr	r3, [r7, #12]
 8000a82:	f003 0307 	and.w	r3, r3, #7
 8000a86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a88:	69fb      	ldr	r3, [r7, #28]
 8000a8a:	f1c3 0307 	rsb	r3, r3, #7
 8000a8e:	2b04      	cmp	r3, #4
 8000a90:	bf28      	it	cs
 8000a92:	2304      	movcs	r3, #4
 8000a94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a96:	69fb      	ldr	r3, [r7, #28]
 8000a98:	3304      	adds	r3, #4
 8000a9a:	2b06      	cmp	r3, #6
 8000a9c:	d902      	bls.n	8000aa4 <NVIC_EncodePriority+0x30>
 8000a9e:	69fb      	ldr	r3, [r7, #28]
 8000aa0:	3b03      	subs	r3, #3
 8000aa2:	e000      	b.n	8000aa6 <NVIC_EncodePriority+0x32>
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000aa8:	f04f 32ff 	mov.w	r2, #4294967295
 8000aac:	69bb      	ldr	r3, [r7, #24]
 8000aae:	fa02 f303 	lsl.w	r3, r2, r3
 8000ab2:	43da      	mvns	r2, r3
 8000ab4:	68bb      	ldr	r3, [r7, #8]
 8000ab6:	401a      	ands	r2, r3
 8000ab8:	697b      	ldr	r3, [r7, #20]
 8000aba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000abc:	f04f 31ff 	mov.w	r1, #4294967295
 8000ac0:	697b      	ldr	r3, [r7, #20]
 8000ac2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ac6:	43d9      	mvns	r1, r3
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000acc:	4313      	orrs	r3, r2
         );
}
 8000ace:	4618      	mov	r0, r3
 8000ad0:	3724      	adds	r7, #36	; 0x24
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bc80      	pop	{r7}
 8000ad6:	4770      	bx	lr

08000ad8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b082      	sub	sp, #8
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	3b01      	subs	r3, #1
 8000ae4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ae8:	d301      	bcc.n	8000aee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000aea:	2301      	movs	r3, #1
 8000aec:	e00f      	b.n	8000b0e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000aee:	4a0a      	ldr	r2, [pc, #40]	; (8000b18 <SysTick_Config+0x40>)
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	3b01      	subs	r3, #1
 8000af4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000af6:	210f      	movs	r1, #15
 8000af8:	f04f 30ff 	mov.w	r0, #4294967295
 8000afc:	f7ff ff90 	bl	8000a20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b00:	4b05      	ldr	r3, [pc, #20]	; (8000b18 <SysTick_Config+0x40>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b06:	4b04      	ldr	r3, [pc, #16]	; (8000b18 <SysTick_Config+0x40>)
 8000b08:	2207      	movs	r2, #7
 8000b0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b0c:	2300      	movs	r3, #0
}
 8000b0e:	4618      	mov	r0, r3
 8000b10:	3708      	adds	r7, #8
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	e000e010 	.word	0xe000e010

08000b1c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b082      	sub	sp, #8
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b24:	6878      	ldr	r0, [r7, #4]
 8000b26:	f7ff ff2d 	bl	8000984 <__NVIC_SetPriorityGrouping>
}
 8000b2a:	bf00      	nop
 8000b2c:	3708      	adds	r7, #8
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}

08000b32 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b32:	b580      	push	{r7, lr}
 8000b34:	b086      	sub	sp, #24
 8000b36:	af00      	add	r7, sp, #0
 8000b38:	4603      	mov	r3, r0
 8000b3a:	60b9      	str	r1, [r7, #8]
 8000b3c:	607a      	str	r2, [r7, #4]
 8000b3e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b40:	2300      	movs	r3, #0
 8000b42:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b44:	f7ff ff42 	bl	80009cc <__NVIC_GetPriorityGrouping>
 8000b48:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b4a:	687a      	ldr	r2, [r7, #4]
 8000b4c:	68b9      	ldr	r1, [r7, #8]
 8000b4e:	6978      	ldr	r0, [r7, #20]
 8000b50:	f7ff ff90 	bl	8000a74 <NVIC_EncodePriority>
 8000b54:	4602      	mov	r2, r0
 8000b56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b5a:	4611      	mov	r1, r2
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	f7ff ff5f 	bl	8000a20 <__NVIC_SetPriority>
}
 8000b62:	bf00      	nop
 8000b64:	3718      	adds	r7, #24
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}

08000b6a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b6a:	b580      	push	{r7, lr}
 8000b6c:	b082      	sub	sp, #8
 8000b6e:	af00      	add	r7, sp, #0
 8000b70:	4603      	mov	r3, r0
 8000b72:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b78:	4618      	mov	r0, r3
 8000b7a:	f7ff ff35 	bl	80009e8 <__NVIC_EnableIRQ>
}
 8000b7e:	bf00      	nop
 8000b80:	3708      	adds	r7, #8
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}

08000b86 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b86:	b580      	push	{r7, lr}
 8000b88:	b082      	sub	sp, #8
 8000b8a:	af00      	add	r7, sp, #0
 8000b8c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b8e:	6878      	ldr	r0, [r7, #4]
 8000b90:	f7ff ffa2 	bl	8000ad8 <SysTick_Config>
 8000b94:	4603      	mov	r3, r0
}
 8000b96:	4618      	mov	r0, r3
 8000b98:	3708      	adds	r7, #8
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}
	...

08000ba0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	b08b      	sub	sp, #44	; 0x2c
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
 8000ba8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000baa:	2300      	movs	r3, #0
 8000bac:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000bb2:	e169      	b.n	8000e88 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000bb4:	2201      	movs	r2, #1
 8000bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bbc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000bbe:	683b      	ldr	r3, [r7, #0]
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	69fa      	ldr	r2, [r7, #28]
 8000bc4:	4013      	ands	r3, r2
 8000bc6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000bc8:	69ba      	ldr	r2, [r7, #24]
 8000bca:	69fb      	ldr	r3, [r7, #28]
 8000bcc:	429a      	cmp	r2, r3
 8000bce:	f040 8158 	bne.w	8000e82 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000bd2:	683b      	ldr	r3, [r7, #0]
 8000bd4:	685b      	ldr	r3, [r3, #4]
 8000bd6:	4a9a      	ldr	r2, [pc, #616]	; (8000e40 <HAL_GPIO_Init+0x2a0>)
 8000bd8:	4293      	cmp	r3, r2
 8000bda:	d05e      	beq.n	8000c9a <HAL_GPIO_Init+0xfa>
 8000bdc:	4a98      	ldr	r2, [pc, #608]	; (8000e40 <HAL_GPIO_Init+0x2a0>)
 8000bde:	4293      	cmp	r3, r2
 8000be0:	d875      	bhi.n	8000cce <HAL_GPIO_Init+0x12e>
 8000be2:	4a98      	ldr	r2, [pc, #608]	; (8000e44 <HAL_GPIO_Init+0x2a4>)
 8000be4:	4293      	cmp	r3, r2
 8000be6:	d058      	beq.n	8000c9a <HAL_GPIO_Init+0xfa>
 8000be8:	4a96      	ldr	r2, [pc, #600]	; (8000e44 <HAL_GPIO_Init+0x2a4>)
 8000bea:	4293      	cmp	r3, r2
 8000bec:	d86f      	bhi.n	8000cce <HAL_GPIO_Init+0x12e>
 8000bee:	4a96      	ldr	r2, [pc, #600]	; (8000e48 <HAL_GPIO_Init+0x2a8>)
 8000bf0:	4293      	cmp	r3, r2
 8000bf2:	d052      	beq.n	8000c9a <HAL_GPIO_Init+0xfa>
 8000bf4:	4a94      	ldr	r2, [pc, #592]	; (8000e48 <HAL_GPIO_Init+0x2a8>)
 8000bf6:	4293      	cmp	r3, r2
 8000bf8:	d869      	bhi.n	8000cce <HAL_GPIO_Init+0x12e>
 8000bfa:	4a94      	ldr	r2, [pc, #592]	; (8000e4c <HAL_GPIO_Init+0x2ac>)
 8000bfc:	4293      	cmp	r3, r2
 8000bfe:	d04c      	beq.n	8000c9a <HAL_GPIO_Init+0xfa>
 8000c00:	4a92      	ldr	r2, [pc, #584]	; (8000e4c <HAL_GPIO_Init+0x2ac>)
 8000c02:	4293      	cmp	r3, r2
 8000c04:	d863      	bhi.n	8000cce <HAL_GPIO_Init+0x12e>
 8000c06:	4a92      	ldr	r2, [pc, #584]	; (8000e50 <HAL_GPIO_Init+0x2b0>)
 8000c08:	4293      	cmp	r3, r2
 8000c0a:	d046      	beq.n	8000c9a <HAL_GPIO_Init+0xfa>
 8000c0c:	4a90      	ldr	r2, [pc, #576]	; (8000e50 <HAL_GPIO_Init+0x2b0>)
 8000c0e:	4293      	cmp	r3, r2
 8000c10:	d85d      	bhi.n	8000cce <HAL_GPIO_Init+0x12e>
 8000c12:	2b12      	cmp	r3, #18
 8000c14:	d82a      	bhi.n	8000c6c <HAL_GPIO_Init+0xcc>
 8000c16:	2b12      	cmp	r3, #18
 8000c18:	d859      	bhi.n	8000cce <HAL_GPIO_Init+0x12e>
 8000c1a:	a201      	add	r2, pc, #4	; (adr r2, 8000c20 <HAL_GPIO_Init+0x80>)
 8000c1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c20:	08000c9b 	.word	0x08000c9b
 8000c24:	08000c75 	.word	0x08000c75
 8000c28:	08000c87 	.word	0x08000c87
 8000c2c:	08000cc9 	.word	0x08000cc9
 8000c30:	08000ccf 	.word	0x08000ccf
 8000c34:	08000ccf 	.word	0x08000ccf
 8000c38:	08000ccf 	.word	0x08000ccf
 8000c3c:	08000ccf 	.word	0x08000ccf
 8000c40:	08000ccf 	.word	0x08000ccf
 8000c44:	08000ccf 	.word	0x08000ccf
 8000c48:	08000ccf 	.word	0x08000ccf
 8000c4c:	08000ccf 	.word	0x08000ccf
 8000c50:	08000ccf 	.word	0x08000ccf
 8000c54:	08000ccf 	.word	0x08000ccf
 8000c58:	08000ccf 	.word	0x08000ccf
 8000c5c:	08000ccf 	.word	0x08000ccf
 8000c60:	08000ccf 	.word	0x08000ccf
 8000c64:	08000c7d 	.word	0x08000c7d
 8000c68:	08000c91 	.word	0x08000c91
 8000c6c:	4a79      	ldr	r2, [pc, #484]	; (8000e54 <HAL_GPIO_Init+0x2b4>)
 8000c6e:	4293      	cmp	r3, r2
 8000c70:	d013      	beq.n	8000c9a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000c72:	e02c      	b.n	8000cce <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000c74:	683b      	ldr	r3, [r7, #0]
 8000c76:	68db      	ldr	r3, [r3, #12]
 8000c78:	623b      	str	r3, [r7, #32]
          break;
 8000c7a:	e029      	b.n	8000cd0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000c7c:	683b      	ldr	r3, [r7, #0]
 8000c7e:	68db      	ldr	r3, [r3, #12]
 8000c80:	3304      	adds	r3, #4
 8000c82:	623b      	str	r3, [r7, #32]
          break;
 8000c84:	e024      	b.n	8000cd0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000c86:	683b      	ldr	r3, [r7, #0]
 8000c88:	68db      	ldr	r3, [r3, #12]
 8000c8a:	3308      	adds	r3, #8
 8000c8c:	623b      	str	r3, [r7, #32]
          break;
 8000c8e:	e01f      	b.n	8000cd0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000c90:	683b      	ldr	r3, [r7, #0]
 8000c92:	68db      	ldr	r3, [r3, #12]
 8000c94:	330c      	adds	r3, #12
 8000c96:	623b      	str	r3, [r7, #32]
          break;
 8000c98:	e01a      	b.n	8000cd0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000c9a:	683b      	ldr	r3, [r7, #0]
 8000c9c:	689b      	ldr	r3, [r3, #8]
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d102      	bne.n	8000ca8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000ca2:	2304      	movs	r3, #4
 8000ca4:	623b      	str	r3, [r7, #32]
          break;
 8000ca6:	e013      	b.n	8000cd0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000ca8:	683b      	ldr	r3, [r7, #0]
 8000caa:	689b      	ldr	r3, [r3, #8]
 8000cac:	2b01      	cmp	r3, #1
 8000cae:	d105      	bne.n	8000cbc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000cb0:	2308      	movs	r3, #8
 8000cb2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	69fa      	ldr	r2, [r7, #28]
 8000cb8:	611a      	str	r2, [r3, #16]
          break;
 8000cba:	e009      	b.n	8000cd0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000cbc:	2308      	movs	r3, #8
 8000cbe:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	69fa      	ldr	r2, [r7, #28]
 8000cc4:	615a      	str	r2, [r3, #20]
          break;
 8000cc6:	e003      	b.n	8000cd0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	623b      	str	r3, [r7, #32]
          break;
 8000ccc:	e000      	b.n	8000cd0 <HAL_GPIO_Init+0x130>
          break;
 8000cce:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000cd0:	69bb      	ldr	r3, [r7, #24]
 8000cd2:	2bff      	cmp	r3, #255	; 0xff
 8000cd4:	d801      	bhi.n	8000cda <HAL_GPIO_Init+0x13a>
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	e001      	b.n	8000cde <HAL_GPIO_Init+0x13e>
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	3304      	adds	r3, #4
 8000cde:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000ce0:	69bb      	ldr	r3, [r7, #24]
 8000ce2:	2bff      	cmp	r3, #255	; 0xff
 8000ce4:	d802      	bhi.n	8000cec <HAL_GPIO_Init+0x14c>
 8000ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ce8:	009b      	lsls	r3, r3, #2
 8000cea:	e002      	b.n	8000cf2 <HAL_GPIO_Init+0x152>
 8000cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cee:	3b08      	subs	r3, #8
 8000cf0:	009b      	lsls	r3, r3, #2
 8000cf2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000cf4:	697b      	ldr	r3, [r7, #20]
 8000cf6:	681a      	ldr	r2, [r3, #0]
 8000cf8:	210f      	movs	r1, #15
 8000cfa:	693b      	ldr	r3, [r7, #16]
 8000cfc:	fa01 f303 	lsl.w	r3, r1, r3
 8000d00:	43db      	mvns	r3, r3
 8000d02:	401a      	ands	r2, r3
 8000d04:	6a39      	ldr	r1, [r7, #32]
 8000d06:	693b      	ldr	r3, [r7, #16]
 8000d08:	fa01 f303 	lsl.w	r3, r1, r3
 8000d0c:	431a      	orrs	r2, r3
 8000d0e:	697b      	ldr	r3, [r7, #20]
 8000d10:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000d12:	683b      	ldr	r3, [r7, #0]
 8000d14:	685b      	ldr	r3, [r3, #4]
 8000d16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	f000 80b1 	beq.w	8000e82 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000d20:	4b4d      	ldr	r3, [pc, #308]	; (8000e58 <HAL_GPIO_Init+0x2b8>)
 8000d22:	699b      	ldr	r3, [r3, #24]
 8000d24:	4a4c      	ldr	r2, [pc, #304]	; (8000e58 <HAL_GPIO_Init+0x2b8>)
 8000d26:	f043 0301 	orr.w	r3, r3, #1
 8000d2a:	6193      	str	r3, [r2, #24]
 8000d2c:	4b4a      	ldr	r3, [pc, #296]	; (8000e58 <HAL_GPIO_Init+0x2b8>)
 8000d2e:	699b      	ldr	r3, [r3, #24]
 8000d30:	f003 0301 	and.w	r3, r3, #1
 8000d34:	60bb      	str	r3, [r7, #8]
 8000d36:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000d38:	4a48      	ldr	r2, [pc, #288]	; (8000e5c <HAL_GPIO_Init+0x2bc>)
 8000d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d3c:	089b      	lsrs	r3, r3, #2
 8000d3e:	3302      	adds	r3, #2
 8000d40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d44:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d48:	f003 0303 	and.w	r3, r3, #3
 8000d4c:	009b      	lsls	r3, r3, #2
 8000d4e:	220f      	movs	r2, #15
 8000d50:	fa02 f303 	lsl.w	r3, r2, r3
 8000d54:	43db      	mvns	r3, r3
 8000d56:	68fa      	ldr	r2, [r7, #12]
 8000d58:	4013      	ands	r3, r2
 8000d5a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	4a40      	ldr	r2, [pc, #256]	; (8000e60 <HAL_GPIO_Init+0x2c0>)
 8000d60:	4293      	cmp	r3, r2
 8000d62:	d013      	beq.n	8000d8c <HAL_GPIO_Init+0x1ec>
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	4a3f      	ldr	r2, [pc, #252]	; (8000e64 <HAL_GPIO_Init+0x2c4>)
 8000d68:	4293      	cmp	r3, r2
 8000d6a:	d00d      	beq.n	8000d88 <HAL_GPIO_Init+0x1e8>
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	4a3e      	ldr	r2, [pc, #248]	; (8000e68 <HAL_GPIO_Init+0x2c8>)
 8000d70:	4293      	cmp	r3, r2
 8000d72:	d007      	beq.n	8000d84 <HAL_GPIO_Init+0x1e4>
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	4a3d      	ldr	r2, [pc, #244]	; (8000e6c <HAL_GPIO_Init+0x2cc>)
 8000d78:	4293      	cmp	r3, r2
 8000d7a:	d101      	bne.n	8000d80 <HAL_GPIO_Init+0x1e0>
 8000d7c:	2303      	movs	r3, #3
 8000d7e:	e006      	b.n	8000d8e <HAL_GPIO_Init+0x1ee>
 8000d80:	2304      	movs	r3, #4
 8000d82:	e004      	b.n	8000d8e <HAL_GPIO_Init+0x1ee>
 8000d84:	2302      	movs	r3, #2
 8000d86:	e002      	b.n	8000d8e <HAL_GPIO_Init+0x1ee>
 8000d88:	2301      	movs	r3, #1
 8000d8a:	e000      	b.n	8000d8e <HAL_GPIO_Init+0x1ee>
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000d90:	f002 0203 	and.w	r2, r2, #3
 8000d94:	0092      	lsls	r2, r2, #2
 8000d96:	4093      	lsls	r3, r2
 8000d98:	68fa      	ldr	r2, [r7, #12]
 8000d9a:	4313      	orrs	r3, r2
 8000d9c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000d9e:	492f      	ldr	r1, [pc, #188]	; (8000e5c <HAL_GPIO_Init+0x2bc>)
 8000da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000da2:	089b      	lsrs	r3, r3, #2
 8000da4:	3302      	adds	r3, #2
 8000da6:	68fa      	ldr	r2, [r7, #12]
 8000da8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000dac:	683b      	ldr	r3, [r7, #0]
 8000dae:	685b      	ldr	r3, [r3, #4]
 8000db0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d006      	beq.n	8000dc6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000db8:	4b2d      	ldr	r3, [pc, #180]	; (8000e70 <HAL_GPIO_Init+0x2d0>)
 8000dba:	681a      	ldr	r2, [r3, #0]
 8000dbc:	492c      	ldr	r1, [pc, #176]	; (8000e70 <HAL_GPIO_Init+0x2d0>)
 8000dbe:	69bb      	ldr	r3, [r7, #24]
 8000dc0:	4313      	orrs	r3, r2
 8000dc2:	600b      	str	r3, [r1, #0]
 8000dc4:	e006      	b.n	8000dd4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000dc6:	4b2a      	ldr	r3, [pc, #168]	; (8000e70 <HAL_GPIO_Init+0x2d0>)
 8000dc8:	681a      	ldr	r2, [r3, #0]
 8000dca:	69bb      	ldr	r3, [r7, #24]
 8000dcc:	43db      	mvns	r3, r3
 8000dce:	4928      	ldr	r1, [pc, #160]	; (8000e70 <HAL_GPIO_Init+0x2d0>)
 8000dd0:	4013      	ands	r3, r2
 8000dd2:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000dd4:	683b      	ldr	r3, [r7, #0]
 8000dd6:	685b      	ldr	r3, [r3, #4]
 8000dd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d006      	beq.n	8000dee <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000de0:	4b23      	ldr	r3, [pc, #140]	; (8000e70 <HAL_GPIO_Init+0x2d0>)
 8000de2:	685a      	ldr	r2, [r3, #4]
 8000de4:	4922      	ldr	r1, [pc, #136]	; (8000e70 <HAL_GPIO_Init+0x2d0>)
 8000de6:	69bb      	ldr	r3, [r7, #24]
 8000de8:	4313      	orrs	r3, r2
 8000dea:	604b      	str	r3, [r1, #4]
 8000dec:	e006      	b.n	8000dfc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000dee:	4b20      	ldr	r3, [pc, #128]	; (8000e70 <HAL_GPIO_Init+0x2d0>)
 8000df0:	685a      	ldr	r2, [r3, #4]
 8000df2:	69bb      	ldr	r3, [r7, #24]
 8000df4:	43db      	mvns	r3, r3
 8000df6:	491e      	ldr	r1, [pc, #120]	; (8000e70 <HAL_GPIO_Init+0x2d0>)
 8000df8:	4013      	ands	r3, r2
 8000dfa:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	685b      	ldr	r3, [r3, #4]
 8000e00:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d006      	beq.n	8000e16 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000e08:	4b19      	ldr	r3, [pc, #100]	; (8000e70 <HAL_GPIO_Init+0x2d0>)
 8000e0a:	689a      	ldr	r2, [r3, #8]
 8000e0c:	4918      	ldr	r1, [pc, #96]	; (8000e70 <HAL_GPIO_Init+0x2d0>)
 8000e0e:	69bb      	ldr	r3, [r7, #24]
 8000e10:	4313      	orrs	r3, r2
 8000e12:	608b      	str	r3, [r1, #8]
 8000e14:	e006      	b.n	8000e24 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000e16:	4b16      	ldr	r3, [pc, #88]	; (8000e70 <HAL_GPIO_Init+0x2d0>)
 8000e18:	689a      	ldr	r2, [r3, #8]
 8000e1a:	69bb      	ldr	r3, [r7, #24]
 8000e1c:	43db      	mvns	r3, r3
 8000e1e:	4914      	ldr	r1, [pc, #80]	; (8000e70 <HAL_GPIO_Init+0x2d0>)
 8000e20:	4013      	ands	r3, r2
 8000e22:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000e24:	683b      	ldr	r3, [r7, #0]
 8000e26:	685b      	ldr	r3, [r3, #4]
 8000e28:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d021      	beq.n	8000e74 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000e30:	4b0f      	ldr	r3, [pc, #60]	; (8000e70 <HAL_GPIO_Init+0x2d0>)
 8000e32:	68da      	ldr	r2, [r3, #12]
 8000e34:	490e      	ldr	r1, [pc, #56]	; (8000e70 <HAL_GPIO_Init+0x2d0>)
 8000e36:	69bb      	ldr	r3, [r7, #24]
 8000e38:	4313      	orrs	r3, r2
 8000e3a:	60cb      	str	r3, [r1, #12]
 8000e3c:	e021      	b.n	8000e82 <HAL_GPIO_Init+0x2e2>
 8000e3e:	bf00      	nop
 8000e40:	10320000 	.word	0x10320000
 8000e44:	10310000 	.word	0x10310000
 8000e48:	10220000 	.word	0x10220000
 8000e4c:	10210000 	.word	0x10210000
 8000e50:	10120000 	.word	0x10120000
 8000e54:	10110000 	.word	0x10110000
 8000e58:	40021000 	.word	0x40021000
 8000e5c:	40010000 	.word	0x40010000
 8000e60:	40010800 	.word	0x40010800
 8000e64:	40010c00 	.word	0x40010c00
 8000e68:	40011000 	.word	0x40011000
 8000e6c:	40011400 	.word	0x40011400
 8000e70:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000e74:	4b0b      	ldr	r3, [pc, #44]	; (8000ea4 <HAL_GPIO_Init+0x304>)
 8000e76:	68da      	ldr	r2, [r3, #12]
 8000e78:	69bb      	ldr	r3, [r7, #24]
 8000e7a:	43db      	mvns	r3, r3
 8000e7c:	4909      	ldr	r1, [pc, #36]	; (8000ea4 <HAL_GPIO_Init+0x304>)
 8000e7e:	4013      	ands	r3, r2
 8000e80:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e84:	3301      	adds	r3, #1
 8000e86:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e88:	683b      	ldr	r3, [r7, #0]
 8000e8a:	681a      	ldr	r2, [r3, #0]
 8000e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e8e:	fa22 f303 	lsr.w	r3, r2, r3
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	f47f ae8e 	bne.w	8000bb4 <HAL_GPIO_Init+0x14>
  }
}
 8000e98:	bf00      	nop
 8000e9a:	bf00      	nop
 8000e9c:	372c      	adds	r7, #44	; 0x2c
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bc80      	pop	{r7}
 8000ea2:	4770      	bx	lr
 8000ea4:	40010400 	.word	0x40010400

08000ea8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	b085      	sub	sp, #20
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
 8000eb0:	460b      	mov	r3, r1
 8000eb2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	689a      	ldr	r2, [r3, #8]
 8000eb8:	887b      	ldrh	r3, [r7, #2]
 8000eba:	4013      	ands	r3, r2
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d002      	beq.n	8000ec6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000ec0:	2301      	movs	r3, #1
 8000ec2:	73fb      	strb	r3, [r7, #15]
 8000ec4:	e001      	b.n	8000eca <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000eca:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ecc:	4618      	mov	r0, r3
 8000ece:	3714      	adds	r7, #20
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bc80      	pop	{r7}
 8000ed4:	4770      	bx	lr

08000ed6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ed6:	b480      	push	{r7}
 8000ed8:	b083      	sub	sp, #12
 8000eda:	af00      	add	r7, sp, #0
 8000edc:	6078      	str	r0, [r7, #4]
 8000ede:	460b      	mov	r3, r1
 8000ee0:	807b      	strh	r3, [r7, #2]
 8000ee2:	4613      	mov	r3, r2
 8000ee4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000ee6:	787b      	ldrb	r3, [r7, #1]
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d003      	beq.n	8000ef4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000eec:	887a      	ldrh	r2, [r7, #2]
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000ef2:	e003      	b.n	8000efc <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000ef4:	887b      	ldrh	r3, [r7, #2]
 8000ef6:	041a      	lsls	r2, r3, #16
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	611a      	str	r2, [r3, #16]
}
 8000efc:	bf00      	nop
 8000efe:	370c      	adds	r7, #12
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bc80      	pop	{r7}
 8000f04:	4770      	bx	lr
	...

08000f08 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b082      	sub	sp, #8
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	4603      	mov	r3, r0
 8000f10:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000f12:	4b08      	ldr	r3, [pc, #32]	; (8000f34 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000f14:	695a      	ldr	r2, [r3, #20]
 8000f16:	88fb      	ldrh	r3, [r7, #6]
 8000f18:	4013      	ands	r3, r2
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d006      	beq.n	8000f2c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000f1e:	4a05      	ldr	r2, [pc, #20]	; (8000f34 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000f20:	88fb      	ldrh	r3, [r7, #6]
 8000f22:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000f24:	88fb      	ldrh	r3, [r7, #6]
 8000f26:	4618      	mov	r0, r3
 8000f28:	f000 f806 	bl	8000f38 <HAL_GPIO_EXTI_Callback>
  }
}
 8000f2c:	bf00      	nop
 8000f2e:	3708      	adds	r7, #8
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}
 8000f34:	40010400 	.word	0x40010400

08000f38 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	b083      	sub	sp, #12
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	4603      	mov	r3, r0
 8000f40:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8000f42:	bf00      	nop
 8000f44:	370c      	adds	r7, #12
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bc80      	pop	{r7}
 8000f4a:	4770      	bx	lr

08000f4c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000f4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f4e:	b08b      	sub	sp, #44	; 0x2c
 8000f50:	af06      	add	r7, sp, #24
 8000f52:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d101      	bne.n	8000f5e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000f5a:	2301      	movs	r3, #1
 8000f5c:	e0fd      	b.n	800115a <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8000f64:	b2db      	uxtb	r3, r3
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d106      	bne.n	8000f78 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000f72:	6878      	ldr	r0, [r7, #4]
 8000f74:	f006 fe52 	bl	8007c1c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	2203      	movs	r2, #3
 8000f7c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	4618      	mov	r0, r3
 8000f86:	f002 fafd 	bl	8003584 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	603b      	str	r3, [r7, #0]
 8000f90:	687e      	ldr	r6, [r7, #4]
 8000f92:	466d      	mov	r5, sp
 8000f94:	f106 0410 	add.w	r4, r6, #16
 8000f98:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000f9a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000f9c:	6823      	ldr	r3, [r4, #0]
 8000f9e:	602b      	str	r3, [r5, #0]
 8000fa0:	1d33      	adds	r3, r6, #4
 8000fa2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000fa4:	6838      	ldr	r0, [r7, #0]
 8000fa6:	f002 fac7 	bl	8003538 <USB_CoreInit>
 8000faa:	4603      	mov	r3, r0
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d005      	beq.n	8000fbc <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	2202      	movs	r2, #2
 8000fb4:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8000fb8:	2301      	movs	r3, #1
 8000fba:	e0ce      	b.n	800115a <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	2100      	movs	r1, #0
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f002 faf8 	bl	80035b8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000fc8:	2300      	movs	r3, #0
 8000fca:	73fb      	strb	r3, [r7, #15]
 8000fcc:	e04c      	b.n	8001068 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000fce:	7bfb      	ldrb	r3, [r7, #15]
 8000fd0:	6879      	ldr	r1, [r7, #4]
 8000fd2:	1c5a      	adds	r2, r3, #1
 8000fd4:	4613      	mov	r3, r2
 8000fd6:	009b      	lsls	r3, r3, #2
 8000fd8:	4413      	add	r3, r2
 8000fda:	00db      	lsls	r3, r3, #3
 8000fdc:	440b      	add	r3, r1
 8000fde:	3301      	adds	r3, #1
 8000fe0:	2201      	movs	r2, #1
 8000fe2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000fe4:	7bfb      	ldrb	r3, [r7, #15]
 8000fe6:	6879      	ldr	r1, [r7, #4]
 8000fe8:	1c5a      	adds	r2, r3, #1
 8000fea:	4613      	mov	r3, r2
 8000fec:	009b      	lsls	r3, r3, #2
 8000fee:	4413      	add	r3, r2
 8000ff0:	00db      	lsls	r3, r3, #3
 8000ff2:	440b      	add	r3, r1
 8000ff4:	7bfa      	ldrb	r2, [r7, #15]
 8000ff6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000ff8:	7bfa      	ldrb	r2, [r7, #15]
 8000ffa:	7bfb      	ldrb	r3, [r7, #15]
 8000ffc:	b298      	uxth	r0, r3
 8000ffe:	6879      	ldr	r1, [r7, #4]
 8001000:	4613      	mov	r3, r2
 8001002:	009b      	lsls	r3, r3, #2
 8001004:	4413      	add	r3, r2
 8001006:	00db      	lsls	r3, r3, #3
 8001008:	440b      	add	r3, r1
 800100a:	3336      	adds	r3, #54	; 0x36
 800100c:	4602      	mov	r2, r0
 800100e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001010:	7bfb      	ldrb	r3, [r7, #15]
 8001012:	6879      	ldr	r1, [r7, #4]
 8001014:	1c5a      	adds	r2, r3, #1
 8001016:	4613      	mov	r3, r2
 8001018:	009b      	lsls	r3, r3, #2
 800101a:	4413      	add	r3, r2
 800101c:	00db      	lsls	r3, r3, #3
 800101e:	440b      	add	r3, r1
 8001020:	3303      	adds	r3, #3
 8001022:	2200      	movs	r2, #0
 8001024:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001026:	7bfa      	ldrb	r2, [r7, #15]
 8001028:	6879      	ldr	r1, [r7, #4]
 800102a:	4613      	mov	r3, r2
 800102c:	009b      	lsls	r3, r3, #2
 800102e:	4413      	add	r3, r2
 8001030:	00db      	lsls	r3, r3, #3
 8001032:	440b      	add	r3, r1
 8001034:	3338      	adds	r3, #56	; 0x38
 8001036:	2200      	movs	r2, #0
 8001038:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800103a:	7bfa      	ldrb	r2, [r7, #15]
 800103c:	6879      	ldr	r1, [r7, #4]
 800103e:	4613      	mov	r3, r2
 8001040:	009b      	lsls	r3, r3, #2
 8001042:	4413      	add	r3, r2
 8001044:	00db      	lsls	r3, r3, #3
 8001046:	440b      	add	r3, r1
 8001048:	333c      	adds	r3, #60	; 0x3c
 800104a:	2200      	movs	r2, #0
 800104c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800104e:	7bfa      	ldrb	r2, [r7, #15]
 8001050:	6879      	ldr	r1, [r7, #4]
 8001052:	4613      	mov	r3, r2
 8001054:	009b      	lsls	r3, r3, #2
 8001056:	4413      	add	r3, r2
 8001058:	00db      	lsls	r3, r3, #3
 800105a:	440b      	add	r3, r1
 800105c:	3340      	adds	r3, #64	; 0x40
 800105e:	2200      	movs	r2, #0
 8001060:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001062:	7bfb      	ldrb	r3, [r7, #15]
 8001064:	3301      	adds	r3, #1
 8001066:	73fb      	strb	r3, [r7, #15]
 8001068:	7bfa      	ldrb	r2, [r7, #15]
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	685b      	ldr	r3, [r3, #4]
 800106e:	429a      	cmp	r2, r3
 8001070:	d3ad      	bcc.n	8000fce <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001072:	2300      	movs	r3, #0
 8001074:	73fb      	strb	r3, [r7, #15]
 8001076:	e044      	b.n	8001102 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001078:	7bfa      	ldrb	r2, [r7, #15]
 800107a:	6879      	ldr	r1, [r7, #4]
 800107c:	4613      	mov	r3, r2
 800107e:	009b      	lsls	r3, r3, #2
 8001080:	4413      	add	r3, r2
 8001082:	00db      	lsls	r3, r3, #3
 8001084:	440b      	add	r3, r1
 8001086:	f203 1369 	addw	r3, r3, #361	; 0x169
 800108a:	2200      	movs	r2, #0
 800108c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800108e:	7bfa      	ldrb	r2, [r7, #15]
 8001090:	6879      	ldr	r1, [r7, #4]
 8001092:	4613      	mov	r3, r2
 8001094:	009b      	lsls	r3, r3, #2
 8001096:	4413      	add	r3, r2
 8001098:	00db      	lsls	r3, r3, #3
 800109a:	440b      	add	r3, r1
 800109c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80010a0:	7bfa      	ldrb	r2, [r7, #15]
 80010a2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80010a4:	7bfa      	ldrb	r2, [r7, #15]
 80010a6:	6879      	ldr	r1, [r7, #4]
 80010a8:	4613      	mov	r3, r2
 80010aa:	009b      	lsls	r3, r3, #2
 80010ac:	4413      	add	r3, r2
 80010ae:	00db      	lsls	r3, r3, #3
 80010b0:	440b      	add	r3, r1
 80010b2:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80010b6:	2200      	movs	r2, #0
 80010b8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80010ba:	7bfa      	ldrb	r2, [r7, #15]
 80010bc:	6879      	ldr	r1, [r7, #4]
 80010be:	4613      	mov	r3, r2
 80010c0:	009b      	lsls	r3, r3, #2
 80010c2:	4413      	add	r3, r2
 80010c4:	00db      	lsls	r3, r3, #3
 80010c6:	440b      	add	r3, r1
 80010c8:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80010cc:	2200      	movs	r2, #0
 80010ce:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80010d0:	7bfa      	ldrb	r2, [r7, #15]
 80010d2:	6879      	ldr	r1, [r7, #4]
 80010d4:	4613      	mov	r3, r2
 80010d6:	009b      	lsls	r3, r3, #2
 80010d8:	4413      	add	r3, r2
 80010da:	00db      	lsls	r3, r3, #3
 80010dc:	440b      	add	r3, r1
 80010de:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80010e2:	2200      	movs	r2, #0
 80010e4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80010e6:	7bfa      	ldrb	r2, [r7, #15]
 80010e8:	6879      	ldr	r1, [r7, #4]
 80010ea:	4613      	mov	r3, r2
 80010ec:	009b      	lsls	r3, r3, #2
 80010ee:	4413      	add	r3, r2
 80010f0:	00db      	lsls	r3, r3, #3
 80010f2:	440b      	add	r3, r1
 80010f4:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80010f8:	2200      	movs	r2, #0
 80010fa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80010fc:	7bfb      	ldrb	r3, [r7, #15]
 80010fe:	3301      	adds	r3, #1
 8001100:	73fb      	strb	r3, [r7, #15]
 8001102:	7bfa      	ldrb	r2, [r7, #15]
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	685b      	ldr	r3, [r3, #4]
 8001108:	429a      	cmp	r2, r3
 800110a:	d3b5      	bcc.n	8001078 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	603b      	str	r3, [r7, #0]
 8001112:	687e      	ldr	r6, [r7, #4]
 8001114:	466d      	mov	r5, sp
 8001116:	f106 0410 	add.w	r4, r6, #16
 800111a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800111c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800111e:	6823      	ldr	r3, [r4, #0]
 8001120:	602b      	str	r3, [r5, #0]
 8001122:	1d33      	adds	r3, r6, #4
 8001124:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001126:	6838      	ldr	r0, [r7, #0]
 8001128:	f002 fa52 	bl	80035d0 <USB_DevInit>
 800112c:	4603      	mov	r3, r0
 800112e:	2b00      	cmp	r3, #0
 8001130:	d005      	beq.n	800113e <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	2202      	movs	r2, #2
 8001136:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 800113a:	2301      	movs	r3, #1
 800113c:	e00d      	b.n	800115a <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	2200      	movs	r2, #0
 8001142:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	2201      	movs	r2, #1
 800114a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	4618      	mov	r0, r3
 8001154:	f004 ff04 	bl	8005f60 <USB_DevDisconnect>

  return HAL_OK;
 8001158:	2300      	movs	r3, #0
}
 800115a:	4618      	mov	r0, r3
 800115c:	3714      	adds	r7, #20
 800115e:	46bd      	mov	sp, r7
 8001160:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001162 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001162:	b580      	push	{r7, lr}
 8001164:	b082      	sub	sp, #8
 8001166:	af00      	add	r7, sp, #0
 8001168:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001170:	2b01      	cmp	r3, #1
 8001172:	d101      	bne.n	8001178 <HAL_PCD_Start+0x16>
 8001174:	2302      	movs	r3, #2
 8001176:	e016      	b.n	80011a6 <HAL_PCD_Start+0x44>
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	2201      	movs	r2, #1
 800117c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	4618      	mov	r0, r3
 8001186:	f002 f9e7 	bl	8003558 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 800118a:	2101      	movs	r1, #1
 800118c:	6878      	ldr	r0, [r7, #4]
 800118e:	f006 ffb8 	bl	8008102 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	4618      	mov	r0, r3
 8001198:	f004 fed8 	bl	8005f4c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	2200      	movs	r2, #0
 80011a0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80011a4:	2300      	movs	r3, #0
}
 80011a6:	4618      	mov	r0, r3
 80011a8:	3708      	adds	r7, #8
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}

080011ae <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80011ae:	b580      	push	{r7, lr}
 80011b0:	b088      	sub	sp, #32
 80011b2:	af00      	add	r7, sp, #0
 80011b4:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	4618      	mov	r0, r3
 80011bc:	f004 feda 	bl	8005f74 <USB_ReadInterrupts>
 80011c0:	4603      	mov	r3, r0
 80011c2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80011c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80011ca:	d102      	bne.n	80011d2 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80011cc:	6878      	ldr	r0, [r7, #4]
 80011ce:	f000 fb5f 	bl	8001890 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	4618      	mov	r0, r3
 80011d8:	f004 fecc 	bl	8005f74 <USB_ReadInterrupts>
 80011dc:	4603      	mov	r3, r0
 80011de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80011e6:	d112      	bne.n	800120e <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80011f0:	b29a      	uxth	r2, r3
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80011fa:	b292      	uxth	r2, r2
 80011fc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001200:	6878      	ldr	r0, [r7, #4]
 8001202:	f006 fd86 	bl	8007d12 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001206:	2100      	movs	r1, #0
 8001208:	6878      	ldr	r0, [r7, #4]
 800120a:	f000 f923 	bl	8001454 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	4618      	mov	r0, r3
 8001214:	f004 feae 	bl	8005f74 <USB_ReadInterrupts>
 8001218:	4603      	mov	r3, r0
 800121a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800121e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001222:	d10b      	bne.n	800123c <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800122c:	b29a      	uxth	r2, r3
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001236:	b292      	uxth	r2, r2
 8001238:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	4618      	mov	r0, r3
 8001242:	f004 fe97 	bl	8005f74 <USB_ReadInterrupts>
 8001246:	4603      	mov	r3, r0
 8001248:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800124c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001250:	d10b      	bne.n	800126a <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800125a:	b29a      	uxth	r2, r3
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001264:	b292      	uxth	r2, r2
 8001266:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	4618      	mov	r0, r3
 8001270:	f004 fe80 	bl	8005f74 <USB_ReadInterrupts>
 8001274:	4603      	mov	r3, r0
 8001276:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800127a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800127e:	d126      	bne.n	80012ce <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001288:	b29a      	uxth	r2, r3
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	f022 0204 	bic.w	r2, r2, #4
 8001292:	b292      	uxth	r2, r2
 8001294:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80012a0:	b29a      	uxth	r2, r3
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f022 0208 	bic.w	r2, r2, #8
 80012aa:	b292      	uxth	r2, r2
 80012ac:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80012b0:	6878      	ldr	r0, [r7, #4]
 80012b2:	f006 fd67 	bl	8007d84 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80012be:	b29a      	uxth	r2, r3
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80012c8:	b292      	uxth	r2, r2
 80012ca:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	4618      	mov	r0, r3
 80012d4:	f004 fe4e 	bl	8005f74 <USB_ReadInterrupts>
 80012d8:	4603      	mov	r3, r0
 80012da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80012de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80012e2:	f040 8082 	bne.w	80013ea <HAL_PCD_IRQHandler+0x23c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 80012e6:	2300      	movs	r3, #0
 80012e8:	77fb      	strb	r3, [r7, #31]
 80012ea:	e010      	b.n	800130e <HAL_PCD_IRQHandler+0x160>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	461a      	mov	r2, r3
 80012f2:	7ffb      	ldrb	r3, [r7, #31]
 80012f4:	009b      	lsls	r3, r3, #2
 80012f6:	441a      	add	r2, r3
 80012f8:	7ffb      	ldrb	r3, [r7, #31]
 80012fa:	8812      	ldrh	r2, [r2, #0]
 80012fc:	b292      	uxth	r2, r2
 80012fe:	005b      	lsls	r3, r3, #1
 8001300:	3320      	adds	r3, #32
 8001302:	443b      	add	r3, r7
 8001304:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8001308:	7ffb      	ldrb	r3, [r7, #31]
 800130a:	3301      	adds	r3, #1
 800130c:	77fb      	strb	r3, [r7, #31]
 800130e:	7ffb      	ldrb	r3, [r7, #31]
 8001310:	2b07      	cmp	r3, #7
 8001312:	d9eb      	bls.n	80012ec <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800131c:	b29a      	uxth	r2, r3
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f042 0201 	orr.w	r2, r2, #1
 8001326:	b292      	uxth	r2, r2
 8001328:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001334:	b29a      	uxth	r2, r3
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f022 0201 	bic.w	r2, r2, #1
 800133e:	b292      	uxth	r2, r2
 8001340:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8001344:	bf00      	nop
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800134e:	b29b      	uxth	r3, r3
 8001350:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001354:	2b00      	cmp	r3, #0
 8001356:	d0f6      	beq.n	8001346 <HAL_PCD_IRQHandler+0x198>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001360:	b29a      	uxth	r2, r3
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800136a:	b292      	uxth	r2, r2
 800136c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8001370:	2300      	movs	r3, #0
 8001372:	77fb      	strb	r3, [r7, #31]
 8001374:	e00f      	b.n	8001396 <HAL_PCD_IRQHandler+0x1e8>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8001376:	7ffb      	ldrb	r3, [r7, #31]
 8001378:	687a      	ldr	r2, [r7, #4]
 800137a:	6812      	ldr	r2, [r2, #0]
 800137c:	4611      	mov	r1, r2
 800137e:	7ffa      	ldrb	r2, [r7, #31]
 8001380:	0092      	lsls	r2, r2, #2
 8001382:	440a      	add	r2, r1
 8001384:	005b      	lsls	r3, r3, #1
 8001386:	3320      	adds	r3, #32
 8001388:	443b      	add	r3, r7
 800138a:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 800138e:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8001390:	7ffb      	ldrb	r3, [r7, #31]
 8001392:	3301      	adds	r3, #1
 8001394:	77fb      	strb	r3, [r7, #31]
 8001396:	7ffb      	ldrb	r3, [r7, #31]
 8001398:	2b07      	cmp	r3, #7
 800139a:	d9ec      	bls.n	8001376 <HAL_PCD_IRQHandler+0x1c8>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80013a4:	b29a      	uxth	r2, r3
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f042 0208 	orr.w	r2, r2, #8
 80013ae:	b292      	uxth	r2, r2
 80013b0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80013bc:	b29a      	uxth	r2, r3
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80013c6:	b292      	uxth	r2, r2
 80013c8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80013d4:	b29a      	uxth	r2, r3
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f042 0204 	orr.w	r2, r2, #4
 80013de:	b292      	uxth	r2, r2
 80013e0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80013e4:	6878      	ldr	r0, [r7, #4]
 80013e6:	f006 fcb3 	bl	8007d50 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	4618      	mov	r0, r3
 80013f0:	f004 fdc0 	bl	8005f74 <USB_ReadInterrupts>
 80013f4:	4603      	mov	r3, r0
 80013f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80013fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80013fe:	d10e      	bne.n	800141e <HAL_PCD_IRQHandler+0x270>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001408:	b29a      	uxth	r2, r3
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001412:	b292      	uxth	r2, r2
 8001414:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001418:	6878      	ldr	r0, [r7, #4]
 800141a:	f006 fc6c 	bl	8007cf6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	4618      	mov	r0, r3
 8001424:	f004 fda6 	bl	8005f74 <USB_ReadInterrupts>
 8001428:	4603      	mov	r3, r0
 800142a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800142e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001432:	d10b      	bne.n	800144c <HAL_PCD_IRQHandler+0x29e>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800143c:	b29a      	uxth	r2, r3
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001446:	b292      	uxth	r2, r2
 8001448:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 800144c:	bf00      	nop
 800144e:	3720      	adds	r7, #32
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}

08001454 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b082      	sub	sp, #8
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
 800145c:	460b      	mov	r3, r1
 800145e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001466:	2b01      	cmp	r3, #1
 8001468:	d101      	bne.n	800146e <HAL_PCD_SetAddress+0x1a>
 800146a:	2302      	movs	r3, #2
 800146c:	e013      	b.n	8001496 <HAL_PCD_SetAddress+0x42>
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	2201      	movs	r2, #1
 8001472:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	78fa      	ldrb	r2, [r7, #3]
 800147a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	78fa      	ldrb	r2, [r7, #3]
 8001484:	4611      	mov	r1, r2
 8001486:	4618      	mov	r0, r3
 8001488:	f004 fd4d 	bl	8005f26 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	2200      	movs	r2, #0
 8001490:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001494:	2300      	movs	r3, #0
}
 8001496:	4618      	mov	r0, r3
 8001498:	3708      	adds	r7, #8
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}

0800149e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800149e:	b580      	push	{r7, lr}
 80014a0:	b084      	sub	sp, #16
 80014a2:	af00      	add	r7, sp, #0
 80014a4:	6078      	str	r0, [r7, #4]
 80014a6:	4608      	mov	r0, r1
 80014a8:	4611      	mov	r1, r2
 80014aa:	461a      	mov	r2, r3
 80014ac:	4603      	mov	r3, r0
 80014ae:	70fb      	strb	r3, [r7, #3]
 80014b0:	460b      	mov	r3, r1
 80014b2:	803b      	strh	r3, [r7, #0]
 80014b4:	4613      	mov	r3, r2
 80014b6:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80014b8:	2300      	movs	r3, #0
 80014ba:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80014bc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	da0e      	bge.n	80014e2 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80014c4:	78fb      	ldrb	r3, [r7, #3]
 80014c6:	f003 0307 	and.w	r3, r3, #7
 80014ca:	1c5a      	adds	r2, r3, #1
 80014cc:	4613      	mov	r3, r2
 80014ce:	009b      	lsls	r3, r3, #2
 80014d0:	4413      	add	r3, r2
 80014d2:	00db      	lsls	r3, r3, #3
 80014d4:	687a      	ldr	r2, [r7, #4]
 80014d6:	4413      	add	r3, r2
 80014d8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	2201      	movs	r2, #1
 80014de:	705a      	strb	r2, [r3, #1]
 80014e0:	e00e      	b.n	8001500 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80014e2:	78fb      	ldrb	r3, [r7, #3]
 80014e4:	f003 0207 	and.w	r2, r3, #7
 80014e8:	4613      	mov	r3, r2
 80014ea:	009b      	lsls	r3, r3, #2
 80014ec:	4413      	add	r3, r2
 80014ee:	00db      	lsls	r3, r3, #3
 80014f0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80014f4:	687a      	ldr	r2, [r7, #4]
 80014f6:	4413      	add	r3, r2
 80014f8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	2200      	movs	r2, #0
 80014fe:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001500:	78fb      	ldrb	r3, [r7, #3]
 8001502:	f003 0307 	and.w	r3, r3, #7
 8001506:	b2da      	uxtb	r2, r3
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800150c:	883a      	ldrh	r2, [r7, #0]
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	78ba      	ldrb	r2, [r7, #2]
 8001516:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	785b      	ldrb	r3, [r3, #1]
 800151c:	2b00      	cmp	r3, #0
 800151e:	d004      	beq.n	800152a <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	781b      	ldrb	r3, [r3, #0]
 8001524:	b29a      	uxth	r2, r3
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800152a:	78bb      	ldrb	r3, [r7, #2]
 800152c:	2b02      	cmp	r3, #2
 800152e:	d102      	bne.n	8001536 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	2200      	movs	r2, #0
 8001534:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800153c:	2b01      	cmp	r3, #1
 800153e:	d101      	bne.n	8001544 <HAL_PCD_EP_Open+0xa6>
 8001540:	2302      	movs	r3, #2
 8001542:	e00e      	b.n	8001562 <HAL_PCD_EP_Open+0xc4>
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	2201      	movs	r2, #1
 8001548:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	68f9      	ldr	r1, [r7, #12]
 8001552:	4618      	mov	r0, r3
 8001554:	f002 f85c 	bl	8003610 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	2200      	movs	r2, #0
 800155c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8001560:	7afb      	ldrb	r3, [r7, #11]
}
 8001562:	4618      	mov	r0, r3
 8001564:	3710      	adds	r7, #16
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}

0800156a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800156a:	b580      	push	{r7, lr}
 800156c:	b084      	sub	sp, #16
 800156e:	af00      	add	r7, sp, #0
 8001570:	6078      	str	r0, [r7, #4]
 8001572:	460b      	mov	r3, r1
 8001574:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001576:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800157a:	2b00      	cmp	r3, #0
 800157c:	da0e      	bge.n	800159c <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800157e:	78fb      	ldrb	r3, [r7, #3]
 8001580:	f003 0307 	and.w	r3, r3, #7
 8001584:	1c5a      	adds	r2, r3, #1
 8001586:	4613      	mov	r3, r2
 8001588:	009b      	lsls	r3, r3, #2
 800158a:	4413      	add	r3, r2
 800158c:	00db      	lsls	r3, r3, #3
 800158e:	687a      	ldr	r2, [r7, #4]
 8001590:	4413      	add	r3, r2
 8001592:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	2201      	movs	r2, #1
 8001598:	705a      	strb	r2, [r3, #1]
 800159a:	e00e      	b.n	80015ba <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800159c:	78fb      	ldrb	r3, [r7, #3]
 800159e:	f003 0207 	and.w	r2, r3, #7
 80015a2:	4613      	mov	r3, r2
 80015a4:	009b      	lsls	r3, r3, #2
 80015a6:	4413      	add	r3, r2
 80015a8:	00db      	lsls	r3, r3, #3
 80015aa:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80015ae:	687a      	ldr	r2, [r7, #4]
 80015b0:	4413      	add	r3, r2
 80015b2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	2200      	movs	r2, #0
 80015b8:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80015ba:	78fb      	ldrb	r3, [r7, #3]
 80015bc:	f003 0307 	and.w	r3, r3, #7
 80015c0:	b2da      	uxtb	r2, r3
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80015cc:	2b01      	cmp	r3, #1
 80015ce:	d101      	bne.n	80015d4 <HAL_PCD_EP_Close+0x6a>
 80015d0:	2302      	movs	r3, #2
 80015d2:	e00e      	b.n	80015f2 <HAL_PCD_EP_Close+0x88>
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	2201      	movs	r2, #1
 80015d8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	68f9      	ldr	r1, [r7, #12]
 80015e2:	4618      	mov	r0, r3
 80015e4:	f002 fb7e 	bl	8003ce4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	2200      	movs	r2, #0
 80015ec:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 80015f0:	2300      	movs	r3, #0
}
 80015f2:	4618      	mov	r0, r3
 80015f4:	3710      	adds	r7, #16
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}

080015fa <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80015fa:	b580      	push	{r7, lr}
 80015fc:	b086      	sub	sp, #24
 80015fe:	af00      	add	r7, sp, #0
 8001600:	60f8      	str	r0, [r7, #12]
 8001602:	607a      	str	r2, [r7, #4]
 8001604:	603b      	str	r3, [r7, #0]
 8001606:	460b      	mov	r3, r1
 8001608:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800160a:	7afb      	ldrb	r3, [r7, #11]
 800160c:	f003 0207 	and.w	r2, r3, #7
 8001610:	4613      	mov	r3, r2
 8001612:	009b      	lsls	r3, r3, #2
 8001614:	4413      	add	r3, r2
 8001616:	00db      	lsls	r3, r3, #3
 8001618:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800161c:	68fa      	ldr	r2, [r7, #12]
 800161e:	4413      	add	r3, r2
 8001620:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001622:	697b      	ldr	r3, [r7, #20]
 8001624:	687a      	ldr	r2, [r7, #4]
 8001626:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001628:	697b      	ldr	r3, [r7, #20]
 800162a:	683a      	ldr	r2, [r7, #0]
 800162c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800162e:	697b      	ldr	r3, [r7, #20]
 8001630:	2200      	movs	r2, #0
 8001632:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001634:	697b      	ldr	r3, [r7, #20]
 8001636:	2200      	movs	r2, #0
 8001638:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800163a:	7afb      	ldrb	r3, [r7, #11]
 800163c:	f003 0307 	and.w	r3, r3, #7
 8001640:	b2da      	uxtb	r2, r3
 8001642:	697b      	ldr	r3, [r7, #20]
 8001644:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001646:	7afb      	ldrb	r3, [r7, #11]
 8001648:	f003 0307 	and.w	r3, r3, #7
 800164c:	2b00      	cmp	r3, #0
 800164e:	d106      	bne.n	800165e <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	6979      	ldr	r1, [r7, #20]
 8001656:	4618      	mov	r0, r3
 8001658:	f002 fd30 	bl	80040bc <USB_EPStartXfer>
 800165c:	e005      	b.n	800166a <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	6979      	ldr	r1, [r7, #20]
 8001664:	4618      	mov	r0, r3
 8001666:	f002 fd29 	bl	80040bc <USB_EPStartXfer>
  }

  return HAL_OK;
 800166a:	2300      	movs	r3, #0
}
 800166c:	4618      	mov	r0, r3
 800166e:	3718      	adds	r7, #24
 8001670:	46bd      	mov	sp, r7
 8001672:	bd80      	pop	{r7, pc}

08001674 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001674:	b480      	push	{r7}
 8001676:	b083      	sub	sp, #12
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
 800167c:	460b      	mov	r3, r1
 800167e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001680:	78fb      	ldrb	r3, [r7, #3]
 8001682:	f003 0207 	and.w	r2, r3, #7
 8001686:	6879      	ldr	r1, [r7, #4]
 8001688:	4613      	mov	r3, r2
 800168a:	009b      	lsls	r3, r3, #2
 800168c:	4413      	add	r3, r2
 800168e:	00db      	lsls	r3, r3, #3
 8001690:	440b      	add	r3, r1
 8001692:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8001696:	681b      	ldr	r3, [r3, #0]
}
 8001698:	4618      	mov	r0, r3
 800169a:	370c      	adds	r7, #12
 800169c:	46bd      	mov	sp, r7
 800169e:	bc80      	pop	{r7}
 80016a0:	4770      	bx	lr

080016a2 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80016a2:	b580      	push	{r7, lr}
 80016a4:	b086      	sub	sp, #24
 80016a6:	af00      	add	r7, sp, #0
 80016a8:	60f8      	str	r0, [r7, #12]
 80016aa:	607a      	str	r2, [r7, #4]
 80016ac:	603b      	str	r3, [r7, #0]
 80016ae:	460b      	mov	r3, r1
 80016b0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80016b2:	7afb      	ldrb	r3, [r7, #11]
 80016b4:	f003 0307 	and.w	r3, r3, #7
 80016b8:	1c5a      	adds	r2, r3, #1
 80016ba:	4613      	mov	r3, r2
 80016bc:	009b      	lsls	r3, r3, #2
 80016be:	4413      	add	r3, r2
 80016c0:	00db      	lsls	r3, r3, #3
 80016c2:	68fa      	ldr	r2, [r7, #12]
 80016c4:	4413      	add	r3, r2
 80016c6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80016c8:	697b      	ldr	r3, [r7, #20]
 80016ca:	687a      	ldr	r2, [r7, #4]
 80016cc:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80016ce:	697b      	ldr	r3, [r7, #20]
 80016d0:	683a      	ldr	r2, [r7, #0]
 80016d2:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 80016d4:	697b      	ldr	r3, [r7, #20]
 80016d6:	2201      	movs	r2, #1
 80016d8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 80016dc:	697b      	ldr	r3, [r7, #20]
 80016de:	683a      	ldr	r2, [r7, #0]
 80016e0:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 80016e2:	697b      	ldr	r3, [r7, #20]
 80016e4:	2200      	movs	r2, #0
 80016e6:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80016e8:	697b      	ldr	r3, [r7, #20]
 80016ea:	2201      	movs	r2, #1
 80016ec:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80016ee:	7afb      	ldrb	r3, [r7, #11]
 80016f0:	f003 0307 	and.w	r3, r3, #7
 80016f4:	b2da      	uxtb	r2, r3
 80016f6:	697b      	ldr	r3, [r7, #20]
 80016f8:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80016fa:	7afb      	ldrb	r3, [r7, #11]
 80016fc:	f003 0307 	and.w	r3, r3, #7
 8001700:	2b00      	cmp	r3, #0
 8001702:	d106      	bne.n	8001712 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	6979      	ldr	r1, [r7, #20]
 800170a:	4618      	mov	r0, r3
 800170c:	f002 fcd6 	bl	80040bc <USB_EPStartXfer>
 8001710:	e005      	b.n	800171e <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	6979      	ldr	r1, [r7, #20]
 8001718:	4618      	mov	r0, r3
 800171a:	f002 fccf 	bl	80040bc <USB_EPStartXfer>
  }

  return HAL_OK;
 800171e:	2300      	movs	r3, #0
}
 8001720:	4618      	mov	r0, r3
 8001722:	3718      	adds	r7, #24
 8001724:	46bd      	mov	sp, r7
 8001726:	bd80      	pop	{r7, pc}

08001728 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b084      	sub	sp, #16
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
 8001730:	460b      	mov	r3, r1
 8001732:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001734:	78fb      	ldrb	r3, [r7, #3]
 8001736:	f003 0207 	and.w	r2, r3, #7
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	685b      	ldr	r3, [r3, #4]
 800173e:	429a      	cmp	r2, r3
 8001740:	d901      	bls.n	8001746 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001742:	2301      	movs	r3, #1
 8001744:	e04c      	b.n	80017e0 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001746:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800174a:	2b00      	cmp	r3, #0
 800174c:	da0e      	bge.n	800176c <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800174e:	78fb      	ldrb	r3, [r7, #3]
 8001750:	f003 0307 	and.w	r3, r3, #7
 8001754:	1c5a      	adds	r2, r3, #1
 8001756:	4613      	mov	r3, r2
 8001758:	009b      	lsls	r3, r3, #2
 800175a:	4413      	add	r3, r2
 800175c:	00db      	lsls	r3, r3, #3
 800175e:	687a      	ldr	r2, [r7, #4]
 8001760:	4413      	add	r3, r2
 8001762:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	2201      	movs	r2, #1
 8001768:	705a      	strb	r2, [r3, #1]
 800176a:	e00c      	b.n	8001786 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800176c:	78fa      	ldrb	r2, [r7, #3]
 800176e:	4613      	mov	r3, r2
 8001770:	009b      	lsls	r3, r3, #2
 8001772:	4413      	add	r3, r2
 8001774:	00db      	lsls	r3, r3, #3
 8001776:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800177a:	687a      	ldr	r2, [r7, #4]
 800177c:	4413      	add	r3, r2
 800177e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	2200      	movs	r2, #0
 8001784:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	2201      	movs	r2, #1
 800178a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800178c:	78fb      	ldrb	r3, [r7, #3]
 800178e:	f003 0307 	and.w	r3, r3, #7
 8001792:	b2da      	uxtb	r2, r3
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800179e:	2b01      	cmp	r3, #1
 80017a0:	d101      	bne.n	80017a6 <HAL_PCD_EP_SetStall+0x7e>
 80017a2:	2302      	movs	r3, #2
 80017a4:	e01c      	b.n	80017e0 <HAL_PCD_EP_SetStall+0xb8>
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	2201      	movs	r2, #1
 80017aa:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	68f9      	ldr	r1, [r7, #12]
 80017b4:	4618      	mov	r0, r3
 80017b6:	f004 fab9 	bl	8005d2c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80017ba:	78fb      	ldrb	r3, [r7, #3]
 80017bc:	f003 0307 	and.w	r3, r3, #7
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d108      	bne.n	80017d6 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681a      	ldr	r2, [r3, #0]
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80017ce:	4619      	mov	r1, r3
 80017d0:	4610      	mov	r0, r2
 80017d2:	f004 fbde 	bl	8005f92 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	2200      	movs	r2, #0
 80017da:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80017de:	2300      	movs	r3, #0
}
 80017e0:	4618      	mov	r0, r3
 80017e2:	3710      	adds	r7, #16
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}

080017e8 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b084      	sub	sp, #16
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
 80017f0:	460b      	mov	r3, r1
 80017f2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80017f4:	78fb      	ldrb	r3, [r7, #3]
 80017f6:	f003 020f 	and.w	r2, r3, #15
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	685b      	ldr	r3, [r3, #4]
 80017fe:	429a      	cmp	r2, r3
 8001800:	d901      	bls.n	8001806 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001802:	2301      	movs	r3, #1
 8001804:	e040      	b.n	8001888 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001806:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800180a:	2b00      	cmp	r3, #0
 800180c:	da0e      	bge.n	800182c <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800180e:	78fb      	ldrb	r3, [r7, #3]
 8001810:	f003 0307 	and.w	r3, r3, #7
 8001814:	1c5a      	adds	r2, r3, #1
 8001816:	4613      	mov	r3, r2
 8001818:	009b      	lsls	r3, r3, #2
 800181a:	4413      	add	r3, r2
 800181c:	00db      	lsls	r3, r3, #3
 800181e:	687a      	ldr	r2, [r7, #4]
 8001820:	4413      	add	r3, r2
 8001822:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	2201      	movs	r2, #1
 8001828:	705a      	strb	r2, [r3, #1]
 800182a:	e00e      	b.n	800184a <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800182c:	78fb      	ldrb	r3, [r7, #3]
 800182e:	f003 0207 	and.w	r2, r3, #7
 8001832:	4613      	mov	r3, r2
 8001834:	009b      	lsls	r3, r3, #2
 8001836:	4413      	add	r3, r2
 8001838:	00db      	lsls	r3, r3, #3
 800183a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800183e:	687a      	ldr	r2, [r7, #4]
 8001840:	4413      	add	r3, r2
 8001842:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	2200      	movs	r2, #0
 8001848:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	2200      	movs	r2, #0
 800184e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001850:	78fb      	ldrb	r3, [r7, #3]
 8001852:	f003 0307 	and.w	r3, r3, #7
 8001856:	b2da      	uxtb	r2, r3
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001862:	2b01      	cmp	r3, #1
 8001864:	d101      	bne.n	800186a <HAL_PCD_EP_ClrStall+0x82>
 8001866:	2302      	movs	r3, #2
 8001868:	e00e      	b.n	8001888 <HAL_PCD_EP_ClrStall+0xa0>
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	2201      	movs	r2, #1
 800186e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	68f9      	ldr	r1, [r7, #12]
 8001878:	4618      	mov	r0, r3
 800187a:	f004 faa7 	bl	8005dcc <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	2200      	movs	r2, #0
 8001882:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001886:	2300      	movs	r3, #0
}
 8001888:	4618      	mov	r0, r3
 800188a:	3710      	adds	r7, #16
 800188c:	46bd      	mov	sp, r7
 800188e:	bd80      	pop	{r7, pc}

08001890 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b08e      	sub	sp, #56	; 0x38
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001898:	e2ec      	b.n	8001e74 <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80018a2:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80018a4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80018a6:	b2db      	uxtb	r3, r3
 80018a8:	f003 030f 	and.w	r3, r3, #15
 80018ac:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 80018b0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	f040 8161 	bne.w	8001b7c <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80018ba:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80018bc:	f003 0310 	and.w	r3, r3, #16
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d152      	bne.n	800196a <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	881b      	ldrh	r3, [r3, #0]
 80018ca:	b29b      	uxth	r3, r3
 80018cc:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80018d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80018d4:	81fb      	strh	r3, [r7, #14]
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681a      	ldr	r2, [r3, #0]
 80018da:	89fb      	ldrh	r3, [r7, #14]
 80018dc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80018e0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80018e4:	b29b      	uxth	r3, r3
 80018e6:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	3328      	adds	r3, #40	; 0x28
 80018ec:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80018f6:	b29b      	uxth	r3, r3
 80018f8:	461a      	mov	r2, r3
 80018fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018fc:	781b      	ldrb	r3, [r3, #0]
 80018fe:	00db      	lsls	r3, r3, #3
 8001900:	4413      	add	r3, r2
 8001902:	3302      	adds	r3, #2
 8001904:	005b      	lsls	r3, r3, #1
 8001906:	687a      	ldr	r2, [r7, #4]
 8001908:	6812      	ldr	r2, [r2, #0]
 800190a:	4413      	add	r3, r2
 800190c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001910:	881b      	ldrh	r3, [r3, #0]
 8001912:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001918:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800191a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800191c:	695a      	ldr	r2, [r3, #20]
 800191e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001920:	69db      	ldr	r3, [r3, #28]
 8001922:	441a      	add	r2, r3
 8001924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001926:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001928:	2100      	movs	r1, #0
 800192a:	6878      	ldr	r0, [r7, #4]
 800192c:	f006 f9c9 	bl	8007cc2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001936:	b2db      	uxtb	r3, r3
 8001938:	2b00      	cmp	r3, #0
 800193a:	f000 829b 	beq.w	8001e74 <PCD_EP_ISR_Handler+0x5e4>
 800193e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001940:	699b      	ldr	r3, [r3, #24]
 8001942:	2b00      	cmp	r3, #0
 8001944:	f040 8296 	bne.w	8001e74 <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800194e:	b2db      	uxtb	r3, r3
 8001950:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001954:	b2da      	uxtb	r2, r3
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	b292      	uxth	r2, r2
 800195c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	2200      	movs	r2, #0
 8001964:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001968:	e284      	b.n	8001e74 <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001970:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	881b      	ldrh	r3, [r3, #0]
 8001978:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800197a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800197c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001980:	2b00      	cmp	r3, #0
 8001982:	d034      	beq.n	80019ee <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800198c:	b29b      	uxth	r3, r3
 800198e:	461a      	mov	r2, r3
 8001990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001992:	781b      	ldrb	r3, [r3, #0]
 8001994:	00db      	lsls	r3, r3, #3
 8001996:	4413      	add	r3, r2
 8001998:	3306      	adds	r3, #6
 800199a:	005b      	lsls	r3, r3, #1
 800199c:	687a      	ldr	r2, [r7, #4]
 800199e:	6812      	ldr	r2, [r2, #0]
 80019a0:	4413      	add	r3, r2
 80019a2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80019a6:	881b      	ldrh	r3, [r3, #0]
 80019a8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80019ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ae:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	6818      	ldr	r0, [r3, #0]
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 80019ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019bc:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80019be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019c0:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80019c2:	b29b      	uxth	r3, r3
 80019c4:	f004 fb35 	bl	8006032 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	881b      	ldrh	r3, [r3, #0]
 80019ce:	b29a      	uxth	r2, r3
 80019d0:	f640 738f 	movw	r3, #3983	; 0xf8f
 80019d4:	4013      	ands	r3, r2
 80019d6:	823b      	strh	r3, [r7, #16]
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	8a3a      	ldrh	r2, [r7, #16]
 80019de:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80019e2:	b292      	uxth	r2, r2
 80019e4:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80019e6:	6878      	ldr	r0, [r7, #4]
 80019e8:	f006 f93e 	bl	8007c68 <HAL_PCD_SetupStageCallback>
 80019ec:	e242      	b.n	8001e74 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80019ee:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	f280 823e 	bge.w	8001e74 <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	881b      	ldrh	r3, [r3, #0]
 80019fe:	b29a      	uxth	r2, r3
 8001a00:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001a04:	4013      	ands	r3, r2
 8001a06:	83bb      	strh	r3, [r7, #28]
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	8bba      	ldrh	r2, [r7, #28]
 8001a0e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001a12:	b292      	uxth	r2, r2
 8001a14:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001a1e:	b29b      	uxth	r3, r3
 8001a20:	461a      	mov	r2, r3
 8001a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a24:	781b      	ldrb	r3, [r3, #0]
 8001a26:	00db      	lsls	r3, r3, #3
 8001a28:	4413      	add	r3, r2
 8001a2a:	3306      	adds	r3, #6
 8001a2c:	005b      	lsls	r3, r3, #1
 8001a2e:	687a      	ldr	r2, [r7, #4]
 8001a30:	6812      	ldr	r2, [r2, #0]
 8001a32:	4413      	add	r3, r2
 8001a34:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001a38:	881b      	ldrh	r3, [r3, #0]
 8001a3a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a40:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a44:	69db      	ldr	r3, [r3, #28]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d019      	beq.n	8001a7e <PCD_EP_ISR_Handler+0x1ee>
 8001a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a4c:	695b      	ldr	r3, [r3, #20]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d015      	beq.n	8001a7e <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	6818      	ldr	r0, [r3, #0]
 8001a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a58:	6959      	ldr	r1, [r3, #20]
 8001a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a5c:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a60:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001a62:	b29b      	uxth	r3, r3
 8001a64:	f004 fae5 	bl	8006032 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a6a:	695a      	ldr	r2, [r3, #20]
 8001a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a6e:	69db      	ldr	r3, [r3, #28]
 8001a70:	441a      	add	r2, r3
 8001a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a74:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001a76:	2100      	movs	r1, #0
 8001a78:	6878      	ldr	r0, [r7, #4]
 8001a7a:	f006 f907 	bl	8007c8c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	881b      	ldrh	r3, [r3, #0]
 8001a84:	b29b      	uxth	r3, r3
 8001a86:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	f040 81f2 	bne.w	8001e74 <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	61bb      	str	r3, [r7, #24]
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001a9e:	b29b      	uxth	r3, r3
 8001aa0:	461a      	mov	r2, r3
 8001aa2:	69bb      	ldr	r3, [r7, #24]
 8001aa4:	4413      	add	r3, r2
 8001aa6:	61bb      	str	r3, [r7, #24]
 8001aa8:	69bb      	ldr	r3, [r7, #24]
 8001aaa:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001aae:	617b      	str	r3, [r7, #20]
 8001ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ab2:	691b      	ldr	r3, [r3, #16]
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d112      	bne.n	8001ade <PCD_EP_ISR_Handler+0x24e>
 8001ab8:	697b      	ldr	r3, [r7, #20]
 8001aba:	881b      	ldrh	r3, [r3, #0]
 8001abc:	b29b      	uxth	r3, r3
 8001abe:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001ac2:	b29a      	uxth	r2, r3
 8001ac4:	697b      	ldr	r3, [r7, #20]
 8001ac6:	801a      	strh	r2, [r3, #0]
 8001ac8:	697b      	ldr	r3, [r7, #20]
 8001aca:	881b      	ldrh	r3, [r3, #0]
 8001acc:	b29b      	uxth	r3, r3
 8001ace:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001ad2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001ad6:	b29a      	uxth	r2, r3
 8001ad8:	697b      	ldr	r3, [r7, #20]
 8001ada:	801a      	strh	r2, [r3, #0]
 8001adc:	e02f      	b.n	8001b3e <PCD_EP_ISR_Handler+0x2ae>
 8001ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ae0:	691b      	ldr	r3, [r3, #16]
 8001ae2:	2b3e      	cmp	r3, #62	; 0x3e
 8001ae4:	d813      	bhi.n	8001b0e <PCD_EP_ISR_Handler+0x27e>
 8001ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ae8:	691b      	ldr	r3, [r3, #16]
 8001aea:	085b      	lsrs	r3, r3, #1
 8001aec:	633b      	str	r3, [r7, #48]	; 0x30
 8001aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001af0:	691b      	ldr	r3, [r3, #16]
 8001af2:	f003 0301 	and.w	r3, r3, #1
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d002      	beq.n	8001b00 <PCD_EP_ISR_Handler+0x270>
 8001afa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001afc:	3301      	adds	r3, #1
 8001afe:	633b      	str	r3, [r7, #48]	; 0x30
 8001b00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b02:	b29b      	uxth	r3, r3
 8001b04:	029b      	lsls	r3, r3, #10
 8001b06:	b29a      	uxth	r2, r3
 8001b08:	697b      	ldr	r3, [r7, #20]
 8001b0a:	801a      	strh	r2, [r3, #0]
 8001b0c:	e017      	b.n	8001b3e <PCD_EP_ISR_Handler+0x2ae>
 8001b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b10:	691b      	ldr	r3, [r3, #16]
 8001b12:	095b      	lsrs	r3, r3, #5
 8001b14:	633b      	str	r3, [r7, #48]	; 0x30
 8001b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b18:	691b      	ldr	r3, [r3, #16]
 8001b1a:	f003 031f 	and.w	r3, r3, #31
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d102      	bne.n	8001b28 <PCD_EP_ISR_Handler+0x298>
 8001b22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b24:	3b01      	subs	r3, #1
 8001b26:	633b      	str	r3, [r7, #48]	; 0x30
 8001b28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b2a:	b29b      	uxth	r3, r3
 8001b2c:	029b      	lsls	r3, r3, #10
 8001b2e:	b29b      	uxth	r3, r3
 8001b30:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001b34:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001b38:	b29a      	uxth	r2, r3
 8001b3a:	697b      	ldr	r3, [r7, #20]
 8001b3c:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	881b      	ldrh	r3, [r3, #0]
 8001b44:	b29b      	uxth	r3, r3
 8001b46:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001b4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001b4e:	827b      	strh	r3, [r7, #18]
 8001b50:	8a7b      	ldrh	r3, [r7, #18]
 8001b52:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8001b56:	827b      	strh	r3, [r7, #18]
 8001b58:	8a7b      	ldrh	r3, [r7, #18]
 8001b5a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001b5e:	827b      	strh	r3, [r7, #18]
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681a      	ldr	r2, [r3, #0]
 8001b64:	8a7b      	ldrh	r3, [r7, #18]
 8001b66:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001b6a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001b6e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b76:	b29b      	uxth	r3, r3
 8001b78:	8013      	strh	r3, [r2, #0]
 8001b7a:	e17b      	b.n	8001e74 <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	461a      	mov	r2, r3
 8001b82:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001b86:	009b      	lsls	r3, r3, #2
 8001b88:	4413      	add	r3, r2
 8001b8a:	881b      	ldrh	r3, [r3, #0]
 8001b8c:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001b8e:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	f280 80ea 	bge.w	8001d6c <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	461a      	mov	r2, r3
 8001b9e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001ba2:	009b      	lsls	r3, r3, #2
 8001ba4:	4413      	add	r3, r2
 8001ba6:	881b      	ldrh	r3, [r3, #0]
 8001ba8:	b29a      	uxth	r2, r3
 8001baa:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001bae:	4013      	ands	r3, r2
 8001bb0:	853b      	strh	r3, [r7, #40]	; 0x28
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	461a      	mov	r2, r3
 8001bb8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001bbc:	009b      	lsls	r3, r3, #2
 8001bbe:	4413      	add	r3, r2
 8001bc0:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001bc2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001bc6:	b292      	uxth	r2, r2
 8001bc8:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001bca:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8001bce:	4613      	mov	r3, r2
 8001bd0:	009b      	lsls	r3, r3, #2
 8001bd2:	4413      	add	r3, r2
 8001bd4:	00db      	lsls	r3, r3, #3
 8001bd6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001bda:	687a      	ldr	r2, [r7, #4]
 8001bdc:	4413      	add	r3, r2
 8001bde:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8001be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001be2:	7b1b      	ldrb	r3, [r3, #12]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d122      	bne.n	8001c2e <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001bf0:	b29b      	uxth	r3, r3
 8001bf2:	461a      	mov	r2, r3
 8001bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bf6:	781b      	ldrb	r3, [r3, #0]
 8001bf8:	00db      	lsls	r3, r3, #3
 8001bfa:	4413      	add	r3, r2
 8001bfc:	3306      	adds	r3, #6
 8001bfe:	005b      	lsls	r3, r3, #1
 8001c00:	687a      	ldr	r2, [r7, #4]
 8001c02:	6812      	ldr	r2, [r2, #0]
 8001c04:	4413      	add	r3, r2
 8001c06:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001c0a:	881b      	ldrh	r3, [r3, #0]
 8001c0c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001c10:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8001c12:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	f000 8087 	beq.w	8001d28 <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	6818      	ldr	r0, [r3, #0]
 8001c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c20:	6959      	ldr	r1, [r3, #20]
 8001c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c24:	88da      	ldrh	r2, [r3, #6]
 8001c26:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001c28:	f004 fa03 	bl	8006032 <USB_ReadPMA>
 8001c2c:	e07c      	b.n	8001d28 <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8001c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c30:	78db      	ldrb	r3, [r3, #3]
 8001c32:	2b02      	cmp	r3, #2
 8001c34:	d108      	bne.n	8001c48 <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8001c36:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001c38:	461a      	mov	r2, r3
 8001c3a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001c3c:	6878      	ldr	r0, [r7, #4]
 8001c3e:	f000 f927 	bl	8001e90 <HAL_PCD_EP_DB_Receive>
 8001c42:	4603      	mov	r3, r0
 8001c44:	86fb      	strh	r3, [r7, #54]	; 0x36
 8001c46:	e06f      	b.n	8001d28 <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	461a      	mov	r2, r3
 8001c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c50:	781b      	ldrb	r3, [r3, #0]
 8001c52:	009b      	lsls	r3, r3, #2
 8001c54:	4413      	add	r3, r2
 8001c56:	881b      	ldrh	r3, [r3, #0]
 8001c58:	b29b      	uxth	r3, r3
 8001c5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001c5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001c62:	847b      	strh	r3, [r7, #34]	; 0x22
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	461a      	mov	r2, r3
 8001c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c6c:	781b      	ldrb	r3, [r3, #0]
 8001c6e:	009b      	lsls	r3, r3, #2
 8001c70:	441a      	add	r2, r3
 8001c72:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001c74:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001c78:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001c7c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c80:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001c84:	b29b      	uxth	r3, r3
 8001c86:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	461a      	mov	r2, r3
 8001c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c90:	781b      	ldrb	r3, [r3, #0]
 8001c92:	009b      	lsls	r3, r3, #2
 8001c94:	4413      	add	r3, r2
 8001c96:	881b      	ldrh	r3, [r3, #0]
 8001c98:	b29b      	uxth	r3, r3
 8001c9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d021      	beq.n	8001ce6 <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001caa:	b29b      	uxth	r3, r3
 8001cac:	461a      	mov	r2, r3
 8001cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cb0:	781b      	ldrb	r3, [r3, #0]
 8001cb2:	00db      	lsls	r3, r3, #3
 8001cb4:	4413      	add	r3, r2
 8001cb6:	3302      	adds	r3, #2
 8001cb8:	005b      	lsls	r3, r3, #1
 8001cba:	687a      	ldr	r2, [r7, #4]
 8001cbc:	6812      	ldr	r2, [r2, #0]
 8001cbe:	4413      	add	r3, r2
 8001cc0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001cc4:	881b      	ldrh	r3, [r3, #0]
 8001cc6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001cca:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8001ccc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d02a      	beq.n	8001d28 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6818      	ldr	r0, [r3, #0]
 8001cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cd8:	6959      	ldr	r1, [r3, #20]
 8001cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cdc:	891a      	ldrh	r2, [r3, #8]
 8001cde:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001ce0:	f004 f9a7 	bl	8006032 <USB_ReadPMA>
 8001ce4:	e020      	b.n	8001d28 <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001cee:	b29b      	uxth	r3, r3
 8001cf0:	461a      	mov	r2, r3
 8001cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cf4:	781b      	ldrb	r3, [r3, #0]
 8001cf6:	00db      	lsls	r3, r3, #3
 8001cf8:	4413      	add	r3, r2
 8001cfa:	3306      	adds	r3, #6
 8001cfc:	005b      	lsls	r3, r3, #1
 8001cfe:	687a      	ldr	r2, [r7, #4]
 8001d00:	6812      	ldr	r2, [r2, #0]
 8001d02:	4413      	add	r3, r2
 8001d04:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001d08:	881b      	ldrh	r3, [r3, #0]
 8001d0a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001d0e:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8001d10:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d008      	beq.n	8001d28 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	6818      	ldr	r0, [r3, #0]
 8001d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d1c:	6959      	ldr	r1, [r3, #20]
 8001d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d20:	895a      	ldrh	r2, [r3, #10]
 8001d22:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001d24:	f004 f985 	bl	8006032 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8001d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d2a:	69da      	ldr	r2, [r3, #28]
 8001d2c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001d2e:	441a      	add	r2, r3
 8001d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d32:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8001d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d36:	695a      	ldr	r2, [r3, #20]
 8001d38:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001d3a:	441a      	add	r2, r3
 8001d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d3e:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d42:	699b      	ldr	r3, [r3, #24]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d004      	beq.n	8001d52 <PCD_EP_ISR_Handler+0x4c2>
 8001d48:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d4c:	691b      	ldr	r3, [r3, #16]
 8001d4e:	429a      	cmp	r2, r3
 8001d50:	d206      	bcs.n	8001d60 <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d54:	781b      	ldrb	r3, [r3, #0]
 8001d56:	4619      	mov	r1, r3
 8001d58:	6878      	ldr	r0, [r7, #4]
 8001d5a:	f005 ff97 	bl	8007c8c <HAL_PCD_DataOutStageCallback>
 8001d5e:	e005      	b.n	8001d6c <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001d66:	4618      	mov	r0, r3
 8001d68:	f002 f9a8 	bl	80040bc <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001d6c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001d6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d07e      	beq.n	8001e74 <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 8001d76:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001d7a:	1c5a      	adds	r2, r3, #1
 8001d7c:	4613      	mov	r3, r2
 8001d7e:	009b      	lsls	r3, r3, #2
 8001d80:	4413      	add	r3, r2
 8001d82:	00db      	lsls	r3, r3, #3
 8001d84:	687a      	ldr	r2, [r7, #4]
 8001d86:	4413      	add	r3, r2
 8001d88:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	461a      	mov	r2, r3
 8001d90:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001d94:	009b      	lsls	r3, r3, #2
 8001d96:	4413      	add	r3, r2
 8001d98:	881b      	ldrh	r3, [r3, #0]
 8001d9a:	b29b      	uxth	r3, r3
 8001d9c:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001da0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001da4:	843b      	strh	r3, [r7, #32]
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	461a      	mov	r2, r3
 8001dac:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001db0:	009b      	lsls	r3, r3, #2
 8001db2:	441a      	add	r2, r3
 8001db4:	8c3b      	ldrh	r3, [r7, #32]
 8001db6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001dba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001dbe:	b29b      	uxth	r3, r3
 8001dc0:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8001dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dc4:	78db      	ldrb	r3, [r3, #3]
 8001dc6:	2b03      	cmp	r3, #3
 8001dc8:	d00c      	beq.n	8001de4 <PCD_EP_ISR_Handler+0x554>
 8001dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dcc:	78db      	ldrb	r3, [r3, #3]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d008      	beq.n	8001de4 <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8001dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dd4:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8001dd6:	2b02      	cmp	r3, #2
 8001dd8:	d146      	bne.n	8001e68 <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8001dda:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001ddc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d141      	bne.n	8001e68 <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001dec:	b29b      	uxth	r3, r3
 8001dee:	461a      	mov	r2, r3
 8001df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001df2:	781b      	ldrb	r3, [r3, #0]
 8001df4:	00db      	lsls	r3, r3, #3
 8001df6:	4413      	add	r3, r2
 8001df8:	3302      	adds	r3, #2
 8001dfa:	005b      	lsls	r3, r3, #1
 8001dfc:	687a      	ldr	r2, [r7, #4]
 8001dfe:	6812      	ldr	r2, [r2, #0]
 8001e00:	4413      	add	r3, r2
 8001e02:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001e06:	881b      	ldrh	r3, [r3, #0]
 8001e08:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001e0c:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8001e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e10:	699a      	ldr	r2, [r3, #24]
 8001e12:	8bfb      	ldrh	r3, [r7, #30]
 8001e14:	429a      	cmp	r2, r3
 8001e16:	d906      	bls.n	8001e26 <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 8001e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e1a:	699a      	ldr	r2, [r3, #24]
 8001e1c:	8bfb      	ldrh	r3, [r7, #30]
 8001e1e:	1ad2      	subs	r2, r2, r3
 8001e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e22:	619a      	str	r2, [r3, #24]
 8001e24:	e002      	b.n	8001e2c <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 8001e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e28:	2200      	movs	r2, #0
 8001e2a:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8001e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e2e:	699b      	ldr	r3, [r3, #24]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d106      	bne.n	8001e42 <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e36:	781b      	ldrb	r3, [r3, #0]
 8001e38:	4619      	mov	r1, r3
 8001e3a:	6878      	ldr	r0, [r7, #4]
 8001e3c:	f005 ff41 	bl	8007cc2 <HAL_PCD_DataInStageCallback>
 8001e40:	e018      	b.n	8001e74 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8001e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e44:	695a      	ldr	r2, [r3, #20]
 8001e46:	8bfb      	ldrh	r3, [r7, #30]
 8001e48:	441a      	add	r2, r3
 8001e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e4c:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8001e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e50:	69da      	ldr	r2, [r3, #28]
 8001e52:	8bfb      	ldrh	r3, [r7, #30]
 8001e54:	441a      	add	r2, r3
 8001e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e58:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001e60:	4618      	mov	r0, r3
 8001e62:	f002 f92b 	bl	80040bc <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8001e66:	e005      	b.n	8001e74 <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8001e68:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001e6a:	461a      	mov	r2, r3
 8001e6c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001e6e:	6878      	ldr	r0, [r7, #4]
 8001e70:	f000 f91b 	bl	80020aa <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001e7c:	b29b      	uxth	r3, r3
 8001e7e:	b21b      	sxth	r3, r3
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	f6ff ad0a 	blt.w	800189a <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8001e86:	2300      	movs	r3, #0
}
 8001e88:	4618      	mov	r0, r3
 8001e8a:	3738      	adds	r7, #56	; 0x38
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	bd80      	pop	{r7, pc}

08001e90 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b088      	sub	sp, #32
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	60f8      	str	r0, [r7, #12]
 8001e98:	60b9      	str	r1, [r7, #8]
 8001e9a:	4613      	mov	r3, r2
 8001e9c:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001e9e:	88fb      	ldrh	r3, [r7, #6]
 8001ea0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d07e      	beq.n	8001fa6 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001eb0:	b29b      	uxth	r3, r3
 8001eb2:	461a      	mov	r2, r3
 8001eb4:	68bb      	ldr	r3, [r7, #8]
 8001eb6:	781b      	ldrb	r3, [r3, #0]
 8001eb8:	00db      	lsls	r3, r3, #3
 8001eba:	4413      	add	r3, r2
 8001ebc:	3302      	adds	r3, #2
 8001ebe:	005b      	lsls	r3, r3, #1
 8001ec0:	68fa      	ldr	r2, [r7, #12]
 8001ec2:	6812      	ldr	r2, [r2, #0]
 8001ec4:	4413      	add	r3, r2
 8001ec6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001eca:	881b      	ldrh	r3, [r3, #0]
 8001ecc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001ed0:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8001ed2:	68bb      	ldr	r3, [r7, #8]
 8001ed4:	699a      	ldr	r2, [r3, #24]
 8001ed6:	8b7b      	ldrh	r3, [r7, #26]
 8001ed8:	429a      	cmp	r2, r3
 8001eda:	d306      	bcc.n	8001eea <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8001edc:	68bb      	ldr	r3, [r7, #8]
 8001ede:	699a      	ldr	r2, [r3, #24]
 8001ee0:	8b7b      	ldrh	r3, [r7, #26]
 8001ee2:	1ad2      	subs	r2, r2, r3
 8001ee4:	68bb      	ldr	r3, [r7, #8]
 8001ee6:	619a      	str	r2, [r3, #24]
 8001ee8:	e002      	b.n	8001ef0 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8001eea:	68bb      	ldr	r3, [r7, #8]
 8001eec:	2200      	movs	r2, #0
 8001eee:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001ef0:	68bb      	ldr	r3, [r7, #8]
 8001ef2:	699b      	ldr	r3, [r3, #24]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d123      	bne.n	8001f40 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	461a      	mov	r2, r3
 8001efe:	68bb      	ldr	r3, [r7, #8]
 8001f00:	781b      	ldrb	r3, [r3, #0]
 8001f02:	009b      	lsls	r3, r3, #2
 8001f04:	4413      	add	r3, r2
 8001f06:	881b      	ldrh	r3, [r3, #0]
 8001f08:	b29b      	uxth	r3, r3
 8001f0a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001f0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f12:	833b      	strh	r3, [r7, #24]
 8001f14:	8b3b      	ldrh	r3, [r7, #24]
 8001f16:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001f1a:	833b      	strh	r3, [r7, #24]
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	461a      	mov	r2, r3
 8001f22:	68bb      	ldr	r3, [r7, #8]
 8001f24:	781b      	ldrb	r3, [r3, #0]
 8001f26:	009b      	lsls	r3, r3, #2
 8001f28:	441a      	add	r2, r3
 8001f2a:	8b3b      	ldrh	r3, [r7, #24]
 8001f2c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001f30:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001f34:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f3c:	b29b      	uxth	r3, r3
 8001f3e:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001f40:	88fb      	ldrh	r3, [r7, #6]
 8001f42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d01f      	beq.n	8001f8a <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	461a      	mov	r2, r3
 8001f50:	68bb      	ldr	r3, [r7, #8]
 8001f52:	781b      	ldrb	r3, [r3, #0]
 8001f54:	009b      	lsls	r3, r3, #2
 8001f56:	4413      	add	r3, r2
 8001f58:	881b      	ldrh	r3, [r3, #0]
 8001f5a:	b29b      	uxth	r3, r3
 8001f5c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001f60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f64:	82fb      	strh	r3, [r7, #22]
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	461a      	mov	r2, r3
 8001f6c:	68bb      	ldr	r3, [r7, #8]
 8001f6e:	781b      	ldrb	r3, [r3, #0]
 8001f70:	009b      	lsls	r3, r3, #2
 8001f72:	441a      	add	r2, r3
 8001f74:	8afb      	ldrh	r3, [r7, #22]
 8001f76:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001f7a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001f7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f82:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001f86:	b29b      	uxth	r3, r3
 8001f88:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8001f8a:	8b7b      	ldrh	r3, [r7, #26]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	f000 8087 	beq.w	80020a0 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	6818      	ldr	r0, [r3, #0]
 8001f96:	68bb      	ldr	r3, [r7, #8]
 8001f98:	6959      	ldr	r1, [r3, #20]
 8001f9a:	68bb      	ldr	r3, [r7, #8]
 8001f9c:	891a      	ldrh	r2, [r3, #8]
 8001f9e:	8b7b      	ldrh	r3, [r7, #26]
 8001fa0:	f004 f847 	bl	8006032 <USB_ReadPMA>
 8001fa4:	e07c      	b.n	80020a0 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001fae:	b29b      	uxth	r3, r3
 8001fb0:	461a      	mov	r2, r3
 8001fb2:	68bb      	ldr	r3, [r7, #8]
 8001fb4:	781b      	ldrb	r3, [r3, #0]
 8001fb6:	00db      	lsls	r3, r3, #3
 8001fb8:	4413      	add	r3, r2
 8001fba:	3306      	adds	r3, #6
 8001fbc:	005b      	lsls	r3, r3, #1
 8001fbe:	68fa      	ldr	r2, [r7, #12]
 8001fc0:	6812      	ldr	r2, [r2, #0]
 8001fc2:	4413      	add	r3, r2
 8001fc4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001fc8:	881b      	ldrh	r3, [r3, #0]
 8001fca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001fce:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8001fd0:	68bb      	ldr	r3, [r7, #8]
 8001fd2:	699a      	ldr	r2, [r3, #24]
 8001fd4:	8b7b      	ldrh	r3, [r7, #26]
 8001fd6:	429a      	cmp	r2, r3
 8001fd8:	d306      	bcc.n	8001fe8 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8001fda:	68bb      	ldr	r3, [r7, #8]
 8001fdc:	699a      	ldr	r2, [r3, #24]
 8001fde:	8b7b      	ldrh	r3, [r7, #26]
 8001fe0:	1ad2      	subs	r2, r2, r3
 8001fe2:	68bb      	ldr	r3, [r7, #8]
 8001fe4:	619a      	str	r2, [r3, #24]
 8001fe6:	e002      	b.n	8001fee <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8001fe8:	68bb      	ldr	r3, [r7, #8]
 8001fea:	2200      	movs	r2, #0
 8001fec:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001fee:	68bb      	ldr	r3, [r7, #8]
 8001ff0:	699b      	ldr	r3, [r3, #24]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d123      	bne.n	800203e <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	461a      	mov	r2, r3
 8001ffc:	68bb      	ldr	r3, [r7, #8]
 8001ffe:	781b      	ldrb	r3, [r3, #0]
 8002000:	009b      	lsls	r3, r3, #2
 8002002:	4413      	add	r3, r2
 8002004:	881b      	ldrh	r3, [r3, #0]
 8002006:	b29b      	uxth	r3, r3
 8002008:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800200c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002010:	83fb      	strh	r3, [r7, #30]
 8002012:	8bfb      	ldrh	r3, [r7, #30]
 8002014:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002018:	83fb      	strh	r3, [r7, #30]
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	461a      	mov	r2, r3
 8002020:	68bb      	ldr	r3, [r7, #8]
 8002022:	781b      	ldrb	r3, [r3, #0]
 8002024:	009b      	lsls	r3, r3, #2
 8002026:	441a      	add	r2, r3
 8002028:	8bfb      	ldrh	r3, [r7, #30]
 800202a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800202e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002032:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002036:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800203a:	b29b      	uxth	r3, r3
 800203c:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800203e:	88fb      	ldrh	r3, [r7, #6]
 8002040:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002044:	2b00      	cmp	r3, #0
 8002046:	d11f      	bne.n	8002088 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	461a      	mov	r2, r3
 800204e:	68bb      	ldr	r3, [r7, #8]
 8002050:	781b      	ldrb	r3, [r3, #0]
 8002052:	009b      	lsls	r3, r3, #2
 8002054:	4413      	add	r3, r2
 8002056:	881b      	ldrh	r3, [r3, #0]
 8002058:	b29b      	uxth	r3, r3
 800205a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800205e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002062:	83bb      	strh	r3, [r7, #28]
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	461a      	mov	r2, r3
 800206a:	68bb      	ldr	r3, [r7, #8]
 800206c:	781b      	ldrb	r3, [r3, #0]
 800206e:	009b      	lsls	r3, r3, #2
 8002070:	441a      	add	r2, r3
 8002072:	8bbb      	ldrh	r3, [r7, #28]
 8002074:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002078:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800207c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002080:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002084:	b29b      	uxth	r3, r3
 8002086:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002088:	8b7b      	ldrh	r3, [r7, #26]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d008      	beq.n	80020a0 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	6818      	ldr	r0, [r3, #0]
 8002092:	68bb      	ldr	r3, [r7, #8]
 8002094:	6959      	ldr	r1, [r3, #20]
 8002096:	68bb      	ldr	r3, [r7, #8]
 8002098:	895a      	ldrh	r2, [r3, #10]
 800209a:	8b7b      	ldrh	r3, [r7, #26]
 800209c:	f003 ffc9 	bl	8006032 <USB_ReadPMA>
    }
  }

  return count;
 80020a0:	8b7b      	ldrh	r3, [r7, #26]
}
 80020a2:	4618      	mov	r0, r3
 80020a4:	3720      	adds	r7, #32
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}

080020aa <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80020aa:	b580      	push	{r7, lr}
 80020ac:	b0a2      	sub	sp, #136	; 0x88
 80020ae:	af00      	add	r7, sp, #0
 80020b0:	60f8      	str	r0, [r7, #12]
 80020b2:	60b9      	str	r1, [r7, #8]
 80020b4:	4613      	mov	r3, r2
 80020b6:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80020b8:	88fb      	ldrh	r3, [r7, #6]
 80020ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020be:	2b00      	cmp	r3, #0
 80020c0:	f000 81c7 	beq.w	8002452 <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80020cc:	b29b      	uxth	r3, r3
 80020ce:	461a      	mov	r2, r3
 80020d0:	68bb      	ldr	r3, [r7, #8]
 80020d2:	781b      	ldrb	r3, [r3, #0]
 80020d4:	00db      	lsls	r3, r3, #3
 80020d6:	4413      	add	r3, r2
 80020d8:	3302      	adds	r3, #2
 80020da:	005b      	lsls	r3, r3, #1
 80020dc:	68fa      	ldr	r2, [r7, #12]
 80020de:	6812      	ldr	r2, [r2, #0]
 80020e0:	4413      	add	r3, r2
 80020e2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80020e6:	881b      	ldrh	r3, [r3, #0]
 80020e8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80020ec:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 80020f0:	68bb      	ldr	r3, [r7, #8]
 80020f2:	699a      	ldr	r2, [r3, #24]
 80020f4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80020f8:	429a      	cmp	r2, r3
 80020fa:	d907      	bls.n	800210c <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 80020fc:	68bb      	ldr	r3, [r7, #8]
 80020fe:	699a      	ldr	r2, [r3, #24]
 8002100:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002104:	1ad2      	subs	r2, r2, r3
 8002106:	68bb      	ldr	r3, [r7, #8]
 8002108:	619a      	str	r2, [r3, #24]
 800210a:	e002      	b.n	8002112 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 800210c:	68bb      	ldr	r3, [r7, #8]
 800210e:	2200      	movs	r2, #0
 8002110:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002112:	68bb      	ldr	r3, [r7, #8]
 8002114:	699b      	ldr	r3, [r3, #24]
 8002116:	2b00      	cmp	r3, #0
 8002118:	f040 80b9 	bne.w	800228e <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800211c:	68bb      	ldr	r3, [r7, #8]
 800211e:	785b      	ldrb	r3, [r3, #1]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d126      	bne.n	8002172 <HAL_PCD_EP_DB_Transmit+0xc8>
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	62bb      	str	r3, [r7, #40]	; 0x28
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002132:	b29b      	uxth	r3, r3
 8002134:	461a      	mov	r2, r3
 8002136:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002138:	4413      	add	r3, r2
 800213a:	62bb      	str	r3, [r7, #40]	; 0x28
 800213c:	68bb      	ldr	r3, [r7, #8]
 800213e:	781b      	ldrb	r3, [r3, #0]
 8002140:	011a      	lsls	r2, r3, #4
 8002142:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002144:	4413      	add	r3, r2
 8002146:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800214a:	627b      	str	r3, [r7, #36]	; 0x24
 800214c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800214e:	881b      	ldrh	r3, [r3, #0]
 8002150:	b29b      	uxth	r3, r3
 8002152:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002156:	b29a      	uxth	r2, r3
 8002158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800215a:	801a      	strh	r2, [r3, #0]
 800215c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800215e:	881b      	ldrh	r3, [r3, #0]
 8002160:	b29b      	uxth	r3, r3
 8002162:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002166:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800216a:	b29a      	uxth	r2, r3
 800216c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800216e:	801a      	strh	r2, [r3, #0]
 8002170:	e01a      	b.n	80021a8 <HAL_PCD_EP_DB_Transmit+0xfe>
 8002172:	68bb      	ldr	r3, [r7, #8]
 8002174:	785b      	ldrb	r3, [r3, #1]
 8002176:	2b01      	cmp	r3, #1
 8002178:	d116      	bne.n	80021a8 <HAL_PCD_EP_DB_Transmit+0xfe>
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	633b      	str	r3, [r7, #48]	; 0x30
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002188:	b29b      	uxth	r3, r3
 800218a:	461a      	mov	r2, r3
 800218c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800218e:	4413      	add	r3, r2
 8002190:	633b      	str	r3, [r7, #48]	; 0x30
 8002192:	68bb      	ldr	r3, [r7, #8]
 8002194:	781b      	ldrb	r3, [r3, #0]
 8002196:	011a      	lsls	r2, r3, #4
 8002198:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800219a:	4413      	add	r3, r2
 800219c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80021a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80021a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021a4:	2200      	movs	r2, #0
 80021a6:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	623b      	str	r3, [r7, #32]
 80021ae:	68bb      	ldr	r3, [r7, #8]
 80021b0:	785b      	ldrb	r3, [r3, #1]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d126      	bne.n	8002204 <HAL_PCD_EP_DB_Transmit+0x15a>
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	61bb      	str	r3, [r7, #24]
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80021c4:	b29b      	uxth	r3, r3
 80021c6:	461a      	mov	r2, r3
 80021c8:	69bb      	ldr	r3, [r7, #24]
 80021ca:	4413      	add	r3, r2
 80021cc:	61bb      	str	r3, [r7, #24]
 80021ce:	68bb      	ldr	r3, [r7, #8]
 80021d0:	781b      	ldrb	r3, [r3, #0]
 80021d2:	011a      	lsls	r2, r3, #4
 80021d4:	69bb      	ldr	r3, [r7, #24]
 80021d6:	4413      	add	r3, r2
 80021d8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80021dc:	617b      	str	r3, [r7, #20]
 80021de:	697b      	ldr	r3, [r7, #20]
 80021e0:	881b      	ldrh	r3, [r3, #0]
 80021e2:	b29b      	uxth	r3, r3
 80021e4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80021e8:	b29a      	uxth	r2, r3
 80021ea:	697b      	ldr	r3, [r7, #20]
 80021ec:	801a      	strh	r2, [r3, #0]
 80021ee:	697b      	ldr	r3, [r7, #20]
 80021f0:	881b      	ldrh	r3, [r3, #0]
 80021f2:	b29b      	uxth	r3, r3
 80021f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80021f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80021fc:	b29a      	uxth	r2, r3
 80021fe:	697b      	ldr	r3, [r7, #20]
 8002200:	801a      	strh	r2, [r3, #0]
 8002202:	e017      	b.n	8002234 <HAL_PCD_EP_DB_Transmit+0x18a>
 8002204:	68bb      	ldr	r3, [r7, #8]
 8002206:	785b      	ldrb	r3, [r3, #1]
 8002208:	2b01      	cmp	r3, #1
 800220a:	d113      	bne.n	8002234 <HAL_PCD_EP_DB_Transmit+0x18a>
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002214:	b29b      	uxth	r3, r3
 8002216:	461a      	mov	r2, r3
 8002218:	6a3b      	ldr	r3, [r7, #32]
 800221a:	4413      	add	r3, r2
 800221c:	623b      	str	r3, [r7, #32]
 800221e:	68bb      	ldr	r3, [r7, #8]
 8002220:	781b      	ldrb	r3, [r3, #0]
 8002222:	011a      	lsls	r2, r3, #4
 8002224:	6a3b      	ldr	r3, [r7, #32]
 8002226:	4413      	add	r3, r2
 8002228:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800222c:	61fb      	str	r3, [r7, #28]
 800222e:	69fb      	ldr	r3, [r7, #28]
 8002230:	2200      	movs	r2, #0
 8002232:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002234:	68bb      	ldr	r3, [r7, #8]
 8002236:	781b      	ldrb	r3, [r3, #0]
 8002238:	4619      	mov	r1, r3
 800223a:	68f8      	ldr	r0, [r7, #12]
 800223c:	f005 fd41 	bl	8007cc2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002240:	88fb      	ldrh	r3, [r7, #6]
 8002242:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002246:	2b00      	cmp	r3, #0
 8002248:	f000 82d4 	beq.w	80027f4 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	461a      	mov	r2, r3
 8002252:	68bb      	ldr	r3, [r7, #8]
 8002254:	781b      	ldrb	r3, [r3, #0]
 8002256:	009b      	lsls	r3, r3, #2
 8002258:	4413      	add	r3, r2
 800225a:	881b      	ldrh	r3, [r3, #0]
 800225c:	b29b      	uxth	r3, r3
 800225e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002262:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002266:	827b      	strh	r3, [r7, #18]
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	461a      	mov	r2, r3
 800226e:	68bb      	ldr	r3, [r7, #8]
 8002270:	781b      	ldrb	r3, [r3, #0]
 8002272:	009b      	lsls	r3, r3, #2
 8002274:	441a      	add	r2, r3
 8002276:	8a7b      	ldrh	r3, [r7, #18]
 8002278:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800227c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002280:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002284:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002288:	b29b      	uxth	r3, r3
 800228a:	8013      	strh	r3, [r2, #0]
 800228c:	e2b2      	b.n	80027f4 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800228e:	88fb      	ldrh	r3, [r7, #6]
 8002290:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002294:	2b00      	cmp	r3, #0
 8002296:	d021      	beq.n	80022dc <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	461a      	mov	r2, r3
 800229e:	68bb      	ldr	r3, [r7, #8]
 80022a0:	781b      	ldrb	r3, [r3, #0]
 80022a2:	009b      	lsls	r3, r3, #2
 80022a4:	4413      	add	r3, r2
 80022a6:	881b      	ldrh	r3, [r3, #0]
 80022a8:	b29b      	uxth	r3, r3
 80022aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80022ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022b2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	461a      	mov	r2, r3
 80022bc:	68bb      	ldr	r3, [r7, #8]
 80022be:	781b      	ldrb	r3, [r3, #0]
 80022c0:	009b      	lsls	r3, r3, #2
 80022c2:	441a      	add	r2, r3
 80022c4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80022c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80022cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80022d0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80022d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80022d8:	b29b      	uxth	r3, r3
 80022da:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80022dc:	68bb      	ldr	r3, [r7, #8]
 80022de:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80022e2:	2b01      	cmp	r3, #1
 80022e4:	f040 8286 	bne.w	80027f4 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 80022e8:	68bb      	ldr	r3, [r7, #8]
 80022ea:	695a      	ldr	r2, [r3, #20]
 80022ec:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80022f0:	441a      	add	r2, r3
 80022f2:	68bb      	ldr	r3, [r7, #8]
 80022f4:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80022f6:	68bb      	ldr	r3, [r7, #8]
 80022f8:	69da      	ldr	r2, [r3, #28]
 80022fa:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80022fe:	441a      	add	r2, r3
 8002300:	68bb      	ldr	r3, [r7, #8]
 8002302:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002304:	68bb      	ldr	r3, [r7, #8]
 8002306:	6a1a      	ldr	r2, [r3, #32]
 8002308:	68bb      	ldr	r3, [r7, #8]
 800230a:	691b      	ldr	r3, [r3, #16]
 800230c:	429a      	cmp	r2, r3
 800230e:	d309      	bcc.n	8002324 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8002310:	68bb      	ldr	r3, [r7, #8]
 8002312:	691b      	ldr	r3, [r3, #16]
 8002314:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8002316:	68bb      	ldr	r3, [r7, #8]
 8002318:	6a1a      	ldr	r2, [r3, #32]
 800231a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800231c:	1ad2      	subs	r2, r2, r3
 800231e:	68bb      	ldr	r3, [r7, #8]
 8002320:	621a      	str	r2, [r3, #32]
 8002322:	e015      	b.n	8002350 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8002324:	68bb      	ldr	r3, [r7, #8]
 8002326:	6a1b      	ldr	r3, [r3, #32]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d107      	bne.n	800233c <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 800232c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002330:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8002332:	68bb      	ldr	r3, [r7, #8]
 8002334:	2200      	movs	r2, #0
 8002336:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800233a:	e009      	b.n	8002350 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800233c:	68bb      	ldr	r3, [r7, #8]
 800233e:	2200      	movs	r2, #0
 8002340:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8002344:	68bb      	ldr	r3, [r7, #8]
 8002346:	6a1b      	ldr	r3, [r3, #32]
 8002348:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 800234a:	68bb      	ldr	r3, [r7, #8]
 800234c:	2200      	movs	r2, #0
 800234e:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002350:	68bb      	ldr	r3, [r7, #8]
 8002352:	785b      	ldrb	r3, [r3, #1]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d155      	bne.n	8002404 <HAL_PCD_EP_DB_Transmit+0x35a>
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	63bb      	str	r3, [r7, #56]	; 0x38
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002366:	b29b      	uxth	r3, r3
 8002368:	461a      	mov	r2, r3
 800236a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800236c:	4413      	add	r3, r2
 800236e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002370:	68bb      	ldr	r3, [r7, #8]
 8002372:	781b      	ldrb	r3, [r3, #0]
 8002374:	011a      	lsls	r2, r3, #4
 8002376:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002378:	4413      	add	r3, r2
 800237a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800237e:	637b      	str	r3, [r7, #52]	; 0x34
 8002380:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002382:	2b00      	cmp	r3, #0
 8002384:	d112      	bne.n	80023ac <HAL_PCD_EP_DB_Transmit+0x302>
 8002386:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002388:	881b      	ldrh	r3, [r3, #0]
 800238a:	b29b      	uxth	r3, r3
 800238c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002390:	b29a      	uxth	r2, r3
 8002392:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002394:	801a      	strh	r2, [r3, #0]
 8002396:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002398:	881b      	ldrh	r3, [r3, #0]
 800239a:	b29b      	uxth	r3, r3
 800239c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80023a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80023a4:	b29a      	uxth	r2, r3
 80023a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023a8:	801a      	strh	r2, [r3, #0]
 80023aa:	e047      	b.n	800243c <HAL_PCD_EP_DB_Transmit+0x392>
 80023ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80023ae:	2b3e      	cmp	r3, #62	; 0x3e
 80023b0:	d811      	bhi.n	80023d6 <HAL_PCD_EP_DB_Transmit+0x32c>
 80023b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80023b4:	085b      	lsrs	r3, r3, #1
 80023b6:	64bb      	str	r3, [r7, #72]	; 0x48
 80023b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80023ba:	f003 0301 	and.w	r3, r3, #1
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d002      	beq.n	80023c8 <HAL_PCD_EP_DB_Transmit+0x31e>
 80023c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80023c4:	3301      	adds	r3, #1
 80023c6:	64bb      	str	r3, [r7, #72]	; 0x48
 80023c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80023ca:	b29b      	uxth	r3, r3
 80023cc:	029b      	lsls	r3, r3, #10
 80023ce:	b29a      	uxth	r2, r3
 80023d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023d2:	801a      	strh	r2, [r3, #0]
 80023d4:	e032      	b.n	800243c <HAL_PCD_EP_DB_Transmit+0x392>
 80023d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80023d8:	095b      	lsrs	r3, r3, #5
 80023da:	64bb      	str	r3, [r7, #72]	; 0x48
 80023dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80023de:	f003 031f 	and.w	r3, r3, #31
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d102      	bne.n	80023ec <HAL_PCD_EP_DB_Transmit+0x342>
 80023e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80023e8:	3b01      	subs	r3, #1
 80023ea:	64bb      	str	r3, [r7, #72]	; 0x48
 80023ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80023ee:	b29b      	uxth	r3, r3
 80023f0:	029b      	lsls	r3, r3, #10
 80023f2:	b29b      	uxth	r3, r3
 80023f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80023f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80023fc:	b29a      	uxth	r2, r3
 80023fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002400:	801a      	strh	r2, [r3, #0]
 8002402:	e01b      	b.n	800243c <HAL_PCD_EP_DB_Transmit+0x392>
 8002404:	68bb      	ldr	r3, [r7, #8]
 8002406:	785b      	ldrb	r3, [r3, #1]
 8002408:	2b01      	cmp	r3, #1
 800240a:	d117      	bne.n	800243c <HAL_PCD_EP_DB_Transmit+0x392>
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	643b      	str	r3, [r7, #64]	; 0x40
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800241a:	b29b      	uxth	r3, r3
 800241c:	461a      	mov	r2, r3
 800241e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002420:	4413      	add	r3, r2
 8002422:	643b      	str	r3, [r7, #64]	; 0x40
 8002424:	68bb      	ldr	r3, [r7, #8]
 8002426:	781b      	ldrb	r3, [r3, #0]
 8002428:	011a      	lsls	r2, r3, #4
 800242a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800242c:	4413      	add	r3, r2
 800242e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002432:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002434:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002436:	b29a      	uxth	r2, r3
 8002438:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800243a:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	6818      	ldr	r0, [r3, #0]
 8002440:	68bb      	ldr	r3, [r7, #8]
 8002442:	6959      	ldr	r1, [r3, #20]
 8002444:	68bb      	ldr	r3, [r7, #8]
 8002446:	891a      	ldrh	r2, [r3, #8]
 8002448:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800244a:	b29b      	uxth	r3, r3
 800244c:	f003 fdac 	bl	8005fa8 <USB_WritePMA>
 8002450:	e1d0      	b.n	80027f4 <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800245a:	b29b      	uxth	r3, r3
 800245c:	461a      	mov	r2, r3
 800245e:	68bb      	ldr	r3, [r7, #8]
 8002460:	781b      	ldrb	r3, [r3, #0]
 8002462:	00db      	lsls	r3, r3, #3
 8002464:	4413      	add	r3, r2
 8002466:	3306      	adds	r3, #6
 8002468:	005b      	lsls	r3, r3, #1
 800246a:	68fa      	ldr	r2, [r7, #12]
 800246c:	6812      	ldr	r2, [r2, #0]
 800246e:	4413      	add	r3, r2
 8002470:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002474:	881b      	ldrh	r3, [r3, #0]
 8002476:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800247a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 800247e:	68bb      	ldr	r3, [r7, #8]
 8002480:	699a      	ldr	r2, [r3, #24]
 8002482:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002486:	429a      	cmp	r2, r3
 8002488:	d307      	bcc.n	800249a <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 800248a:	68bb      	ldr	r3, [r7, #8]
 800248c:	699a      	ldr	r2, [r3, #24]
 800248e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002492:	1ad2      	subs	r2, r2, r3
 8002494:	68bb      	ldr	r3, [r7, #8]
 8002496:	619a      	str	r2, [r3, #24]
 8002498:	e002      	b.n	80024a0 <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 800249a:	68bb      	ldr	r3, [r7, #8]
 800249c:	2200      	movs	r2, #0
 800249e:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80024a0:	68bb      	ldr	r3, [r7, #8]
 80024a2:	699b      	ldr	r3, [r3, #24]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	f040 80c4 	bne.w	8002632 <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80024aa:	68bb      	ldr	r3, [r7, #8]
 80024ac:	785b      	ldrb	r3, [r3, #1]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d126      	bne.n	8002500 <HAL_PCD_EP_DB_Transmit+0x456>
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80024c0:	b29b      	uxth	r3, r3
 80024c2:	461a      	mov	r2, r3
 80024c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024c6:	4413      	add	r3, r2
 80024c8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80024ca:	68bb      	ldr	r3, [r7, #8]
 80024cc:	781b      	ldrb	r3, [r3, #0]
 80024ce:	011a      	lsls	r2, r3, #4
 80024d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024d2:	4413      	add	r3, r2
 80024d4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80024d8:	66bb      	str	r3, [r7, #104]	; 0x68
 80024da:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80024dc:	881b      	ldrh	r3, [r3, #0]
 80024de:	b29b      	uxth	r3, r3
 80024e0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80024e4:	b29a      	uxth	r2, r3
 80024e6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80024e8:	801a      	strh	r2, [r3, #0]
 80024ea:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80024ec:	881b      	ldrh	r3, [r3, #0]
 80024ee:	b29b      	uxth	r3, r3
 80024f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80024f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80024f8:	b29a      	uxth	r2, r3
 80024fa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80024fc:	801a      	strh	r2, [r3, #0]
 80024fe:	e01a      	b.n	8002536 <HAL_PCD_EP_DB_Transmit+0x48c>
 8002500:	68bb      	ldr	r3, [r7, #8]
 8002502:	785b      	ldrb	r3, [r3, #1]
 8002504:	2b01      	cmp	r3, #1
 8002506:	d116      	bne.n	8002536 <HAL_PCD_EP_DB_Transmit+0x48c>
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	677b      	str	r3, [r7, #116]	; 0x74
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002516:	b29b      	uxth	r3, r3
 8002518:	461a      	mov	r2, r3
 800251a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800251c:	4413      	add	r3, r2
 800251e:	677b      	str	r3, [r7, #116]	; 0x74
 8002520:	68bb      	ldr	r3, [r7, #8]
 8002522:	781b      	ldrb	r3, [r3, #0]
 8002524:	011a      	lsls	r2, r3, #4
 8002526:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002528:	4413      	add	r3, r2
 800252a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800252e:	673b      	str	r3, [r7, #112]	; 0x70
 8002530:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002532:	2200      	movs	r2, #0
 8002534:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	67bb      	str	r3, [r7, #120]	; 0x78
 800253c:	68bb      	ldr	r3, [r7, #8]
 800253e:	785b      	ldrb	r3, [r3, #1]
 8002540:	2b00      	cmp	r3, #0
 8002542:	d12f      	bne.n	80025a4 <HAL_PCD_EP_DB_Transmit+0x4fa>
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002554:	b29b      	uxth	r3, r3
 8002556:	461a      	mov	r2, r3
 8002558:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800255c:	4413      	add	r3, r2
 800255e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002562:	68bb      	ldr	r3, [r7, #8]
 8002564:	781b      	ldrb	r3, [r3, #0]
 8002566:	011a      	lsls	r2, r3, #4
 8002568:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800256c:	4413      	add	r3, r2
 800256e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002572:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002576:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800257a:	881b      	ldrh	r3, [r3, #0]
 800257c:	b29b      	uxth	r3, r3
 800257e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002582:	b29a      	uxth	r2, r3
 8002584:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002588:	801a      	strh	r2, [r3, #0]
 800258a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800258e:	881b      	ldrh	r3, [r3, #0]
 8002590:	b29b      	uxth	r3, r3
 8002592:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002596:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800259a:	b29a      	uxth	r2, r3
 800259c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80025a0:	801a      	strh	r2, [r3, #0]
 80025a2:	e017      	b.n	80025d4 <HAL_PCD_EP_DB_Transmit+0x52a>
 80025a4:	68bb      	ldr	r3, [r7, #8]
 80025a6:	785b      	ldrb	r3, [r3, #1]
 80025a8:	2b01      	cmp	r3, #1
 80025aa:	d113      	bne.n	80025d4 <HAL_PCD_EP_DB_Transmit+0x52a>
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80025b4:	b29b      	uxth	r3, r3
 80025b6:	461a      	mov	r2, r3
 80025b8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80025ba:	4413      	add	r3, r2
 80025bc:	67bb      	str	r3, [r7, #120]	; 0x78
 80025be:	68bb      	ldr	r3, [r7, #8]
 80025c0:	781b      	ldrb	r3, [r3, #0]
 80025c2:	011a      	lsls	r2, r3, #4
 80025c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80025c6:	4413      	add	r3, r2
 80025c8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80025cc:	67fb      	str	r3, [r7, #124]	; 0x7c
 80025ce:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80025d0:	2200      	movs	r2, #0
 80025d2:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80025d4:	68bb      	ldr	r3, [r7, #8]
 80025d6:	781b      	ldrb	r3, [r3, #0]
 80025d8:	4619      	mov	r1, r3
 80025da:	68f8      	ldr	r0, [r7, #12]
 80025dc:	f005 fb71 	bl	8007cc2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80025e0:	88fb      	ldrh	r3, [r7, #6]
 80025e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	f040 8104 	bne.w	80027f4 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	461a      	mov	r2, r3
 80025f2:	68bb      	ldr	r3, [r7, #8]
 80025f4:	781b      	ldrb	r3, [r3, #0]
 80025f6:	009b      	lsls	r3, r3, #2
 80025f8:	4413      	add	r3, r2
 80025fa:	881b      	ldrh	r3, [r3, #0]
 80025fc:	b29b      	uxth	r3, r3
 80025fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002602:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002606:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	461a      	mov	r2, r3
 8002610:	68bb      	ldr	r3, [r7, #8]
 8002612:	781b      	ldrb	r3, [r3, #0]
 8002614:	009b      	lsls	r3, r3, #2
 8002616:	441a      	add	r2, r3
 8002618:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800261c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002620:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002624:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002628:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800262c:	b29b      	uxth	r3, r3
 800262e:	8013      	strh	r3, [r2, #0]
 8002630:	e0e0      	b.n	80027f4 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002632:	88fb      	ldrh	r3, [r7, #6]
 8002634:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002638:	2b00      	cmp	r3, #0
 800263a:	d121      	bne.n	8002680 <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	461a      	mov	r2, r3
 8002642:	68bb      	ldr	r3, [r7, #8]
 8002644:	781b      	ldrb	r3, [r3, #0]
 8002646:	009b      	lsls	r3, r3, #2
 8002648:	4413      	add	r3, r2
 800264a:	881b      	ldrh	r3, [r3, #0]
 800264c:	b29b      	uxth	r3, r3
 800264e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002652:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002656:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	461a      	mov	r2, r3
 8002660:	68bb      	ldr	r3, [r7, #8]
 8002662:	781b      	ldrb	r3, [r3, #0]
 8002664:	009b      	lsls	r3, r3, #2
 8002666:	441a      	add	r2, r3
 8002668:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800266c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002670:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002674:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002678:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800267c:	b29b      	uxth	r3, r3
 800267e:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002680:	68bb      	ldr	r3, [r7, #8]
 8002682:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002686:	2b01      	cmp	r3, #1
 8002688:	f040 80b4 	bne.w	80027f4 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 800268c:	68bb      	ldr	r3, [r7, #8]
 800268e:	695a      	ldr	r2, [r3, #20]
 8002690:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002694:	441a      	add	r2, r3
 8002696:	68bb      	ldr	r3, [r7, #8]
 8002698:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 800269a:	68bb      	ldr	r3, [r7, #8]
 800269c:	69da      	ldr	r2, [r3, #28]
 800269e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80026a2:	441a      	add	r2, r3
 80026a4:	68bb      	ldr	r3, [r7, #8]
 80026a6:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80026a8:	68bb      	ldr	r3, [r7, #8]
 80026aa:	6a1a      	ldr	r2, [r3, #32]
 80026ac:	68bb      	ldr	r3, [r7, #8]
 80026ae:	691b      	ldr	r3, [r3, #16]
 80026b0:	429a      	cmp	r2, r3
 80026b2:	d309      	bcc.n	80026c8 <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 80026b4:	68bb      	ldr	r3, [r7, #8]
 80026b6:	691b      	ldr	r3, [r3, #16]
 80026b8:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 80026ba:	68bb      	ldr	r3, [r7, #8]
 80026bc:	6a1a      	ldr	r2, [r3, #32]
 80026be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80026c0:	1ad2      	subs	r2, r2, r3
 80026c2:	68bb      	ldr	r3, [r7, #8]
 80026c4:	621a      	str	r2, [r3, #32]
 80026c6:	e015      	b.n	80026f4 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 80026c8:	68bb      	ldr	r3, [r7, #8]
 80026ca:	6a1b      	ldr	r3, [r3, #32]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d107      	bne.n	80026e0 <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 80026d0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80026d4:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 80026d6:	68bb      	ldr	r3, [r7, #8]
 80026d8:	2200      	movs	r2, #0
 80026da:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80026de:	e009      	b.n	80026f4 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 80026e0:	68bb      	ldr	r3, [r7, #8]
 80026e2:	6a1b      	ldr	r3, [r3, #32]
 80026e4:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 80026e6:	68bb      	ldr	r3, [r7, #8]
 80026e8:	2200      	movs	r2, #0
 80026ea:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80026ec:	68bb      	ldr	r3, [r7, #8]
 80026ee:	2200      	movs	r2, #0
 80026f0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	667b      	str	r3, [r7, #100]	; 0x64
 80026fa:	68bb      	ldr	r3, [r7, #8]
 80026fc:	785b      	ldrb	r3, [r3, #1]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d155      	bne.n	80027ae <HAL_PCD_EP_DB_Transmit+0x704>
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002710:	b29b      	uxth	r3, r3
 8002712:	461a      	mov	r2, r3
 8002714:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002716:	4413      	add	r3, r2
 8002718:	65fb      	str	r3, [r7, #92]	; 0x5c
 800271a:	68bb      	ldr	r3, [r7, #8]
 800271c:	781b      	ldrb	r3, [r3, #0]
 800271e:	011a      	lsls	r2, r3, #4
 8002720:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002722:	4413      	add	r3, r2
 8002724:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002728:	65bb      	str	r3, [r7, #88]	; 0x58
 800272a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800272c:	2b00      	cmp	r3, #0
 800272e:	d112      	bne.n	8002756 <HAL_PCD_EP_DB_Transmit+0x6ac>
 8002730:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002732:	881b      	ldrh	r3, [r3, #0]
 8002734:	b29b      	uxth	r3, r3
 8002736:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800273a:	b29a      	uxth	r2, r3
 800273c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800273e:	801a      	strh	r2, [r3, #0]
 8002740:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002742:	881b      	ldrh	r3, [r3, #0]
 8002744:	b29b      	uxth	r3, r3
 8002746:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800274a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800274e:	b29a      	uxth	r2, r3
 8002750:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002752:	801a      	strh	r2, [r3, #0]
 8002754:	e044      	b.n	80027e0 <HAL_PCD_EP_DB_Transmit+0x736>
 8002756:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002758:	2b3e      	cmp	r3, #62	; 0x3e
 800275a:	d811      	bhi.n	8002780 <HAL_PCD_EP_DB_Transmit+0x6d6>
 800275c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800275e:	085b      	lsrs	r3, r3, #1
 8002760:	657b      	str	r3, [r7, #84]	; 0x54
 8002762:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002764:	f003 0301 	and.w	r3, r3, #1
 8002768:	2b00      	cmp	r3, #0
 800276a:	d002      	beq.n	8002772 <HAL_PCD_EP_DB_Transmit+0x6c8>
 800276c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800276e:	3301      	adds	r3, #1
 8002770:	657b      	str	r3, [r7, #84]	; 0x54
 8002772:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002774:	b29b      	uxth	r3, r3
 8002776:	029b      	lsls	r3, r3, #10
 8002778:	b29a      	uxth	r2, r3
 800277a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800277c:	801a      	strh	r2, [r3, #0]
 800277e:	e02f      	b.n	80027e0 <HAL_PCD_EP_DB_Transmit+0x736>
 8002780:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002782:	095b      	lsrs	r3, r3, #5
 8002784:	657b      	str	r3, [r7, #84]	; 0x54
 8002786:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002788:	f003 031f 	and.w	r3, r3, #31
 800278c:	2b00      	cmp	r3, #0
 800278e:	d102      	bne.n	8002796 <HAL_PCD_EP_DB_Transmit+0x6ec>
 8002790:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002792:	3b01      	subs	r3, #1
 8002794:	657b      	str	r3, [r7, #84]	; 0x54
 8002796:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002798:	b29b      	uxth	r3, r3
 800279a:	029b      	lsls	r3, r3, #10
 800279c:	b29b      	uxth	r3, r3
 800279e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80027a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80027a6:	b29a      	uxth	r2, r3
 80027a8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80027aa:	801a      	strh	r2, [r3, #0]
 80027ac:	e018      	b.n	80027e0 <HAL_PCD_EP_DB_Transmit+0x736>
 80027ae:	68bb      	ldr	r3, [r7, #8]
 80027b0:	785b      	ldrb	r3, [r3, #1]
 80027b2:	2b01      	cmp	r3, #1
 80027b4:	d114      	bne.n	80027e0 <HAL_PCD_EP_DB_Transmit+0x736>
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80027be:	b29b      	uxth	r3, r3
 80027c0:	461a      	mov	r2, r3
 80027c2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80027c4:	4413      	add	r3, r2
 80027c6:	667b      	str	r3, [r7, #100]	; 0x64
 80027c8:	68bb      	ldr	r3, [r7, #8]
 80027ca:	781b      	ldrb	r3, [r3, #0]
 80027cc:	011a      	lsls	r2, r3, #4
 80027ce:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80027d0:	4413      	add	r3, r2
 80027d2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80027d6:	663b      	str	r3, [r7, #96]	; 0x60
 80027d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80027da:	b29a      	uxth	r2, r3
 80027dc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80027de:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	6818      	ldr	r0, [r3, #0]
 80027e4:	68bb      	ldr	r3, [r7, #8]
 80027e6:	6959      	ldr	r1, [r3, #20]
 80027e8:	68bb      	ldr	r3, [r7, #8]
 80027ea:	895a      	ldrh	r2, [r3, #10]
 80027ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80027ee:	b29b      	uxth	r3, r3
 80027f0:	f003 fbda 	bl	8005fa8 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	461a      	mov	r2, r3
 80027fa:	68bb      	ldr	r3, [r7, #8]
 80027fc:	781b      	ldrb	r3, [r3, #0]
 80027fe:	009b      	lsls	r3, r3, #2
 8002800:	4413      	add	r3, r2
 8002802:	881b      	ldrh	r3, [r3, #0]
 8002804:	b29b      	uxth	r3, r3
 8002806:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800280a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800280e:	823b      	strh	r3, [r7, #16]
 8002810:	8a3b      	ldrh	r3, [r7, #16]
 8002812:	f083 0310 	eor.w	r3, r3, #16
 8002816:	823b      	strh	r3, [r7, #16]
 8002818:	8a3b      	ldrh	r3, [r7, #16]
 800281a:	f083 0320 	eor.w	r3, r3, #32
 800281e:	823b      	strh	r3, [r7, #16]
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	461a      	mov	r2, r3
 8002826:	68bb      	ldr	r3, [r7, #8]
 8002828:	781b      	ldrb	r3, [r3, #0]
 800282a:	009b      	lsls	r3, r3, #2
 800282c:	441a      	add	r2, r3
 800282e:	8a3b      	ldrh	r3, [r7, #16]
 8002830:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002834:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002838:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800283c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002840:	b29b      	uxth	r3, r3
 8002842:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8002844:	2300      	movs	r3, #0
}
 8002846:	4618      	mov	r0, r3
 8002848:	3788      	adds	r7, #136	; 0x88
 800284a:	46bd      	mov	sp, r7
 800284c:	bd80      	pop	{r7, pc}

0800284e <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800284e:	b480      	push	{r7}
 8002850:	b087      	sub	sp, #28
 8002852:	af00      	add	r7, sp, #0
 8002854:	60f8      	str	r0, [r7, #12]
 8002856:	607b      	str	r3, [r7, #4]
 8002858:	460b      	mov	r3, r1
 800285a:	817b      	strh	r3, [r7, #10]
 800285c:	4613      	mov	r3, r2
 800285e:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002860:	897b      	ldrh	r3, [r7, #10]
 8002862:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002866:	b29b      	uxth	r3, r3
 8002868:	2b00      	cmp	r3, #0
 800286a:	d00b      	beq.n	8002884 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800286c:	897b      	ldrh	r3, [r7, #10]
 800286e:	f003 0307 	and.w	r3, r3, #7
 8002872:	1c5a      	adds	r2, r3, #1
 8002874:	4613      	mov	r3, r2
 8002876:	009b      	lsls	r3, r3, #2
 8002878:	4413      	add	r3, r2
 800287a:	00db      	lsls	r3, r3, #3
 800287c:	68fa      	ldr	r2, [r7, #12]
 800287e:	4413      	add	r3, r2
 8002880:	617b      	str	r3, [r7, #20]
 8002882:	e009      	b.n	8002898 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002884:	897a      	ldrh	r2, [r7, #10]
 8002886:	4613      	mov	r3, r2
 8002888:	009b      	lsls	r3, r3, #2
 800288a:	4413      	add	r3, r2
 800288c:	00db      	lsls	r3, r3, #3
 800288e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002892:	68fa      	ldr	r2, [r7, #12]
 8002894:	4413      	add	r3, r2
 8002896:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002898:	893b      	ldrh	r3, [r7, #8]
 800289a:	2b00      	cmp	r3, #0
 800289c:	d107      	bne.n	80028ae <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800289e:	697b      	ldr	r3, [r7, #20]
 80028a0:	2200      	movs	r2, #0
 80028a2:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	b29a      	uxth	r2, r3
 80028a8:	697b      	ldr	r3, [r7, #20]
 80028aa:	80da      	strh	r2, [r3, #6]
 80028ac:	e00b      	b.n	80028c6 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80028ae:	697b      	ldr	r3, [r7, #20]
 80028b0:	2201      	movs	r2, #1
 80028b2:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	b29a      	uxth	r2, r3
 80028b8:	697b      	ldr	r3, [r7, #20]
 80028ba:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	0c1b      	lsrs	r3, r3, #16
 80028c0:	b29a      	uxth	r2, r3
 80028c2:	697b      	ldr	r3, [r7, #20]
 80028c4:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 80028c6:	2300      	movs	r3, #0
}
 80028c8:	4618      	mov	r0, r3
 80028ca:	371c      	adds	r7, #28
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bc80      	pop	{r7}
 80028d0:	4770      	bx	lr
	...

080028d4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b086      	sub	sp, #24
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d101      	bne.n	80028e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80028e2:	2301      	movs	r3, #1
 80028e4:	e272      	b.n	8002dcc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f003 0301 	and.w	r3, r3, #1
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	f000 8087 	beq.w	8002a02 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80028f4:	4b92      	ldr	r3, [pc, #584]	; (8002b40 <HAL_RCC_OscConfig+0x26c>)
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	f003 030c 	and.w	r3, r3, #12
 80028fc:	2b04      	cmp	r3, #4
 80028fe:	d00c      	beq.n	800291a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002900:	4b8f      	ldr	r3, [pc, #572]	; (8002b40 <HAL_RCC_OscConfig+0x26c>)
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	f003 030c 	and.w	r3, r3, #12
 8002908:	2b08      	cmp	r3, #8
 800290a:	d112      	bne.n	8002932 <HAL_RCC_OscConfig+0x5e>
 800290c:	4b8c      	ldr	r3, [pc, #560]	; (8002b40 <HAL_RCC_OscConfig+0x26c>)
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002914:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002918:	d10b      	bne.n	8002932 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800291a:	4b89      	ldr	r3, [pc, #548]	; (8002b40 <HAL_RCC_OscConfig+0x26c>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002922:	2b00      	cmp	r3, #0
 8002924:	d06c      	beq.n	8002a00 <HAL_RCC_OscConfig+0x12c>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d168      	bne.n	8002a00 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800292e:	2301      	movs	r3, #1
 8002930:	e24c      	b.n	8002dcc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800293a:	d106      	bne.n	800294a <HAL_RCC_OscConfig+0x76>
 800293c:	4b80      	ldr	r3, [pc, #512]	; (8002b40 <HAL_RCC_OscConfig+0x26c>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4a7f      	ldr	r2, [pc, #508]	; (8002b40 <HAL_RCC_OscConfig+0x26c>)
 8002942:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002946:	6013      	str	r3, [r2, #0]
 8002948:	e02e      	b.n	80029a8 <HAL_RCC_OscConfig+0xd4>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	2b00      	cmp	r3, #0
 8002950:	d10c      	bne.n	800296c <HAL_RCC_OscConfig+0x98>
 8002952:	4b7b      	ldr	r3, [pc, #492]	; (8002b40 <HAL_RCC_OscConfig+0x26c>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4a7a      	ldr	r2, [pc, #488]	; (8002b40 <HAL_RCC_OscConfig+0x26c>)
 8002958:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800295c:	6013      	str	r3, [r2, #0]
 800295e:	4b78      	ldr	r3, [pc, #480]	; (8002b40 <HAL_RCC_OscConfig+0x26c>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	4a77      	ldr	r2, [pc, #476]	; (8002b40 <HAL_RCC_OscConfig+0x26c>)
 8002964:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002968:	6013      	str	r3, [r2, #0]
 800296a:	e01d      	b.n	80029a8 <HAL_RCC_OscConfig+0xd4>
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002974:	d10c      	bne.n	8002990 <HAL_RCC_OscConfig+0xbc>
 8002976:	4b72      	ldr	r3, [pc, #456]	; (8002b40 <HAL_RCC_OscConfig+0x26c>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4a71      	ldr	r2, [pc, #452]	; (8002b40 <HAL_RCC_OscConfig+0x26c>)
 800297c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002980:	6013      	str	r3, [r2, #0]
 8002982:	4b6f      	ldr	r3, [pc, #444]	; (8002b40 <HAL_RCC_OscConfig+0x26c>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4a6e      	ldr	r2, [pc, #440]	; (8002b40 <HAL_RCC_OscConfig+0x26c>)
 8002988:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800298c:	6013      	str	r3, [r2, #0]
 800298e:	e00b      	b.n	80029a8 <HAL_RCC_OscConfig+0xd4>
 8002990:	4b6b      	ldr	r3, [pc, #428]	; (8002b40 <HAL_RCC_OscConfig+0x26c>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4a6a      	ldr	r2, [pc, #424]	; (8002b40 <HAL_RCC_OscConfig+0x26c>)
 8002996:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800299a:	6013      	str	r3, [r2, #0]
 800299c:	4b68      	ldr	r3, [pc, #416]	; (8002b40 <HAL_RCC_OscConfig+0x26c>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4a67      	ldr	r2, [pc, #412]	; (8002b40 <HAL_RCC_OscConfig+0x26c>)
 80029a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029a6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d013      	beq.n	80029d8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029b0:	f7fd ffba 	bl	8000928 <HAL_GetTick>
 80029b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029b6:	e008      	b.n	80029ca <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029b8:	f7fd ffb6 	bl	8000928 <HAL_GetTick>
 80029bc:	4602      	mov	r2, r0
 80029be:	693b      	ldr	r3, [r7, #16]
 80029c0:	1ad3      	subs	r3, r2, r3
 80029c2:	2b64      	cmp	r3, #100	; 0x64
 80029c4:	d901      	bls.n	80029ca <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80029c6:	2303      	movs	r3, #3
 80029c8:	e200      	b.n	8002dcc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029ca:	4b5d      	ldr	r3, [pc, #372]	; (8002b40 <HAL_RCC_OscConfig+0x26c>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d0f0      	beq.n	80029b8 <HAL_RCC_OscConfig+0xe4>
 80029d6:	e014      	b.n	8002a02 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029d8:	f7fd ffa6 	bl	8000928 <HAL_GetTick>
 80029dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029de:	e008      	b.n	80029f2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029e0:	f7fd ffa2 	bl	8000928 <HAL_GetTick>
 80029e4:	4602      	mov	r2, r0
 80029e6:	693b      	ldr	r3, [r7, #16]
 80029e8:	1ad3      	subs	r3, r2, r3
 80029ea:	2b64      	cmp	r3, #100	; 0x64
 80029ec:	d901      	bls.n	80029f2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80029ee:	2303      	movs	r3, #3
 80029f0:	e1ec      	b.n	8002dcc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029f2:	4b53      	ldr	r3, [pc, #332]	; (8002b40 <HAL_RCC_OscConfig+0x26c>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d1f0      	bne.n	80029e0 <HAL_RCC_OscConfig+0x10c>
 80029fe:	e000      	b.n	8002a02 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a00:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f003 0302 	and.w	r3, r3, #2
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d063      	beq.n	8002ad6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002a0e:	4b4c      	ldr	r3, [pc, #304]	; (8002b40 <HAL_RCC_OscConfig+0x26c>)
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	f003 030c 	and.w	r3, r3, #12
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d00b      	beq.n	8002a32 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002a1a:	4b49      	ldr	r3, [pc, #292]	; (8002b40 <HAL_RCC_OscConfig+0x26c>)
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	f003 030c 	and.w	r3, r3, #12
 8002a22:	2b08      	cmp	r3, #8
 8002a24:	d11c      	bne.n	8002a60 <HAL_RCC_OscConfig+0x18c>
 8002a26:	4b46      	ldr	r3, [pc, #280]	; (8002b40 <HAL_RCC_OscConfig+0x26c>)
 8002a28:	685b      	ldr	r3, [r3, #4]
 8002a2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d116      	bne.n	8002a60 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a32:	4b43      	ldr	r3, [pc, #268]	; (8002b40 <HAL_RCC_OscConfig+0x26c>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f003 0302 	and.w	r3, r3, #2
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d005      	beq.n	8002a4a <HAL_RCC_OscConfig+0x176>
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	691b      	ldr	r3, [r3, #16]
 8002a42:	2b01      	cmp	r3, #1
 8002a44:	d001      	beq.n	8002a4a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002a46:	2301      	movs	r3, #1
 8002a48:	e1c0      	b.n	8002dcc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a4a:	4b3d      	ldr	r3, [pc, #244]	; (8002b40 <HAL_RCC_OscConfig+0x26c>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	695b      	ldr	r3, [r3, #20]
 8002a56:	00db      	lsls	r3, r3, #3
 8002a58:	4939      	ldr	r1, [pc, #228]	; (8002b40 <HAL_RCC_OscConfig+0x26c>)
 8002a5a:	4313      	orrs	r3, r2
 8002a5c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a5e:	e03a      	b.n	8002ad6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	691b      	ldr	r3, [r3, #16]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d020      	beq.n	8002aaa <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a68:	4b36      	ldr	r3, [pc, #216]	; (8002b44 <HAL_RCC_OscConfig+0x270>)
 8002a6a:	2201      	movs	r2, #1
 8002a6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a6e:	f7fd ff5b 	bl	8000928 <HAL_GetTick>
 8002a72:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a74:	e008      	b.n	8002a88 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a76:	f7fd ff57 	bl	8000928 <HAL_GetTick>
 8002a7a:	4602      	mov	r2, r0
 8002a7c:	693b      	ldr	r3, [r7, #16]
 8002a7e:	1ad3      	subs	r3, r2, r3
 8002a80:	2b02      	cmp	r3, #2
 8002a82:	d901      	bls.n	8002a88 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002a84:	2303      	movs	r3, #3
 8002a86:	e1a1      	b.n	8002dcc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a88:	4b2d      	ldr	r3, [pc, #180]	; (8002b40 <HAL_RCC_OscConfig+0x26c>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f003 0302 	and.w	r3, r3, #2
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d0f0      	beq.n	8002a76 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a94:	4b2a      	ldr	r3, [pc, #168]	; (8002b40 <HAL_RCC_OscConfig+0x26c>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	695b      	ldr	r3, [r3, #20]
 8002aa0:	00db      	lsls	r3, r3, #3
 8002aa2:	4927      	ldr	r1, [pc, #156]	; (8002b40 <HAL_RCC_OscConfig+0x26c>)
 8002aa4:	4313      	orrs	r3, r2
 8002aa6:	600b      	str	r3, [r1, #0]
 8002aa8:	e015      	b.n	8002ad6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002aaa:	4b26      	ldr	r3, [pc, #152]	; (8002b44 <HAL_RCC_OscConfig+0x270>)
 8002aac:	2200      	movs	r2, #0
 8002aae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ab0:	f7fd ff3a 	bl	8000928 <HAL_GetTick>
 8002ab4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ab6:	e008      	b.n	8002aca <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ab8:	f7fd ff36 	bl	8000928 <HAL_GetTick>
 8002abc:	4602      	mov	r2, r0
 8002abe:	693b      	ldr	r3, [r7, #16]
 8002ac0:	1ad3      	subs	r3, r2, r3
 8002ac2:	2b02      	cmp	r3, #2
 8002ac4:	d901      	bls.n	8002aca <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002ac6:	2303      	movs	r3, #3
 8002ac8:	e180      	b.n	8002dcc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002aca:	4b1d      	ldr	r3, [pc, #116]	; (8002b40 <HAL_RCC_OscConfig+0x26c>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f003 0302 	and.w	r3, r3, #2
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d1f0      	bne.n	8002ab8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f003 0308 	and.w	r3, r3, #8
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d03a      	beq.n	8002b58 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	699b      	ldr	r3, [r3, #24]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d019      	beq.n	8002b1e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002aea:	4b17      	ldr	r3, [pc, #92]	; (8002b48 <HAL_RCC_OscConfig+0x274>)
 8002aec:	2201      	movs	r2, #1
 8002aee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002af0:	f7fd ff1a 	bl	8000928 <HAL_GetTick>
 8002af4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002af6:	e008      	b.n	8002b0a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002af8:	f7fd ff16 	bl	8000928 <HAL_GetTick>
 8002afc:	4602      	mov	r2, r0
 8002afe:	693b      	ldr	r3, [r7, #16]
 8002b00:	1ad3      	subs	r3, r2, r3
 8002b02:	2b02      	cmp	r3, #2
 8002b04:	d901      	bls.n	8002b0a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002b06:	2303      	movs	r3, #3
 8002b08:	e160      	b.n	8002dcc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b0a:	4b0d      	ldr	r3, [pc, #52]	; (8002b40 <HAL_RCC_OscConfig+0x26c>)
 8002b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b0e:	f003 0302 	and.w	r3, r3, #2
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d0f0      	beq.n	8002af8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002b16:	2001      	movs	r0, #1
 8002b18:	f000 fada 	bl	80030d0 <RCC_Delay>
 8002b1c:	e01c      	b.n	8002b58 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b1e:	4b0a      	ldr	r3, [pc, #40]	; (8002b48 <HAL_RCC_OscConfig+0x274>)
 8002b20:	2200      	movs	r2, #0
 8002b22:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b24:	f7fd ff00 	bl	8000928 <HAL_GetTick>
 8002b28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b2a:	e00f      	b.n	8002b4c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b2c:	f7fd fefc 	bl	8000928 <HAL_GetTick>
 8002b30:	4602      	mov	r2, r0
 8002b32:	693b      	ldr	r3, [r7, #16]
 8002b34:	1ad3      	subs	r3, r2, r3
 8002b36:	2b02      	cmp	r3, #2
 8002b38:	d908      	bls.n	8002b4c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002b3a:	2303      	movs	r3, #3
 8002b3c:	e146      	b.n	8002dcc <HAL_RCC_OscConfig+0x4f8>
 8002b3e:	bf00      	nop
 8002b40:	40021000 	.word	0x40021000
 8002b44:	42420000 	.word	0x42420000
 8002b48:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b4c:	4b92      	ldr	r3, [pc, #584]	; (8002d98 <HAL_RCC_OscConfig+0x4c4>)
 8002b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b50:	f003 0302 	and.w	r3, r3, #2
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d1e9      	bne.n	8002b2c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f003 0304 	and.w	r3, r3, #4
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	f000 80a6 	beq.w	8002cb2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b66:	2300      	movs	r3, #0
 8002b68:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b6a:	4b8b      	ldr	r3, [pc, #556]	; (8002d98 <HAL_RCC_OscConfig+0x4c4>)
 8002b6c:	69db      	ldr	r3, [r3, #28]
 8002b6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d10d      	bne.n	8002b92 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b76:	4b88      	ldr	r3, [pc, #544]	; (8002d98 <HAL_RCC_OscConfig+0x4c4>)
 8002b78:	69db      	ldr	r3, [r3, #28]
 8002b7a:	4a87      	ldr	r2, [pc, #540]	; (8002d98 <HAL_RCC_OscConfig+0x4c4>)
 8002b7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b80:	61d3      	str	r3, [r2, #28]
 8002b82:	4b85      	ldr	r3, [pc, #532]	; (8002d98 <HAL_RCC_OscConfig+0x4c4>)
 8002b84:	69db      	ldr	r3, [r3, #28]
 8002b86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b8a:	60bb      	str	r3, [r7, #8]
 8002b8c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b8e:	2301      	movs	r3, #1
 8002b90:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b92:	4b82      	ldr	r3, [pc, #520]	; (8002d9c <HAL_RCC_OscConfig+0x4c8>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d118      	bne.n	8002bd0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b9e:	4b7f      	ldr	r3, [pc, #508]	; (8002d9c <HAL_RCC_OscConfig+0x4c8>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4a7e      	ldr	r2, [pc, #504]	; (8002d9c <HAL_RCC_OscConfig+0x4c8>)
 8002ba4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ba8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002baa:	f7fd febd 	bl	8000928 <HAL_GetTick>
 8002bae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bb0:	e008      	b.n	8002bc4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bb2:	f7fd feb9 	bl	8000928 <HAL_GetTick>
 8002bb6:	4602      	mov	r2, r0
 8002bb8:	693b      	ldr	r3, [r7, #16]
 8002bba:	1ad3      	subs	r3, r2, r3
 8002bbc:	2b64      	cmp	r3, #100	; 0x64
 8002bbe:	d901      	bls.n	8002bc4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002bc0:	2303      	movs	r3, #3
 8002bc2:	e103      	b.n	8002dcc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bc4:	4b75      	ldr	r3, [pc, #468]	; (8002d9c <HAL_RCC_OscConfig+0x4c8>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d0f0      	beq.n	8002bb2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	68db      	ldr	r3, [r3, #12]
 8002bd4:	2b01      	cmp	r3, #1
 8002bd6:	d106      	bne.n	8002be6 <HAL_RCC_OscConfig+0x312>
 8002bd8:	4b6f      	ldr	r3, [pc, #444]	; (8002d98 <HAL_RCC_OscConfig+0x4c4>)
 8002bda:	6a1b      	ldr	r3, [r3, #32]
 8002bdc:	4a6e      	ldr	r2, [pc, #440]	; (8002d98 <HAL_RCC_OscConfig+0x4c4>)
 8002bde:	f043 0301 	orr.w	r3, r3, #1
 8002be2:	6213      	str	r3, [r2, #32]
 8002be4:	e02d      	b.n	8002c42 <HAL_RCC_OscConfig+0x36e>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	68db      	ldr	r3, [r3, #12]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d10c      	bne.n	8002c08 <HAL_RCC_OscConfig+0x334>
 8002bee:	4b6a      	ldr	r3, [pc, #424]	; (8002d98 <HAL_RCC_OscConfig+0x4c4>)
 8002bf0:	6a1b      	ldr	r3, [r3, #32]
 8002bf2:	4a69      	ldr	r2, [pc, #420]	; (8002d98 <HAL_RCC_OscConfig+0x4c4>)
 8002bf4:	f023 0301 	bic.w	r3, r3, #1
 8002bf8:	6213      	str	r3, [r2, #32]
 8002bfa:	4b67      	ldr	r3, [pc, #412]	; (8002d98 <HAL_RCC_OscConfig+0x4c4>)
 8002bfc:	6a1b      	ldr	r3, [r3, #32]
 8002bfe:	4a66      	ldr	r2, [pc, #408]	; (8002d98 <HAL_RCC_OscConfig+0x4c4>)
 8002c00:	f023 0304 	bic.w	r3, r3, #4
 8002c04:	6213      	str	r3, [r2, #32]
 8002c06:	e01c      	b.n	8002c42 <HAL_RCC_OscConfig+0x36e>
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	68db      	ldr	r3, [r3, #12]
 8002c0c:	2b05      	cmp	r3, #5
 8002c0e:	d10c      	bne.n	8002c2a <HAL_RCC_OscConfig+0x356>
 8002c10:	4b61      	ldr	r3, [pc, #388]	; (8002d98 <HAL_RCC_OscConfig+0x4c4>)
 8002c12:	6a1b      	ldr	r3, [r3, #32]
 8002c14:	4a60      	ldr	r2, [pc, #384]	; (8002d98 <HAL_RCC_OscConfig+0x4c4>)
 8002c16:	f043 0304 	orr.w	r3, r3, #4
 8002c1a:	6213      	str	r3, [r2, #32]
 8002c1c:	4b5e      	ldr	r3, [pc, #376]	; (8002d98 <HAL_RCC_OscConfig+0x4c4>)
 8002c1e:	6a1b      	ldr	r3, [r3, #32]
 8002c20:	4a5d      	ldr	r2, [pc, #372]	; (8002d98 <HAL_RCC_OscConfig+0x4c4>)
 8002c22:	f043 0301 	orr.w	r3, r3, #1
 8002c26:	6213      	str	r3, [r2, #32]
 8002c28:	e00b      	b.n	8002c42 <HAL_RCC_OscConfig+0x36e>
 8002c2a:	4b5b      	ldr	r3, [pc, #364]	; (8002d98 <HAL_RCC_OscConfig+0x4c4>)
 8002c2c:	6a1b      	ldr	r3, [r3, #32]
 8002c2e:	4a5a      	ldr	r2, [pc, #360]	; (8002d98 <HAL_RCC_OscConfig+0x4c4>)
 8002c30:	f023 0301 	bic.w	r3, r3, #1
 8002c34:	6213      	str	r3, [r2, #32]
 8002c36:	4b58      	ldr	r3, [pc, #352]	; (8002d98 <HAL_RCC_OscConfig+0x4c4>)
 8002c38:	6a1b      	ldr	r3, [r3, #32]
 8002c3a:	4a57      	ldr	r2, [pc, #348]	; (8002d98 <HAL_RCC_OscConfig+0x4c4>)
 8002c3c:	f023 0304 	bic.w	r3, r3, #4
 8002c40:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	68db      	ldr	r3, [r3, #12]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d015      	beq.n	8002c76 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c4a:	f7fd fe6d 	bl	8000928 <HAL_GetTick>
 8002c4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c50:	e00a      	b.n	8002c68 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c52:	f7fd fe69 	bl	8000928 <HAL_GetTick>
 8002c56:	4602      	mov	r2, r0
 8002c58:	693b      	ldr	r3, [r7, #16]
 8002c5a:	1ad3      	subs	r3, r2, r3
 8002c5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d901      	bls.n	8002c68 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002c64:	2303      	movs	r3, #3
 8002c66:	e0b1      	b.n	8002dcc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c68:	4b4b      	ldr	r3, [pc, #300]	; (8002d98 <HAL_RCC_OscConfig+0x4c4>)
 8002c6a:	6a1b      	ldr	r3, [r3, #32]
 8002c6c:	f003 0302 	and.w	r3, r3, #2
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d0ee      	beq.n	8002c52 <HAL_RCC_OscConfig+0x37e>
 8002c74:	e014      	b.n	8002ca0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c76:	f7fd fe57 	bl	8000928 <HAL_GetTick>
 8002c7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c7c:	e00a      	b.n	8002c94 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c7e:	f7fd fe53 	bl	8000928 <HAL_GetTick>
 8002c82:	4602      	mov	r2, r0
 8002c84:	693b      	ldr	r3, [r7, #16]
 8002c86:	1ad3      	subs	r3, r2, r3
 8002c88:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	d901      	bls.n	8002c94 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002c90:	2303      	movs	r3, #3
 8002c92:	e09b      	b.n	8002dcc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c94:	4b40      	ldr	r3, [pc, #256]	; (8002d98 <HAL_RCC_OscConfig+0x4c4>)
 8002c96:	6a1b      	ldr	r3, [r3, #32]
 8002c98:	f003 0302 	and.w	r3, r3, #2
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d1ee      	bne.n	8002c7e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002ca0:	7dfb      	ldrb	r3, [r7, #23]
 8002ca2:	2b01      	cmp	r3, #1
 8002ca4:	d105      	bne.n	8002cb2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ca6:	4b3c      	ldr	r3, [pc, #240]	; (8002d98 <HAL_RCC_OscConfig+0x4c4>)
 8002ca8:	69db      	ldr	r3, [r3, #28]
 8002caa:	4a3b      	ldr	r2, [pc, #236]	; (8002d98 <HAL_RCC_OscConfig+0x4c4>)
 8002cac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002cb0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	69db      	ldr	r3, [r3, #28]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	f000 8087 	beq.w	8002dca <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002cbc:	4b36      	ldr	r3, [pc, #216]	; (8002d98 <HAL_RCC_OscConfig+0x4c4>)
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	f003 030c 	and.w	r3, r3, #12
 8002cc4:	2b08      	cmp	r3, #8
 8002cc6:	d061      	beq.n	8002d8c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	69db      	ldr	r3, [r3, #28]
 8002ccc:	2b02      	cmp	r3, #2
 8002cce:	d146      	bne.n	8002d5e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cd0:	4b33      	ldr	r3, [pc, #204]	; (8002da0 <HAL_RCC_OscConfig+0x4cc>)
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cd6:	f7fd fe27 	bl	8000928 <HAL_GetTick>
 8002cda:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002cdc:	e008      	b.n	8002cf0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cde:	f7fd fe23 	bl	8000928 <HAL_GetTick>
 8002ce2:	4602      	mov	r2, r0
 8002ce4:	693b      	ldr	r3, [r7, #16]
 8002ce6:	1ad3      	subs	r3, r2, r3
 8002ce8:	2b02      	cmp	r3, #2
 8002cea:	d901      	bls.n	8002cf0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002cec:	2303      	movs	r3, #3
 8002cee:	e06d      	b.n	8002dcc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002cf0:	4b29      	ldr	r3, [pc, #164]	; (8002d98 <HAL_RCC_OscConfig+0x4c4>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d1f0      	bne.n	8002cde <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6a1b      	ldr	r3, [r3, #32]
 8002d00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d04:	d108      	bne.n	8002d18 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002d06:	4b24      	ldr	r3, [pc, #144]	; (8002d98 <HAL_RCC_OscConfig+0x4c4>)
 8002d08:	685b      	ldr	r3, [r3, #4]
 8002d0a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	689b      	ldr	r3, [r3, #8]
 8002d12:	4921      	ldr	r1, [pc, #132]	; (8002d98 <HAL_RCC_OscConfig+0x4c4>)
 8002d14:	4313      	orrs	r3, r2
 8002d16:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d18:	4b1f      	ldr	r3, [pc, #124]	; (8002d98 <HAL_RCC_OscConfig+0x4c4>)
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6a19      	ldr	r1, [r3, #32]
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d28:	430b      	orrs	r3, r1
 8002d2a:	491b      	ldr	r1, [pc, #108]	; (8002d98 <HAL_RCC_OscConfig+0x4c4>)
 8002d2c:	4313      	orrs	r3, r2
 8002d2e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d30:	4b1b      	ldr	r3, [pc, #108]	; (8002da0 <HAL_RCC_OscConfig+0x4cc>)
 8002d32:	2201      	movs	r2, #1
 8002d34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d36:	f7fd fdf7 	bl	8000928 <HAL_GetTick>
 8002d3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002d3c:	e008      	b.n	8002d50 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d3e:	f7fd fdf3 	bl	8000928 <HAL_GetTick>
 8002d42:	4602      	mov	r2, r0
 8002d44:	693b      	ldr	r3, [r7, #16]
 8002d46:	1ad3      	subs	r3, r2, r3
 8002d48:	2b02      	cmp	r3, #2
 8002d4a:	d901      	bls.n	8002d50 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002d4c:	2303      	movs	r3, #3
 8002d4e:	e03d      	b.n	8002dcc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002d50:	4b11      	ldr	r3, [pc, #68]	; (8002d98 <HAL_RCC_OscConfig+0x4c4>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d0f0      	beq.n	8002d3e <HAL_RCC_OscConfig+0x46a>
 8002d5c:	e035      	b.n	8002dca <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d5e:	4b10      	ldr	r3, [pc, #64]	; (8002da0 <HAL_RCC_OscConfig+0x4cc>)
 8002d60:	2200      	movs	r2, #0
 8002d62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d64:	f7fd fde0 	bl	8000928 <HAL_GetTick>
 8002d68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d6a:	e008      	b.n	8002d7e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d6c:	f7fd fddc 	bl	8000928 <HAL_GetTick>
 8002d70:	4602      	mov	r2, r0
 8002d72:	693b      	ldr	r3, [r7, #16]
 8002d74:	1ad3      	subs	r3, r2, r3
 8002d76:	2b02      	cmp	r3, #2
 8002d78:	d901      	bls.n	8002d7e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002d7a:	2303      	movs	r3, #3
 8002d7c:	e026      	b.n	8002dcc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d7e:	4b06      	ldr	r3, [pc, #24]	; (8002d98 <HAL_RCC_OscConfig+0x4c4>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d1f0      	bne.n	8002d6c <HAL_RCC_OscConfig+0x498>
 8002d8a:	e01e      	b.n	8002dca <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	69db      	ldr	r3, [r3, #28]
 8002d90:	2b01      	cmp	r3, #1
 8002d92:	d107      	bne.n	8002da4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002d94:	2301      	movs	r3, #1
 8002d96:	e019      	b.n	8002dcc <HAL_RCC_OscConfig+0x4f8>
 8002d98:	40021000 	.word	0x40021000
 8002d9c:	40007000 	.word	0x40007000
 8002da0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002da4:	4b0b      	ldr	r3, [pc, #44]	; (8002dd4 <HAL_RCC_OscConfig+0x500>)
 8002da6:	685b      	ldr	r3, [r3, #4]
 8002da8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6a1b      	ldr	r3, [r3, #32]
 8002db4:	429a      	cmp	r2, r3
 8002db6:	d106      	bne.n	8002dc6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002dc2:	429a      	cmp	r2, r3
 8002dc4:	d001      	beq.n	8002dca <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	e000      	b.n	8002dcc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002dca:	2300      	movs	r3, #0
}
 8002dcc:	4618      	mov	r0, r3
 8002dce:	3718      	adds	r7, #24
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	bd80      	pop	{r7, pc}
 8002dd4:	40021000 	.word	0x40021000

08002dd8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b084      	sub	sp, #16
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
 8002de0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d101      	bne.n	8002dec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002de8:	2301      	movs	r3, #1
 8002dea:	e0d0      	b.n	8002f8e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002dec:	4b6a      	ldr	r3, [pc, #424]	; (8002f98 <HAL_RCC_ClockConfig+0x1c0>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f003 0307 	and.w	r3, r3, #7
 8002df4:	683a      	ldr	r2, [r7, #0]
 8002df6:	429a      	cmp	r2, r3
 8002df8:	d910      	bls.n	8002e1c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dfa:	4b67      	ldr	r3, [pc, #412]	; (8002f98 <HAL_RCC_ClockConfig+0x1c0>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f023 0207 	bic.w	r2, r3, #7
 8002e02:	4965      	ldr	r1, [pc, #404]	; (8002f98 <HAL_RCC_ClockConfig+0x1c0>)
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	4313      	orrs	r3, r2
 8002e08:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e0a:	4b63      	ldr	r3, [pc, #396]	; (8002f98 <HAL_RCC_ClockConfig+0x1c0>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f003 0307 	and.w	r3, r3, #7
 8002e12:	683a      	ldr	r2, [r7, #0]
 8002e14:	429a      	cmp	r2, r3
 8002e16:	d001      	beq.n	8002e1c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002e18:	2301      	movs	r3, #1
 8002e1a:	e0b8      	b.n	8002f8e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f003 0302 	and.w	r3, r3, #2
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d020      	beq.n	8002e6a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f003 0304 	and.w	r3, r3, #4
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d005      	beq.n	8002e40 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002e34:	4b59      	ldr	r3, [pc, #356]	; (8002f9c <HAL_RCC_ClockConfig+0x1c4>)
 8002e36:	685b      	ldr	r3, [r3, #4]
 8002e38:	4a58      	ldr	r2, [pc, #352]	; (8002f9c <HAL_RCC_ClockConfig+0x1c4>)
 8002e3a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002e3e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f003 0308 	and.w	r3, r3, #8
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d005      	beq.n	8002e58 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002e4c:	4b53      	ldr	r3, [pc, #332]	; (8002f9c <HAL_RCC_ClockConfig+0x1c4>)
 8002e4e:	685b      	ldr	r3, [r3, #4]
 8002e50:	4a52      	ldr	r2, [pc, #328]	; (8002f9c <HAL_RCC_ClockConfig+0x1c4>)
 8002e52:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002e56:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e58:	4b50      	ldr	r3, [pc, #320]	; (8002f9c <HAL_RCC_ClockConfig+0x1c4>)
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	689b      	ldr	r3, [r3, #8]
 8002e64:	494d      	ldr	r1, [pc, #308]	; (8002f9c <HAL_RCC_ClockConfig+0x1c4>)
 8002e66:	4313      	orrs	r3, r2
 8002e68:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f003 0301 	and.w	r3, r3, #1
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d040      	beq.n	8002ef8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	685b      	ldr	r3, [r3, #4]
 8002e7a:	2b01      	cmp	r3, #1
 8002e7c:	d107      	bne.n	8002e8e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e7e:	4b47      	ldr	r3, [pc, #284]	; (8002f9c <HAL_RCC_ClockConfig+0x1c4>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d115      	bne.n	8002eb6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	e07f      	b.n	8002f8e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	685b      	ldr	r3, [r3, #4]
 8002e92:	2b02      	cmp	r3, #2
 8002e94:	d107      	bne.n	8002ea6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e96:	4b41      	ldr	r3, [pc, #260]	; (8002f9c <HAL_RCC_ClockConfig+0x1c4>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d109      	bne.n	8002eb6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	e073      	b.n	8002f8e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ea6:	4b3d      	ldr	r3, [pc, #244]	; (8002f9c <HAL_RCC_ClockConfig+0x1c4>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f003 0302 	and.w	r3, r3, #2
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d101      	bne.n	8002eb6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	e06b      	b.n	8002f8e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002eb6:	4b39      	ldr	r3, [pc, #228]	; (8002f9c <HAL_RCC_ClockConfig+0x1c4>)
 8002eb8:	685b      	ldr	r3, [r3, #4]
 8002eba:	f023 0203 	bic.w	r2, r3, #3
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	4936      	ldr	r1, [pc, #216]	; (8002f9c <HAL_RCC_ClockConfig+0x1c4>)
 8002ec4:	4313      	orrs	r3, r2
 8002ec6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ec8:	f7fd fd2e 	bl	8000928 <HAL_GetTick>
 8002ecc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ece:	e00a      	b.n	8002ee6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ed0:	f7fd fd2a 	bl	8000928 <HAL_GetTick>
 8002ed4:	4602      	mov	r2, r0
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	1ad3      	subs	r3, r2, r3
 8002eda:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d901      	bls.n	8002ee6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002ee2:	2303      	movs	r3, #3
 8002ee4:	e053      	b.n	8002f8e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ee6:	4b2d      	ldr	r3, [pc, #180]	; (8002f9c <HAL_RCC_ClockConfig+0x1c4>)
 8002ee8:	685b      	ldr	r3, [r3, #4]
 8002eea:	f003 020c 	and.w	r2, r3, #12
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	685b      	ldr	r3, [r3, #4]
 8002ef2:	009b      	lsls	r3, r3, #2
 8002ef4:	429a      	cmp	r2, r3
 8002ef6:	d1eb      	bne.n	8002ed0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002ef8:	4b27      	ldr	r3, [pc, #156]	; (8002f98 <HAL_RCC_ClockConfig+0x1c0>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f003 0307 	and.w	r3, r3, #7
 8002f00:	683a      	ldr	r2, [r7, #0]
 8002f02:	429a      	cmp	r2, r3
 8002f04:	d210      	bcs.n	8002f28 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f06:	4b24      	ldr	r3, [pc, #144]	; (8002f98 <HAL_RCC_ClockConfig+0x1c0>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f023 0207 	bic.w	r2, r3, #7
 8002f0e:	4922      	ldr	r1, [pc, #136]	; (8002f98 <HAL_RCC_ClockConfig+0x1c0>)
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	4313      	orrs	r3, r2
 8002f14:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f16:	4b20      	ldr	r3, [pc, #128]	; (8002f98 <HAL_RCC_ClockConfig+0x1c0>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f003 0307 	and.w	r3, r3, #7
 8002f1e:	683a      	ldr	r2, [r7, #0]
 8002f20:	429a      	cmp	r2, r3
 8002f22:	d001      	beq.n	8002f28 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002f24:	2301      	movs	r3, #1
 8002f26:	e032      	b.n	8002f8e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f003 0304 	and.w	r3, r3, #4
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d008      	beq.n	8002f46 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f34:	4b19      	ldr	r3, [pc, #100]	; (8002f9c <HAL_RCC_ClockConfig+0x1c4>)
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	68db      	ldr	r3, [r3, #12]
 8002f40:	4916      	ldr	r1, [pc, #88]	; (8002f9c <HAL_RCC_ClockConfig+0x1c4>)
 8002f42:	4313      	orrs	r3, r2
 8002f44:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f003 0308 	and.w	r3, r3, #8
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d009      	beq.n	8002f66 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002f52:	4b12      	ldr	r3, [pc, #72]	; (8002f9c <HAL_RCC_ClockConfig+0x1c4>)
 8002f54:	685b      	ldr	r3, [r3, #4]
 8002f56:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	691b      	ldr	r3, [r3, #16]
 8002f5e:	00db      	lsls	r3, r3, #3
 8002f60:	490e      	ldr	r1, [pc, #56]	; (8002f9c <HAL_RCC_ClockConfig+0x1c4>)
 8002f62:	4313      	orrs	r3, r2
 8002f64:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002f66:	f000 f821 	bl	8002fac <HAL_RCC_GetSysClockFreq>
 8002f6a:	4602      	mov	r2, r0
 8002f6c:	4b0b      	ldr	r3, [pc, #44]	; (8002f9c <HAL_RCC_ClockConfig+0x1c4>)
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	091b      	lsrs	r3, r3, #4
 8002f72:	f003 030f 	and.w	r3, r3, #15
 8002f76:	490a      	ldr	r1, [pc, #40]	; (8002fa0 <HAL_RCC_ClockConfig+0x1c8>)
 8002f78:	5ccb      	ldrb	r3, [r1, r3]
 8002f7a:	fa22 f303 	lsr.w	r3, r2, r3
 8002f7e:	4a09      	ldr	r2, [pc, #36]	; (8002fa4 <HAL_RCC_ClockConfig+0x1cc>)
 8002f80:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002f82:	4b09      	ldr	r3, [pc, #36]	; (8002fa8 <HAL_RCC_ClockConfig+0x1d0>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4618      	mov	r0, r3
 8002f88:	f7fd fc8c 	bl	80008a4 <HAL_InitTick>

  return HAL_OK;
 8002f8c:	2300      	movs	r3, #0
}
 8002f8e:	4618      	mov	r0, r3
 8002f90:	3710      	adds	r7, #16
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bd80      	pop	{r7, pc}
 8002f96:	bf00      	nop
 8002f98:	40022000 	.word	0x40022000
 8002f9c:	40021000 	.word	0x40021000
 8002fa0:	08008bd0 	.word	0x08008bd0
 8002fa4:	20000000 	.word	0x20000000
 8002fa8:	20000004 	.word	0x20000004

08002fac <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002fac:	b490      	push	{r4, r7}
 8002fae:	b08a      	sub	sp, #40	; 0x28
 8002fb0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002fb2:	4b29      	ldr	r3, [pc, #164]	; (8003058 <HAL_RCC_GetSysClockFreq+0xac>)
 8002fb4:	1d3c      	adds	r4, r7, #4
 8002fb6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002fb8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002fbc:	f240 2301 	movw	r3, #513	; 0x201
 8002fc0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	61fb      	str	r3, [r7, #28]
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	61bb      	str	r3, [r7, #24]
 8002fca:	2300      	movs	r3, #0
 8002fcc:	627b      	str	r3, [r7, #36]	; 0x24
 8002fce:	2300      	movs	r3, #0
 8002fd0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002fd6:	4b21      	ldr	r3, [pc, #132]	; (800305c <HAL_RCC_GetSysClockFreq+0xb0>)
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002fdc:	69fb      	ldr	r3, [r7, #28]
 8002fde:	f003 030c 	and.w	r3, r3, #12
 8002fe2:	2b04      	cmp	r3, #4
 8002fe4:	d002      	beq.n	8002fec <HAL_RCC_GetSysClockFreq+0x40>
 8002fe6:	2b08      	cmp	r3, #8
 8002fe8:	d003      	beq.n	8002ff2 <HAL_RCC_GetSysClockFreq+0x46>
 8002fea:	e02b      	b.n	8003044 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002fec:	4b1c      	ldr	r3, [pc, #112]	; (8003060 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002fee:	623b      	str	r3, [r7, #32]
      break;
 8002ff0:	e02b      	b.n	800304a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002ff2:	69fb      	ldr	r3, [r7, #28]
 8002ff4:	0c9b      	lsrs	r3, r3, #18
 8002ff6:	f003 030f 	and.w	r3, r3, #15
 8002ffa:	3328      	adds	r3, #40	; 0x28
 8002ffc:	443b      	add	r3, r7
 8002ffe:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003002:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003004:	69fb      	ldr	r3, [r7, #28]
 8003006:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800300a:	2b00      	cmp	r3, #0
 800300c:	d012      	beq.n	8003034 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800300e:	4b13      	ldr	r3, [pc, #76]	; (800305c <HAL_RCC_GetSysClockFreq+0xb0>)
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	0c5b      	lsrs	r3, r3, #17
 8003014:	f003 0301 	and.w	r3, r3, #1
 8003018:	3328      	adds	r3, #40	; 0x28
 800301a:	443b      	add	r3, r7
 800301c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003020:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003022:	697b      	ldr	r3, [r7, #20]
 8003024:	4a0e      	ldr	r2, [pc, #56]	; (8003060 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003026:	fb03 f202 	mul.w	r2, r3, r2
 800302a:	69bb      	ldr	r3, [r7, #24]
 800302c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003030:	627b      	str	r3, [r7, #36]	; 0x24
 8003032:	e004      	b.n	800303e <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003034:	697b      	ldr	r3, [r7, #20]
 8003036:	4a0b      	ldr	r2, [pc, #44]	; (8003064 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003038:	fb02 f303 	mul.w	r3, r2, r3
 800303c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800303e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003040:	623b      	str	r3, [r7, #32]
      break;
 8003042:	e002      	b.n	800304a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003044:	4b08      	ldr	r3, [pc, #32]	; (8003068 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003046:	623b      	str	r3, [r7, #32]
      break;
 8003048:	bf00      	nop
    }
  }
  return sysclockfreq;
 800304a:	6a3b      	ldr	r3, [r7, #32]
}
 800304c:	4618      	mov	r0, r3
 800304e:	3728      	adds	r7, #40	; 0x28
 8003050:	46bd      	mov	sp, r7
 8003052:	bc90      	pop	{r4, r7}
 8003054:	4770      	bx	lr
 8003056:	bf00      	nop
 8003058:	08008b78 	.word	0x08008b78
 800305c:	40021000 	.word	0x40021000
 8003060:	00f42400 	.word	0x00f42400
 8003064:	003d0900 	.word	0x003d0900
 8003068:	007a1200 	.word	0x007a1200

0800306c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800306c:	b480      	push	{r7}
 800306e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003070:	4b02      	ldr	r3, [pc, #8]	; (800307c <HAL_RCC_GetHCLKFreq+0x10>)
 8003072:	681b      	ldr	r3, [r3, #0]
}
 8003074:	4618      	mov	r0, r3
 8003076:	46bd      	mov	sp, r7
 8003078:	bc80      	pop	{r7}
 800307a:	4770      	bx	lr
 800307c:	20000000 	.word	0x20000000

08003080 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003084:	f7ff fff2 	bl	800306c <HAL_RCC_GetHCLKFreq>
 8003088:	4602      	mov	r2, r0
 800308a:	4b05      	ldr	r3, [pc, #20]	; (80030a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800308c:	685b      	ldr	r3, [r3, #4]
 800308e:	0a1b      	lsrs	r3, r3, #8
 8003090:	f003 0307 	and.w	r3, r3, #7
 8003094:	4903      	ldr	r1, [pc, #12]	; (80030a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003096:	5ccb      	ldrb	r3, [r1, r3]
 8003098:	fa22 f303 	lsr.w	r3, r2, r3
}
 800309c:	4618      	mov	r0, r3
 800309e:	bd80      	pop	{r7, pc}
 80030a0:	40021000 	.word	0x40021000
 80030a4:	08008be0 	.word	0x08008be0

080030a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80030ac:	f7ff ffde 	bl	800306c <HAL_RCC_GetHCLKFreq>
 80030b0:	4602      	mov	r2, r0
 80030b2:	4b05      	ldr	r3, [pc, #20]	; (80030c8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80030b4:	685b      	ldr	r3, [r3, #4]
 80030b6:	0adb      	lsrs	r3, r3, #11
 80030b8:	f003 0307 	and.w	r3, r3, #7
 80030bc:	4903      	ldr	r1, [pc, #12]	; (80030cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80030be:	5ccb      	ldrb	r3, [r1, r3]
 80030c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030c4:	4618      	mov	r0, r3
 80030c6:	bd80      	pop	{r7, pc}
 80030c8:	40021000 	.word	0x40021000
 80030cc:	08008be0 	.word	0x08008be0

080030d0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80030d0:	b480      	push	{r7}
 80030d2:	b085      	sub	sp, #20
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80030d8:	4b0a      	ldr	r3, [pc, #40]	; (8003104 <RCC_Delay+0x34>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4a0a      	ldr	r2, [pc, #40]	; (8003108 <RCC_Delay+0x38>)
 80030de:	fba2 2303 	umull	r2, r3, r2, r3
 80030e2:	0a5b      	lsrs	r3, r3, #9
 80030e4:	687a      	ldr	r2, [r7, #4]
 80030e6:	fb02 f303 	mul.w	r3, r2, r3
 80030ea:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80030ec:	bf00      	nop
  }
  while (Delay --);
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	1e5a      	subs	r2, r3, #1
 80030f2:	60fa      	str	r2, [r7, #12]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d1f9      	bne.n	80030ec <RCC_Delay+0x1c>
}
 80030f8:	bf00      	nop
 80030fa:	bf00      	nop
 80030fc:	3714      	adds	r7, #20
 80030fe:	46bd      	mov	sp, r7
 8003100:	bc80      	pop	{r7}
 8003102:	4770      	bx	lr
 8003104:	20000000 	.word	0x20000000
 8003108:	10624dd3 	.word	0x10624dd3

0800310c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b086      	sub	sp, #24
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003114:	2300      	movs	r3, #0
 8003116:	613b      	str	r3, [r7, #16]
 8003118:	2300      	movs	r3, #0
 800311a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f003 0301 	and.w	r3, r3, #1
 8003124:	2b00      	cmp	r3, #0
 8003126:	d07d      	beq.n	8003224 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003128:	2300      	movs	r3, #0
 800312a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800312c:	4b4f      	ldr	r3, [pc, #316]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800312e:	69db      	ldr	r3, [r3, #28]
 8003130:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003134:	2b00      	cmp	r3, #0
 8003136:	d10d      	bne.n	8003154 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003138:	4b4c      	ldr	r3, [pc, #304]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800313a:	69db      	ldr	r3, [r3, #28]
 800313c:	4a4b      	ldr	r2, [pc, #300]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800313e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003142:	61d3      	str	r3, [r2, #28]
 8003144:	4b49      	ldr	r3, [pc, #292]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003146:	69db      	ldr	r3, [r3, #28]
 8003148:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800314c:	60bb      	str	r3, [r7, #8]
 800314e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003150:	2301      	movs	r3, #1
 8003152:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003154:	4b46      	ldr	r3, [pc, #280]	; (8003270 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800315c:	2b00      	cmp	r3, #0
 800315e:	d118      	bne.n	8003192 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003160:	4b43      	ldr	r3, [pc, #268]	; (8003270 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4a42      	ldr	r2, [pc, #264]	; (8003270 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003166:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800316a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800316c:	f7fd fbdc 	bl	8000928 <HAL_GetTick>
 8003170:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003172:	e008      	b.n	8003186 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003174:	f7fd fbd8 	bl	8000928 <HAL_GetTick>
 8003178:	4602      	mov	r2, r0
 800317a:	693b      	ldr	r3, [r7, #16]
 800317c:	1ad3      	subs	r3, r2, r3
 800317e:	2b64      	cmp	r3, #100	; 0x64
 8003180:	d901      	bls.n	8003186 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003182:	2303      	movs	r3, #3
 8003184:	e06d      	b.n	8003262 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003186:	4b3a      	ldr	r3, [pc, #232]	; (8003270 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800318e:	2b00      	cmp	r3, #0
 8003190:	d0f0      	beq.n	8003174 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003192:	4b36      	ldr	r3, [pc, #216]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003194:	6a1b      	ldr	r3, [r3, #32]
 8003196:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800319a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d02e      	beq.n	8003200 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031aa:	68fa      	ldr	r2, [r7, #12]
 80031ac:	429a      	cmp	r2, r3
 80031ae:	d027      	beq.n	8003200 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80031b0:	4b2e      	ldr	r3, [pc, #184]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031b2:	6a1b      	ldr	r3, [r3, #32]
 80031b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031b8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80031ba:	4b2e      	ldr	r3, [pc, #184]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80031bc:	2201      	movs	r2, #1
 80031be:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80031c0:	4b2c      	ldr	r3, [pc, #176]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80031c2:	2200      	movs	r2, #0
 80031c4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80031c6:	4a29      	ldr	r2, [pc, #164]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	f003 0301 	and.w	r3, r3, #1
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d014      	beq.n	8003200 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031d6:	f7fd fba7 	bl	8000928 <HAL_GetTick>
 80031da:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031dc:	e00a      	b.n	80031f4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031de:	f7fd fba3 	bl	8000928 <HAL_GetTick>
 80031e2:	4602      	mov	r2, r0
 80031e4:	693b      	ldr	r3, [r7, #16]
 80031e6:	1ad3      	subs	r3, r2, r3
 80031e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d901      	bls.n	80031f4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80031f0:	2303      	movs	r3, #3
 80031f2:	e036      	b.n	8003262 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031f4:	4b1d      	ldr	r3, [pc, #116]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031f6:	6a1b      	ldr	r3, [r3, #32]
 80031f8:	f003 0302 	and.w	r3, r3, #2
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d0ee      	beq.n	80031de <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003200:	4b1a      	ldr	r3, [pc, #104]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003202:	6a1b      	ldr	r3, [r3, #32]
 8003204:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	4917      	ldr	r1, [pc, #92]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800320e:	4313      	orrs	r3, r2
 8003210:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003212:	7dfb      	ldrb	r3, [r7, #23]
 8003214:	2b01      	cmp	r3, #1
 8003216:	d105      	bne.n	8003224 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003218:	4b14      	ldr	r3, [pc, #80]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800321a:	69db      	ldr	r3, [r3, #28]
 800321c:	4a13      	ldr	r2, [pc, #76]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800321e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003222:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f003 0302 	and.w	r3, r3, #2
 800322c:	2b00      	cmp	r3, #0
 800322e:	d008      	beq.n	8003242 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003230:	4b0e      	ldr	r3, [pc, #56]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	689b      	ldr	r3, [r3, #8]
 800323c:	490b      	ldr	r1, [pc, #44]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800323e:	4313      	orrs	r3, r2
 8003240:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f003 0310 	and.w	r3, r3, #16
 800324a:	2b00      	cmp	r3, #0
 800324c:	d008      	beq.n	8003260 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800324e:	4b07      	ldr	r3, [pc, #28]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	68db      	ldr	r3, [r3, #12]
 800325a:	4904      	ldr	r1, [pc, #16]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800325c:	4313      	orrs	r3, r2
 800325e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003260:	2300      	movs	r3, #0
}
 8003262:	4618      	mov	r0, r3
 8003264:	3718      	adds	r7, #24
 8003266:	46bd      	mov	sp, r7
 8003268:	bd80      	pop	{r7, pc}
 800326a:	bf00      	nop
 800326c:	40021000 	.word	0x40021000
 8003270:	40007000 	.word	0x40007000
 8003274:	42420440 	.word	0x42420440

08003278 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b082      	sub	sp, #8
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2b00      	cmp	r3, #0
 8003284:	d101      	bne.n	800328a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003286:	2301      	movs	r3, #1
 8003288:	e076      	b.n	8003378 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800328e:	2b00      	cmp	r3, #0
 8003290:	d108      	bne.n	80032a4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800329a:	d009      	beq.n	80032b0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2200      	movs	r2, #0
 80032a0:	61da      	str	r2, [r3, #28]
 80032a2:	e005      	b.n	80032b0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2200      	movs	r2, #0
 80032a8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2200      	movs	r2, #0
 80032ae:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2200      	movs	r2, #0
 80032b4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80032bc:	b2db      	uxtb	r3, r3
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d106      	bne.n	80032d0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	2200      	movs	r2, #0
 80032c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80032ca:	6878      	ldr	r0, [r7, #4]
 80032cc:	f7fd f9a4 	bl	8000618 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2202      	movs	r2, #2
 80032d4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	681a      	ldr	r2, [r3, #0]
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80032e6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	689b      	ldr	r3, [r3, #8]
 80032f4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80032f8:	431a      	orrs	r2, r3
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	68db      	ldr	r3, [r3, #12]
 80032fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003302:	431a      	orrs	r2, r3
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	691b      	ldr	r3, [r3, #16]
 8003308:	f003 0302 	and.w	r3, r3, #2
 800330c:	431a      	orrs	r2, r3
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	695b      	ldr	r3, [r3, #20]
 8003312:	f003 0301 	and.w	r3, r3, #1
 8003316:	431a      	orrs	r2, r3
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	699b      	ldr	r3, [r3, #24]
 800331c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003320:	431a      	orrs	r2, r3
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	69db      	ldr	r3, [r3, #28]
 8003326:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800332a:	431a      	orrs	r2, r3
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6a1b      	ldr	r3, [r3, #32]
 8003330:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003334:	ea42 0103 	orr.w	r1, r2, r3
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800333c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	430a      	orrs	r2, r1
 8003346:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	699b      	ldr	r3, [r3, #24]
 800334c:	0c1a      	lsrs	r2, r3, #16
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f002 0204 	and.w	r2, r2, #4
 8003356:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	69da      	ldr	r2, [r3, #28]
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003366:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2200      	movs	r2, #0
 800336c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2201      	movs	r2, #1
 8003372:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003376:	2300      	movs	r3, #0
}
 8003378:	4618      	mov	r0, r3
 800337a:	3708      	adds	r7, #8
 800337c:	46bd      	mov	sp, r7
 800337e:	bd80      	pop	{r7, pc}

08003380 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b082      	sub	sp, #8
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d101      	bne.n	8003392 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800338e:	2301      	movs	r3, #1
 8003390:	e03f      	b.n	8003412 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003398:	b2db      	uxtb	r3, r3
 800339a:	2b00      	cmp	r3, #0
 800339c:	d106      	bne.n	80033ac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2200      	movs	r2, #0
 80033a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80033a6:	6878      	ldr	r0, [r7, #4]
 80033a8:	f7fd f980 	bl	80006ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2224      	movs	r2, #36	; 0x24
 80033b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	68da      	ldr	r2, [r3, #12]
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80033c2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80033c4:	6878      	ldr	r0, [r7, #4]
 80033c6:	f000 f829 	bl	800341c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	691a      	ldr	r2, [r3, #16]
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80033d8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	695a      	ldr	r2, [r3, #20]
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80033e8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	68da      	ldr	r2, [r3, #12]
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80033f8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2200      	movs	r2, #0
 80033fe:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2220      	movs	r2, #32
 8003404:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2220      	movs	r2, #32
 800340c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003410:	2300      	movs	r3, #0
}
 8003412:	4618      	mov	r0, r3
 8003414:	3708      	adds	r7, #8
 8003416:	46bd      	mov	sp, r7
 8003418:	bd80      	pop	{r7, pc}
	...

0800341c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b084      	sub	sp, #16
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	691b      	ldr	r3, [r3, #16]
 800342a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	68da      	ldr	r2, [r3, #12]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	430a      	orrs	r2, r1
 8003438:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	689a      	ldr	r2, [r3, #8]
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	691b      	ldr	r3, [r3, #16]
 8003442:	431a      	orrs	r2, r3
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	695b      	ldr	r3, [r3, #20]
 8003448:	4313      	orrs	r3, r2
 800344a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	68db      	ldr	r3, [r3, #12]
 8003452:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003456:	f023 030c 	bic.w	r3, r3, #12
 800345a:	687a      	ldr	r2, [r7, #4]
 800345c:	6812      	ldr	r2, [r2, #0]
 800345e:	68b9      	ldr	r1, [r7, #8]
 8003460:	430b      	orrs	r3, r1
 8003462:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	695b      	ldr	r3, [r3, #20]
 800346a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	699a      	ldr	r2, [r3, #24]
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	430a      	orrs	r2, r1
 8003478:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	4a2c      	ldr	r2, [pc, #176]	; (8003530 <UART_SetConfig+0x114>)
 8003480:	4293      	cmp	r3, r2
 8003482:	d103      	bne.n	800348c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003484:	f7ff fe10 	bl	80030a8 <HAL_RCC_GetPCLK2Freq>
 8003488:	60f8      	str	r0, [r7, #12]
 800348a:	e002      	b.n	8003492 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800348c:	f7ff fdf8 	bl	8003080 <HAL_RCC_GetPCLK1Freq>
 8003490:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003492:	68fa      	ldr	r2, [r7, #12]
 8003494:	4613      	mov	r3, r2
 8003496:	009b      	lsls	r3, r3, #2
 8003498:	4413      	add	r3, r2
 800349a:	009a      	lsls	r2, r3, #2
 800349c:	441a      	add	r2, r3
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	685b      	ldr	r3, [r3, #4]
 80034a2:	009b      	lsls	r3, r3, #2
 80034a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80034a8:	4a22      	ldr	r2, [pc, #136]	; (8003534 <UART_SetConfig+0x118>)
 80034aa:	fba2 2303 	umull	r2, r3, r2, r3
 80034ae:	095b      	lsrs	r3, r3, #5
 80034b0:	0119      	lsls	r1, r3, #4
 80034b2:	68fa      	ldr	r2, [r7, #12]
 80034b4:	4613      	mov	r3, r2
 80034b6:	009b      	lsls	r3, r3, #2
 80034b8:	4413      	add	r3, r2
 80034ba:	009a      	lsls	r2, r3, #2
 80034bc:	441a      	add	r2, r3
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	685b      	ldr	r3, [r3, #4]
 80034c2:	009b      	lsls	r3, r3, #2
 80034c4:	fbb2 f2f3 	udiv	r2, r2, r3
 80034c8:	4b1a      	ldr	r3, [pc, #104]	; (8003534 <UART_SetConfig+0x118>)
 80034ca:	fba3 0302 	umull	r0, r3, r3, r2
 80034ce:	095b      	lsrs	r3, r3, #5
 80034d0:	2064      	movs	r0, #100	; 0x64
 80034d2:	fb00 f303 	mul.w	r3, r0, r3
 80034d6:	1ad3      	subs	r3, r2, r3
 80034d8:	011b      	lsls	r3, r3, #4
 80034da:	3332      	adds	r3, #50	; 0x32
 80034dc:	4a15      	ldr	r2, [pc, #84]	; (8003534 <UART_SetConfig+0x118>)
 80034de:	fba2 2303 	umull	r2, r3, r2, r3
 80034e2:	095b      	lsrs	r3, r3, #5
 80034e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80034e8:	4419      	add	r1, r3
 80034ea:	68fa      	ldr	r2, [r7, #12]
 80034ec:	4613      	mov	r3, r2
 80034ee:	009b      	lsls	r3, r3, #2
 80034f0:	4413      	add	r3, r2
 80034f2:	009a      	lsls	r2, r3, #2
 80034f4:	441a      	add	r2, r3
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	685b      	ldr	r3, [r3, #4]
 80034fa:	009b      	lsls	r3, r3, #2
 80034fc:	fbb2 f2f3 	udiv	r2, r2, r3
 8003500:	4b0c      	ldr	r3, [pc, #48]	; (8003534 <UART_SetConfig+0x118>)
 8003502:	fba3 0302 	umull	r0, r3, r3, r2
 8003506:	095b      	lsrs	r3, r3, #5
 8003508:	2064      	movs	r0, #100	; 0x64
 800350a:	fb00 f303 	mul.w	r3, r0, r3
 800350e:	1ad3      	subs	r3, r2, r3
 8003510:	011b      	lsls	r3, r3, #4
 8003512:	3332      	adds	r3, #50	; 0x32
 8003514:	4a07      	ldr	r2, [pc, #28]	; (8003534 <UART_SetConfig+0x118>)
 8003516:	fba2 2303 	umull	r2, r3, r2, r3
 800351a:	095b      	lsrs	r3, r3, #5
 800351c:	f003 020f 	and.w	r2, r3, #15
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	440a      	add	r2, r1
 8003526:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003528:	bf00      	nop
 800352a:	3710      	adds	r7, #16
 800352c:	46bd      	mov	sp, r7
 800352e:	bd80      	pop	{r7, pc}
 8003530:	40013800 	.word	0x40013800
 8003534:	51eb851f 	.word	0x51eb851f

08003538 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003538:	b084      	sub	sp, #16
 800353a:	b480      	push	{r7}
 800353c:	b083      	sub	sp, #12
 800353e:	af00      	add	r7, sp, #0
 8003540:	6078      	str	r0, [r7, #4]
 8003542:	f107 0014 	add.w	r0, r7, #20
 8003546:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800354a:	2300      	movs	r3, #0
}
 800354c:	4618      	mov	r0, r3
 800354e:	370c      	adds	r7, #12
 8003550:	46bd      	mov	sp, r7
 8003552:	bc80      	pop	{r7}
 8003554:	b004      	add	sp, #16
 8003556:	4770      	bx	lr

08003558 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8003558:	b480      	push	{r7}
 800355a:	b085      	sub	sp, #20
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2200      	movs	r2, #0
 8003564:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003568:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800356c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	b29a      	uxth	r2, r3
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003578:	2300      	movs	r3, #0
}
 800357a:	4618      	mov	r0, r3
 800357c:	3714      	adds	r7, #20
 800357e:	46bd      	mov	sp, r7
 8003580:	bc80      	pop	{r7}
 8003582:	4770      	bx	lr

08003584 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8003584:	b480      	push	{r7}
 8003586:	b085      	sub	sp, #20
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800358c:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8003590:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003598:	b29a      	uxth	r2, r3
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	b29b      	uxth	r3, r3
 800359e:	43db      	mvns	r3, r3
 80035a0:	b29b      	uxth	r3, r3
 80035a2:	4013      	ands	r3, r2
 80035a4:	b29a      	uxth	r2, r3
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80035ac:	2300      	movs	r3, #0
}
 80035ae:	4618      	mov	r0, r3
 80035b0:	3714      	adds	r7, #20
 80035b2:	46bd      	mov	sp, r7
 80035b4:	bc80      	pop	{r7}
 80035b6:	4770      	bx	lr

080035b8 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 80035b8:	b480      	push	{r7}
 80035ba:	b083      	sub	sp, #12
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
 80035c0:	460b      	mov	r3, r1
 80035c2:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80035c4:	2300      	movs	r3, #0
}
 80035c6:	4618      	mov	r0, r3
 80035c8:	370c      	adds	r7, #12
 80035ca:	46bd      	mov	sp, r7
 80035cc:	bc80      	pop	{r7}
 80035ce:	4770      	bx	lr

080035d0 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80035d0:	b084      	sub	sp, #16
 80035d2:	b480      	push	{r7}
 80035d4:	b083      	sub	sp, #12
 80035d6:	af00      	add	r7, sp, #0
 80035d8:	6078      	str	r0, [r7, #4]
 80035da:	f107 0014 	add.w	r0, r7, #20
 80035de:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2201      	movs	r2, #1
 80035e6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2200      	movs	r2, #0
 80035ee:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	2200      	movs	r2, #0
 80035f6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2200      	movs	r2, #0
 80035fe:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8003602:	2300      	movs	r3, #0
}
 8003604:	4618      	mov	r0, r3
 8003606:	370c      	adds	r7, #12
 8003608:	46bd      	mov	sp, r7
 800360a:	bc80      	pop	{r7}
 800360c:	b004      	add	sp, #16
 800360e:	4770      	bx	lr

08003610 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003610:	b480      	push	{r7}
 8003612:	b09b      	sub	sp, #108	; 0x6c
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
 8003618:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800361a:	2300      	movs	r3, #0
 800361c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8003620:	687a      	ldr	r2, [r7, #4]
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	781b      	ldrb	r3, [r3, #0]
 8003626:	009b      	lsls	r3, r3, #2
 8003628:	4413      	add	r3, r2
 800362a:	881b      	ldrh	r3, [r3, #0]
 800362c:	b29b      	uxth	r3, r3
 800362e:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8003632:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003636:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	78db      	ldrb	r3, [r3, #3]
 800363e:	2b03      	cmp	r3, #3
 8003640:	d81f      	bhi.n	8003682 <USB_ActivateEndpoint+0x72>
 8003642:	a201      	add	r2, pc, #4	; (adr r2, 8003648 <USB_ActivateEndpoint+0x38>)
 8003644:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003648:	08003659 	.word	0x08003659
 800364c:	08003675 	.word	0x08003675
 8003650:	0800368b 	.word	0x0800368b
 8003654:	08003667 	.word	0x08003667
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8003658:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800365c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003660:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8003664:	e012      	b.n	800368c <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8003666:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800366a:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800366e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8003672:	e00b      	b.n	800368c <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8003674:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003678:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800367c:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8003680:	e004      	b.n	800368c <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8003682:	2301      	movs	r3, #1
 8003684:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8003688:	e000      	b.n	800368c <USB_ActivateEndpoint+0x7c>
      break;
 800368a:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800368c:	687a      	ldr	r2, [r7, #4]
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	781b      	ldrb	r3, [r3, #0]
 8003692:	009b      	lsls	r3, r3, #2
 8003694:	441a      	add	r2, r3
 8003696:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800369a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800369e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80036a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80036a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80036aa:	b29b      	uxth	r3, r3
 80036ac:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80036ae:	687a      	ldr	r2, [r7, #4]
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	781b      	ldrb	r3, [r3, #0]
 80036b4:	009b      	lsls	r3, r3, #2
 80036b6:	4413      	add	r3, r2
 80036b8:	881b      	ldrh	r3, [r3, #0]
 80036ba:	b29b      	uxth	r3, r3
 80036bc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80036c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036c4:	b29a      	uxth	r2, r3
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	781b      	ldrb	r3, [r3, #0]
 80036ca:	b29b      	uxth	r3, r3
 80036cc:	4313      	orrs	r3, r2
 80036ce:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 80036d2:	687a      	ldr	r2, [r7, #4]
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	781b      	ldrb	r3, [r3, #0]
 80036d8:	009b      	lsls	r3, r3, #2
 80036da:	441a      	add	r2, r3
 80036dc:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80036e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80036e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80036e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80036ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80036f0:	b29b      	uxth	r3, r3
 80036f2:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	7b1b      	ldrb	r3, [r3, #12]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	f040 8149 	bne.w	8003990 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	785b      	ldrb	r3, [r3, #1]
 8003702:	2b00      	cmp	r3, #0
 8003704:	f000 8084 	beq.w	8003810 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	617b      	str	r3, [r7, #20]
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003712:	b29b      	uxth	r3, r3
 8003714:	461a      	mov	r2, r3
 8003716:	697b      	ldr	r3, [r7, #20]
 8003718:	4413      	add	r3, r2
 800371a:	617b      	str	r3, [r7, #20]
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	781b      	ldrb	r3, [r3, #0]
 8003720:	011a      	lsls	r2, r3, #4
 8003722:	697b      	ldr	r3, [r7, #20]
 8003724:	4413      	add	r3, r2
 8003726:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800372a:	613b      	str	r3, [r7, #16]
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	88db      	ldrh	r3, [r3, #6]
 8003730:	085b      	lsrs	r3, r3, #1
 8003732:	b29b      	uxth	r3, r3
 8003734:	005b      	lsls	r3, r3, #1
 8003736:	b29a      	uxth	r2, r3
 8003738:	693b      	ldr	r3, [r7, #16]
 800373a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800373c:	687a      	ldr	r2, [r7, #4]
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	781b      	ldrb	r3, [r3, #0]
 8003742:	009b      	lsls	r3, r3, #2
 8003744:	4413      	add	r3, r2
 8003746:	881b      	ldrh	r3, [r3, #0]
 8003748:	81fb      	strh	r3, [r7, #14]
 800374a:	89fb      	ldrh	r3, [r7, #14]
 800374c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003750:	2b00      	cmp	r3, #0
 8003752:	d01b      	beq.n	800378c <USB_ActivateEndpoint+0x17c>
 8003754:	687a      	ldr	r2, [r7, #4]
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	781b      	ldrb	r3, [r3, #0]
 800375a:	009b      	lsls	r3, r3, #2
 800375c:	4413      	add	r3, r2
 800375e:	881b      	ldrh	r3, [r3, #0]
 8003760:	b29b      	uxth	r3, r3
 8003762:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003766:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800376a:	81bb      	strh	r3, [r7, #12]
 800376c:	687a      	ldr	r2, [r7, #4]
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	781b      	ldrb	r3, [r3, #0]
 8003772:	009b      	lsls	r3, r3, #2
 8003774:	441a      	add	r2, r3
 8003776:	89bb      	ldrh	r3, [r7, #12]
 8003778:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800377c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003780:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003784:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003788:	b29b      	uxth	r3, r3
 800378a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	78db      	ldrb	r3, [r3, #3]
 8003790:	2b01      	cmp	r3, #1
 8003792:	d020      	beq.n	80037d6 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003794:	687a      	ldr	r2, [r7, #4]
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	781b      	ldrb	r3, [r3, #0]
 800379a:	009b      	lsls	r3, r3, #2
 800379c:	4413      	add	r3, r2
 800379e:	881b      	ldrh	r3, [r3, #0]
 80037a0:	b29b      	uxth	r3, r3
 80037a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80037a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80037aa:	813b      	strh	r3, [r7, #8]
 80037ac:	893b      	ldrh	r3, [r7, #8]
 80037ae:	f083 0320 	eor.w	r3, r3, #32
 80037b2:	813b      	strh	r3, [r7, #8]
 80037b4:	687a      	ldr	r2, [r7, #4]
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	781b      	ldrb	r3, [r3, #0]
 80037ba:	009b      	lsls	r3, r3, #2
 80037bc:	441a      	add	r2, r3
 80037be:	893b      	ldrh	r3, [r7, #8]
 80037c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80037c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80037c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80037cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80037d0:	b29b      	uxth	r3, r3
 80037d2:	8013      	strh	r3, [r2, #0]
 80037d4:	e27f      	b.n	8003cd6 <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80037d6:	687a      	ldr	r2, [r7, #4]
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	781b      	ldrb	r3, [r3, #0]
 80037dc:	009b      	lsls	r3, r3, #2
 80037de:	4413      	add	r3, r2
 80037e0:	881b      	ldrh	r3, [r3, #0]
 80037e2:	b29b      	uxth	r3, r3
 80037e4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80037e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80037ec:	817b      	strh	r3, [r7, #10]
 80037ee:	687a      	ldr	r2, [r7, #4]
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	781b      	ldrb	r3, [r3, #0]
 80037f4:	009b      	lsls	r3, r3, #2
 80037f6:	441a      	add	r2, r3
 80037f8:	897b      	ldrh	r3, [r7, #10]
 80037fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80037fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003802:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003806:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800380a:	b29b      	uxth	r3, r3
 800380c:	8013      	strh	r3, [r2, #0]
 800380e:	e262      	b.n	8003cd6 <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800381a:	b29b      	uxth	r3, r3
 800381c:	461a      	mov	r2, r3
 800381e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003820:	4413      	add	r3, r2
 8003822:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	781b      	ldrb	r3, [r3, #0]
 8003828:	011a      	lsls	r2, r3, #4
 800382a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800382c:	4413      	add	r3, r2
 800382e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8003832:	62bb      	str	r3, [r7, #40]	; 0x28
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	88db      	ldrh	r3, [r3, #6]
 8003838:	085b      	lsrs	r3, r3, #1
 800383a:	b29b      	uxth	r3, r3
 800383c:	005b      	lsls	r3, r3, #1
 800383e:	b29a      	uxth	r2, r3
 8003840:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003842:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	627b      	str	r3, [r7, #36]	; 0x24
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800384e:	b29b      	uxth	r3, r3
 8003850:	461a      	mov	r2, r3
 8003852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003854:	4413      	add	r3, r2
 8003856:	627b      	str	r3, [r7, #36]	; 0x24
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	781b      	ldrb	r3, [r3, #0]
 800385c:	011a      	lsls	r2, r3, #4
 800385e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003860:	4413      	add	r3, r2
 8003862:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003866:	623b      	str	r3, [r7, #32]
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	691b      	ldr	r3, [r3, #16]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d112      	bne.n	8003896 <USB_ActivateEndpoint+0x286>
 8003870:	6a3b      	ldr	r3, [r7, #32]
 8003872:	881b      	ldrh	r3, [r3, #0]
 8003874:	b29b      	uxth	r3, r3
 8003876:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800387a:	b29a      	uxth	r2, r3
 800387c:	6a3b      	ldr	r3, [r7, #32]
 800387e:	801a      	strh	r2, [r3, #0]
 8003880:	6a3b      	ldr	r3, [r7, #32]
 8003882:	881b      	ldrh	r3, [r3, #0]
 8003884:	b29b      	uxth	r3, r3
 8003886:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800388a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800388e:	b29a      	uxth	r2, r3
 8003890:	6a3b      	ldr	r3, [r7, #32]
 8003892:	801a      	strh	r2, [r3, #0]
 8003894:	e02f      	b.n	80038f6 <USB_ActivateEndpoint+0x2e6>
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	691b      	ldr	r3, [r3, #16]
 800389a:	2b3e      	cmp	r3, #62	; 0x3e
 800389c:	d813      	bhi.n	80038c6 <USB_ActivateEndpoint+0x2b6>
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	691b      	ldr	r3, [r3, #16]
 80038a2:	085b      	lsrs	r3, r3, #1
 80038a4:	663b      	str	r3, [r7, #96]	; 0x60
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	691b      	ldr	r3, [r3, #16]
 80038aa:	f003 0301 	and.w	r3, r3, #1
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d002      	beq.n	80038b8 <USB_ActivateEndpoint+0x2a8>
 80038b2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80038b4:	3301      	adds	r3, #1
 80038b6:	663b      	str	r3, [r7, #96]	; 0x60
 80038b8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80038ba:	b29b      	uxth	r3, r3
 80038bc:	029b      	lsls	r3, r3, #10
 80038be:	b29a      	uxth	r2, r3
 80038c0:	6a3b      	ldr	r3, [r7, #32]
 80038c2:	801a      	strh	r2, [r3, #0]
 80038c4:	e017      	b.n	80038f6 <USB_ActivateEndpoint+0x2e6>
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	691b      	ldr	r3, [r3, #16]
 80038ca:	095b      	lsrs	r3, r3, #5
 80038cc:	663b      	str	r3, [r7, #96]	; 0x60
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	691b      	ldr	r3, [r3, #16]
 80038d2:	f003 031f 	and.w	r3, r3, #31
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d102      	bne.n	80038e0 <USB_ActivateEndpoint+0x2d0>
 80038da:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80038dc:	3b01      	subs	r3, #1
 80038de:	663b      	str	r3, [r7, #96]	; 0x60
 80038e0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80038e2:	b29b      	uxth	r3, r3
 80038e4:	029b      	lsls	r3, r3, #10
 80038e6:	b29b      	uxth	r3, r3
 80038e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80038ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80038f0:	b29a      	uxth	r2, r3
 80038f2:	6a3b      	ldr	r3, [r7, #32]
 80038f4:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80038f6:	687a      	ldr	r2, [r7, #4]
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	781b      	ldrb	r3, [r3, #0]
 80038fc:	009b      	lsls	r3, r3, #2
 80038fe:	4413      	add	r3, r2
 8003900:	881b      	ldrh	r3, [r3, #0]
 8003902:	83fb      	strh	r3, [r7, #30]
 8003904:	8bfb      	ldrh	r3, [r7, #30]
 8003906:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800390a:	2b00      	cmp	r3, #0
 800390c:	d01b      	beq.n	8003946 <USB_ActivateEndpoint+0x336>
 800390e:	687a      	ldr	r2, [r7, #4]
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	781b      	ldrb	r3, [r3, #0]
 8003914:	009b      	lsls	r3, r3, #2
 8003916:	4413      	add	r3, r2
 8003918:	881b      	ldrh	r3, [r3, #0]
 800391a:	b29b      	uxth	r3, r3
 800391c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003920:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003924:	83bb      	strh	r3, [r7, #28]
 8003926:	687a      	ldr	r2, [r7, #4]
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	781b      	ldrb	r3, [r3, #0]
 800392c:	009b      	lsls	r3, r3, #2
 800392e:	441a      	add	r2, r3
 8003930:	8bbb      	ldrh	r3, [r7, #28]
 8003932:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003936:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800393a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800393e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003942:	b29b      	uxth	r3, r3
 8003944:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003946:	687a      	ldr	r2, [r7, #4]
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	781b      	ldrb	r3, [r3, #0]
 800394c:	009b      	lsls	r3, r3, #2
 800394e:	4413      	add	r3, r2
 8003950:	881b      	ldrh	r3, [r3, #0]
 8003952:	b29b      	uxth	r3, r3
 8003954:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003958:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800395c:	837b      	strh	r3, [r7, #26]
 800395e:	8b7b      	ldrh	r3, [r7, #26]
 8003960:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003964:	837b      	strh	r3, [r7, #26]
 8003966:	8b7b      	ldrh	r3, [r7, #26]
 8003968:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800396c:	837b      	strh	r3, [r7, #26]
 800396e:	687a      	ldr	r2, [r7, #4]
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	781b      	ldrb	r3, [r3, #0]
 8003974:	009b      	lsls	r3, r3, #2
 8003976:	441a      	add	r2, r3
 8003978:	8b7b      	ldrh	r3, [r7, #26]
 800397a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800397e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003982:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003986:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800398a:	b29b      	uxth	r3, r3
 800398c:	8013      	strh	r3, [r2, #0]
 800398e:	e1a2      	b.n	8003cd6 <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8003990:	687a      	ldr	r2, [r7, #4]
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	781b      	ldrb	r3, [r3, #0]
 8003996:	009b      	lsls	r3, r3, #2
 8003998:	4413      	add	r3, r2
 800399a:	881b      	ldrh	r3, [r3, #0]
 800399c:	b29b      	uxth	r3, r3
 800399e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80039a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039a6:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 80039aa:	687a      	ldr	r2, [r7, #4]
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	781b      	ldrb	r3, [r3, #0]
 80039b0:	009b      	lsls	r3, r3, #2
 80039b2:	441a      	add	r2, r3
 80039b4:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80039b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80039bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80039c0:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80039c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80039c8:	b29b      	uxth	r3, r3
 80039ca:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	65bb      	str	r3, [r7, #88]	; 0x58
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80039d6:	b29b      	uxth	r3, r3
 80039d8:	461a      	mov	r2, r3
 80039da:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80039dc:	4413      	add	r3, r2
 80039de:	65bb      	str	r3, [r7, #88]	; 0x58
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	781b      	ldrb	r3, [r3, #0]
 80039e4:	011a      	lsls	r2, r3, #4
 80039e6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80039e8:	4413      	add	r3, r2
 80039ea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80039ee:	657b      	str	r3, [r7, #84]	; 0x54
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	891b      	ldrh	r3, [r3, #8]
 80039f4:	085b      	lsrs	r3, r3, #1
 80039f6:	b29b      	uxth	r3, r3
 80039f8:	005b      	lsls	r3, r3, #1
 80039fa:	b29a      	uxth	r2, r3
 80039fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80039fe:	801a      	strh	r2, [r3, #0]
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	653b      	str	r3, [r7, #80]	; 0x50
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003a0a:	b29b      	uxth	r3, r3
 8003a0c:	461a      	mov	r2, r3
 8003a0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a10:	4413      	add	r3, r2
 8003a12:	653b      	str	r3, [r7, #80]	; 0x50
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	781b      	ldrb	r3, [r3, #0]
 8003a18:	011a      	lsls	r2, r3, #4
 8003a1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a1c:	4413      	add	r3, r2
 8003a1e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8003a22:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	895b      	ldrh	r3, [r3, #10]
 8003a28:	085b      	lsrs	r3, r3, #1
 8003a2a:	b29b      	uxth	r3, r3
 8003a2c:	005b      	lsls	r3, r3, #1
 8003a2e:	b29a      	uxth	r2, r3
 8003a30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a32:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	785b      	ldrb	r3, [r3, #1]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	f040 8091 	bne.w	8003b60 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003a3e:	687a      	ldr	r2, [r7, #4]
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	781b      	ldrb	r3, [r3, #0]
 8003a44:	009b      	lsls	r3, r3, #2
 8003a46:	4413      	add	r3, r2
 8003a48:	881b      	ldrh	r3, [r3, #0]
 8003a4a:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8003a4c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8003a4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d01b      	beq.n	8003a8e <USB_ActivateEndpoint+0x47e>
 8003a56:	687a      	ldr	r2, [r7, #4]
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	781b      	ldrb	r3, [r3, #0]
 8003a5c:	009b      	lsls	r3, r3, #2
 8003a5e:	4413      	add	r3, r2
 8003a60:	881b      	ldrh	r3, [r3, #0]
 8003a62:	b29b      	uxth	r3, r3
 8003a64:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a6c:	877b      	strh	r3, [r7, #58]	; 0x3a
 8003a6e:	687a      	ldr	r2, [r7, #4]
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	781b      	ldrb	r3, [r3, #0]
 8003a74:	009b      	lsls	r3, r3, #2
 8003a76:	441a      	add	r2, r3
 8003a78:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8003a7a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003a7e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003a82:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003a86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a8a:	b29b      	uxth	r3, r3
 8003a8c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003a8e:	687a      	ldr	r2, [r7, #4]
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	781b      	ldrb	r3, [r3, #0]
 8003a94:	009b      	lsls	r3, r3, #2
 8003a96:	4413      	add	r3, r2
 8003a98:	881b      	ldrh	r3, [r3, #0]
 8003a9a:	873b      	strh	r3, [r7, #56]	; 0x38
 8003a9c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8003a9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d01b      	beq.n	8003ade <USB_ActivateEndpoint+0x4ce>
 8003aa6:	687a      	ldr	r2, [r7, #4]
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	781b      	ldrb	r3, [r3, #0]
 8003aac:	009b      	lsls	r3, r3, #2
 8003aae:	4413      	add	r3, r2
 8003ab0:	881b      	ldrh	r3, [r3, #0]
 8003ab2:	b29b      	uxth	r3, r3
 8003ab4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ab8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003abc:	86fb      	strh	r3, [r7, #54]	; 0x36
 8003abe:	687a      	ldr	r2, [r7, #4]
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	781b      	ldrb	r3, [r3, #0]
 8003ac4:	009b      	lsls	r3, r3, #2
 8003ac6:	441a      	add	r2, r3
 8003ac8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003aca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003ace:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003ad2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ad6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003ada:	b29b      	uxth	r3, r3
 8003adc:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003ade:	687a      	ldr	r2, [r7, #4]
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	781b      	ldrb	r3, [r3, #0]
 8003ae4:	009b      	lsls	r3, r3, #2
 8003ae6:	4413      	add	r3, r2
 8003ae8:	881b      	ldrh	r3, [r3, #0]
 8003aea:	b29b      	uxth	r3, r3
 8003aec:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003af0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003af4:	86bb      	strh	r3, [r7, #52]	; 0x34
 8003af6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8003af8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003afc:	86bb      	strh	r3, [r7, #52]	; 0x34
 8003afe:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8003b00:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003b04:	86bb      	strh	r3, [r7, #52]	; 0x34
 8003b06:	687a      	ldr	r2, [r7, #4]
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	781b      	ldrb	r3, [r3, #0]
 8003b0c:	009b      	lsls	r3, r3, #2
 8003b0e:	441a      	add	r2, r3
 8003b10:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8003b12:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003b16:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003b1a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b22:	b29b      	uxth	r3, r3
 8003b24:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003b26:	687a      	ldr	r2, [r7, #4]
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	781b      	ldrb	r3, [r3, #0]
 8003b2c:	009b      	lsls	r3, r3, #2
 8003b2e:	4413      	add	r3, r2
 8003b30:	881b      	ldrh	r3, [r3, #0]
 8003b32:	b29b      	uxth	r3, r3
 8003b34:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b38:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b3c:	867b      	strh	r3, [r7, #50]	; 0x32
 8003b3e:	687a      	ldr	r2, [r7, #4]
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	781b      	ldrb	r3, [r3, #0]
 8003b44:	009b      	lsls	r3, r3, #2
 8003b46:	441a      	add	r2, r3
 8003b48:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8003b4a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003b4e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003b52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b5a:	b29b      	uxth	r3, r3
 8003b5c:	8013      	strh	r3, [r2, #0]
 8003b5e:	e0ba      	b.n	8003cd6 <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003b60:	687a      	ldr	r2, [r7, #4]
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	781b      	ldrb	r3, [r3, #0]
 8003b66:	009b      	lsls	r3, r3, #2
 8003b68:	4413      	add	r3, r2
 8003b6a:	881b      	ldrh	r3, [r3, #0]
 8003b6c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8003b70:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003b74:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d01d      	beq.n	8003bb8 <USB_ActivateEndpoint+0x5a8>
 8003b7c:	687a      	ldr	r2, [r7, #4]
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	781b      	ldrb	r3, [r3, #0]
 8003b82:	009b      	lsls	r3, r3, #2
 8003b84:	4413      	add	r3, r2
 8003b86:	881b      	ldrh	r3, [r3, #0]
 8003b88:	b29b      	uxth	r3, r3
 8003b8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b92:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8003b96:	687a      	ldr	r2, [r7, #4]
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	781b      	ldrb	r3, [r3, #0]
 8003b9c:	009b      	lsls	r3, r3, #2
 8003b9e:	441a      	add	r2, r3
 8003ba0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003ba4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003ba8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003bac:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003bb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003bb4:	b29b      	uxth	r3, r3
 8003bb6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003bb8:	687a      	ldr	r2, [r7, #4]
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	781b      	ldrb	r3, [r3, #0]
 8003bbe:	009b      	lsls	r3, r3, #2
 8003bc0:	4413      	add	r3, r2
 8003bc2:	881b      	ldrh	r3, [r3, #0]
 8003bc4:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8003bc8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8003bcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d01d      	beq.n	8003c10 <USB_ActivateEndpoint+0x600>
 8003bd4:	687a      	ldr	r2, [r7, #4]
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	781b      	ldrb	r3, [r3, #0]
 8003bda:	009b      	lsls	r3, r3, #2
 8003bdc:	4413      	add	r3, r2
 8003bde:	881b      	ldrh	r3, [r3, #0]
 8003be0:	b29b      	uxth	r3, r3
 8003be2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003be6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bea:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8003bee:	687a      	ldr	r2, [r7, #4]
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	781b      	ldrb	r3, [r3, #0]
 8003bf4:	009b      	lsls	r3, r3, #2
 8003bf6:	441a      	add	r2, r3
 8003bf8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003bfc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003c00:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003c04:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c08:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003c0c:	b29b      	uxth	r3, r3
 8003c0e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	78db      	ldrb	r3, [r3, #3]
 8003c14:	2b01      	cmp	r3, #1
 8003c16:	d024      	beq.n	8003c62 <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003c18:	687a      	ldr	r2, [r7, #4]
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	781b      	ldrb	r3, [r3, #0]
 8003c1e:	009b      	lsls	r3, r3, #2
 8003c20:	4413      	add	r3, r2
 8003c22:	881b      	ldrh	r3, [r3, #0]
 8003c24:	b29b      	uxth	r3, r3
 8003c26:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c2a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c2e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8003c32:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003c36:	f083 0320 	eor.w	r3, r3, #32
 8003c3a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8003c3e:	687a      	ldr	r2, [r7, #4]
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	781b      	ldrb	r3, [r3, #0]
 8003c44:	009b      	lsls	r3, r3, #2
 8003c46:	441a      	add	r2, r3
 8003c48:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003c4c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003c50:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003c54:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c5c:	b29b      	uxth	r3, r3
 8003c5e:	8013      	strh	r3, [r2, #0]
 8003c60:	e01d      	b.n	8003c9e <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003c62:	687a      	ldr	r2, [r7, #4]
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	781b      	ldrb	r3, [r3, #0]
 8003c68:	009b      	lsls	r3, r3, #2
 8003c6a:	4413      	add	r3, r2
 8003c6c:	881b      	ldrh	r3, [r3, #0]
 8003c6e:	b29b      	uxth	r3, r3
 8003c70:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c74:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c78:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8003c7c:	687a      	ldr	r2, [r7, #4]
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	781b      	ldrb	r3, [r3, #0]
 8003c82:	009b      	lsls	r3, r3, #2
 8003c84:	441a      	add	r2, r3
 8003c86:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8003c8a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003c8e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003c92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c9a:	b29b      	uxth	r3, r3
 8003c9c:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003c9e:	687a      	ldr	r2, [r7, #4]
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	781b      	ldrb	r3, [r3, #0]
 8003ca4:	009b      	lsls	r3, r3, #2
 8003ca6:	4413      	add	r3, r2
 8003ca8:	881b      	ldrh	r3, [r3, #0]
 8003caa:	b29b      	uxth	r3, r3
 8003cac:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003cb0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cb4:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8003cb6:	687a      	ldr	r2, [r7, #4]
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	781b      	ldrb	r3, [r3, #0]
 8003cbc:	009b      	lsls	r3, r3, #2
 8003cbe:	441a      	add	r2, r3
 8003cc0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8003cc2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003cc6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003cca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003cce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003cd2:	b29b      	uxth	r3, r3
 8003cd4:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8003cd6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8003cda:	4618      	mov	r0, r3
 8003cdc:	376c      	adds	r7, #108	; 0x6c
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	bc80      	pop	{r7}
 8003ce2:	4770      	bx	lr

08003ce4 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003ce4:	b480      	push	{r7}
 8003ce6:	b08d      	sub	sp, #52	; 0x34
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
 8003cec:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	7b1b      	ldrb	r3, [r3, #12]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	f040 808e 	bne.w	8003e14 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	785b      	ldrb	r3, [r3, #1]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d044      	beq.n	8003d8a <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003d00:	687a      	ldr	r2, [r7, #4]
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	781b      	ldrb	r3, [r3, #0]
 8003d06:	009b      	lsls	r3, r3, #2
 8003d08:	4413      	add	r3, r2
 8003d0a:	881b      	ldrh	r3, [r3, #0]
 8003d0c:	81bb      	strh	r3, [r7, #12]
 8003d0e:	89bb      	ldrh	r3, [r7, #12]
 8003d10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d01b      	beq.n	8003d50 <USB_DeactivateEndpoint+0x6c>
 8003d18:	687a      	ldr	r2, [r7, #4]
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	781b      	ldrb	r3, [r3, #0]
 8003d1e:	009b      	lsls	r3, r3, #2
 8003d20:	4413      	add	r3, r2
 8003d22:	881b      	ldrh	r3, [r3, #0]
 8003d24:	b29b      	uxth	r3, r3
 8003d26:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d2e:	817b      	strh	r3, [r7, #10]
 8003d30:	687a      	ldr	r2, [r7, #4]
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	781b      	ldrb	r3, [r3, #0]
 8003d36:	009b      	lsls	r3, r3, #2
 8003d38:	441a      	add	r2, r3
 8003d3a:	897b      	ldrh	r3, [r7, #10]
 8003d3c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003d40:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003d44:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d48:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003d4c:	b29b      	uxth	r3, r3
 8003d4e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003d50:	687a      	ldr	r2, [r7, #4]
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	781b      	ldrb	r3, [r3, #0]
 8003d56:	009b      	lsls	r3, r3, #2
 8003d58:	4413      	add	r3, r2
 8003d5a:	881b      	ldrh	r3, [r3, #0]
 8003d5c:	b29b      	uxth	r3, r3
 8003d5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d62:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d66:	813b      	strh	r3, [r7, #8]
 8003d68:	687a      	ldr	r2, [r7, #4]
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	781b      	ldrb	r3, [r3, #0]
 8003d6e:	009b      	lsls	r3, r3, #2
 8003d70:	441a      	add	r2, r3
 8003d72:	893b      	ldrh	r3, [r7, #8]
 8003d74:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003d78:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003d7c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d84:	b29b      	uxth	r3, r3
 8003d86:	8013      	strh	r3, [r2, #0]
 8003d88:	e192      	b.n	80040b0 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003d8a:	687a      	ldr	r2, [r7, #4]
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	781b      	ldrb	r3, [r3, #0]
 8003d90:	009b      	lsls	r3, r3, #2
 8003d92:	4413      	add	r3, r2
 8003d94:	881b      	ldrh	r3, [r3, #0]
 8003d96:	827b      	strh	r3, [r7, #18]
 8003d98:	8a7b      	ldrh	r3, [r7, #18]
 8003d9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d01b      	beq.n	8003dda <USB_DeactivateEndpoint+0xf6>
 8003da2:	687a      	ldr	r2, [r7, #4]
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	781b      	ldrb	r3, [r3, #0]
 8003da8:	009b      	lsls	r3, r3, #2
 8003daa:	4413      	add	r3, r2
 8003dac:	881b      	ldrh	r3, [r3, #0]
 8003dae:	b29b      	uxth	r3, r3
 8003db0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003db4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003db8:	823b      	strh	r3, [r7, #16]
 8003dba:	687a      	ldr	r2, [r7, #4]
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	781b      	ldrb	r3, [r3, #0]
 8003dc0:	009b      	lsls	r3, r3, #2
 8003dc2:	441a      	add	r2, r3
 8003dc4:	8a3b      	ldrh	r3, [r7, #16]
 8003dc6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003dca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003dce:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003dd2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003dd6:	b29b      	uxth	r3, r3
 8003dd8:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003dda:	687a      	ldr	r2, [r7, #4]
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	781b      	ldrb	r3, [r3, #0]
 8003de0:	009b      	lsls	r3, r3, #2
 8003de2:	4413      	add	r3, r2
 8003de4:	881b      	ldrh	r3, [r3, #0]
 8003de6:	b29b      	uxth	r3, r3
 8003de8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003dec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003df0:	81fb      	strh	r3, [r7, #14]
 8003df2:	687a      	ldr	r2, [r7, #4]
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	781b      	ldrb	r3, [r3, #0]
 8003df8:	009b      	lsls	r3, r3, #2
 8003dfa:	441a      	add	r2, r3
 8003dfc:	89fb      	ldrh	r3, [r7, #14]
 8003dfe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003e02:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003e06:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e0e:	b29b      	uxth	r3, r3
 8003e10:	8013      	strh	r3, [r2, #0]
 8003e12:	e14d      	b.n	80040b0 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	785b      	ldrb	r3, [r3, #1]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	f040 80a5 	bne.w	8003f68 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003e1e:	687a      	ldr	r2, [r7, #4]
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	781b      	ldrb	r3, [r3, #0]
 8003e24:	009b      	lsls	r3, r3, #2
 8003e26:	4413      	add	r3, r2
 8003e28:	881b      	ldrh	r3, [r3, #0]
 8003e2a:	843b      	strh	r3, [r7, #32]
 8003e2c:	8c3b      	ldrh	r3, [r7, #32]
 8003e2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d01b      	beq.n	8003e6e <USB_DeactivateEndpoint+0x18a>
 8003e36:	687a      	ldr	r2, [r7, #4]
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	781b      	ldrb	r3, [r3, #0]
 8003e3c:	009b      	lsls	r3, r3, #2
 8003e3e:	4413      	add	r3, r2
 8003e40:	881b      	ldrh	r3, [r3, #0]
 8003e42:	b29b      	uxth	r3, r3
 8003e44:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e4c:	83fb      	strh	r3, [r7, #30]
 8003e4e:	687a      	ldr	r2, [r7, #4]
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	781b      	ldrb	r3, [r3, #0]
 8003e54:	009b      	lsls	r3, r3, #2
 8003e56:	441a      	add	r2, r3
 8003e58:	8bfb      	ldrh	r3, [r7, #30]
 8003e5a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003e5e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003e62:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003e66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e6a:	b29b      	uxth	r3, r3
 8003e6c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003e6e:	687a      	ldr	r2, [r7, #4]
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	781b      	ldrb	r3, [r3, #0]
 8003e74:	009b      	lsls	r3, r3, #2
 8003e76:	4413      	add	r3, r2
 8003e78:	881b      	ldrh	r3, [r3, #0]
 8003e7a:	83bb      	strh	r3, [r7, #28]
 8003e7c:	8bbb      	ldrh	r3, [r7, #28]
 8003e7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d01b      	beq.n	8003ebe <USB_DeactivateEndpoint+0x1da>
 8003e86:	687a      	ldr	r2, [r7, #4]
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	781b      	ldrb	r3, [r3, #0]
 8003e8c:	009b      	lsls	r3, r3, #2
 8003e8e:	4413      	add	r3, r2
 8003e90:	881b      	ldrh	r3, [r3, #0]
 8003e92:	b29b      	uxth	r3, r3
 8003e94:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e9c:	837b      	strh	r3, [r7, #26]
 8003e9e:	687a      	ldr	r2, [r7, #4]
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	781b      	ldrb	r3, [r3, #0]
 8003ea4:	009b      	lsls	r3, r3, #2
 8003ea6:	441a      	add	r2, r3
 8003ea8:	8b7b      	ldrh	r3, [r7, #26]
 8003eaa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003eae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003eb2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003eb6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003eba:	b29b      	uxth	r3, r3
 8003ebc:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8003ebe:	687a      	ldr	r2, [r7, #4]
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	781b      	ldrb	r3, [r3, #0]
 8003ec4:	009b      	lsls	r3, r3, #2
 8003ec6:	4413      	add	r3, r2
 8003ec8:	881b      	ldrh	r3, [r3, #0]
 8003eca:	b29b      	uxth	r3, r3
 8003ecc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ed0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ed4:	833b      	strh	r3, [r7, #24]
 8003ed6:	687a      	ldr	r2, [r7, #4]
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	781b      	ldrb	r3, [r3, #0]
 8003edc:	009b      	lsls	r3, r3, #2
 8003ede:	441a      	add	r2, r3
 8003ee0:	8b3b      	ldrh	r3, [r7, #24]
 8003ee2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003ee6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003eea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003eee:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003ef2:	b29b      	uxth	r3, r3
 8003ef4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003ef6:	687a      	ldr	r2, [r7, #4]
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	781b      	ldrb	r3, [r3, #0]
 8003efc:	009b      	lsls	r3, r3, #2
 8003efe:	4413      	add	r3, r2
 8003f00:	881b      	ldrh	r3, [r3, #0]
 8003f02:	b29b      	uxth	r3, r3
 8003f04:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003f08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f0c:	82fb      	strh	r3, [r7, #22]
 8003f0e:	687a      	ldr	r2, [r7, #4]
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	781b      	ldrb	r3, [r3, #0]
 8003f14:	009b      	lsls	r3, r3, #2
 8003f16:	441a      	add	r2, r3
 8003f18:	8afb      	ldrh	r3, [r7, #22]
 8003f1a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003f1e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003f22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f2a:	b29b      	uxth	r3, r3
 8003f2c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003f2e:	687a      	ldr	r2, [r7, #4]
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	781b      	ldrb	r3, [r3, #0]
 8003f34:	009b      	lsls	r3, r3, #2
 8003f36:	4413      	add	r3, r2
 8003f38:	881b      	ldrh	r3, [r3, #0]
 8003f3a:	b29b      	uxth	r3, r3
 8003f3c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f40:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f44:	82bb      	strh	r3, [r7, #20]
 8003f46:	687a      	ldr	r2, [r7, #4]
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	781b      	ldrb	r3, [r3, #0]
 8003f4c:	009b      	lsls	r3, r3, #2
 8003f4e:	441a      	add	r2, r3
 8003f50:	8abb      	ldrh	r3, [r7, #20]
 8003f52:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003f56:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003f5a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f62:	b29b      	uxth	r3, r3
 8003f64:	8013      	strh	r3, [r2, #0]
 8003f66:	e0a3      	b.n	80040b0 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003f68:	687a      	ldr	r2, [r7, #4]
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	781b      	ldrb	r3, [r3, #0]
 8003f6e:	009b      	lsls	r3, r3, #2
 8003f70:	4413      	add	r3, r2
 8003f72:	881b      	ldrh	r3, [r3, #0]
 8003f74:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8003f76:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003f78:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d01b      	beq.n	8003fb8 <USB_DeactivateEndpoint+0x2d4>
 8003f80:	687a      	ldr	r2, [r7, #4]
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	781b      	ldrb	r3, [r3, #0]
 8003f86:	009b      	lsls	r3, r3, #2
 8003f88:	4413      	add	r3, r2
 8003f8a:	881b      	ldrh	r3, [r3, #0]
 8003f8c:	b29b      	uxth	r3, r3
 8003f8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f96:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8003f98:	687a      	ldr	r2, [r7, #4]
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	781b      	ldrb	r3, [r3, #0]
 8003f9e:	009b      	lsls	r3, r3, #2
 8003fa0:	441a      	add	r2, r3
 8003fa2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8003fa4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003fa8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003fac:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003fb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003fb4:	b29b      	uxth	r3, r3
 8003fb6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003fb8:	687a      	ldr	r2, [r7, #4]
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	781b      	ldrb	r3, [r3, #0]
 8003fbe:	009b      	lsls	r3, r3, #2
 8003fc0:	4413      	add	r3, r2
 8003fc2:	881b      	ldrh	r3, [r3, #0]
 8003fc4:	857b      	strh	r3, [r7, #42]	; 0x2a
 8003fc6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003fc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d01b      	beq.n	8004008 <USB_DeactivateEndpoint+0x324>
 8003fd0:	687a      	ldr	r2, [r7, #4]
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	781b      	ldrb	r3, [r3, #0]
 8003fd6:	009b      	lsls	r3, r3, #2
 8003fd8:	4413      	add	r3, r2
 8003fda:	881b      	ldrh	r3, [r3, #0]
 8003fdc:	b29b      	uxth	r3, r3
 8003fde:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003fe2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fe6:	853b      	strh	r3, [r7, #40]	; 0x28
 8003fe8:	687a      	ldr	r2, [r7, #4]
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	781b      	ldrb	r3, [r3, #0]
 8003fee:	009b      	lsls	r3, r3, #2
 8003ff0:	441a      	add	r2, r3
 8003ff2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003ff4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003ff8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003ffc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004000:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004004:	b29b      	uxth	r3, r3
 8004006:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8004008:	687a      	ldr	r2, [r7, #4]
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	781b      	ldrb	r3, [r3, #0]
 800400e:	009b      	lsls	r3, r3, #2
 8004010:	4413      	add	r3, r2
 8004012:	881b      	ldrh	r3, [r3, #0]
 8004014:	b29b      	uxth	r3, r3
 8004016:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800401a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800401e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004020:	687a      	ldr	r2, [r7, #4]
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	781b      	ldrb	r3, [r3, #0]
 8004026:	009b      	lsls	r3, r3, #2
 8004028:	441a      	add	r2, r3
 800402a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800402c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004030:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004034:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004038:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800403c:	b29b      	uxth	r3, r3
 800403e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004040:	687a      	ldr	r2, [r7, #4]
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	781b      	ldrb	r3, [r3, #0]
 8004046:	009b      	lsls	r3, r3, #2
 8004048:	4413      	add	r3, r2
 800404a:	881b      	ldrh	r3, [r3, #0]
 800404c:	b29b      	uxth	r3, r3
 800404e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004052:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004056:	84bb      	strh	r3, [r7, #36]	; 0x24
 8004058:	687a      	ldr	r2, [r7, #4]
 800405a:	683b      	ldr	r3, [r7, #0]
 800405c:	781b      	ldrb	r3, [r3, #0]
 800405e:	009b      	lsls	r3, r3, #2
 8004060:	441a      	add	r2, r3
 8004062:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004064:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004068:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800406c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004070:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004074:	b29b      	uxth	r3, r3
 8004076:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004078:	687a      	ldr	r2, [r7, #4]
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	781b      	ldrb	r3, [r3, #0]
 800407e:	009b      	lsls	r3, r3, #2
 8004080:	4413      	add	r3, r2
 8004082:	881b      	ldrh	r3, [r3, #0]
 8004084:	b29b      	uxth	r3, r3
 8004086:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800408a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800408e:	847b      	strh	r3, [r7, #34]	; 0x22
 8004090:	687a      	ldr	r2, [r7, #4]
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	781b      	ldrb	r3, [r3, #0]
 8004096:	009b      	lsls	r3, r3, #2
 8004098:	441a      	add	r2, r3
 800409a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800409c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80040a0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80040a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80040a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80040ac:	b29b      	uxth	r3, r3
 80040ae:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80040b0:	2300      	movs	r3, #0
}
 80040b2:	4618      	mov	r0, r3
 80040b4:	3734      	adds	r7, #52	; 0x34
 80040b6:	46bd      	mov	sp, r7
 80040b8:	bc80      	pop	{r7}
 80040ba:	4770      	bx	lr

080040bc <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	b0cc      	sub	sp, #304	; 0x130
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80040c6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80040ca:	6018      	str	r0, [r3, #0]
 80040cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80040d0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80040d4:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80040d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80040da:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	785b      	ldrb	r3, [r3, #1]
 80040e2:	2b01      	cmp	r3, #1
 80040e4:	f041 817d 	bne.w	80053e2 <USB_EPStartXfer+0x1326>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80040e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80040ec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	699a      	ldr	r2, [r3, #24]
 80040f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80040f8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	691b      	ldr	r3, [r3, #16]
 8004100:	429a      	cmp	r2, r3
 8004102:	d908      	bls.n	8004116 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8004104:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004108:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	691b      	ldr	r3, [r3, #16]
 8004110:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8004114:	e007      	b.n	8004126 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8004116:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800411a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	699b      	ldr	r3, [r3, #24]
 8004122:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8004126:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800412a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	7b1b      	ldrb	r3, [r3, #12]
 8004132:	2b00      	cmp	r3, #0
 8004134:	d152      	bne.n	80041dc <USB_EPStartXfer+0x120>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8004136:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800413a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	6959      	ldr	r1, [r3, #20]
 8004142:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004146:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	88da      	ldrh	r2, [r3, #6]
 800414e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004152:	b29b      	uxth	r3, r3
 8004154:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8004158:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800415c:	6800      	ldr	r0, [r0, #0]
 800415e:	f001 ff23 	bl	8005fa8 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004162:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004166:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800416a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800416e:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8004172:	6812      	ldr	r2, [r2, #0]
 8004174:	601a      	str	r2, [r3, #0]
 8004176:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800417a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004184:	b29b      	uxth	r3, r3
 8004186:	4619      	mov	r1, r3
 8004188:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800418c:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004190:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004194:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 8004198:	6812      	ldr	r2, [r2, #0]
 800419a:	440a      	add	r2, r1
 800419c:	601a      	str	r2, [r3, #0]
 800419e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80041a2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	781b      	ldrb	r3, [r3, #0]
 80041aa:	011a      	lsls	r2, r3, #4
 80041ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80041b0:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	4413      	add	r3, r2
 80041b8:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80041bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80041c0:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80041c4:	601a      	str	r2, [r3, #0]
 80041c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80041ca:	b29a      	uxth	r2, r3
 80041cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80041d0:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	801a      	strh	r2, [r3, #0]
 80041d8:	f001 b8b5 	b.w	8005346 <USB_EPStartXfer+0x128a>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80041dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80041e0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	78db      	ldrb	r3, [r3, #3]
 80041e8:	2b02      	cmp	r3, #2
 80041ea:	f040 84c6 	bne.w	8004b7a <USB_EPStartXfer+0xabe>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80041ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80041f2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	6a1a      	ldr	r2, [r3, #32]
 80041fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80041fe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	691b      	ldr	r3, [r3, #16]
 8004206:	429a      	cmp	r2, r3
 8004208:	f240 8443 	bls.w	8004a92 <USB_EPStartXfer+0x9d6>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 800420c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004210:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004214:	681a      	ldr	r2, [r3, #0]
 8004216:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800421a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	781b      	ldrb	r3, [r3, #0]
 8004222:	009b      	lsls	r3, r3, #2
 8004224:	4413      	add	r3, r2
 8004226:	881b      	ldrh	r3, [r3, #0]
 8004228:	b29b      	uxth	r3, r3
 800422a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800422e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004232:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8004236:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800423a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800423e:	681a      	ldr	r2, [r3, #0]
 8004240:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004244:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	781b      	ldrb	r3, [r3, #0]
 800424c:	009b      	lsls	r3, r3, #2
 800424e:	441a      	add	r2, r3
 8004250:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8004254:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004258:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800425c:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004260:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004264:	b29b      	uxth	r3, r3
 8004266:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8004268:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800426c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	6a1a      	ldr	r2, [r3, #32]
 8004274:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004278:	1ad2      	subs	r2, r2, r3
 800427a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800427e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004286:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800428a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800428e:	681a      	ldr	r2, [r3, #0]
 8004290:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004294:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	781b      	ldrb	r3, [r3, #0]
 800429c:	009b      	lsls	r3, r3, #2
 800429e:	4413      	add	r3, r2
 80042a0:	881b      	ldrh	r3, [r3, #0]
 80042a2:	b29b      	uxth	r3, r3
 80042a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	f000 823e 	beq.w	800472a <USB_EPStartXfer+0x66e>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80042ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80042b2:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80042b6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80042ba:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80042be:	6812      	ldr	r2, [r2, #0]
 80042c0:	601a      	str	r2, [r3, #0]
 80042c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80042c6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	785b      	ldrb	r3, [r3, #1]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	f040 809a 	bne.w	8004408 <USB_EPStartXfer+0x34c>
 80042d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80042d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80042dc:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80042e0:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80042e4:	6812      	ldr	r2, [r2, #0]
 80042e6:	601a      	str	r2, [r3, #0]
 80042e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80042ec:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80042f6:	b29b      	uxth	r3, r3
 80042f8:	4619      	mov	r1, r3
 80042fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80042fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004302:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004306:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 800430a:	6812      	ldr	r2, [r2, #0]
 800430c:	440a      	add	r2, r1
 800430e:	601a      	str	r2, [r3, #0]
 8004310:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004314:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	781b      	ldrb	r3, [r3, #0]
 800431c:	011a      	lsls	r2, r3, #4
 800431e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004322:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4413      	add	r3, r2
 800432a:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 800432e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004332:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004336:	601a      	str	r2, [r3, #0]
 8004338:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800433c:	2b00      	cmp	r3, #0
 800433e:	d122      	bne.n	8004386 <USB_EPStartXfer+0x2ca>
 8004340:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004344:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	881b      	ldrh	r3, [r3, #0]
 800434c:	b29b      	uxth	r3, r3
 800434e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004352:	b29a      	uxth	r2, r3
 8004354:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004358:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	801a      	strh	r2, [r3, #0]
 8004360:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004364:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	881b      	ldrh	r3, [r3, #0]
 800436c:	b29b      	uxth	r3, r3
 800436e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004372:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004376:	b29a      	uxth	r2, r3
 8004378:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800437c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	801a      	strh	r2, [r3, #0]
 8004384:	e079      	b.n	800447a <USB_EPStartXfer+0x3be>
 8004386:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800438a:	2b3e      	cmp	r3, #62	; 0x3e
 800438c:	d81b      	bhi.n	80043c6 <USB_EPStartXfer+0x30a>
 800438e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004392:	085b      	lsrs	r3, r3, #1
 8004394:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8004398:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800439c:	f003 0301 	and.w	r3, r3, #1
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d004      	beq.n	80043ae <USB_EPStartXfer+0x2f2>
 80043a4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80043a8:	3301      	adds	r3, #1
 80043aa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80043ae:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80043b2:	b29b      	uxth	r3, r3
 80043b4:	029b      	lsls	r3, r3, #10
 80043b6:	b29a      	uxth	r2, r3
 80043b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80043bc:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	801a      	strh	r2, [r3, #0]
 80043c4:	e059      	b.n	800447a <USB_EPStartXfer+0x3be>
 80043c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80043ca:	095b      	lsrs	r3, r3, #5
 80043cc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80043d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80043d4:	f003 031f 	and.w	r3, r3, #31
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d104      	bne.n	80043e6 <USB_EPStartXfer+0x32a>
 80043dc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80043e0:	3b01      	subs	r3, #1
 80043e2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80043e6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80043ea:	b29b      	uxth	r3, r3
 80043ec:	029b      	lsls	r3, r3, #10
 80043ee:	b29b      	uxth	r3, r3
 80043f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80043f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80043f8:	b29a      	uxth	r2, r3
 80043fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80043fe:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	801a      	strh	r2, [r3, #0]
 8004406:	e038      	b.n	800447a <USB_EPStartXfer+0x3be>
 8004408:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800440c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	785b      	ldrb	r3, [r3, #1]
 8004414:	2b01      	cmp	r3, #1
 8004416:	d130      	bne.n	800447a <USB_EPStartXfer+0x3be>
 8004418:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800441c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004426:	b29b      	uxth	r3, r3
 8004428:	4619      	mov	r1, r3
 800442a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800442e:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004432:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004436:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 800443a:	6812      	ldr	r2, [r2, #0]
 800443c:	440a      	add	r2, r1
 800443e:	601a      	str	r2, [r3, #0]
 8004440:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004444:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	781b      	ldrb	r3, [r3, #0]
 800444c:	011a      	lsls	r2, r3, #4
 800444e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004452:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	4413      	add	r3, r2
 800445a:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 800445e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004462:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004466:	601a      	str	r2, [r3, #0]
 8004468:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800446c:	b29a      	uxth	r2, r3
 800446e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004472:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800447a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800447e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	895b      	ldrh	r3, [r3, #10]
 8004486:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800448a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800448e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	6959      	ldr	r1, [r3, #20]
 8004496:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800449a:	b29b      	uxth	r3, r3
 800449c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80044a0:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80044a4:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80044a8:	6800      	ldr	r0, [r0, #0]
 80044aa:	f001 fd7d 	bl	8005fa8 <USB_WritePMA>
            ep->xfer_buff += len;
 80044ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80044b2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	695a      	ldr	r2, [r3, #20]
 80044ba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80044be:	441a      	add	r2, r3
 80044c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80044c4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80044cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80044d0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	6a1a      	ldr	r2, [r3, #32]
 80044d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80044dc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	691b      	ldr	r3, [r3, #16]
 80044e4:	429a      	cmp	r2, r3
 80044e6:	d90f      	bls.n	8004508 <USB_EPStartXfer+0x44c>
            {
              ep->xfer_len_db -= len;
 80044e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80044ec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	6a1a      	ldr	r2, [r3, #32]
 80044f4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80044f8:	1ad2      	subs	r2, r2, r3
 80044fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80044fe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	621a      	str	r2, [r3, #32]
 8004506:	e00e      	b.n	8004526 <USB_EPStartXfer+0x46a>
            }
            else
            {
              len = ep->xfer_len_db;
 8004508:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800450c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	6a1b      	ldr	r3, [r3, #32]
 8004514:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8004518:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800451c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	2200      	movs	r2, #0
 8004524:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004526:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800452a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	785b      	ldrb	r3, [r3, #1]
 8004532:	2b00      	cmp	r3, #0
 8004534:	f040 809a 	bne.w	800466c <USB_EPStartXfer+0x5b0>
 8004538:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800453c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004540:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004544:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8004548:	6812      	ldr	r2, [r2, #0]
 800454a:	601a      	str	r2, [r3, #0]
 800454c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004550:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800455a:	b29b      	uxth	r3, r3
 800455c:	4619      	mov	r1, r3
 800455e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004562:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004566:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800456a:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 800456e:	6812      	ldr	r2, [r2, #0]
 8004570:	440a      	add	r2, r1
 8004572:	601a      	str	r2, [r3, #0]
 8004574:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004578:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	781b      	ldrb	r3, [r3, #0]
 8004580:	011a      	lsls	r2, r3, #4
 8004582:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004586:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	4413      	add	r3, r2
 800458e:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8004592:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004596:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800459a:	601a      	str	r2, [r3, #0]
 800459c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d122      	bne.n	80045ea <USB_EPStartXfer+0x52e>
 80045a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80045a8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	881b      	ldrh	r3, [r3, #0]
 80045b0:	b29b      	uxth	r3, r3
 80045b2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80045b6:	b29a      	uxth	r2, r3
 80045b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80045bc:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	801a      	strh	r2, [r3, #0]
 80045c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80045c8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	881b      	ldrh	r3, [r3, #0]
 80045d0:	b29b      	uxth	r3, r3
 80045d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80045d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80045da:	b29a      	uxth	r2, r3
 80045dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80045e0:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	801a      	strh	r2, [r3, #0]
 80045e8:	e083      	b.n	80046f2 <USB_EPStartXfer+0x636>
 80045ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80045ee:	2b3e      	cmp	r3, #62	; 0x3e
 80045f0:	d81b      	bhi.n	800462a <USB_EPStartXfer+0x56e>
 80045f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80045f6:	085b      	lsrs	r3, r3, #1
 80045f8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80045fc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004600:	f003 0301 	and.w	r3, r3, #1
 8004604:	2b00      	cmp	r3, #0
 8004606:	d004      	beq.n	8004612 <USB_EPStartXfer+0x556>
 8004608:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800460c:	3301      	adds	r3, #1
 800460e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004612:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004616:	b29b      	uxth	r3, r3
 8004618:	029b      	lsls	r3, r3, #10
 800461a:	b29a      	uxth	r2, r3
 800461c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004620:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	801a      	strh	r2, [r3, #0]
 8004628:	e063      	b.n	80046f2 <USB_EPStartXfer+0x636>
 800462a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800462e:	095b      	lsrs	r3, r3, #5
 8004630:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004634:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004638:	f003 031f 	and.w	r3, r3, #31
 800463c:	2b00      	cmp	r3, #0
 800463e:	d104      	bne.n	800464a <USB_EPStartXfer+0x58e>
 8004640:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004644:	3b01      	subs	r3, #1
 8004646:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800464a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800464e:	b29b      	uxth	r3, r3
 8004650:	029b      	lsls	r3, r3, #10
 8004652:	b29b      	uxth	r3, r3
 8004654:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004658:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800465c:	b29a      	uxth	r2, r3
 800465e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004662:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	801a      	strh	r2, [r3, #0]
 800466a:	e042      	b.n	80046f2 <USB_EPStartXfer+0x636>
 800466c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004670:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	785b      	ldrb	r3, [r3, #1]
 8004678:	2b01      	cmp	r3, #1
 800467a:	d13a      	bne.n	80046f2 <USB_EPStartXfer+0x636>
 800467c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004680:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004684:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004688:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800468c:	6812      	ldr	r2, [r2, #0]
 800468e:	601a      	str	r2, [r3, #0]
 8004690:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004694:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800469e:	b29b      	uxth	r3, r3
 80046a0:	4619      	mov	r1, r3
 80046a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80046a6:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80046aa:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80046ae:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 80046b2:	6812      	ldr	r2, [r2, #0]
 80046b4:	440a      	add	r2, r1
 80046b6:	601a      	str	r2, [r3, #0]
 80046b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80046bc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	781b      	ldrb	r3, [r3, #0]
 80046c4:	011a      	lsls	r2, r3, #4
 80046c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80046ca:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	4413      	add	r3, r2
 80046d2:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80046d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80046da:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80046de:	601a      	str	r2, [r3, #0]
 80046e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80046e4:	b29a      	uxth	r2, r3
 80046e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80046ea:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80046f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80046f6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	891b      	ldrh	r3, [r3, #8]
 80046fe:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004702:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004706:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	6959      	ldr	r1, [r3, #20]
 800470e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004712:	b29b      	uxth	r3, r3
 8004714:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004718:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800471c:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8004720:	6800      	ldr	r0, [r0, #0]
 8004722:	f001 fc41 	bl	8005fa8 <USB_WritePMA>
 8004726:	f000 be0e 	b.w	8005346 <USB_EPStartXfer+0x128a>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800472a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800472e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	785b      	ldrb	r3, [r3, #1]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d16d      	bne.n	8004816 <USB_EPStartXfer+0x75a>
 800473a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800473e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	64bb      	str	r3, [r7, #72]	; 0x48
 8004746:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800474a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004754:	b29b      	uxth	r3, r3
 8004756:	461a      	mov	r2, r3
 8004758:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800475a:	4413      	add	r3, r2
 800475c:	64bb      	str	r3, [r7, #72]	; 0x48
 800475e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004762:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	781b      	ldrb	r3, [r3, #0]
 800476a:	011a      	lsls	r2, r3, #4
 800476c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800476e:	4413      	add	r3, r2
 8004770:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004774:	647b      	str	r3, [r7, #68]	; 0x44
 8004776:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800477a:	2b00      	cmp	r3, #0
 800477c:	d112      	bne.n	80047a4 <USB_EPStartXfer+0x6e8>
 800477e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004780:	881b      	ldrh	r3, [r3, #0]
 8004782:	b29b      	uxth	r3, r3
 8004784:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004788:	b29a      	uxth	r2, r3
 800478a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800478c:	801a      	strh	r2, [r3, #0]
 800478e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004790:	881b      	ldrh	r3, [r3, #0]
 8004792:	b29b      	uxth	r3, r3
 8004794:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004798:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800479c:	b29a      	uxth	r2, r3
 800479e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80047a0:	801a      	strh	r2, [r3, #0]
 80047a2:	e063      	b.n	800486c <USB_EPStartXfer+0x7b0>
 80047a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80047a8:	2b3e      	cmp	r3, #62	; 0x3e
 80047aa:	d817      	bhi.n	80047dc <USB_EPStartXfer+0x720>
 80047ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80047b0:	085b      	lsrs	r3, r3, #1
 80047b2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80047b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80047ba:	f003 0301 	and.w	r3, r3, #1
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d004      	beq.n	80047cc <USB_EPStartXfer+0x710>
 80047c2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80047c6:	3301      	adds	r3, #1
 80047c8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80047cc:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80047d0:	b29b      	uxth	r3, r3
 80047d2:	029b      	lsls	r3, r3, #10
 80047d4:	b29a      	uxth	r2, r3
 80047d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80047d8:	801a      	strh	r2, [r3, #0]
 80047da:	e047      	b.n	800486c <USB_EPStartXfer+0x7b0>
 80047dc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80047e0:	095b      	lsrs	r3, r3, #5
 80047e2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80047e6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80047ea:	f003 031f 	and.w	r3, r3, #31
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d104      	bne.n	80047fc <USB_EPStartXfer+0x740>
 80047f2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80047f6:	3b01      	subs	r3, #1
 80047f8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80047fc:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004800:	b29b      	uxth	r3, r3
 8004802:	029b      	lsls	r3, r3, #10
 8004804:	b29b      	uxth	r3, r3
 8004806:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800480a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800480e:	b29a      	uxth	r2, r3
 8004810:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004812:	801a      	strh	r2, [r3, #0]
 8004814:	e02a      	b.n	800486c <USB_EPStartXfer+0x7b0>
 8004816:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800481a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	785b      	ldrb	r3, [r3, #1]
 8004822:	2b01      	cmp	r3, #1
 8004824:	d122      	bne.n	800486c <USB_EPStartXfer+0x7b0>
 8004826:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800482a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	653b      	str	r3, [r7, #80]	; 0x50
 8004832:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004836:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004840:	b29b      	uxth	r3, r3
 8004842:	461a      	mov	r2, r3
 8004844:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004846:	4413      	add	r3, r2
 8004848:	653b      	str	r3, [r7, #80]	; 0x50
 800484a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800484e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	781b      	ldrb	r3, [r3, #0]
 8004856:	011a      	lsls	r2, r3, #4
 8004858:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800485a:	4413      	add	r3, r2
 800485c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004860:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004862:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004866:	b29a      	uxth	r2, r3
 8004868:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800486a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800486c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004870:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	891b      	ldrh	r3, [r3, #8]
 8004878:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800487c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004880:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	6959      	ldr	r1, [r3, #20]
 8004888:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800488c:	b29b      	uxth	r3, r3
 800488e:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004892:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8004896:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800489a:	6800      	ldr	r0, [r0, #0]
 800489c:	f001 fb84 	bl	8005fa8 <USB_WritePMA>
            ep->xfer_buff += len;
 80048a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80048a4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	695a      	ldr	r2, [r3, #20]
 80048ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80048b0:	441a      	add	r2, r3
 80048b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80048b6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80048be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80048c2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	6a1a      	ldr	r2, [r3, #32]
 80048ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80048ce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	691b      	ldr	r3, [r3, #16]
 80048d6:	429a      	cmp	r2, r3
 80048d8:	d90f      	bls.n	80048fa <USB_EPStartXfer+0x83e>
            {
              ep->xfer_len_db -= len;
 80048da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80048de:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	6a1a      	ldr	r2, [r3, #32]
 80048e6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80048ea:	1ad2      	subs	r2, r2, r3
 80048ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80048f0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	621a      	str	r2, [r3, #32]
 80048f8:	e00e      	b.n	8004918 <USB_EPStartXfer+0x85c>
            }
            else
            {
              len = ep->xfer_len_db;
 80048fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80048fe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	6a1b      	ldr	r3, [r3, #32]
 8004906:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 800490a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800490e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	2200      	movs	r2, #0
 8004916:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004918:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800491c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	643b      	str	r3, [r7, #64]	; 0x40
 8004924:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004928:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	785b      	ldrb	r3, [r3, #1]
 8004930:	2b00      	cmp	r3, #0
 8004932:	d16d      	bne.n	8004a10 <USB_EPStartXfer+0x954>
 8004934:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004938:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004940:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004944:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800494e:	b29b      	uxth	r3, r3
 8004950:	461a      	mov	r2, r3
 8004952:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004954:	4413      	add	r3, r2
 8004956:	63bb      	str	r3, [r7, #56]	; 0x38
 8004958:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800495c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	781b      	ldrb	r3, [r3, #0]
 8004964:	011a      	lsls	r2, r3, #4
 8004966:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004968:	4413      	add	r3, r2
 800496a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800496e:	637b      	str	r3, [r7, #52]	; 0x34
 8004970:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004974:	2b00      	cmp	r3, #0
 8004976:	d112      	bne.n	800499e <USB_EPStartXfer+0x8e2>
 8004978:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800497a:	881b      	ldrh	r3, [r3, #0]
 800497c:	b29b      	uxth	r3, r3
 800497e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004982:	b29a      	uxth	r2, r3
 8004984:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004986:	801a      	strh	r2, [r3, #0]
 8004988:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800498a:	881b      	ldrh	r3, [r3, #0]
 800498c:	b29b      	uxth	r3, r3
 800498e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004992:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004996:	b29a      	uxth	r2, r3
 8004998:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800499a:	801a      	strh	r2, [r3, #0]
 800499c:	e05d      	b.n	8004a5a <USB_EPStartXfer+0x99e>
 800499e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80049a2:	2b3e      	cmp	r3, #62	; 0x3e
 80049a4:	d817      	bhi.n	80049d6 <USB_EPStartXfer+0x91a>
 80049a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80049aa:	085b      	lsrs	r3, r3, #1
 80049ac:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80049b0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80049b4:	f003 0301 	and.w	r3, r3, #1
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d004      	beq.n	80049c6 <USB_EPStartXfer+0x90a>
 80049bc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80049c0:	3301      	adds	r3, #1
 80049c2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80049c6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80049ca:	b29b      	uxth	r3, r3
 80049cc:	029b      	lsls	r3, r3, #10
 80049ce:	b29a      	uxth	r2, r3
 80049d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049d2:	801a      	strh	r2, [r3, #0]
 80049d4:	e041      	b.n	8004a5a <USB_EPStartXfer+0x99e>
 80049d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80049da:	095b      	lsrs	r3, r3, #5
 80049dc:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80049e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80049e4:	f003 031f 	and.w	r3, r3, #31
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d104      	bne.n	80049f6 <USB_EPStartXfer+0x93a>
 80049ec:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80049f0:	3b01      	subs	r3, #1
 80049f2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80049f6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80049fa:	b29b      	uxth	r3, r3
 80049fc:	029b      	lsls	r3, r3, #10
 80049fe:	b29b      	uxth	r3, r3
 8004a00:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004a04:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004a08:	b29a      	uxth	r2, r3
 8004a0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a0c:	801a      	strh	r2, [r3, #0]
 8004a0e:	e024      	b.n	8004a5a <USB_EPStartXfer+0x99e>
 8004a10:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a14:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	785b      	ldrb	r3, [r3, #1]
 8004a1c:	2b01      	cmp	r3, #1
 8004a1e:	d11c      	bne.n	8004a5a <USB_EPStartXfer+0x99e>
 8004a20:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a24:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a2e:	b29b      	uxth	r3, r3
 8004a30:	461a      	mov	r2, r3
 8004a32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a34:	4413      	add	r3, r2
 8004a36:	643b      	str	r3, [r7, #64]	; 0x40
 8004a38:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a3c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	781b      	ldrb	r3, [r3, #0]
 8004a44:	011a      	lsls	r2, r3, #4
 8004a46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a48:	4413      	add	r3, r2
 8004a4a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004a4e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a50:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004a54:	b29a      	uxth	r2, r3
 8004a56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a58:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8004a5a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a5e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	895b      	ldrh	r3, [r3, #10]
 8004a66:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004a6a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a6e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	6959      	ldr	r1, [r3, #20]
 8004a76:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004a7a:	b29b      	uxth	r3, r3
 8004a7c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004a80:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8004a84:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8004a88:	6800      	ldr	r0, [r0, #0]
 8004a8a:	f001 fa8d 	bl	8005fa8 <USB_WritePMA>
 8004a8e:	f000 bc5a 	b.w	8005346 <USB_EPStartXfer+0x128a>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8004a92:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a96:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	6a1b      	ldr	r3, [r3, #32]
 8004a9e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8004aa2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004aa6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004aaa:	681a      	ldr	r2, [r3, #0]
 8004aac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ab0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	781b      	ldrb	r3, [r3, #0]
 8004ab8:	009b      	lsls	r3, r3, #2
 8004aba:	4413      	add	r3, r2
 8004abc:	881b      	ldrh	r3, [r3, #0]
 8004abe:	b29b      	uxth	r3, r3
 8004ac0:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8004ac4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ac8:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8004acc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ad0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004ad4:	681a      	ldr	r2, [r3, #0]
 8004ad6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ada:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	781b      	ldrb	r3, [r3, #0]
 8004ae2:	009b      	lsls	r3, r3, #2
 8004ae4:	441a      	add	r2, r3
 8004ae6:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8004aea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004aee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004af2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004af6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004afa:	b29b      	uxth	r3, r3
 8004afc:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004afe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b02:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004b0a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b0e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b18:	b29b      	uxth	r3, r3
 8004b1a:	461a      	mov	r2, r3
 8004b1c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b1e:	4413      	add	r3, r2
 8004b20:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004b22:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b26:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	781b      	ldrb	r3, [r3, #0]
 8004b2e:	011a      	lsls	r2, r3, #4
 8004b30:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b32:	4413      	add	r3, r2
 8004b34:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004b38:	65bb      	str	r3, [r7, #88]	; 0x58
 8004b3a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004b3e:	b29a      	uxth	r2, r3
 8004b40:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004b42:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8004b44:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b48:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	891b      	ldrh	r3, [r3, #8]
 8004b50:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004b54:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b58:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	6959      	ldr	r1, [r3, #20]
 8004b60:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004b64:	b29b      	uxth	r3, r3
 8004b66:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004b6a:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8004b6e:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8004b72:	6800      	ldr	r0, [r0, #0]
 8004b74:	f001 fa18 	bl	8005fa8 <USB_WritePMA>
 8004b78:	e3e5      	b.n	8005346 <USB_EPStartXfer+0x128a>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 8004b7a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b7e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004b82:	681a      	ldr	r2, [r3, #0]
 8004b84:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b88:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	781b      	ldrb	r3, [r3, #0]
 8004b90:	009b      	lsls	r3, r3, #2
 8004b92:	4413      	add	r3, r2
 8004b94:	881b      	ldrh	r3, [r3, #0]
 8004b96:	b29b      	uxth	r3, r3
 8004b98:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ba0:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 8004ba4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ba8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004bac:	681a      	ldr	r2, [r3, #0]
 8004bae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004bb2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	781b      	ldrb	r3, [r3, #0]
 8004bba:	009b      	lsls	r3, r3, #2
 8004bbc:	441a      	add	r2, r3
 8004bbe:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8004bc2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004bc6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004bca:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004bce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004bd2:	b29b      	uxth	r3, r3
 8004bd4:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8004bd6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004bda:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	6a1a      	ldr	r2, [r3, #32]
 8004be2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004be6:	1ad2      	subs	r2, r2, r3
 8004be8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004bec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004bf4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004bf8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004bfc:	681a      	ldr	r2, [r3, #0]
 8004bfe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c02:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	781b      	ldrb	r3, [r3, #0]
 8004c0a:	009b      	lsls	r3, r3, #2
 8004c0c:	4413      	add	r3, r2
 8004c0e:	881b      	ldrh	r3, [r3, #0]
 8004c10:	b29b      	uxth	r3, r3
 8004c12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	f000 81bc 	beq.w	8004f94 <USB_EPStartXfer+0xed8>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004c1c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c20:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004c2a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c2e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	785b      	ldrb	r3, [r3, #1]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d16d      	bne.n	8004d16 <USB_EPStartXfer+0xc5a>
 8004c3a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c3e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	67bb      	str	r3, [r7, #120]	; 0x78
 8004c46:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c4a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c54:	b29b      	uxth	r3, r3
 8004c56:	461a      	mov	r2, r3
 8004c58:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004c5a:	4413      	add	r3, r2
 8004c5c:	67bb      	str	r3, [r7, #120]	; 0x78
 8004c5e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c62:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	781b      	ldrb	r3, [r3, #0]
 8004c6a:	011a      	lsls	r2, r3, #4
 8004c6c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004c6e:	4413      	add	r3, r2
 8004c70:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004c74:	677b      	str	r3, [r7, #116]	; 0x74
 8004c76:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d112      	bne.n	8004ca4 <USB_EPStartXfer+0xbe8>
 8004c7e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004c80:	881b      	ldrh	r3, [r3, #0]
 8004c82:	b29b      	uxth	r3, r3
 8004c84:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004c88:	b29a      	uxth	r2, r3
 8004c8a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004c8c:	801a      	strh	r2, [r3, #0]
 8004c8e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004c90:	881b      	ldrh	r3, [r3, #0]
 8004c92:	b29b      	uxth	r3, r3
 8004c94:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004c98:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004c9c:	b29a      	uxth	r2, r3
 8004c9e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004ca0:	801a      	strh	r2, [r3, #0]
 8004ca2:	e060      	b.n	8004d66 <USB_EPStartXfer+0xcaa>
 8004ca4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004ca8:	2b3e      	cmp	r3, #62	; 0x3e
 8004caa:	d817      	bhi.n	8004cdc <USB_EPStartXfer+0xc20>
 8004cac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004cb0:	085b      	lsrs	r3, r3, #1
 8004cb2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8004cb6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004cba:	f003 0301 	and.w	r3, r3, #1
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d004      	beq.n	8004ccc <USB_EPStartXfer+0xc10>
 8004cc2:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8004cc6:	3301      	adds	r3, #1
 8004cc8:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8004ccc:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8004cd0:	b29b      	uxth	r3, r3
 8004cd2:	029b      	lsls	r3, r3, #10
 8004cd4:	b29a      	uxth	r2, r3
 8004cd6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004cd8:	801a      	strh	r2, [r3, #0]
 8004cda:	e044      	b.n	8004d66 <USB_EPStartXfer+0xcaa>
 8004cdc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004ce0:	095b      	lsrs	r3, r3, #5
 8004ce2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8004ce6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004cea:	f003 031f 	and.w	r3, r3, #31
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d104      	bne.n	8004cfc <USB_EPStartXfer+0xc40>
 8004cf2:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8004cf6:	3b01      	subs	r3, #1
 8004cf8:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8004cfc:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8004d00:	b29b      	uxth	r3, r3
 8004d02:	029b      	lsls	r3, r3, #10
 8004d04:	b29b      	uxth	r3, r3
 8004d06:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004d0a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004d0e:	b29a      	uxth	r2, r3
 8004d10:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004d12:	801a      	strh	r2, [r3, #0]
 8004d14:	e027      	b.n	8004d66 <USB_EPStartXfer+0xcaa>
 8004d16:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d1a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	785b      	ldrb	r3, [r3, #1]
 8004d22:	2b01      	cmp	r3, #1
 8004d24:	d11f      	bne.n	8004d66 <USB_EPStartXfer+0xcaa>
 8004d26:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d2a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d34:	b29b      	uxth	r3, r3
 8004d36:	461a      	mov	r2, r3
 8004d38:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004d3c:	4413      	add	r3, r2
 8004d3e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004d42:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d46:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	781b      	ldrb	r3, [r3, #0]
 8004d4e:	011a      	lsls	r2, r3, #4
 8004d50:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004d54:	4413      	add	r3, r2
 8004d56:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004d5a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004d5c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004d60:	b29a      	uxth	r2, r3
 8004d62:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004d64:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8004d66:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d6a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	895b      	ldrh	r3, [r3, #10]
 8004d72:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004d76:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d7a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	6959      	ldr	r1, [r3, #20]
 8004d82:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004d86:	b29b      	uxth	r3, r3
 8004d88:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004d8c:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8004d90:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8004d94:	6800      	ldr	r0, [r0, #0]
 8004d96:	f001 f907 	bl	8005fa8 <USB_WritePMA>
          ep->xfer_buff += len;
 8004d9a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d9e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	695a      	ldr	r2, [r3, #20]
 8004da6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004daa:	441a      	add	r2, r3
 8004dac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004db0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8004db8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004dbc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	6a1a      	ldr	r2, [r3, #32]
 8004dc4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004dc8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	691b      	ldr	r3, [r3, #16]
 8004dd0:	429a      	cmp	r2, r3
 8004dd2:	d90f      	bls.n	8004df4 <USB_EPStartXfer+0xd38>
          {
            ep->xfer_len_db -= len;
 8004dd4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004dd8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	6a1a      	ldr	r2, [r3, #32]
 8004de0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004de4:	1ad2      	subs	r2, r2, r3
 8004de6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004dea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	621a      	str	r2, [r3, #32]
 8004df2:	e00e      	b.n	8004e12 <USB_EPStartXfer+0xd56>
          }
          else
          {
            len = ep->xfer_len_db;
 8004df4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004df8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	6a1b      	ldr	r3, [r3, #32]
 8004e00:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8004e04:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e08:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	2200      	movs	r2, #0
 8004e10:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8004e12:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	f000 8295 	beq.w	8005346 <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004e1c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e20:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	785b      	ldrb	r3, [r3, #1]
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d16d      	bne.n	8004f08 <USB_EPStartXfer+0xe4c>
 8004e2c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e30:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	66bb      	str	r3, [r7, #104]	; 0x68
 8004e38:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e3c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e46:	b29b      	uxth	r3, r3
 8004e48:	461a      	mov	r2, r3
 8004e4a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004e4c:	4413      	add	r3, r2
 8004e4e:	66bb      	str	r3, [r7, #104]	; 0x68
 8004e50:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e54:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	781b      	ldrb	r3, [r3, #0]
 8004e5c:	011a      	lsls	r2, r3, #4
 8004e5e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004e60:	4413      	add	r3, r2
 8004e62:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004e66:	667b      	str	r3, [r7, #100]	; 0x64
 8004e68:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d112      	bne.n	8004e96 <USB_EPStartXfer+0xdda>
 8004e70:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004e72:	881b      	ldrh	r3, [r3, #0]
 8004e74:	b29b      	uxth	r3, r3
 8004e76:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004e7a:	b29a      	uxth	r2, r3
 8004e7c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004e7e:	801a      	strh	r2, [r3, #0]
 8004e80:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004e82:	881b      	ldrh	r3, [r3, #0]
 8004e84:	b29b      	uxth	r3, r3
 8004e86:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e8a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e8e:	b29a      	uxth	r2, r3
 8004e90:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004e92:	801a      	strh	r2, [r3, #0]
 8004e94:	e063      	b.n	8004f5e <USB_EPStartXfer+0xea2>
 8004e96:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004e9a:	2b3e      	cmp	r3, #62	; 0x3e
 8004e9c:	d817      	bhi.n	8004ece <USB_EPStartXfer+0xe12>
 8004e9e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004ea2:	085b      	lsrs	r3, r3, #1
 8004ea4:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8004ea8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004eac:	f003 0301 	and.w	r3, r3, #1
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d004      	beq.n	8004ebe <USB_EPStartXfer+0xe02>
 8004eb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004eb8:	3301      	adds	r3, #1
 8004eba:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8004ebe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004ec2:	b29b      	uxth	r3, r3
 8004ec4:	029b      	lsls	r3, r3, #10
 8004ec6:	b29a      	uxth	r2, r3
 8004ec8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004eca:	801a      	strh	r2, [r3, #0]
 8004ecc:	e047      	b.n	8004f5e <USB_EPStartXfer+0xea2>
 8004ece:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004ed2:	095b      	lsrs	r3, r3, #5
 8004ed4:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8004ed8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004edc:	f003 031f 	and.w	r3, r3, #31
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d104      	bne.n	8004eee <USB_EPStartXfer+0xe32>
 8004ee4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004ee8:	3b01      	subs	r3, #1
 8004eea:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8004eee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004ef2:	b29b      	uxth	r3, r3
 8004ef4:	029b      	lsls	r3, r3, #10
 8004ef6:	b29b      	uxth	r3, r3
 8004ef8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004efc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f00:	b29a      	uxth	r2, r3
 8004f02:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004f04:	801a      	strh	r2, [r3, #0]
 8004f06:	e02a      	b.n	8004f5e <USB_EPStartXfer+0xea2>
 8004f08:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f0c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	785b      	ldrb	r3, [r3, #1]
 8004f14:	2b01      	cmp	r3, #1
 8004f16:	d122      	bne.n	8004f5e <USB_EPStartXfer+0xea2>
 8004f18:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f1c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	673b      	str	r3, [r7, #112]	; 0x70
 8004f24:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f28:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f32:	b29b      	uxth	r3, r3
 8004f34:	461a      	mov	r2, r3
 8004f36:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004f38:	4413      	add	r3, r2
 8004f3a:	673b      	str	r3, [r7, #112]	; 0x70
 8004f3c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f40:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	781b      	ldrb	r3, [r3, #0]
 8004f48:	011a      	lsls	r2, r3, #4
 8004f4a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004f4c:	4413      	add	r3, r2
 8004f4e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004f52:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004f54:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004f58:	b29a      	uxth	r2, r3
 8004f5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f5c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8004f5e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f62:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	891b      	ldrh	r3, [r3, #8]
 8004f6a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004f6e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f72:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	6959      	ldr	r1, [r3, #20]
 8004f7a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004f7e:	b29b      	uxth	r3, r3
 8004f80:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004f84:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8004f88:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8004f8c:	6800      	ldr	r0, [r0, #0]
 8004f8e:	f001 f80b 	bl	8005fa8 <USB_WritePMA>
 8004f92:	e1d8      	b.n	8005346 <USB_EPStartXfer+0x128a>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004f94:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f98:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	785b      	ldrb	r3, [r3, #1]
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d178      	bne.n	8005096 <USB_EPStartXfer+0xfda>
 8004fa4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004fa8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004fb2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004fb6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004fc0:	b29b      	uxth	r3, r3
 8004fc2:	461a      	mov	r2, r3
 8004fc4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004fc8:	4413      	add	r3, r2
 8004fca:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004fce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004fd2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	781b      	ldrb	r3, [r3, #0]
 8004fda:	011a      	lsls	r2, r3, #4
 8004fdc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004fe0:	4413      	add	r3, r2
 8004fe2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004fe6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004fea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d116      	bne.n	8005020 <USB_EPStartXfer+0xf64>
 8004ff2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004ff6:	881b      	ldrh	r3, [r3, #0]
 8004ff8:	b29b      	uxth	r3, r3
 8004ffa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004ffe:	b29a      	uxth	r2, r3
 8005000:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005004:	801a      	strh	r2, [r3, #0]
 8005006:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800500a:	881b      	ldrh	r3, [r3, #0]
 800500c:	b29b      	uxth	r3, r3
 800500e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005012:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005016:	b29a      	uxth	r2, r3
 8005018:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800501c:	801a      	strh	r2, [r3, #0]
 800501e:	e06b      	b.n	80050f8 <USB_EPStartXfer+0x103c>
 8005020:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005024:	2b3e      	cmp	r3, #62	; 0x3e
 8005026:	d818      	bhi.n	800505a <USB_EPStartXfer+0xf9e>
 8005028:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800502c:	085b      	lsrs	r3, r3, #1
 800502e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8005032:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005036:	f003 0301 	and.w	r3, r3, #1
 800503a:	2b00      	cmp	r3, #0
 800503c:	d004      	beq.n	8005048 <USB_EPStartXfer+0xf8c>
 800503e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005042:	3301      	adds	r3, #1
 8005044:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8005048:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800504c:	b29b      	uxth	r3, r3
 800504e:	029b      	lsls	r3, r3, #10
 8005050:	b29a      	uxth	r2, r3
 8005052:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005056:	801a      	strh	r2, [r3, #0]
 8005058:	e04e      	b.n	80050f8 <USB_EPStartXfer+0x103c>
 800505a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800505e:	095b      	lsrs	r3, r3, #5
 8005060:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8005064:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005068:	f003 031f 	and.w	r3, r3, #31
 800506c:	2b00      	cmp	r3, #0
 800506e:	d104      	bne.n	800507a <USB_EPStartXfer+0xfbe>
 8005070:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005074:	3b01      	subs	r3, #1
 8005076:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800507a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800507e:	b29b      	uxth	r3, r3
 8005080:	029b      	lsls	r3, r3, #10
 8005082:	b29b      	uxth	r3, r3
 8005084:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005088:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800508c:	b29a      	uxth	r2, r3
 800508e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005092:	801a      	strh	r2, [r3, #0]
 8005094:	e030      	b.n	80050f8 <USB_EPStartXfer+0x103c>
 8005096:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800509a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	785b      	ldrb	r3, [r3, #1]
 80050a2:	2b01      	cmp	r3, #1
 80050a4:	d128      	bne.n	80050f8 <USB_EPStartXfer+0x103c>
 80050a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80050aa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80050b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80050b8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80050c2:	b29b      	uxth	r3, r3
 80050c4:	461a      	mov	r2, r3
 80050c6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80050ca:	4413      	add	r3, r2
 80050cc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80050d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80050d4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	781b      	ldrb	r3, [r3, #0]
 80050dc:	011a      	lsls	r2, r3, #4
 80050de:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80050e2:	4413      	add	r3, r2
 80050e4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80050e8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80050ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80050f0:	b29a      	uxth	r2, r3
 80050f2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80050f6:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80050f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80050fc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	891b      	ldrh	r3, [r3, #8]
 8005104:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005108:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800510c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	6959      	ldr	r1, [r3, #20]
 8005114:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005118:	b29b      	uxth	r3, r3
 800511a:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800511e:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005122:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005126:	6800      	ldr	r0, [r0, #0]
 8005128:	f000 ff3e 	bl	8005fa8 <USB_WritePMA>
          ep->xfer_buff += len;
 800512c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005130:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	695a      	ldr	r2, [r3, #20]
 8005138:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800513c:	441a      	add	r2, r3
 800513e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005142:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 800514a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800514e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	6a1a      	ldr	r2, [r3, #32]
 8005156:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800515a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	691b      	ldr	r3, [r3, #16]
 8005162:	429a      	cmp	r2, r3
 8005164:	d90f      	bls.n	8005186 <USB_EPStartXfer+0x10ca>
          {
            ep->xfer_len_db -= len;
 8005166:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800516a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	6a1a      	ldr	r2, [r3, #32]
 8005172:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005176:	1ad2      	subs	r2, r2, r3
 8005178:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800517c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	621a      	str	r2, [r3, #32]
 8005184:	e00e      	b.n	80051a4 <USB_EPStartXfer+0x10e8>
          }
          else
          {
            len = ep->xfer_len_db;
 8005186:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800518a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	6a1b      	ldr	r3, [r3, #32]
 8005192:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8005196:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800519a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	2200      	movs	r2, #0
 80051a2:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 80051a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	f000 80cc 	beq.w	8005346 <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80051ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051b2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80051bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051c0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	785b      	ldrb	r3, [r3, #1]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d178      	bne.n	80052be <USB_EPStartXfer+0x1202>
 80051cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051d0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80051da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051de:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80051e8:	b29b      	uxth	r3, r3
 80051ea:	461a      	mov	r2, r3
 80051ec:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80051f0:	4413      	add	r3, r2
 80051f2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80051f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051fa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	781b      	ldrb	r3, [r3, #0]
 8005202:	011a      	lsls	r2, r3, #4
 8005204:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005208:	4413      	add	r3, r2
 800520a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800520e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005212:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005216:	2b00      	cmp	r3, #0
 8005218:	d116      	bne.n	8005248 <USB_EPStartXfer+0x118c>
 800521a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800521e:	881b      	ldrh	r3, [r3, #0]
 8005220:	b29b      	uxth	r3, r3
 8005222:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005226:	b29a      	uxth	r2, r3
 8005228:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800522c:	801a      	strh	r2, [r3, #0]
 800522e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005232:	881b      	ldrh	r3, [r3, #0]
 8005234:	b29b      	uxth	r3, r3
 8005236:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800523a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800523e:	b29a      	uxth	r2, r3
 8005240:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005244:	801a      	strh	r2, [r3, #0]
 8005246:	e064      	b.n	8005312 <USB_EPStartXfer+0x1256>
 8005248:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800524c:	2b3e      	cmp	r3, #62	; 0x3e
 800524e:	d818      	bhi.n	8005282 <USB_EPStartXfer+0x11c6>
 8005250:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005254:	085b      	lsrs	r3, r3, #1
 8005256:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800525a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800525e:	f003 0301 	and.w	r3, r3, #1
 8005262:	2b00      	cmp	r3, #0
 8005264:	d004      	beq.n	8005270 <USB_EPStartXfer+0x11b4>
 8005266:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800526a:	3301      	adds	r3, #1
 800526c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005270:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005274:	b29b      	uxth	r3, r3
 8005276:	029b      	lsls	r3, r3, #10
 8005278:	b29a      	uxth	r2, r3
 800527a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800527e:	801a      	strh	r2, [r3, #0]
 8005280:	e047      	b.n	8005312 <USB_EPStartXfer+0x1256>
 8005282:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005286:	095b      	lsrs	r3, r3, #5
 8005288:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800528c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005290:	f003 031f 	and.w	r3, r3, #31
 8005294:	2b00      	cmp	r3, #0
 8005296:	d104      	bne.n	80052a2 <USB_EPStartXfer+0x11e6>
 8005298:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800529c:	3b01      	subs	r3, #1
 800529e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80052a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80052a6:	b29b      	uxth	r3, r3
 80052a8:	029b      	lsls	r3, r3, #10
 80052aa:	b29b      	uxth	r3, r3
 80052ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80052b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80052b4:	b29a      	uxth	r2, r3
 80052b6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80052ba:	801a      	strh	r2, [r3, #0]
 80052bc:	e029      	b.n	8005312 <USB_EPStartXfer+0x1256>
 80052be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80052c2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	785b      	ldrb	r3, [r3, #1]
 80052ca:	2b01      	cmp	r3, #1
 80052cc:	d121      	bne.n	8005312 <USB_EPStartXfer+0x1256>
 80052ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80052d2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80052dc:	b29b      	uxth	r3, r3
 80052de:	461a      	mov	r2, r3
 80052e0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80052e4:	4413      	add	r3, r2
 80052e6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80052ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80052ee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	781b      	ldrb	r3, [r3, #0]
 80052f6:	011a      	lsls	r2, r3, #4
 80052f8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80052fc:	4413      	add	r3, r2
 80052fe:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005302:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8005306:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800530a:	b29a      	uxth	r2, r3
 800530c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005310:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005312:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005316:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	895b      	ldrh	r3, [r3, #10]
 800531e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005322:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005326:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	6959      	ldr	r1, [r3, #20]
 800532e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005332:	b29b      	uxth	r3, r3
 8005334:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005338:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800533c:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005340:	6800      	ldr	r0, [r0, #0]
 8005342:	f000 fe31 	bl	8005fa8 <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8005346:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800534a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800534e:	681a      	ldr	r2, [r3, #0]
 8005350:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005354:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	781b      	ldrb	r3, [r3, #0]
 800535c:	009b      	lsls	r3, r3, #2
 800535e:	4413      	add	r3, r2
 8005360:	881b      	ldrh	r3, [r3, #0]
 8005362:	b29b      	uxth	r3, r3
 8005364:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005368:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 800536c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005370:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005374:	8013      	strh	r3, [r2, #0]
 8005376:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800537a:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 800537e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005382:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8005386:	8812      	ldrh	r2, [r2, #0]
 8005388:	f082 0210 	eor.w	r2, r2, #16
 800538c:	801a      	strh	r2, [r3, #0]
 800538e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005392:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8005396:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800539a:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 800539e:	8812      	ldrh	r2, [r2, #0]
 80053a0:	f082 0220 	eor.w	r2, r2, #32
 80053a4:	801a      	strh	r2, [r3, #0]
 80053a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053aa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80053ae:	681a      	ldr	r2, [r3, #0]
 80053b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053b4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	781b      	ldrb	r3, [r3, #0]
 80053bc:	009b      	lsls	r3, r3, #2
 80053be:	441a      	add	r2, r3
 80053c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053c4:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 80053c8:	881b      	ldrh	r3, [r3, #0]
 80053ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80053ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80053d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80053d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80053da:	b29b      	uxth	r3, r3
 80053dc:	8013      	strh	r3, [r2, #0]
 80053de:	f000 bc9f 	b.w	8005d20 <USB_EPStartXfer+0x1c64>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80053e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053e6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	7b1b      	ldrb	r3, [r3, #12]
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	f040 80ae 	bne.w	8005550 <USB_EPStartXfer+0x1494>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80053f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053f8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	699a      	ldr	r2, [r3, #24]
 8005400:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005404:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	691b      	ldr	r3, [r3, #16]
 800540c:	429a      	cmp	r2, r3
 800540e:	d917      	bls.n	8005440 <USB_EPStartXfer+0x1384>
      {
        len = ep->maxpacket;
 8005410:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005414:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	691b      	ldr	r3, [r3, #16]
 800541c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 8005420:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005424:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	699a      	ldr	r2, [r3, #24]
 800542c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005430:	1ad2      	subs	r2, r2, r3
 8005432:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005436:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	619a      	str	r2, [r3, #24]
 800543e:	e00e      	b.n	800545e <USB_EPStartXfer+0x13a2>
      }
      else
      {
        len = ep->xfer_len;
 8005440:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005444:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	699b      	ldr	r3, [r3, #24]
 800544c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 8005450:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005454:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	2200      	movs	r2, #0
 800545c:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800545e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005462:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800546c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005470:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800547a:	b29b      	uxth	r3, r3
 800547c:	461a      	mov	r2, r3
 800547e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005482:	4413      	add	r3, r2
 8005484:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005488:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800548c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	781b      	ldrb	r3, [r3, #0]
 8005494:	011a      	lsls	r2, r3, #4
 8005496:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800549a:	4413      	add	r3, r2
 800549c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80054a0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80054a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d116      	bne.n	80054da <USB_EPStartXfer+0x141e>
 80054ac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80054b0:	881b      	ldrh	r3, [r3, #0]
 80054b2:	b29b      	uxth	r3, r3
 80054b4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80054b8:	b29a      	uxth	r2, r3
 80054ba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80054be:	801a      	strh	r2, [r3, #0]
 80054c0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80054c4:	881b      	ldrh	r3, [r3, #0]
 80054c6:	b29b      	uxth	r3, r3
 80054c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80054cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80054d0:	b29a      	uxth	r2, r3
 80054d2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80054d6:	801a      	strh	r2, [r3, #0]
 80054d8:	e3e8      	b.n	8005cac <USB_EPStartXfer+0x1bf0>
 80054da:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80054de:	2b3e      	cmp	r3, #62	; 0x3e
 80054e0:	d818      	bhi.n	8005514 <USB_EPStartXfer+0x1458>
 80054e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80054e6:	085b      	lsrs	r3, r3, #1
 80054e8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80054ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80054f0:	f003 0301 	and.w	r3, r3, #1
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d004      	beq.n	8005502 <USB_EPStartXfer+0x1446>
 80054f8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80054fc:	3301      	adds	r3, #1
 80054fe:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8005502:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005506:	b29b      	uxth	r3, r3
 8005508:	029b      	lsls	r3, r3, #10
 800550a:	b29a      	uxth	r2, r3
 800550c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005510:	801a      	strh	r2, [r3, #0]
 8005512:	e3cb      	b.n	8005cac <USB_EPStartXfer+0x1bf0>
 8005514:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005518:	095b      	lsrs	r3, r3, #5
 800551a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800551e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005522:	f003 031f 	and.w	r3, r3, #31
 8005526:	2b00      	cmp	r3, #0
 8005528:	d104      	bne.n	8005534 <USB_EPStartXfer+0x1478>
 800552a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800552e:	3b01      	subs	r3, #1
 8005530:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8005534:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005538:	b29b      	uxth	r3, r3
 800553a:	029b      	lsls	r3, r3, #10
 800553c:	b29b      	uxth	r3, r3
 800553e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005542:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005546:	b29a      	uxth	r2, r3
 8005548:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800554c:	801a      	strh	r2, [r3, #0]
 800554e:	e3ad      	b.n	8005cac <USB_EPStartXfer+0x1bf0>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8005550:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005554:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	78db      	ldrb	r3, [r3, #3]
 800555c:	2b02      	cmp	r3, #2
 800555e:	f040 8200 	bne.w	8005962 <USB_EPStartXfer+0x18a6>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8005562:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005566:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	785b      	ldrb	r3, [r3, #1]
 800556e:	2b00      	cmp	r3, #0
 8005570:	f040 8091 	bne.w	8005696 <USB_EPStartXfer+0x15da>
 8005574:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005578:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005582:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005586:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005590:	b29b      	uxth	r3, r3
 8005592:	461a      	mov	r2, r3
 8005594:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005598:	4413      	add	r3, r2
 800559a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800559e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80055a2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	781b      	ldrb	r3, [r3, #0]
 80055aa:	011a      	lsls	r2, r3, #4
 80055ac:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80055b0:	4413      	add	r3, r2
 80055b2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80055b6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80055ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80055be:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	691b      	ldr	r3, [r3, #16]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d116      	bne.n	80055f8 <USB_EPStartXfer+0x153c>
 80055ca:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80055ce:	881b      	ldrh	r3, [r3, #0]
 80055d0:	b29b      	uxth	r3, r3
 80055d2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80055d6:	b29a      	uxth	r2, r3
 80055d8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80055dc:	801a      	strh	r2, [r3, #0]
 80055de:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80055e2:	881b      	ldrh	r3, [r3, #0]
 80055e4:	b29b      	uxth	r3, r3
 80055e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80055ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80055ee:	b29a      	uxth	r2, r3
 80055f0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80055f4:	801a      	strh	r2, [r3, #0]
 80055f6:	e083      	b.n	8005700 <USB_EPStartXfer+0x1644>
 80055f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80055fc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	691b      	ldr	r3, [r3, #16]
 8005604:	2b3e      	cmp	r3, #62	; 0x3e
 8005606:	d820      	bhi.n	800564a <USB_EPStartXfer+0x158e>
 8005608:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800560c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	691b      	ldr	r3, [r3, #16]
 8005614:	085b      	lsrs	r3, r3, #1
 8005616:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800561a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800561e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	691b      	ldr	r3, [r3, #16]
 8005626:	f003 0301 	and.w	r3, r3, #1
 800562a:	2b00      	cmp	r3, #0
 800562c:	d004      	beq.n	8005638 <USB_EPStartXfer+0x157c>
 800562e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005632:	3301      	adds	r3, #1
 8005634:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005638:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800563c:	b29b      	uxth	r3, r3
 800563e:	029b      	lsls	r3, r3, #10
 8005640:	b29a      	uxth	r2, r3
 8005642:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005646:	801a      	strh	r2, [r3, #0]
 8005648:	e05a      	b.n	8005700 <USB_EPStartXfer+0x1644>
 800564a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800564e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	691b      	ldr	r3, [r3, #16]
 8005656:	095b      	lsrs	r3, r3, #5
 8005658:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800565c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005660:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	691b      	ldr	r3, [r3, #16]
 8005668:	f003 031f 	and.w	r3, r3, #31
 800566c:	2b00      	cmp	r3, #0
 800566e:	d104      	bne.n	800567a <USB_EPStartXfer+0x15be>
 8005670:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005674:	3b01      	subs	r3, #1
 8005676:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800567a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800567e:	b29b      	uxth	r3, r3
 8005680:	029b      	lsls	r3, r3, #10
 8005682:	b29b      	uxth	r3, r3
 8005684:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005688:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800568c:	b29a      	uxth	r2, r3
 800568e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005692:	801a      	strh	r2, [r3, #0]
 8005694:	e034      	b.n	8005700 <USB_EPStartXfer+0x1644>
 8005696:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800569a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	785b      	ldrb	r3, [r3, #1]
 80056a2:	2b01      	cmp	r3, #1
 80056a4:	d12c      	bne.n	8005700 <USB_EPStartXfer+0x1644>
 80056a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056aa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80056b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056b8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80056c2:	b29b      	uxth	r3, r3
 80056c4:	461a      	mov	r2, r3
 80056c6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80056ca:	4413      	add	r3, r2
 80056cc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80056d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056d4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	781b      	ldrb	r3, [r3, #0]
 80056dc:	011a      	lsls	r2, r3, #4
 80056de:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80056e2:	4413      	add	r3, r2
 80056e4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80056e8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80056ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056f0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	691b      	ldr	r3, [r3, #16]
 80056f8:	b29a      	uxth	r2, r3
 80056fa:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80056fe:	801a      	strh	r2, [r3, #0]
 8005700:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005704:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800570e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005712:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	785b      	ldrb	r3, [r3, #1]
 800571a:	2b00      	cmp	r3, #0
 800571c:	f040 8091 	bne.w	8005842 <USB_EPStartXfer+0x1786>
 8005720:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005724:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800572e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005732:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800573c:	b29b      	uxth	r3, r3
 800573e:	461a      	mov	r2, r3
 8005740:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005744:	4413      	add	r3, r2
 8005746:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800574a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800574e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	781b      	ldrb	r3, [r3, #0]
 8005756:	011a      	lsls	r2, r3, #4
 8005758:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800575c:	4413      	add	r3, r2
 800575e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005762:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005766:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800576a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	691b      	ldr	r3, [r3, #16]
 8005772:	2b00      	cmp	r3, #0
 8005774:	d116      	bne.n	80057a4 <USB_EPStartXfer+0x16e8>
 8005776:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800577a:	881b      	ldrh	r3, [r3, #0]
 800577c:	b29b      	uxth	r3, r3
 800577e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005782:	b29a      	uxth	r2, r3
 8005784:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005788:	801a      	strh	r2, [r3, #0]
 800578a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800578e:	881b      	ldrh	r3, [r3, #0]
 8005790:	b29b      	uxth	r3, r3
 8005792:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005796:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800579a:	b29a      	uxth	r2, r3
 800579c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80057a0:	801a      	strh	r2, [r3, #0]
 80057a2:	e07c      	b.n	800589e <USB_EPStartXfer+0x17e2>
 80057a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057a8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	691b      	ldr	r3, [r3, #16]
 80057b0:	2b3e      	cmp	r3, #62	; 0x3e
 80057b2:	d820      	bhi.n	80057f6 <USB_EPStartXfer+0x173a>
 80057b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057b8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	691b      	ldr	r3, [r3, #16]
 80057c0:	085b      	lsrs	r3, r3, #1
 80057c2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80057c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057ca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	691b      	ldr	r3, [r3, #16]
 80057d2:	f003 0301 	and.w	r3, r3, #1
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d004      	beq.n	80057e4 <USB_EPStartXfer+0x1728>
 80057da:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80057de:	3301      	adds	r3, #1
 80057e0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80057e4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80057e8:	b29b      	uxth	r3, r3
 80057ea:	029b      	lsls	r3, r3, #10
 80057ec:	b29a      	uxth	r2, r3
 80057ee:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80057f2:	801a      	strh	r2, [r3, #0]
 80057f4:	e053      	b.n	800589e <USB_EPStartXfer+0x17e2>
 80057f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057fa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	691b      	ldr	r3, [r3, #16]
 8005802:	095b      	lsrs	r3, r3, #5
 8005804:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005808:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800580c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	691b      	ldr	r3, [r3, #16]
 8005814:	f003 031f 	and.w	r3, r3, #31
 8005818:	2b00      	cmp	r3, #0
 800581a:	d104      	bne.n	8005826 <USB_EPStartXfer+0x176a>
 800581c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005820:	3b01      	subs	r3, #1
 8005822:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005826:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800582a:	b29b      	uxth	r3, r3
 800582c:	029b      	lsls	r3, r3, #10
 800582e:	b29b      	uxth	r3, r3
 8005830:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005834:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005838:	b29a      	uxth	r2, r3
 800583a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800583e:	801a      	strh	r2, [r3, #0]
 8005840:	e02d      	b.n	800589e <USB_EPStartXfer+0x17e2>
 8005842:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005846:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	785b      	ldrb	r3, [r3, #1]
 800584e:	2b01      	cmp	r3, #1
 8005850:	d125      	bne.n	800589e <USB_EPStartXfer+0x17e2>
 8005852:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005856:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005860:	b29b      	uxth	r3, r3
 8005862:	461a      	mov	r2, r3
 8005864:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005868:	4413      	add	r3, r2
 800586a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800586e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005872:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	781b      	ldrb	r3, [r3, #0]
 800587a:	011a      	lsls	r2, r3, #4
 800587c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005880:	4413      	add	r3, r2
 8005882:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005886:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800588a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800588e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	691b      	ldr	r3, [r3, #16]
 8005896:	b29a      	uxth	r2, r3
 8005898:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800589c:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800589e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058a2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	69db      	ldr	r3, [r3, #28]
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	f000 81fe 	beq.w	8005cac <USB_EPStartXfer+0x1bf0>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80058b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058b4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80058b8:	681a      	ldr	r2, [r3, #0]
 80058ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058be:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	781b      	ldrb	r3, [r3, #0]
 80058c6:	009b      	lsls	r3, r3, #2
 80058c8:	4413      	add	r3, r2
 80058ca:	881b      	ldrh	r3, [r3, #0]
 80058cc:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80058d0:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80058d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d005      	beq.n	80058e8 <USB_EPStartXfer+0x182c>
 80058dc:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80058e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d10d      	bne.n	8005904 <USB_EPStartXfer+0x1848>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80058e8:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80058ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	f040 81db 	bne.w	8005cac <USB_EPStartXfer+0x1bf0>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80058f6:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80058fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058fe:	2b00      	cmp	r3, #0
 8005900:	f040 81d4 	bne.w	8005cac <USB_EPStartXfer+0x1bf0>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8005904:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005908:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800590c:	681a      	ldr	r2, [r3, #0]
 800590e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005912:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	781b      	ldrb	r3, [r3, #0]
 800591a:	009b      	lsls	r3, r3, #2
 800591c:	4413      	add	r3, r2
 800591e:	881b      	ldrh	r3, [r3, #0]
 8005920:	b29b      	uxth	r3, r3
 8005922:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005926:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800592a:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 800592e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005932:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005936:	681a      	ldr	r2, [r3, #0]
 8005938:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800593c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	781b      	ldrb	r3, [r3, #0]
 8005944:	009b      	lsls	r3, r3, #2
 8005946:	441a      	add	r2, r3
 8005948:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 800594c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005950:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005954:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005958:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800595c:	b29b      	uxth	r3, r3
 800595e:	8013      	strh	r3, [r2, #0]
 8005960:	e1a4      	b.n	8005cac <USB_EPStartXfer+0x1bf0>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8005962:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005966:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	78db      	ldrb	r3, [r3, #3]
 800596e:	2b01      	cmp	r3, #1
 8005970:	f040 819a 	bne.w	8005ca8 <USB_EPStartXfer+0x1bec>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8005974:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005978:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	699a      	ldr	r2, [r3, #24]
 8005980:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005984:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	691b      	ldr	r3, [r3, #16]
 800598c:	429a      	cmp	r2, r3
 800598e:	d917      	bls.n	80059c0 <USB_EPStartXfer+0x1904>
        {
          len = ep->maxpacket;
 8005990:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005994:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	691b      	ldr	r3, [r3, #16]
 800599c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 80059a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059a4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	699a      	ldr	r2, [r3, #24]
 80059ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80059b0:	1ad2      	subs	r2, r2, r3
 80059b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059b6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	619a      	str	r2, [r3, #24]
 80059be:	e00e      	b.n	80059de <USB_EPStartXfer+0x1922>
        }
        else
        {
          len = ep->xfer_len;
 80059c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059c4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	699b      	ldr	r3, [r3, #24]
 80059cc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 80059d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059d4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	2200      	movs	r2, #0
 80059dc:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80059de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059e2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	785b      	ldrb	r3, [r3, #1]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d178      	bne.n	8005ae0 <USB_EPStartXfer+0x1a24>
 80059ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059f2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80059fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a00:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a0a:	b29b      	uxth	r3, r3
 8005a0c:	461a      	mov	r2, r3
 8005a0e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005a12:	4413      	add	r3, r2
 8005a14:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005a18:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a1c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	781b      	ldrb	r3, [r3, #0]
 8005a24:	011a      	lsls	r2, r3, #4
 8005a26:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005a2a:	4413      	add	r3, r2
 8005a2c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005a30:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005a34:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d116      	bne.n	8005a6a <USB_EPStartXfer+0x19ae>
 8005a3c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005a40:	881b      	ldrh	r3, [r3, #0]
 8005a42:	b29b      	uxth	r3, r3
 8005a44:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005a48:	b29a      	uxth	r2, r3
 8005a4a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005a4e:	801a      	strh	r2, [r3, #0]
 8005a50:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005a54:	881b      	ldrh	r3, [r3, #0]
 8005a56:	b29b      	uxth	r3, r3
 8005a58:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a5c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a60:	b29a      	uxth	r2, r3
 8005a62:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005a66:	801a      	strh	r2, [r3, #0]
 8005a68:	e06b      	b.n	8005b42 <USB_EPStartXfer+0x1a86>
 8005a6a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a6e:	2b3e      	cmp	r3, #62	; 0x3e
 8005a70:	d818      	bhi.n	8005aa4 <USB_EPStartXfer+0x19e8>
 8005a72:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a76:	085b      	lsrs	r3, r3, #1
 8005a78:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005a7c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a80:	f003 0301 	and.w	r3, r3, #1
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d004      	beq.n	8005a92 <USB_EPStartXfer+0x19d6>
 8005a88:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005a8c:	3301      	adds	r3, #1
 8005a8e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005a92:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005a96:	b29b      	uxth	r3, r3
 8005a98:	029b      	lsls	r3, r3, #10
 8005a9a:	b29a      	uxth	r2, r3
 8005a9c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005aa0:	801a      	strh	r2, [r3, #0]
 8005aa2:	e04e      	b.n	8005b42 <USB_EPStartXfer+0x1a86>
 8005aa4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005aa8:	095b      	lsrs	r3, r3, #5
 8005aaa:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005aae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ab2:	f003 031f 	and.w	r3, r3, #31
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d104      	bne.n	8005ac4 <USB_EPStartXfer+0x1a08>
 8005aba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005abe:	3b01      	subs	r3, #1
 8005ac0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005ac4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005ac8:	b29b      	uxth	r3, r3
 8005aca:	029b      	lsls	r3, r3, #10
 8005acc:	b29b      	uxth	r3, r3
 8005ace:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ad2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ad6:	b29a      	uxth	r2, r3
 8005ad8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005adc:	801a      	strh	r2, [r3, #0]
 8005ade:	e030      	b.n	8005b42 <USB_EPStartXfer+0x1a86>
 8005ae0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ae4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	785b      	ldrb	r3, [r3, #1]
 8005aec:	2b01      	cmp	r3, #1
 8005aee:	d128      	bne.n	8005b42 <USB_EPStartXfer+0x1a86>
 8005af0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005af4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005afe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b02:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b0c:	b29b      	uxth	r3, r3
 8005b0e:	461a      	mov	r2, r3
 8005b10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b14:	4413      	add	r3, r2
 8005b16:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005b1a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b1e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	781b      	ldrb	r3, [r3, #0]
 8005b26:	011a      	lsls	r2, r3, #4
 8005b28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b2c:	4413      	add	r3, r2
 8005b2e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005b32:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005b36:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b3a:	b29a      	uxth	r2, r3
 8005b3c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005b40:	801a      	strh	r2, [r3, #0]
 8005b42:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b46:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005b50:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b54:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	785b      	ldrb	r3, [r3, #1]
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d178      	bne.n	8005c52 <USB_EPStartXfer+0x1b96>
 8005b60:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b64:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005b6e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b72:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b7c:	b29b      	uxth	r3, r3
 8005b7e:	461a      	mov	r2, r3
 8005b80:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005b84:	4413      	add	r3, r2
 8005b86:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005b8a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b8e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	781b      	ldrb	r3, [r3, #0]
 8005b96:	011a      	lsls	r2, r3, #4
 8005b98:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005b9c:	4413      	add	r3, r2
 8005b9e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005ba2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005ba6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d116      	bne.n	8005bdc <USB_EPStartXfer+0x1b20>
 8005bae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005bb2:	881b      	ldrh	r3, [r3, #0]
 8005bb4:	b29b      	uxth	r3, r3
 8005bb6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005bba:	b29a      	uxth	r2, r3
 8005bbc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005bc0:	801a      	strh	r2, [r3, #0]
 8005bc2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005bc6:	881b      	ldrh	r3, [r3, #0]
 8005bc8:	b29b      	uxth	r3, r3
 8005bca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005bce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005bd2:	b29a      	uxth	r2, r3
 8005bd4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005bd8:	801a      	strh	r2, [r3, #0]
 8005bda:	e067      	b.n	8005cac <USB_EPStartXfer+0x1bf0>
 8005bdc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005be0:	2b3e      	cmp	r3, #62	; 0x3e
 8005be2:	d818      	bhi.n	8005c16 <USB_EPStartXfer+0x1b5a>
 8005be4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005be8:	085b      	lsrs	r3, r3, #1
 8005bea:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005bee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005bf2:	f003 0301 	and.w	r3, r3, #1
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d004      	beq.n	8005c04 <USB_EPStartXfer+0x1b48>
 8005bfa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005bfe:	3301      	adds	r3, #1
 8005c00:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005c04:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005c08:	b29b      	uxth	r3, r3
 8005c0a:	029b      	lsls	r3, r3, #10
 8005c0c:	b29a      	uxth	r2, r3
 8005c0e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005c12:	801a      	strh	r2, [r3, #0]
 8005c14:	e04a      	b.n	8005cac <USB_EPStartXfer+0x1bf0>
 8005c16:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c1a:	095b      	lsrs	r3, r3, #5
 8005c1c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005c20:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c24:	f003 031f 	and.w	r3, r3, #31
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d104      	bne.n	8005c36 <USB_EPStartXfer+0x1b7a>
 8005c2c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005c30:	3b01      	subs	r3, #1
 8005c32:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005c36:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005c3a:	b29b      	uxth	r3, r3
 8005c3c:	029b      	lsls	r3, r3, #10
 8005c3e:	b29b      	uxth	r3, r3
 8005c40:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c44:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c48:	b29a      	uxth	r2, r3
 8005c4a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005c4e:	801a      	strh	r2, [r3, #0]
 8005c50:	e02c      	b.n	8005cac <USB_EPStartXfer+0x1bf0>
 8005c52:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c56:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	785b      	ldrb	r3, [r3, #1]
 8005c5e:	2b01      	cmp	r3, #1
 8005c60:	d124      	bne.n	8005cac <USB_EPStartXfer+0x1bf0>
 8005c62:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c66:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c70:	b29b      	uxth	r3, r3
 8005c72:	461a      	mov	r2, r3
 8005c74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c78:	4413      	add	r3, r2
 8005c7a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005c7e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c82:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	781b      	ldrb	r3, [r3, #0]
 8005c8a:	011a      	lsls	r2, r3, #4
 8005c8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c90:	4413      	add	r3, r2
 8005c92:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005c96:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005c9a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c9e:	b29a      	uxth	r2, r3
 8005ca0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ca4:	801a      	strh	r2, [r3, #0]
 8005ca6:	e001      	b.n	8005cac <USB_EPStartXfer+0x1bf0>
      }
      else
      {
        return HAL_ERROR;
 8005ca8:	2301      	movs	r3, #1
 8005caa:	e03a      	b.n	8005d22 <USB_EPStartXfer+0x1c66>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005cac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005cb0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005cb4:	681a      	ldr	r2, [r3, #0]
 8005cb6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005cba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	781b      	ldrb	r3, [r3, #0]
 8005cc2:	009b      	lsls	r3, r3, #2
 8005cc4:	4413      	add	r3, r2
 8005cc6:	881b      	ldrh	r3, [r3, #0]
 8005cc8:	b29b      	uxth	r3, r3
 8005cca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005cce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cd2:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8005cd6:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8005cda:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005cde:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8005ce2:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8005ce6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005cea:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8005cee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005cf2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005cf6:	681a      	ldr	r2, [r3, #0]
 8005cf8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005cfc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	781b      	ldrb	r3, [r3, #0]
 8005d04:	009b      	lsls	r3, r3, #2
 8005d06:	441a      	add	r2, r3
 8005d08:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8005d0c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d10:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d14:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d1c:	b29b      	uxth	r3, r3
 8005d1e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8005d20:	2300      	movs	r3, #0
}
 8005d22:	4618      	mov	r0, r3
 8005d24:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	bd80      	pop	{r7, pc}

08005d2c <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005d2c:	b480      	push	{r7}
 8005d2e:	b085      	sub	sp, #20
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
 8005d34:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8005d36:	683b      	ldr	r3, [r7, #0]
 8005d38:	785b      	ldrb	r3, [r3, #1]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d020      	beq.n	8005d80 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8005d3e:	687a      	ldr	r2, [r7, #4]
 8005d40:	683b      	ldr	r3, [r7, #0]
 8005d42:	781b      	ldrb	r3, [r3, #0]
 8005d44:	009b      	lsls	r3, r3, #2
 8005d46:	4413      	add	r3, r2
 8005d48:	881b      	ldrh	r3, [r3, #0]
 8005d4a:	b29b      	uxth	r3, r3
 8005d4c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d50:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d54:	81bb      	strh	r3, [r7, #12]
 8005d56:	89bb      	ldrh	r3, [r7, #12]
 8005d58:	f083 0310 	eor.w	r3, r3, #16
 8005d5c:	81bb      	strh	r3, [r7, #12]
 8005d5e:	687a      	ldr	r2, [r7, #4]
 8005d60:	683b      	ldr	r3, [r7, #0]
 8005d62:	781b      	ldrb	r3, [r3, #0]
 8005d64:	009b      	lsls	r3, r3, #2
 8005d66:	441a      	add	r2, r3
 8005d68:	89bb      	ldrh	r3, [r7, #12]
 8005d6a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d6e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d7a:	b29b      	uxth	r3, r3
 8005d7c:	8013      	strh	r3, [r2, #0]
 8005d7e:	e01f      	b.n	8005dc0 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8005d80:	687a      	ldr	r2, [r7, #4]
 8005d82:	683b      	ldr	r3, [r7, #0]
 8005d84:	781b      	ldrb	r3, [r3, #0]
 8005d86:	009b      	lsls	r3, r3, #2
 8005d88:	4413      	add	r3, r2
 8005d8a:	881b      	ldrh	r3, [r3, #0]
 8005d8c:	b29b      	uxth	r3, r3
 8005d8e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005d92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d96:	81fb      	strh	r3, [r7, #14]
 8005d98:	89fb      	ldrh	r3, [r7, #14]
 8005d9a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005d9e:	81fb      	strh	r3, [r7, #14]
 8005da0:	687a      	ldr	r2, [r7, #4]
 8005da2:	683b      	ldr	r3, [r7, #0]
 8005da4:	781b      	ldrb	r3, [r3, #0]
 8005da6:	009b      	lsls	r3, r3, #2
 8005da8:	441a      	add	r2, r3
 8005daa:	89fb      	ldrh	r3, [r7, #14]
 8005dac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005db0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005db4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005db8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005dbc:	b29b      	uxth	r3, r3
 8005dbe:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8005dc0:	2300      	movs	r3, #0
}
 8005dc2:	4618      	mov	r0, r3
 8005dc4:	3714      	adds	r7, #20
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	bc80      	pop	{r7}
 8005dca:	4770      	bx	lr

08005dcc <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005dcc:	b480      	push	{r7}
 8005dce:	b087      	sub	sp, #28
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	6078      	str	r0, [r7, #4]
 8005dd4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005dd6:	683b      	ldr	r3, [r7, #0]
 8005dd8:	7b1b      	ldrb	r3, [r3, #12]
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	f040 809d 	bne.w	8005f1a <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8005de0:	683b      	ldr	r3, [r7, #0]
 8005de2:	785b      	ldrb	r3, [r3, #1]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d04c      	beq.n	8005e82 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005de8:	687a      	ldr	r2, [r7, #4]
 8005dea:	683b      	ldr	r3, [r7, #0]
 8005dec:	781b      	ldrb	r3, [r3, #0]
 8005dee:	009b      	lsls	r3, r3, #2
 8005df0:	4413      	add	r3, r2
 8005df2:	881b      	ldrh	r3, [r3, #0]
 8005df4:	823b      	strh	r3, [r7, #16]
 8005df6:	8a3b      	ldrh	r3, [r7, #16]
 8005df8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d01b      	beq.n	8005e38 <USB_EPClearStall+0x6c>
 8005e00:	687a      	ldr	r2, [r7, #4]
 8005e02:	683b      	ldr	r3, [r7, #0]
 8005e04:	781b      	ldrb	r3, [r3, #0]
 8005e06:	009b      	lsls	r3, r3, #2
 8005e08:	4413      	add	r3, r2
 8005e0a:	881b      	ldrh	r3, [r3, #0]
 8005e0c:	b29b      	uxth	r3, r3
 8005e0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e16:	81fb      	strh	r3, [r7, #14]
 8005e18:	687a      	ldr	r2, [r7, #4]
 8005e1a:	683b      	ldr	r3, [r7, #0]
 8005e1c:	781b      	ldrb	r3, [r3, #0]
 8005e1e:	009b      	lsls	r3, r3, #2
 8005e20:	441a      	add	r2, r3
 8005e22:	89fb      	ldrh	r3, [r7, #14]
 8005e24:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e28:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e2c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e30:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005e34:	b29b      	uxth	r3, r3
 8005e36:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005e38:	683b      	ldr	r3, [r7, #0]
 8005e3a:	78db      	ldrb	r3, [r3, #3]
 8005e3c:	2b01      	cmp	r3, #1
 8005e3e:	d06c      	beq.n	8005f1a <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005e40:	687a      	ldr	r2, [r7, #4]
 8005e42:	683b      	ldr	r3, [r7, #0]
 8005e44:	781b      	ldrb	r3, [r3, #0]
 8005e46:	009b      	lsls	r3, r3, #2
 8005e48:	4413      	add	r3, r2
 8005e4a:	881b      	ldrh	r3, [r3, #0]
 8005e4c:	b29b      	uxth	r3, r3
 8005e4e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e52:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e56:	81bb      	strh	r3, [r7, #12]
 8005e58:	89bb      	ldrh	r3, [r7, #12]
 8005e5a:	f083 0320 	eor.w	r3, r3, #32
 8005e5e:	81bb      	strh	r3, [r7, #12]
 8005e60:	687a      	ldr	r2, [r7, #4]
 8005e62:	683b      	ldr	r3, [r7, #0]
 8005e64:	781b      	ldrb	r3, [r3, #0]
 8005e66:	009b      	lsls	r3, r3, #2
 8005e68:	441a      	add	r2, r3
 8005e6a:	89bb      	ldrh	r3, [r7, #12]
 8005e6c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e70:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e74:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e7c:	b29b      	uxth	r3, r3
 8005e7e:	8013      	strh	r3, [r2, #0]
 8005e80:	e04b      	b.n	8005f1a <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005e82:	687a      	ldr	r2, [r7, #4]
 8005e84:	683b      	ldr	r3, [r7, #0]
 8005e86:	781b      	ldrb	r3, [r3, #0]
 8005e88:	009b      	lsls	r3, r3, #2
 8005e8a:	4413      	add	r3, r2
 8005e8c:	881b      	ldrh	r3, [r3, #0]
 8005e8e:	82fb      	strh	r3, [r7, #22]
 8005e90:	8afb      	ldrh	r3, [r7, #22]
 8005e92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d01b      	beq.n	8005ed2 <USB_EPClearStall+0x106>
 8005e9a:	687a      	ldr	r2, [r7, #4]
 8005e9c:	683b      	ldr	r3, [r7, #0]
 8005e9e:	781b      	ldrb	r3, [r3, #0]
 8005ea0:	009b      	lsls	r3, r3, #2
 8005ea2:	4413      	add	r3, r2
 8005ea4:	881b      	ldrh	r3, [r3, #0]
 8005ea6:	b29b      	uxth	r3, r3
 8005ea8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005eac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005eb0:	82bb      	strh	r3, [r7, #20]
 8005eb2:	687a      	ldr	r2, [r7, #4]
 8005eb4:	683b      	ldr	r3, [r7, #0]
 8005eb6:	781b      	ldrb	r3, [r3, #0]
 8005eb8:	009b      	lsls	r3, r3, #2
 8005eba:	441a      	add	r2, r3
 8005ebc:	8abb      	ldrh	r3, [r7, #20]
 8005ebe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ec2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ec6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005eca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ece:	b29b      	uxth	r3, r3
 8005ed0:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005ed2:	687a      	ldr	r2, [r7, #4]
 8005ed4:	683b      	ldr	r3, [r7, #0]
 8005ed6:	781b      	ldrb	r3, [r3, #0]
 8005ed8:	009b      	lsls	r3, r3, #2
 8005eda:	4413      	add	r3, r2
 8005edc:	881b      	ldrh	r3, [r3, #0]
 8005ede:	b29b      	uxth	r3, r3
 8005ee0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005ee4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ee8:	827b      	strh	r3, [r7, #18]
 8005eea:	8a7b      	ldrh	r3, [r7, #18]
 8005eec:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005ef0:	827b      	strh	r3, [r7, #18]
 8005ef2:	8a7b      	ldrh	r3, [r7, #18]
 8005ef4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005ef8:	827b      	strh	r3, [r7, #18]
 8005efa:	687a      	ldr	r2, [r7, #4]
 8005efc:	683b      	ldr	r3, [r7, #0]
 8005efe:	781b      	ldrb	r3, [r3, #0]
 8005f00:	009b      	lsls	r3, r3, #2
 8005f02:	441a      	add	r2, r3
 8005f04:	8a7b      	ldrh	r3, [r7, #18]
 8005f06:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f0a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f16:	b29b      	uxth	r3, r3
 8005f18:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8005f1a:	2300      	movs	r3, #0
}
 8005f1c:	4618      	mov	r0, r3
 8005f1e:	371c      	adds	r7, #28
 8005f20:	46bd      	mov	sp, r7
 8005f22:	bc80      	pop	{r7}
 8005f24:	4770      	bx	lr

08005f26 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8005f26:	b480      	push	{r7}
 8005f28:	b083      	sub	sp, #12
 8005f2a:	af00      	add	r7, sp, #0
 8005f2c:	6078      	str	r0, [r7, #4]
 8005f2e:	460b      	mov	r3, r1
 8005f30:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8005f32:	78fb      	ldrb	r3, [r7, #3]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d103      	bne.n	8005f40 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	2280      	movs	r2, #128	; 0x80
 8005f3c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8005f40:	2300      	movs	r3, #0
}
 8005f42:	4618      	mov	r0, r3
 8005f44:	370c      	adds	r7, #12
 8005f46:	46bd      	mov	sp, r7
 8005f48:	bc80      	pop	{r7}
 8005f4a:	4770      	bx	lr

08005f4c <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8005f4c:	b480      	push	{r7}
 8005f4e:	b083      	sub	sp, #12
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8005f54:	2300      	movs	r3, #0
}
 8005f56:	4618      	mov	r0, r3
 8005f58:	370c      	adds	r7, #12
 8005f5a:	46bd      	mov	sp, r7
 8005f5c:	bc80      	pop	{r7}
 8005f5e:	4770      	bx	lr

08005f60 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8005f60:	b480      	push	{r7}
 8005f62:	b083      	sub	sp, #12
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8005f68:	2300      	movs	r3, #0
}
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	370c      	adds	r7, #12
 8005f6e:	46bd      	mov	sp, r7
 8005f70:	bc80      	pop	{r7}
 8005f72:	4770      	bx	lr

08005f74 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8005f74:	b480      	push	{r7}
 8005f76:	b085      	sub	sp, #20
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005f82:	b29b      	uxth	r3, r3
 8005f84:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8005f86:	68fb      	ldr	r3, [r7, #12]
}
 8005f88:	4618      	mov	r0, r3
 8005f8a:	3714      	adds	r7, #20
 8005f8c:	46bd      	mov	sp, r7
 8005f8e:	bc80      	pop	{r7}
 8005f90:	4770      	bx	lr

08005f92 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8005f92:	b480      	push	{r7}
 8005f94:	b083      	sub	sp, #12
 8005f96:	af00      	add	r7, sp, #0
 8005f98:	6078      	str	r0, [r7, #4]
 8005f9a:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8005f9c:	2300      	movs	r3, #0
}
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	370c      	adds	r7, #12
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	bc80      	pop	{r7}
 8005fa6:	4770      	bx	lr

08005fa8 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8005fa8:	b480      	push	{r7}
 8005faa:	b08d      	sub	sp, #52	; 0x34
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	60f8      	str	r0, [r7, #12]
 8005fb0:	60b9      	str	r1, [r7, #8]
 8005fb2:	4611      	mov	r1, r2
 8005fb4:	461a      	mov	r2, r3
 8005fb6:	460b      	mov	r3, r1
 8005fb8:	80fb      	strh	r3, [r7, #6]
 8005fba:	4613      	mov	r3, r2
 8005fbc:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8005fbe:	88bb      	ldrh	r3, [r7, #4]
 8005fc0:	3301      	adds	r3, #1
 8005fc2:	085b      	lsrs	r3, r3, #1
 8005fc4:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8005fca:	68bb      	ldr	r3, [r7, #8]
 8005fcc:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005fce:	88fb      	ldrh	r3, [r7, #6]
 8005fd0:	005a      	lsls	r2, r3, #1
 8005fd2:	69fb      	ldr	r3, [r7, #28]
 8005fd4:	4413      	add	r3, r2
 8005fd6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005fda:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8005fdc:	6a3b      	ldr	r3, [r7, #32]
 8005fde:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005fe0:	e01e      	b.n	8006020 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8005fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fe4:	781b      	ldrb	r3, [r3, #0]
 8005fe6:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8005fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fea:	3301      	adds	r3, #1
 8005fec:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8005fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ff0:	781b      	ldrb	r3, [r3, #0]
 8005ff2:	b29b      	uxth	r3, r3
 8005ff4:	021b      	lsls	r3, r3, #8
 8005ff6:	b29b      	uxth	r3, r3
 8005ff8:	461a      	mov	r2, r3
 8005ffa:	69bb      	ldr	r3, [r7, #24]
 8005ffc:	4313      	orrs	r3, r2
 8005ffe:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8006000:	697b      	ldr	r3, [r7, #20]
 8006002:	b29a      	uxth	r2, r3
 8006004:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006006:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8006008:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800600a:	3302      	adds	r3, #2
 800600c:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 800600e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006010:	3302      	adds	r3, #2
 8006012:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8006014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006016:	3301      	adds	r3, #1
 8006018:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 800601a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800601c:	3b01      	subs	r3, #1
 800601e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006020:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006022:	2b00      	cmp	r3, #0
 8006024:	d1dd      	bne.n	8005fe2 <USB_WritePMA+0x3a>
  }
}
 8006026:	bf00      	nop
 8006028:	bf00      	nop
 800602a:	3734      	adds	r7, #52	; 0x34
 800602c:	46bd      	mov	sp, r7
 800602e:	bc80      	pop	{r7}
 8006030:	4770      	bx	lr

08006032 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006032:	b480      	push	{r7}
 8006034:	b08b      	sub	sp, #44	; 0x2c
 8006036:	af00      	add	r7, sp, #0
 8006038:	60f8      	str	r0, [r7, #12]
 800603a:	60b9      	str	r1, [r7, #8]
 800603c:	4611      	mov	r1, r2
 800603e:	461a      	mov	r2, r3
 8006040:	460b      	mov	r3, r1
 8006042:	80fb      	strh	r3, [r7, #6]
 8006044:	4613      	mov	r3, r2
 8006046:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8006048:	88bb      	ldrh	r3, [r7, #4]
 800604a:	085b      	lsrs	r3, r3, #1
 800604c:	b29b      	uxth	r3, r3
 800604e:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006054:	68bb      	ldr	r3, [r7, #8]
 8006056:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006058:	88fb      	ldrh	r3, [r7, #6]
 800605a:	005a      	lsls	r2, r3, #1
 800605c:	697b      	ldr	r3, [r7, #20]
 800605e:	4413      	add	r3, r2
 8006060:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006064:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8006066:	69bb      	ldr	r3, [r7, #24]
 8006068:	627b      	str	r3, [r7, #36]	; 0x24
 800606a:	e01b      	b.n	80060a4 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 800606c:	6a3b      	ldr	r3, [r7, #32]
 800606e:	881b      	ldrh	r3, [r3, #0]
 8006070:	b29b      	uxth	r3, r3
 8006072:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8006074:	6a3b      	ldr	r3, [r7, #32]
 8006076:	3302      	adds	r3, #2
 8006078:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800607a:	693b      	ldr	r3, [r7, #16]
 800607c:	b2da      	uxtb	r2, r3
 800607e:	69fb      	ldr	r3, [r7, #28]
 8006080:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006082:	69fb      	ldr	r3, [r7, #28]
 8006084:	3301      	adds	r3, #1
 8006086:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8006088:	693b      	ldr	r3, [r7, #16]
 800608a:	0a1b      	lsrs	r3, r3, #8
 800608c:	b2da      	uxtb	r2, r3
 800608e:	69fb      	ldr	r3, [r7, #28]
 8006090:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006092:	69fb      	ldr	r3, [r7, #28]
 8006094:	3301      	adds	r3, #1
 8006096:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8006098:	6a3b      	ldr	r3, [r7, #32]
 800609a:	3302      	adds	r3, #2
 800609c:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 800609e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060a0:	3b01      	subs	r3, #1
 80060a2:	627b      	str	r3, [r7, #36]	; 0x24
 80060a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d1e0      	bne.n	800606c <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 80060aa:	88bb      	ldrh	r3, [r7, #4]
 80060ac:	f003 0301 	and.w	r3, r3, #1
 80060b0:	b29b      	uxth	r3, r3
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d007      	beq.n	80060c6 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 80060b6:	6a3b      	ldr	r3, [r7, #32]
 80060b8:	881b      	ldrh	r3, [r3, #0]
 80060ba:	b29b      	uxth	r3, r3
 80060bc:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80060be:	693b      	ldr	r3, [r7, #16]
 80060c0:	b2da      	uxtb	r2, r3
 80060c2:	69fb      	ldr	r3, [r7, #28]
 80060c4:	701a      	strb	r2, [r3, #0]
  }
}
 80060c6:	bf00      	nop
 80060c8:	372c      	adds	r7, #44	; 0x2c
 80060ca:	46bd      	mov	sp, r7
 80060cc:	bc80      	pop	{r7}
 80060ce:	4770      	bx	lr

080060d0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80060d0:	b580      	push	{r7, lr}
 80060d2:	b084      	sub	sp, #16
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]
 80060d8:	460b      	mov	r3, r1
 80060da:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80060dc:	2300      	movs	r3, #0
 80060de:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	7c1b      	ldrb	r3, [r3, #16]
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d115      	bne.n	8006114 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80060e8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80060ec:	2202      	movs	r2, #2
 80060ee:	2181      	movs	r1, #129	; 0x81
 80060f0:	6878      	ldr	r0, [r7, #4]
 80060f2:	f001 feca 	bl	8007e8a <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	2201      	movs	r2, #1
 80060fa:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80060fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006100:	2202      	movs	r2, #2
 8006102:	2101      	movs	r1, #1
 8006104:	6878      	ldr	r0, [r7, #4]
 8006106:	f001 fec0 	bl	8007e8a <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	2201      	movs	r2, #1
 800610e:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8006112:	e012      	b.n	800613a <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006114:	2340      	movs	r3, #64	; 0x40
 8006116:	2202      	movs	r2, #2
 8006118:	2181      	movs	r1, #129	; 0x81
 800611a:	6878      	ldr	r0, [r7, #4]
 800611c:	f001 feb5 	bl	8007e8a <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2201      	movs	r2, #1
 8006124:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006126:	2340      	movs	r3, #64	; 0x40
 8006128:	2202      	movs	r2, #2
 800612a:	2101      	movs	r1, #1
 800612c:	6878      	ldr	r0, [r7, #4]
 800612e:	f001 feac 	bl	8007e8a <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	2201      	movs	r2, #1
 8006136:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800613a:	2308      	movs	r3, #8
 800613c:	2203      	movs	r2, #3
 800613e:	2182      	movs	r1, #130	; 0x82
 8006140:	6878      	ldr	r0, [r7, #4]
 8006142:	f001 fea2 	bl	8007e8a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	2201      	movs	r2, #1
 800614a:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800614c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006150:	f001 ffc2 	bl	80080d8 <USBD_static_malloc>
 8006154:	4602      	mov	r2, r0
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006162:	2b00      	cmp	r3, #0
 8006164:	d102      	bne.n	800616c <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8006166:	2301      	movs	r3, #1
 8006168:	73fb      	strb	r3, [r7, #15]
 800616a:	e026      	b.n	80061ba <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006172:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800617e:	68bb      	ldr	r3, [r7, #8]
 8006180:	2200      	movs	r2, #0
 8006182:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8006186:	68bb      	ldr	r3, [r7, #8]
 8006188:	2200      	movs	r2, #0
 800618a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	7c1b      	ldrb	r3, [r3, #16]
 8006192:	2b00      	cmp	r3, #0
 8006194:	d109      	bne.n	80061aa <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006196:	68bb      	ldr	r3, [r7, #8]
 8006198:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800619c:	f44f 7300 	mov.w	r3, #512	; 0x200
 80061a0:	2101      	movs	r1, #1
 80061a2:	6878      	ldr	r0, [r7, #4]
 80061a4:	f001 ff62 	bl	800806c <USBD_LL_PrepareReceive>
 80061a8:	e007      	b.n	80061ba <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80061aa:	68bb      	ldr	r3, [r7, #8]
 80061ac:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80061b0:	2340      	movs	r3, #64	; 0x40
 80061b2:	2101      	movs	r1, #1
 80061b4:	6878      	ldr	r0, [r7, #4]
 80061b6:	f001 ff59 	bl	800806c <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 80061ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80061bc:	4618      	mov	r0, r3
 80061be:	3710      	adds	r7, #16
 80061c0:	46bd      	mov	sp, r7
 80061c2:	bd80      	pop	{r7, pc}

080061c4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80061c4:	b580      	push	{r7, lr}
 80061c6:	b084      	sub	sp, #16
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	6078      	str	r0, [r7, #4]
 80061cc:	460b      	mov	r3, r1
 80061ce:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80061d0:	2300      	movs	r3, #0
 80061d2:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80061d4:	2181      	movs	r1, #129	; 0x81
 80061d6:	6878      	ldr	r0, [r7, #4]
 80061d8:	f001 fe7d 	bl	8007ed6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	2200      	movs	r2, #0
 80061e0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80061e2:	2101      	movs	r1, #1
 80061e4:	6878      	ldr	r0, [r7, #4]
 80061e6:	f001 fe76 	bl	8007ed6 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	2200      	movs	r2, #0
 80061ee:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80061f2:	2182      	movs	r1, #130	; 0x82
 80061f4:	6878      	ldr	r0, [r7, #4]
 80061f6:	f001 fe6e 	bl	8007ed6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	2200      	movs	r2, #0
 80061fe:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006206:	2b00      	cmp	r3, #0
 8006208:	d00e      	beq.n	8006228 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006210:	685b      	ldr	r3, [r3, #4]
 8006212:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800621a:	4618      	mov	r0, r3
 800621c:	f001 ff68 	bl	80080f0 <USBD_static_free>
    pdev->pClassData = NULL;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	2200      	movs	r2, #0
 8006224:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8006228:	7bfb      	ldrb	r3, [r7, #15]
}
 800622a:	4618      	mov	r0, r3
 800622c:	3710      	adds	r7, #16
 800622e:	46bd      	mov	sp, r7
 8006230:	bd80      	pop	{r7, pc}

08006232 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8006232:	b580      	push	{r7, lr}
 8006234:	b086      	sub	sp, #24
 8006236:	af00      	add	r7, sp, #0
 8006238:	6078      	str	r0, [r7, #4]
 800623a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006242:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8006244:	2300      	movs	r3, #0
 8006246:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8006248:	2300      	movs	r3, #0
 800624a:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800624c:	2300      	movs	r3, #0
 800624e:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006250:	683b      	ldr	r3, [r7, #0]
 8006252:	781b      	ldrb	r3, [r3, #0]
 8006254:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006258:	2b00      	cmp	r3, #0
 800625a:	d039      	beq.n	80062d0 <USBD_CDC_Setup+0x9e>
 800625c:	2b20      	cmp	r3, #32
 800625e:	d17f      	bne.n	8006360 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8006260:	683b      	ldr	r3, [r7, #0]
 8006262:	88db      	ldrh	r3, [r3, #6]
 8006264:	2b00      	cmp	r3, #0
 8006266:	d029      	beq.n	80062bc <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8006268:	683b      	ldr	r3, [r7, #0]
 800626a:	781b      	ldrb	r3, [r3, #0]
 800626c:	b25b      	sxtb	r3, r3
 800626e:	2b00      	cmp	r3, #0
 8006270:	da11      	bge.n	8006296 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006278:	689b      	ldr	r3, [r3, #8]
 800627a:	683a      	ldr	r2, [r7, #0]
 800627c:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 800627e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006280:	683a      	ldr	r2, [r7, #0]
 8006282:	88d2      	ldrh	r2, [r2, #6]
 8006284:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006286:	6939      	ldr	r1, [r7, #16]
 8006288:	683b      	ldr	r3, [r7, #0]
 800628a:	88db      	ldrh	r3, [r3, #6]
 800628c:	461a      	mov	r2, r3
 800628e:	6878      	ldr	r0, [r7, #4]
 8006290:	f001 fa09 	bl	80076a6 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8006294:	e06b      	b.n	800636e <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8006296:	683b      	ldr	r3, [r7, #0]
 8006298:	785a      	ldrb	r2, [r3, #1]
 800629a:	693b      	ldr	r3, [r7, #16]
 800629c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80062a0:	683b      	ldr	r3, [r7, #0]
 80062a2:	88db      	ldrh	r3, [r3, #6]
 80062a4:	b2da      	uxtb	r2, r3
 80062a6:	693b      	ldr	r3, [r7, #16]
 80062a8:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80062ac:	6939      	ldr	r1, [r7, #16]
 80062ae:	683b      	ldr	r3, [r7, #0]
 80062b0:	88db      	ldrh	r3, [r3, #6]
 80062b2:	461a      	mov	r2, r3
 80062b4:	6878      	ldr	r0, [r7, #4]
 80062b6:	f001 fa24 	bl	8007702 <USBD_CtlPrepareRx>
      break;
 80062ba:	e058      	b.n	800636e <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80062c2:	689b      	ldr	r3, [r3, #8]
 80062c4:	683a      	ldr	r2, [r7, #0]
 80062c6:	7850      	ldrb	r0, [r2, #1]
 80062c8:	2200      	movs	r2, #0
 80062ca:	6839      	ldr	r1, [r7, #0]
 80062cc:	4798      	blx	r3
      break;
 80062ce:	e04e      	b.n	800636e <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80062d0:	683b      	ldr	r3, [r7, #0]
 80062d2:	785b      	ldrb	r3, [r3, #1]
 80062d4:	2b0b      	cmp	r3, #11
 80062d6:	d02e      	beq.n	8006336 <USBD_CDC_Setup+0x104>
 80062d8:	2b0b      	cmp	r3, #11
 80062da:	dc38      	bgt.n	800634e <USBD_CDC_Setup+0x11c>
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d002      	beq.n	80062e6 <USBD_CDC_Setup+0xb4>
 80062e0:	2b0a      	cmp	r3, #10
 80062e2:	d014      	beq.n	800630e <USBD_CDC_Setup+0xdc>
 80062e4:	e033      	b.n	800634e <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80062ec:	2b03      	cmp	r3, #3
 80062ee:	d107      	bne.n	8006300 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 80062f0:	f107 030c 	add.w	r3, r7, #12
 80062f4:	2202      	movs	r2, #2
 80062f6:	4619      	mov	r1, r3
 80062f8:	6878      	ldr	r0, [r7, #4]
 80062fa:	f001 f9d4 	bl	80076a6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80062fe:	e02e      	b.n	800635e <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8006300:	6839      	ldr	r1, [r7, #0]
 8006302:	6878      	ldr	r0, [r7, #4]
 8006304:	f001 f965 	bl	80075d2 <USBD_CtlError>
            ret = USBD_FAIL;
 8006308:	2302      	movs	r3, #2
 800630a:	75fb      	strb	r3, [r7, #23]
          break;
 800630c:	e027      	b.n	800635e <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006314:	2b03      	cmp	r3, #3
 8006316:	d107      	bne.n	8006328 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8006318:	f107 030f 	add.w	r3, r7, #15
 800631c:	2201      	movs	r2, #1
 800631e:	4619      	mov	r1, r3
 8006320:	6878      	ldr	r0, [r7, #4]
 8006322:	f001 f9c0 	bl	80076a6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006326:	e01a      	b.n	800635e <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8006328:	6839      	ldr	r1, [r7, #0]
 800632a:	6878      	ldr	r0, [r7, #4]
 800632c:	f001 f951 	bl	80075d2 <USBD_CtlError>
            ret = USBD_FAIL;
 8006330:	2302      	movs	r3, #2
 8006332:	75fb      	strb	r3, [r7, #23]
          break;
 8006334:	e013      	b.n	800635e <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800633c:	2b03      	cmp	r3, #3
 800633e:	d00d      	beq.n	800635c <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8006340:	6839      	ldr	r1, [r7, #0]
 8006342:	6878      	ldr	r0, [r7, #4]
 8006344:	f001 f945 	bl	80075d2 <USBD_CtlError>
            ret = USBD_FAIL;
 8006348:	2302      	movs	r3, #2
 800634a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800634c:	e006      	b.n	800635c <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 800634e:	6839      	ldr	r1, [r7, #0]
 8006350:	6878      	ldr	r0, [r7, #4]
 8006352:	f001 f93e 	bl	80075d2 <USBD_CtlError>
          ret = USBD_FAIL;
 8006356:	2302      	movs	r3, #2
 8006358:	75fb      	strb	r3, [r7, #23]
          break;
 800635a:	e000      	b.n	800635e <USBD_CDC_Setup+0x12c>
          break;
 800635c:	bf00      	nop
      }
      break;
 800635e:	e006      	b.n	800636e <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8006360:	6839      	ldr	r1, [r7, #0]
 8006362:	6878      	ldr	r0, [r7, #4]
 8006364:	f001 f935 	bl	80075d2 <USBD_CtlError>
      ret = USBD_FAIL;
 8006368:	2302      	movs	r3, #2
 800636a:	75fb      	strb	r3, [r7, #23]
      break;
 800636c:	bf00      	nop
  }

  return ret;
 800636e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006370:	4618      	mov	r0, r3
 8006372:	3718      	adds	r7, #24
 8006374:	46bd      	mov	sp, r7
 8006376:	bd80      	pop	{r7, pc}

08006378 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006378:	b580      	push	{r7, lr}
 800637a:	b084      	sub	sp, #16
 800637c:	af00      	add	r7, sp, #0
 800637e:	6078      	str	r0, [r7, #4]
 8006380:	460b      	mov	r3, r1
 8006382:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800638a:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006392:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800639a:	2b00      	cmp	r3, #0
 800639c:	d03a      	beq.n	8006414 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800639e:	78fa      	ldrb	r2, [r7, #3]
 80063a0:	6879      	ldr	r1, [r7, #4]
 80063a2:	4613      	mov	r3, r2
 80063a4:	009b      	lsls	r3, r3, #2
 80063a6:	4413      	add	r3, r2
 80063a8:	009b      	lsls	r3, r3, #2
 80063aa:	440b      	add	r3, r1
 80063ac:	331c      	adds	r3, #28
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d029      	beq.n	8006408 <USBD_CDC_DataIn+0x90>
 80063b4:	78fa      	ldrb	r2, [r7, #3]
 80063b6:	6879      	ldr	r1, [r7, #4]
 80063b8:	4613      	mov	r3, r2
 80063ba:	009b      	lsls	r3, r3, #2
 80063bc:	4413      	add	r3, r2
 80063be:	009b      	lsls	r3, r3, #2
 80063c0:	440b      	add	r3, r1
 80063c2:	331c      	adds	r3, #28
 80063c4:	681a      	ldr	r2, [r3, #0]
 80063c6:	78f9      	ldrb	r1, [r7, #3]
 80063c8:	68b8      	ldr	r0, [r7, #8]
 80063ca:	460b      	mov	r3, r1
 80063cc:	009b      	lsls	r3, r3, #2
 80063ce:	440b      	add	r3, r1
 80063d0:	00db      	lsls	r3, r3, #3
 80063d2:	4403      	add	r3, r0
 80063d4:	3338      	adds	r3, #56	; 0x38
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	fbb2 f1f3 	udiv	r1, r2, r3
 80063dc:	fb01 f303 	mul.w	r3, r1, r3
 80063e0:	1ad3      	subs	r3, r2, r3
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d110      	bne.n	8006408 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 80063e6:	78fa      	ldrb	r2, [r7, #3]
 80063e8:	6879      	ldr	r1, [r7, #4]
 80063ea:	4613      	mov	r3, r2
 80063ec:	009b      	lsls	r3, r3, #2
 80063ee:	4413      	add	r3, r2
 80063f0:	009b      	lsls	r3, r3, #2
 80063f2:	440b      	add	r3, r1
 80063f4:	331c      	adds	r3, #28
 80063f6:	2200      	movs	r2, #0
 80063f8:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80063fa:	78f9      	ldrb	r1, [r7, #3]
 80063fc:	2300      	movs	r3, #0
 80063fe:	2200      	movs	r2, #0
 8006400:	6878      	ldr	r0, [r7, #4]
 8006402:	f001 fe10 	bl	8008026 <USBD_LL_Transmit>
 8006406:	e003      	b.n	8006410 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	2200      	movs	r2, #0
 800640c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8006410:	2300      	movs	r3, #0
 8006412:	e000      	b.n	8006416 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8006414:	2302      	movs	r3, #2
  }
}
 8006416:	4618      	mov	r0, r3
 8006418:	3710      	adds	r7, #16
 800641a:	46bd      	mov	sp, r7
 800641c:	bd80      	pop	{r7, pc}

0800641e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800641e:	b580      	push	{r7, lr}
 8006420:	b084      	sub	sp, #16
 8006422:	af00      	add	r7, sp, #0
 8006424:	6078      	str	r0, [r7, #4]
 8006426:	460b      	mov	r3, r1
 8006428:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006430:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006432:	78fb      	ldrb	r3, [r7, #3]
 8006434:	4619      	mov	r1, r3
 8006436:	6878      	ldr	r0, [r7, #4]
 8006438:	f001 fe3b 	bl	80080b2 <USBD_LL_GetRxDataSize>
 800643c:	4602      	mov	r2, r0
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800644a:	2b00      	cmp	r3, #0
 800644c:	d00d      	beq.n	800646a <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006454:	68db      	ldr	r3, [r3, #12]
 8006456:	68fa      	ldr	r2, [r7, #12]
 8006458:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800645c:	68fa      	ldr	r2, [r7, #12]
 800645e:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006462:	4611      	mov	r1, r2
 8006464:	4798      	blx	r3

    return USBD_OK;
 8006466:	2300      	movs	r3, #0
 8006468:	e000      	b.n	800646c <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800646a:	2302      	movs	r3, #2
  }
}
 800646c:	4618      	mov	r0, r3
 800646e:	3710      	adds	r7, #16
 8006470:	46bd      	mov	sp, r7
 8006472:	bd80      	pop	{r7, pc}

08006474 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006474:	b580      	push	{r7, lr}
 8006476:	b084      	sub	sp, #16
 8006478:	af00      	add	r7, sp, #0
 800647a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006482:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800648a:	2b00      	cmp	r3, #0
 800648c:	d015      	beq.n	80064ba <USBD_CDC_EP0_RxReady+0x46>
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006494:	2bff      	cmp	r3, #255	; 0xff
 8006496:	d010      	beq.n	80064ba <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800649e:	689b      	ldr	r3, [r3, #8]
 80064a0:	68fa      	ldr	r2, [r7, #12]
 80064a2:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 80064a6:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80064a8:	68fa      	ldr	r2, [r7, #12]
 80064aa:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80064ae:	b292      	uxth	r2, r2
 80064b0:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	22ff      	movs	r2, #255	; 0xff
 80064b6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 80064ba:	2300      	movs	r3, #0
}
 80064bc:	4618      	mov	r0, r3
 80064be:	3710      	adds	r7, #16
 80064c0:	46bd      	mov	sp, r7
 80064c2:	bd80      	pop	{r7, pc}

080064c4 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80064c4:	b480      	push	{r7}
 80064c6:	b083      	sub	sp, #12
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	2243      	movs	r2, #67	; 0x43
 80064d0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 80064d2:	4b03      	ldr	r3, [pc, #12]	; (80064e0 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80064d4:	4618      	mov	r0, r3
 80064d6:	370c      	adds	r7, #12
 80064d8:	46bd      	mov	sp, r7
 80064da:	bc80      	pop	{r7}
 80064dc:	4770      	bx	lr
 80064de:	bf00      	nop
 80064e0:	20000094 	.word	0x20000094

080064e4 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80064e4:	b480      	push	{r7}
 80064e6:	b083      	sub	sp, #12
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	2243      	movs	r2, #67	; 0x43
 80064f0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 80064f2:	4b03      	ldr	r3, [pc, #12]	; (8006500 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80064f4:	4618      	mov	r0, r3
 80064f6:	370c      	adds	r7, #12
 80064f8:	46bd      	mov	sp, r7
 80064fa:	bc80      	pop	{r7}
 80064fc:	4770      	bx	lr
 80064fe:	bf00      	nop
 8006500:	20000050 	.word	0x20000050

08006504 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006504:	b480      	push	{r7}
 8006506:	b083      	sub	sp, #12
 8006508:	af00      	add	r7, sp, #0
 800650a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	2243      	movs	r2, #67	; 0x43
 8006510:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8006512:	4b03      	ldr	r3, [pc, #12]	; (8006520 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8006514:	4618      	mov	r0, r3
 8006516:	370c      	adds	r7, #12
 8006518:	46bd      	mov	sp, r7
 800651a:	bc80      	pop	{r7}
 800651c:	4770      	bx	lr
 800651e:	bf00      	nop
 8006520:	200000d8 	.word	0x200000d8

08006524 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006524:	b480      	push	{r7}
 8006526:	b083      	sub	sp, #12
 8006528:	af00      	add	r7, sp, #0
 800652a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	220a      	movs	r2, #10
 8006530:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8006532:	4b03      	ldr	r3, [pc, #12]	; (8006540 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006534:	4618      	mov	r0, r3
 8006536:	370c      	adds	r7, #12
 8006538:	46bd      	mov	sp, r7
 800653a:	bc80      	pop	{r7}
 800653c:	4770      	bx	lr
 800653e:	bf00      	nop
 8006540:	2000000c 	.word	0x2000000c

08006544 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8006544:	b480      	push	{r7}
 8006546:	b085      	sub	sp, #20
 8006548:	af00      	add	r7, sp, #0
 800654a:	6078      	str	r0, [r7, #4]
 800654c:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800654e:	2302      	movs	r3, #2
 8006550:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8006552:	683b      	ldr	r3, [r7, #0]
 8006554:	2b00      	cmp	r3, #0
 8006556:	d005      	beq.n	8006564 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	683a      	ldr	r2, [r7, #0]
 800655c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8006560:	2300      	movs	r3, #0
 8006562:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8006564:	7bfb      	ldrb	r3, [r7, #15]
}
 8006566:	4618      	mov	r0, r3
 8006568:	3714      	adds	r7, #20
 800656a:	46bd      	mov	sp, r7
 800656c:	bc80      	pop	{r7}
 800656e:	4770      	bx	lr

08006570 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8006570:	b480      	push	{r7}
 8006572:	b087      	sub	sp, #28
 8006574:	af00      	add	r7, sp, #0
 8006576:	60f8      	str	r0, [r7, #12]
 8006578:	60b9      	str	r1, [r7, #8]
 800657a:	4613      	mov	r3, r2
 800657c:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006584:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8006586:	697b      	ldr	r3, [r7, #20]
 8006588:	68ba      	ldr	r2, [r7, #8]
 800658a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800658e:	88fa      	ldrh	r2, [r7, #6]
 8006590:	697b      	ldr	r3, [r7, #20]
 8006592:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8006596:	2300      	movs	r3, #0
}
 8006598:	4618      	mov	r0, r3
 800659a:	371c      	adds	r7, #28
 800659c:	46bd      	mov	sp, r7
 800659e:	bc80      	pop	{r7}
 80065a0:	4770      	bx	lr

080065a2 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 80065a2:	b480      	push	{r7}
 80065a4:	b085      	sub	sp, #20
 80065a6:	af00      	add	r7, sp, #0
 80065a8:	6078      	str	r0, [r7, #4]
 80065aa:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80065b2:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	683a      	ldr	r2, [r7, #0]
 80065b8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 80065bc:	2300      	movs	r3, #0
}
 80065be:	4618      	mov	r0, r3
 80065c0:	3714      	adds	r7, #20
 80065c2:	46bd      	mov	sp, r7
 80065c4:	bc80      	pop	{r7}
 80065c6:	4770      	bx	lr

080065c8 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80065c8:	b580      	push	{r7, lr}
 80065ca:	b084      	sub	sp, #16
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80065d6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d01c      	beq.n	800661c <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d115      	bne.n	8006618 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	2201      	movs	r2, #1
 80065f0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800660a:	b29b      	uxth	r3, r3
 800660c:	2181      	movs	r1, #129	; 0x81
 800660e:	6878      	ldr	r0, [r7, #4]
 8006610:	f001 fd09 	bl	8008026 <USBD_LL_Transmit>

      return USBD_OK;
 8006614:	2300      	movs	r3, #0
 8006616:	e002      	b.n	800661e <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8006618:	2301      	movs	r3, #1
 800661a:	e000      	b.n	800661e <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 800661c:	2302      	movs	r3, #2
  }
}
 800661e:	4618      	mov	r0, r3
 8006620:	3710      	adds	r7, #16
 8006622:	46bd      	mov	sp, r7
 8006624:	bd80      	pop	{r7, pc}

08006626 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006626:	b580      	push	{r7, lr}
 8006628:	b084      	sub	sp, #16
 800662a:	af00      	add	r7, sp, #0
 800662c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006634:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800663c:	2b00      	cmp	r3, #0
 800663e:	d017      	beq.n	8006670 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	7c1b      	ldrb	r3, [r3, #16]
 8006644:	2b00      	cmp	r3, #0
 8006646:	d109      	bne.n	800665c <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800664e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006652:	2101      	movs	r1, #1
 8006654:	6878      	ldr	r0, [r7, #4]
 8006656:	f001 fd09 	bl	800806c <USBD_LL_PrepareReceive>
 800665a:	e007      	b.n	800666c <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006662:	2340      	movs	r3, #64	; 0x40
 8006664:	2101      	movs	r1, #1
 8006666:	6878      	ldr	r0, [r7, #4]
 8006668:	f001 fd00 	bl	800806c <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800666c:	2300      	movs	r3, #0
 800666e:	e000      	b.n	8006672 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8006670:	2302      	movs	r3, #2
  }
}
 8006672:	4618      	mov	r0, r3
 8006674:	3710      	adds	r7, #16
 8006676:	46bd      	mov	sp, r7
 8006678:	bd80      	pop	{r7, pc}

0800667a <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800667a:	b580      	push	{r7, lr}
 800667c:	b084      	sub	sp, #16
 800667e:	af00      	add	r7, sp, #0
 8006680:	60f8      	str	r0, [r7, #12]
 8006682:	60b9      	str	r1, [r7, #8]
 8006684:	4613      	mov	r3, r2
 8006686:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	2b00      	cmp	r3, #0
 800668c:	d101      	bne.n	8006692 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800668e:	2302      	movs	r3, #2
 8006690:	e01a      	b.n	80066c8 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006698:	2b00      	cmp	r3, #0
 800669a:	d003      	beq.n	80066a4 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	2200      	movs	r2, #0
 80066a0:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80066a4:	68bb      	ldr	r3, [r7, #8]
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d003      	beq.n	80066b2 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	68ba      	ldr	r2, [r7, #8]
 80066ae:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	2201      	movs	r2, #1
 80066b6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	79fa      	ldrb	r2, [r7, #7]
 80066be:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80066c0:	68f8      	ldr	r0, [r7, #12]
 80066c2:	f001 fb6d 	bl	8007da0 <USBD_LL_Init>

  return USBD_OK;
 80066c6:	2300      	movs	r3, #0
}
 80066c8:	4618      	mov	r0, r3
 80066ca:	3710      	adds	r7, #16
 80066cc:	46bd      	mov	sp, r7
 80066ce:	bd80      	pop	{r7, pc}

080066d0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80066d0:	b480      	push	{r7}
 80066d2:	b085      	sub	sp, #20
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	6078      	str	r0, [r7, #4]
 80066d8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 80066da:	2300      	movs	r3, #0
 80066dc:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 80066de:	683b      	ldr	r3, [r7, #0]
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d006      	beq.n	80066f2 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	683a      	ldr	r2, [r7, #0]
 80066e8:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 80066ec:	2300      	movs	r3, #0
 80066ee:	73fb      	strb	r3, [r7, #15]
 80066f0:	e001      	b.n	80066f6 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80066f2:	2302      	movs	r3, #2
 80066f4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80066f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80066f8:	4618      	mov	r0, r3
 80066fa:	3714      	adds	r7, #20
 80066fc:	46bd      	mov	sp, r7
 80066fe:	bc80      	pop	{r7}
 8006700:	4770      	bx	lr

08006702 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006702:	b580      	push	{r7, lr}
 8006704:	b082      	sub	sp, #8
 8006706:	af00      	add	r7, sp, #0
 8006708:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800670a:	6878      	ldr	r0, [r7, #4]
 800670c:	f001 fba2 	bl	8007e54 <USBD_LL_Start>

  return USBD_OK;
 8006710:	2300      	movs	r3, #0
}
 8006712:	4618      	mov	r0, r3
 8006714:	3708      	adds	r7, #8
 8006716:	46bd      	mov	sp, r7
 8006718:	bd80      	pop	{r7, pc}

0800671a <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800671a:	b480      	push	{r7}
 800671c:	b083      	sub	sp, #12
 800671e:	af00      	add	r7, sp, #0
 8006720:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006722:	2300      	movs	r3, #0
}
 8006724:	4618      	mov	r0, r3
 8006726:	370c      	adds	r7, #12
 8006728:	46bd      	mov	sp, r7
 800672a:	bc80      	pop	{r7}
 800672c:	4770      	bx	lr

0800672e <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800672e:	b580      	push	{r7, lr}
 8006730:	b084      	sub	sp, #16
 8006732:	af00      	add	r7, sp, #0
 8006734:	6078      	str	r0, [r7, #4]
 8006736:	460b      	mov	r3, r1
 8006738:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800673a:	2302      	movs	r3, #2
 800673c:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006744:	2b00      	cmp	r3, #0
 8006746:	d00c      	beq.n	8006762 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	78fa      	ldrb	r2, [r7, #3]
 8006752:	4611      	mov	r1, r2
 8006754:	6878      	ldr	r0, [r7, #4]
 8006756:	4798      	blx	r3
 8006758:	4603      	mov	r3, r0
 800675a:	2b00      	cmp	r3, #0
 800675c:	d101      	bne.n	8006762 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800675e:	2300      	movs	r3, #0
 8006760:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8006762:	7bfb      	ldrb	r3, [r7, #15]
}
 8006764:	4618      	mov	r0, r3
 8006766:	3710      	adds	r7, #16
 8006768:	46bd      	mov	sp, r7
 800676a:	bd80      	pop	{r7, pc}

0800676c <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800676c:	b580      	push	{r7, lr}
 800676e:	b082      	sub	sp, #8
 8006770:	af00      	add	r7, sp, #0
 8006772:	6078      	str	r0, [r7, #4]
 8006774:	460b      	mov	r3, r1
 8006776:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800677e:	685b      	ldr	r3, [r3, #4]
 8006780:	78fa      	ldrb	r2, [r7, #3]
 8006782:	4611      	mov	r1, r2
 8006784:	6878      	ldr	r0, [r7, #4]
 8006786:	4798      	blx	r3

  return USBD_OK;
 8006788:	2300      	movs	r3, #0
}
 800678a:	4618      	mov	r0, r3
 800678c:	3708      	adds	r7, #8
 800678e:	46bd      	mov	sp, r7
 8006790:	bd80      	pop	{r7, pc}

08006792 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006792:	b580      	push	{r7, lr}
 8006794:	b082      	sub	sp, #8
 8006796:	af00      	add	r7, sp, #0
 8006798:	6078      	str	r0, [r7, #4]
 800679a:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80067a2:	6839      	ldr	r1, [r7, #0]
 80067a4:	4618      	mov	r0, r3
 80067a6:	f000 fed8 	bl	800755a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	2201      	movs	r2, #1
 80067ae:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80067b8:	461a      	mov	r2, r3
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80067c6:	f003 031f 	and.w	r3, r3, #31
 80067ca:	2b02      	cmp	r3, #2
 80067cc:	d016      	beq.n	80067fc <USBD_LL_SetupStage+0x6a>
 80067ce:	2b02      	cmp	r3, #2
 80067d0:	d81c      	bhi.n	800680c <USBD_LL_SetupStage+0x7a>
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d002      	beq.n	80067dc <USBD_LL_SetupStage+0x4a>
 80067d6:	2b01      	cmp	r3, #1
 80067d8:	d008      	beq.n	80067ec <USBD_LL_SetupStage+0x5a>
 80067da:	e017      	b.n	800680c <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80067e2:	4619      	mov	r1, r3
 80067e4:	6878      	ldr	r0, [r7, #4]
 80067e6:	f000 f9cb 	bl	8006b80 <USBD_StdDevReq>
      break;
 80067ea:	e01a      	b.n	8006822 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80067f2:	4619      	mov	r1, r3
 80067f4:	6878      	ldr	r0, [r7, #4]
 80067f6:	f000 fa2d 	bl	8006c54 <USBD_StdItfReq>
      break;
 80067fa:	e012      	b.n	8006822 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006802:	4619      	mov	r1, r3
 8006804:	6878      	ldr	r0, [r7, #4]
 8006806:	f000 fa6d 	bl	8006ce4 <USBD_StdEPReq>
      break;
 800680a:	e00a      	b.n	8006822 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006812:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006816:	b2db      	uxtb	r3, r3
 8006818:	4619      	mov	r1, r3
 800681a:	6878      	ldr	r0, [r7, #4]
 800681c:	f001 fb7a 	bl	8007f14 <USBD_LL_StallEP>
      break;
 8006820:	bf00      	nop
  }

  return USBD_OK;
 8006822:	2300      	movs	r3, #0
}
 8006824:	4618      	mov	r0, r3
 8006826:	3708      	adds	r7, #8
 8006828:	46bd      	mov	sp, r7
 800682a:	bd80      	pop	{r7, pc}

0800682c <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800682c:	b580      	push	{r7, lr}
 800682e:	b086      	sub	sp, #24
 8006830:	af00      	add	r7, sp, #0
 8006832:	60f8      	str	r0, [r7, #12]
 8006834:	460b      	mov	r3, r1
 8006836:	607a      	str	r2, [r7, #4]
 8006838:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800683a:	7afb      	ldrb	r3, [r7, #11]
 800683c:	2b00      	cmp	r3, #0
 800683e:	d14b      	bne.n	80068d8 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006846:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800684e:	2b03      	cmp	r3, #3
 8006850:	d134      	bne.n	80068bc <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8006852:	697b      	ldr	r3, [r7, #20]
 8006854:	68da      	ldr	r2, [r3, #12]
 8006856:	697b      	ldr	r3, [r7, #20]
 8006858:	691b      	ldr	r3, [r3, #16]
 800685a:	429a      	cmp	r2, r3
 800685c:	d919      	bls.n	8006892 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800685e:	697b      	ldr	r3, [r7, #20]
 8006860:	68da      	ldr	r2, [r3, #12]
 8006862:	697b      	ldr	r3, [r7, #20]
 8006864:	691b      	ldr	r3, [r3, #16]
 8006866:	1ad2      	subs	r2, r2, r3
 8006868:	697b      	ldr	r3, [r7, #20]
 800686a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800686c:	697b      	ldr	r3, [r7, #20]
 800686e:	68da      	ldr	r2, [r3, #12]
 8006870:	697b      	ldr	r3, [r7, #20]
 8006872:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006874:	429a      	cmp	r2, r3
 8006876:	d203      	bcs.n	8006880 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006878:	697b      	ldr	r3, [r7, #20]
 800687a:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800687c:	b29b      	uxth	r3, r3
 800687e:	e002      	b.n	8006886 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006880:	697b      	ldr	r3, [r7, #20]
 8006882:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006884:	b29b      	uxth	r3, r3
 8006886:	461a      	mov	r2, r3
 8006888:	6879      	ldr	r1, [r7, #4]
 800688a:	68f8      	ldr	r0, [r7, #12]
 800688c:	f000 ff57 	bl	800773e <USBD_CtlContinueRx>
 8006890:	e038      	b.n	8006904 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006898:	691b      	ldr	r3, [r3, #16]
 800689a:	2b00      	cmp	r3, #0
 800689c:	d00a      	beq.n	80068b4 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80068a4:	2b03      	cmp	r3, #3
 80068a6:	d105      	bne.n	80068b4 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80068ae:	691b      	ldr	r3, [r3, #16]
 80068b0:	68f8      	ldr	r0, [r7, #12]
 80068b2:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80068b4:	68f8      	ldr	r0, [r7, #12]
 80068b6:	f000 ff54 	bl	8007762 <USBD_CtlSendStatus>
 80068ba:	e023      	b.n	8006904 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80068c2:	2b05      	cmp	r3, #5
 80068c4:	d11e      	bne.n	8006904 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	2200      	movs	r2, #0
 80068ca:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 80068ce:	2100      	movs	r1, #0
 80068d0:	68f8      	ldr	r0, [r7, #12]
 80068d2:	f001 fb1f 	bl	8007f14 <USBD_LL_StallEP>
 80068d6:	e015      	b.n	8006904 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80068de:	699b      	ldr	r3, [r3, #24]
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d00d      	beq.n	8006900 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80068ea:	2b03      	cmp	r3, #3
 80068ec:	d108      	bne.n	8006900 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80068f4:	699b      	ldr	r3, [r3, #24]
 80068f6:	7afa      	ldrb	r2, [r7, #11]
 80068f8:	4611      	mov	r1, r2
 80068fa:	68f8      	ldr	r0, [r7, #12]
 80068fc:	4798      	blx	r3
 80068fe:	e001      	b.n	8006904 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006900:	2302      	movs	r3, #2
 8006902:	e000      	b.n	8006906 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8006904:	2300      	movs	r3, #0
}
 8006906:	4618      	mov	r0, r3
 8006908:	3718      	adds	r7, #24
 800690a:	46bd      	mov	sp, r7
 800690c:	bd80      	pop	{r7, pc}

0800690e <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800690e:	b580      	push	{r7, lr}
 8006910:	b086      	sub	sp, #24
 8006912:	af00      	add	r7, sp, #0
 8006914:	60f8      	str	r0, [r7, #12]
 8006916:	460b      	mov	r3, r1
 8006918:	607a      	str	r2, [r7, #4]
 800691a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800691c:	7afb      	ldrb	r3, [r7, #11]
 800691e:	2b00      	cmp	r3, #0
 8006920:	d17f      	bne.n	8006a22 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	3314      	adds	r3, #20
 8006926:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800692e:	2b02      	cmp	r3, #2
 8006930:	d15c      	bne.n	80069ec <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8006932:	697b      	ldr	r3, [r7, #20]
 8006934:	68da      	ldr	r2, [r3, #12]
 8006936:	697b      	ldr	r3, [r7, #20]
 8006938:	691b      	ldr	r3, [r3, #16]
 800693a:	429a      	cmp	r2, r3
 800693c:	d915      	bls.n	800696a <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800693e:	697b      	ldr	r3, [r7, #20]
 8006940:	68da      	ldr	r2, [r3, #12]
 8006942:	697b      	ldr	r3, [r7, #20]
 8006944:	691b      	ldr	r3, [r3, #16]
 8006946:	1ad2      	subs	r2, r2, r3
 8006948:	697b      	ldr	r3, [r7, #20]
 800694a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800694c:	697b      	ldr	r3, [r7, #20]
 800694e:	68db      	ldr	r3, [r3, #12]
 8006950:	b29b      	uxth	r3, r3
 8006952:	461a      	mov	r2, r3
 8006954:	6879      	ldr	r1, [r7, #4]
 8006956:	68f8      	ldr	r0, [r7, #12]
 8006958:	f000 fec1 	bl	80076de <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800695c:	2300      	movs	r3, #0
 800695e:	2200      	movs	r2, #0
 8006960:	2100      	movs	r1, #0
 8006962:	68f8      	ldr	r0, [r7, #12]
 8006964:	f001 fb82 	bl	800806c <USBD_LL_PrepareReceive>
 8006968:	e04e      	b.n	8006a08 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800696a:	697b      	ldr	r3, [r7, #20]
 800696c:	689b      	ldr	r3, [r3, #8]
 800696e:	697a      	ldr	r2, [r7, #20]
 8006970:	6912      	ldr	r2, [r2, #16]
 8006972:	fbb3 f1f2 	udiv	r1, r3, r2
 8006976:	fb01 f202 	mul.w	r2, r1, r2
 800697a:	1a9b      	subs	r3, r3, r2
 800697c:	2b00      	cmp	r3, #0
 800697e:	d11c      	bne.n	80069ba <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8006980:	697b      	ldr	r3, [r7, #20]
 8006982:	689a      	ldr	r2, [r3, #8]
 8006984:	697b      	ldr	r3, [r7, #20]
 8006986:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006988:	429a      	cmp	r2, r3
 800698a:	d316      	bcc.n	80069ba <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800698c:	697b      	ldr	r3, [r7, #20]
 800698e:	689a      	ldr	r2, [r3, #8]
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006996:	429a      	cmp	r2, r3
 8006998:	d20f      	bcs.n	80069ba <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800699a:	2200      	movs	r2, #0
 800699c:	2100      	movs	r1, #0
 800699e:	68f8      	ldr	r0, [r7, #12]
 80069a0:	f000 fe9d 	bl	80076de <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	2200      	movs	r2, #0
 80069a8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80069ac:	2300      	movs	r3, #0
 80069ae:	2200      	movs	r2, #0
 80069b0:	2100      	movs	r1, #0
 80069b2:	68f8      	ldr	r0, [r7, #12]
 80069b4:	f001 fb5a 	bl	800806c <USBD_LL_PrepareReceive>
 80069b8:	e026      	b.n	8006a08 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80069c0:	68db      	ldr	r3, [r3, #12]
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d00a      	beq.n	80069dc <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80069cc:	2b03      	cmp	r3, #3
 80069ce:	d105      	bne.n	80069dc <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80069d6:	68db      	ldr	r3, [r3, #12]
 80069d8:	68f8      	ldr	r0, [r7, #12]
 80069da:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80069dc:	2180      	movs	r1, #128	; 0x80
 80069de:	68f8      	ldr	r0, [r7, #12]
 80069e0:	f001 fa98 	bl	8007f14 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80069e4:	68f8      	ldr	r0, [r7, #12]
 80069e6:	f000 fecf 	bl	8007788 <USBD_CtlReceiveStatus>
 80069ea:	e00d      	b.n	8006a08 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80069f2:	2b04      	cmp	r3, #4
 80069f4:	d004      	beq.n	8006a00 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d103      	bne.n	8006a08 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8006a00:	2180      	movs	r1, #128	; 0x80
 8006a02:	68f8      	ldr	r0, [r7, #12]
 8006a04:	f001 fa86 	bl	8007f14 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006a0e:	2b01      	cmp	r3, #1
 8006a10:	d11d      	bne.n	8006a4e <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8006a12:	68f8      	ldr	r0, [r7, #12]
 8006a14:	f7ff fe81 	bl	800671a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	2200      	movs	r2, #0
 8006a1c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006a20:	e015      	b.n	8006a4e <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a28:	695b      	ldr	r3, [r3, #20]
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d00d      	beq.n	8006a4a <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8006a34:	2b03      	cmp	r3, #3
 8006a36:	d108      	bne.n	8006a4a <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a3e:	695b      	ldr	r3, [r3, #20]
 8006a40:	7afa      	ldrb	r2, [r7, #11]
 8006a42:	4611      	mov	r1, r2
 8006a44:	68f8      	ldr	r0, [r7, #12]
 8006a46:	4798      	blx	r3
 8006a48:	e001      	b.n	8006a4e <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006a4a:	2302      	movs	r3, #2
 8006a4c:	e000      	b.n	8006a50 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8006a4e:	2300      	movs	r3, #0
}
 8006a50:	4618      	mov	r0, r3
 8006a52:	3718      	adds	r7, #24
 8006a54:	46bd      	mov	sp, r7
 8006a56:	bd80      	pop	{r7, pc}

08006a58 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006a58:	b580      	push	{r7, lr}
 8006a5a:	b082      	sub	sp, #8
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006a60:	2340      	movs	r3, #64	; 0x40
 8006a62:	2200      	movs	r2, #0
 8006a64:	2100      	movs	r1, #0
 8006a66:	6878      	ldr	r0, [r7, #4]
 8006a68:	f001 fa0f 	bl	8007e8a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	2201      	movs	r2, #1
 8006a70:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	2240      	movs	r2, #64	; 0x40
 8006a78:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006a7c:	2340      	movs	r3, #64	; 0x40
 8006a7e:	2200      	movs	r2, #0
 8006a80:	2180      	movs	r1, #128	; 0x80
 8006a82:	6878      	ldr	r0, [r7, #4]
 8006a84:	f001 fa01 	bl	8007e8a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	2201      	movs	r2, #1
 8006a8c:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	2240      	movs	r2, #64	; 0x40
 8006a92:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	2201      	movs	r2, #1
 8006a98:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	2200      	movs	r2, #0
 8006aa0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	2200      	movs	r2, #0
 8006aa8:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	2200      	movs	r2, #0
 8006aae:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d009      	beq.n	8006ad0 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ac2:	685b      	ldr	r3, [r3, #4]
 8006ac4:	687a      	ldr	r2, [r7, #4]
 8006ac6:	6852      	ldr	r2, [r2, #4]
 8006ac8:	b2d2      	uxtb	r2, r2
 8006aca:	4611      	mov	r1, r2
 8006acc:	6878      	ldr	r0, [r7, #4]
 8006ace:	4798      	blx	r3
  }

  return USBD_OK;
 8006ad0:	2300      	movs	r3, #0
}
 8006ad2:	4618      	mov	r0, r3
 8006ad4:	3708      	adds	r7, #8
 8006ad6:	46bd      	mov	sp, r7
 8006ad8:	bd80      	pop	{r7, pc}

08006ada <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006ada:	b480      	push	{r7}
 8006adc:	b083      	sub	sp, #12
 8006ade:	af00      	add	r7, sp, #0
 8006ae0:	6078      	str	r0, [r7, #4]
 8006ae2:	460b      	mov	r3, r1
 8006ae4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	78fa      	ldrb	r2, [r7, #3]
 8006aea:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006aec:	2300      	movs	r3, #0
}
 8006aee:	4618      	mov	r0, r3
 8006af0:	370c      	adds	r7, #12
 8006af2:	46bd      	mov	sp, r7
 8006af4:	bc80      	pop	{r7}
 8006af6:	4770      	bx	lr

08006af8 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006af8:	b480      	push	{r7}
 8006afa:	b083      	sub	sp, #12
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	2204      	movs	r2, #4
 8006b10:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006b14:	2300      	movs	r3, #0
}
 8006b16:	4618      	mov	r0, r3
 8006b18:	370c      	adds	r7, #12
 8006b1a:	46bd      	mov	sp, r7
 8006b1c:	bc80      	pop	{r7}
 8006b1e:	4770      	bx	lr

08006b20 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006b20:	b480      	push	{r7}
 8006b22:	b083      	sub	sp, #12
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b2e:	2b04      	cmp	r3, #4
 8006b30:	d105      	bne.n	8006b3e <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006b3e:	2300      	movs	r3, #0
}
 8006b40:	4618      	mov	r0, r3
 8006b42:	370c      	adds	r7, #12
 8006b44:	46bd      	mov	sp, r7
 8006b46:	bc80      	pop	{r7}
 8006b48:	4770      	bx	lr

08006b4a <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006b4a:	b580      	push	{r7, lr}
 8006b4c:	b082      	sub	sp, #8
 8006b4e:	af00      	add	r7, sp, #0
 8006b50:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b58:	2b03      	cmp	r3, #3
 8006b5a:	d10b      	bne.n	8006b74 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b62:	69db      	ldr	r3, [r3, #28]
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d005      	beq.n	8006b74 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b6e:	69db      	ldr	r3, [r3, #28]
 8006b70:	6878      	ldr	r0, [r7, #4]
 8006b72:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006b74:	2300      	movs	r3, #0
}
 8006b76:	4618      	mov	r0, r3
 8006b78:	3708      	adds	r7, #8
 8006b7a:	46bd      	mov	sp, r7
 8006b7c:	bd80      	pop	{r7, pc}
	...

08006b80 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8006b80:	b580      	push	{r7, lr}
 8006b82:	b084      	sub	sp, #16
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	6078      	str	r0, [r7, #4]
 8006b88:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006b8a:	2300      	movs	r3, #0
 8006b8c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006b8e:	683b      	ldr	r3, [r7, #0]
 8006b90:	781b      	ldrb	r3, [r3, #0]
 8006b92:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006b96:	2b40      	cmp	r3, #64	; 0x40
 8006b98:	d005      	beq.n	8006ba6 <USBD_StdDevReq+0x26>
 8006b9a:	2b40      	cmp	r3, #64	; 0x40
 8006b9c:	d84f      	bhi.n	8006c3e <USBD_StdDevReq+0xbe>
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d009      	beq.n	8006bb6 <USBD_StdDevReq+0x36>
 8006ba2:	2b20      	cmp	r3, #32
 8006ba4:	d14b      	bne.n	8006c3e <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006bac:	689b      	ldr	r3, [r3, #8]
 8006bae:	6839      	ldr	r1, [r7, #0]
 8006bb0:	6878      	ldr	r0, [r7, #4]
 8006bb2:	4798      	blx	r3
      break;
 8006bb4:	e048      	b.n	8006c48 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006bb6:	683b      	ldr	r3, [r7, #0]
 8006bb8:	785b      	ldrb	r3, [r3, #1]
 8006bba:	2b09      	cmp	r3, #9
 8006bbc:	d839      	bhi.n	8006c32 <USBD_StdDevReq+0xb2>
 8006bbe:	a201      	add	r2, pc, #4	; (adr r2, 8006bc4 <USBD_StdDevReq+0x44>)
 8006bc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bc4:	08006c15 	.word	0x08006c15
 8006bc8:	08006c29 	.word	0x08006c29
 8006bcc:	08006c33 	.word	0x08006c33
 8006bd0:	08006c1f 	.word	0x08006c1f
 8006bd4:	08006c33 	.word	0x08006c33
 8006bd8:	08006bf7 	.word	0x08006bf7
 8006bdc:	08006bed 	.word	0x08006bed
 8006be0:	08006c33 	.word	0x08006c33
 8006be4:	08006c0b 	.word	0x08006c0b
 8006be8:	08006c01 	.word	0x08006c01
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006bec:	6839      	ldr	r1, [r7, #0]
 8006bee:	6878      	ldr	r0, [r7, #4]
 8006bf0:	f000 f9dc 	bl	8006fac <USBD_GetDescriptor>
          break;
 8006bf4:	e022      	b.n	8006c3c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006bf6:	6839      	ldr	r1, [r7, #0]
 8006bf8:	6878      	ldr	r0, [r7, #4]
 8006bfa:	f000 fb3f 	bl	800727c <USBD_SetAddress>
          break;
 8006bfe:	e01d      	b.n	8006c3c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8006c00:	6839      	ldr	r1, [r7, #0]
 8006c02:	6878      	ldr	r0, [r7, #4]
 8006c04:	f000 fb7e 	bl	8007304 <USBD_SetConfig>
          break;
 8006c08:	e018      	b.n	8006c3c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006c0a:	6839      	ldr	r1, [r7, #0]
 8006c0c:	6878      	ldr	r0, [r7, #4]
 8006c0e:	f000 fc07 	bl	8007420 <USBD_GetConfig>
          break;
 8006c12:	e013      	b.n	8006c3c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006c14:	6839      	ldr	r1, [r7, #0]
 8006c16:	6878      	ldr	r0, [r7, #4]
 8006c18:	f000 fc37 	bl	800748a <USBD_GetStatus>
          break;
 8006c1c:	e00e      	b.n	8006c3c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006c1e:	6839      	ldr	r1, [r7, #0]
 8006c20:	6878      	ldr	r0, [r7, #4]
 8006c22:	f000 fc65 	bl	80074f0 <USBD_SetFeature>
          break;
 8006c26:	e009      	b.n	8006c3c <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006c28:	6839      	ldr	r1, [r7, #0]
 8006c2a:	6878      	ldr	r0, [r7, #4]
 8006c2c:	f000 fc74 	bl	8007518 <USBD_ClrFeature>
          break;
 8006c30:	e004      	b.n	8006c3c <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8006c32:	6839      	ldr	r1, [r7, #0]
 8006c34:	6878      	ldr	r0, [r7, #4]
 8006c36:	f000 fccc 	bl	80075d2 <USBD_CtlError>
          break;
 8006c3a:	bf00      	nop
      }
      break;
 8006c3c:	e004      	b.n	8006c48 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8006c3e:	6839      	ldr	r1, [r7, #0]
 8006c40:	6878      	ldr	r0, [r7, #4]
 8006c42:	f000 fcc6 	bl	80075d2 <USBD_CtlError>
      break;
 8006c46:	bf00      	nop
  }

  return ret;
 8006c48:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c4a:	4618      	mov	r0, r3
 8006c4c:	3710      	adds	r7, #16
 8006c4e:	46bd      	mov	sp, r7
 8006c50:	bd80      	pop	{r7, pc}
 8006c52:	bf00      	nop

08006c54 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8006c54:	b580      	push	{r7, lr}
 8006c56:	b084      	sub	sp, #16
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	6078      	str	r0, [r7, #4]
 8006c5c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006c5e:	2300      	movs	r3, #0
 8006c60:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006c62:	683b      	ldr	r3, [r7, #0]
 8006c64:	781b      	ldrb	r3, [r3, #0]
 8006c66:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006c6a:	2b40      	cmp	r3, #64	; 0x40
 8006c6c:	d005      	beq.n	8006c7a <USBD_StdItfReq+0x26>
 8006c6e:	2b40      	cmp	r3, #64	; 0x40
 8006c70:	d82e      	bhi.n	8006cd0 <USBD_StdItfReq+0x7c>
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d001      	beq.n	8006c7a <USBD_StdItfReq+0x26>
 8006c76:	2b20      	cmp	r3, #32
 8006c78:	d12a      	bne.n	8006cd0 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c80:	3b01      	subs	r3, #1
 8006c82:	2b02      	cmp	r3, #2
 8006c84:	d81d      	bhi.n	8006cc2 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006c86:	683b      	ldr	r3, [r7, #0]
 8006c88:	889b      	ldrh	r3, [r3, #4]
 8006c8a:	b2db      	uxtb	r3, r3
 8006c8c:	2b01      	cmp	r3, #1
 8006c8e:	d813      	bhi.n	8006cb8 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c96:	689b      	ldr	r3, [r3, #8]
 8006c98:	6839      	ldr	r1, [r7, #0]
 8006c9a:	6878      	ldr	r0, [r7, #4]
 8006c9c:	4798      	blx	r3
 8006c9e:	4603      	mov	r3, r0
 8006ca0:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006ca2:	683b      	ldr	r3, [r7, #0]
 8006ca4:	88db      	ldrh	r3, [r3, #6]
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d110      	bne.n	8006ccc <USBD_StdItfReq+0x78>
 8006caa:	7bfb      	ldrb	r3, [r7, #15]
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d10d      	bne.n	8006ccc <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8006cb0:	6878      	ldr	r0, [r7, #4]
 8006cb2:	f000 fd56 	bl	8007762 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006cb6:	e009      	b.n	8006ccc <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8006cb8:	6839      	ldr	r1, [r7, #0]
 8006cba:	6878      	ldr	r0, [r7, #4]
 8006cbc:	f000 fc89 	bl	80075d2 <USBD_CtlError>
          break;
 8006cc0:	e004      	b.n	8006ccc <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8006cc2:	6839      	ldr	r1, [r7, #0]
 8006cc4:	6878      	ldr	r0, [r7, #4]
 8006cc6:	f000 fc84 	bl	80075d2 <USBD_CtlError>
          break;
 8006cca:	e000      	b.n	8006cce <USBD_StdItfReq+0x7a>
          break;
 8006ccc:	bf00      	nop
      }
      break;
 8006cce:	e004      	b.n	8006cda <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8006cd0:	6839      	ldr	r1, [r7, #0]
 8006cd2:	6878      	ldr	r0, [r7, #4]
 8006cd4:	f000 fc7d 	bl	80075d2 <USBD_CtlError>
      break;
 8006cd8:	bf00      	nop
  }

  return USBD_OK;
 8006cda:	2300      	movs	r3, #0
}
 8006cdc:	4618      	mov	r0, r3
 8006cde:	3710      	adds	r7, #16
 8006ce0:	46bd      	mov	sp, r7
 8006ce2:	bd80      	pop	{r7, pc}

08006ce4 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8006ce4:	b580      	push	{r7, lr}
 8006ce6:	b084      	sub	sp, #16
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	6078      	str	r0, [r7, #4]
 8006cec:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8006cee:	2300      	movs	r3, #0
 8006cf0:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8006cf2:	683b      	ldr	r3, [r7, #0]
 8006cf4:	889b      	ldrh	r3, [r3, #4]
 8006cf6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006cf8:	683b      	ldr	r3, [r7, #0]
 8006cfa:	781b      	ldrb	r3, [r3, #0]
 8006cfc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006d00:	2b40      	cmp	r3, #64	; 0x40
 8006d02:	d007      	beq.n	8006d14 <USBD_StdEPReq+0x30>
 8006d04:	2b40      	cmp	r3, #64	; 0x40
 8006d06:	f200 8146 	bhi.w	8006f96 <USBD_StdEPReq+0x2b2>
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d00a      	beq.n	8006d24 <USBD_StdEPReq+0x40>
 8006d0e:	2b20      	cmp	r3, #32
 8006d10:	f040 8141 	bne.w	8006f96 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d1a:	689b      	ldr	r3, [r3, #8]
 8006d1c:	6839      	ldr	r1, [r7, #0]
 8006d1e:	6878      	ldr	r0, [r7, #4]
 8006d20:	4798      	blx	r3
      break;
 8006d22:	e13d      	b.n	8006fa0 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8006d24:	683b      	ldr	r3, [r7, #0]
 8006d26:	781b      	ldrb	r3, [r3, #0]
 8006d28:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006d2c:	2b20      	cmp	r3, #32
 8006d2e:	d10a      	bne.n	8006d46 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d36:	689b      	ldr	r3, [r3, #8]
 8006d38:	6839      	ldr	r1, [r7, #0]
 8006d3a:	6878      	ldr	r0, [r7, #4]
 8006d3c:	4798      	blx	r3
 8006d3e:	4603      	mov	r3, r0
 8006d40:	73fb      	strb	r3, [r7, #15]

        return ret;
 8006d42:	7bfb      	ldrb	r3, [r7, #15]
 8006d44:	e12d      	b.n	8006fa2 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8006d46:	683b      	ldr	r3, [r7, #0]
 8006d48:	785b      	ldrb	r3, [r3, #1]
 8006d4a:	2b03      	cmp	r3, #3
 8006d4c:	d007      	beq.n	8006d5e <USBD_StdEPReq+0x7a>
 8006d4e:	2b03      	cmp	r3, #3
 8006d50:	f300 811b 	bgt.w	8006f8a <USBD_StdEPReq+0x2a6>
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d072      	beq.n	8006e3e <USBD_StdEPReq+0x15a>
 8006d58:	2b01      	cmp	r3, #1
 8006d5a:	d03a      	beq.n	8006dd2 <USBD_StdEPReq+0xee>
 8006d5c:	e115      	b.n	8006f8a <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d64:	2b02      	cmp	r3, #2
 8006d66:	d002      	beq.n	8006d6e <USBD_StdEPReq+0x8a>
 8006d68:	2b03      	cmp	r3, #3
 8006d6a:	d015      	beq.n	8006d98 <USBD_StdEPReq+0xb4>
 8006d6c:	e02b      	b.n	8006dc6 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006d6e:	7bbb      	ldrb	r3, [r7, #14]
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d00c      	beq.n	8006d8e <USBD_StdEPReq+0xaa>
 8006d74:	7bbb      	ldrb	r3, [r7, #14]
 8006d76:	2b80      	cmp	r3, #128	; 0x80
 8006d78:	d009      	beq.n	8006d8e <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8006d7a:	7bbb      	ldrb	r3, [r7, #14]
 8006d7c:	4619      	mov	r1, r3
 8006d7e:	6878      	ldr	r0, [r7, #4]
 8006d80:	f001 f8c8 	bl	8007f14 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8006d84:	2180      	movs	r1, #128	; 0x80
 8006d86:	6878      	ldr	r0, [r7, #4]
 8006d88:	f001 f8c4 	bl	8007f14 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006d8c:	e020      	b.n	8006dd0 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8006d8e:	6839      	ldr	r1, [r7, #0]
 8006d90:	6878      	ldr	r0, [r7, #4]
 8006d92:	f000 fc1e 	bl	80075d2 <USBD_CtlError>
              break;
 8006d96:	e01b      	b.n	8006dd0 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006d98:	683b      	ldr	r3, [r7, #0]
 8006d9a:	885b      	ldrh	r3, [r3, #2]
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d10e      	bne.n	8006dbe <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8006da0:	7bbb      	ldrb	r3, [r7, #14]
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d00b      	beq.n	8006dbe <USBD_StdEPReq+0xda>
 8006da6:	7bbb      	ldrb	r3, [r7, #14]
 8006da8:	2b80      	cmp	r3, #128	; 0x80
 8006daa:	d008      	beq.n	8006dbe <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006dac:	683b      	ldr	r3, [r7, #0]
 8006dae:	88db      	ldrh	r3, [r3, #6]
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d104      	bne.n	8006dbe <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8006db4:	7bbb      	ldrb	r3, [r7, #14]
 8006db6:	4619      	mov	r1, r3
 8006db8:	6878      	ldr	r0, [r7, #4]
 8006dba:	f001 f8ab 	bl	8007f14 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8006dbe:	6878      	ldr	r0, [r7, #4]
 8006dc0:	f000 fccf 	bl	8007762 <USBD_CtlSendStatus>

              break;
 8006dc4:	e004      	b.n	8006dd0 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8006dc6:	6839      	ldr	r1, [r7, #0]
 8006dc8:	6878      	ldr	r0, [r7, #4]
 8006dca:	f000 fc02 	bl	80075d2 <USBD_CtlError>
              break;
 8006dce:	bf00      	nop
          }
          break;
 8006dd0:	e0e0      	b.n	8006f94 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006dd8:	2b02      	cmp	r3, #2
 8006dda:	d002      	beq.n	8006de2 <USBD_StdEPReq+0xfe>
 8006ddc:	2b03      	cmp	r3, #3
 8006dde:	d015      	beq.n	8006e0c <USBD_StdEPReq+0x128>
 8006de0:	e026      	b.n	8006e30 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006de2:	7bbb      	ldrb	r3, [r7, #14]
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d00c      	beq.n	8006e02 <USBD_StdEPReq+0x11e>
 8006de8:	7bbb      	ldrb	r3, [r7, #14]
 8006dea:	2b80      	cmp	r3, #128	; 0x80
 8006dec:	d009      	beq.n	8006e02 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8006dee:	7bbb      	ldrb	r3, [r7, #14]
 8006df0:	4619      	mov	r1, r3
 8006df2:	6878      	ldr	r0, [r7, #4]
 8006df4:	f001 f88e 	bl	8007f14 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8006df8:	2180      	movs	r1, #128	; 0x80
 8006dfa:	6878      	ldr	r0, [r7, #4]
 8006dfc:	f001 f88a 	bl	8007f14 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006e00:	e01c      	b.n	8006e3c <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8006e02:	6839      	ldr	r1, [r7, #0]
 8006e04:	6878      	ldr	r0, [r7, #4]
 8006e06:	f000 fbe4 	bl	80075d2 <USBD_CtlError>
              break;
 8006e0a:	e017      	b.n	8006e3c <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006e0c:	683b      	ldr	r3, [r7, #0]
 8006e0e:	885b      	ldrh	r3, [r3, #2]
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d112      	bne.n	8006e3a <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006e14:	7bbb      	ldrb	r3, [r7, #14]
 8006e16:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d004      	beq.n	8006e28 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8006e1e:	7bbb      	ldrb	r3, [r7, #14]
 8006e20:	4619      	mov	r1, r3
 8006e22:	6878      	ldr	r0, [r7, #4]
 8006e24:	f001 f895 	bl	8007f52 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8006e28:	6878      	ldr	r0, [r7, #4]
 8006e2a:	f000 fc9a 	bl	8007762 <USBD_CtlSendStatus>
              }
              break;
 8006e2e:	e004      	b.n	8006e3a <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8006e30:	6839      	ldr	r1, [r7, #0]
 8006e32:	6878      	ldr	r0, [r7, #4]
 8006e34:	f000 fbcd 	bl	80075d2 <USBD_CtlError>
              break;
 8006e38:	e000      	b.n	8006e3c <USBD_StdEPReq+0x158>
              break;
 8006e3a:	bf00      	nop
          }
          break;
 8006e3c:	e0aa      	b.n	8006f94 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e44:	2b02      	cmp	r3, #2
 8006e46:	d002      	beq.n	8006e4e <USBD_StdEPReq+0x16a>
 8006e48:	2b03      	cmp	r3, #3
 8006e4a:	d032      	beq.n	8006eb2 <USBD_StdEPReq+0x1ce>
 8006e4c:	e097      	b.n	8006f7e <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006e4e:	7bbb      	ldrb	r3, [r7, #14]
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d007      	beq.n	8006e64 <USBD_StdEPReq+0x180>
 8006e54:	7bbb      	ldrb	r3, [r7, #14]
 8006e56:	2b80      	cmp	r3, #128	; 0x80
 8006e58:	d004      	beq.n	8006e64 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8006e5a:	6839      	ldr	r1, [r7, #0]
 8006e5c:	6878      	ldr	r0, [r7, #4]
 8006e5e:	f000 fbb8 	bl	80075d2 <USBD_CtlError>
                break;
 8006e62:	e091      	b.n	8006f88 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006e64:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	da0b      	bge.n	8006e84 <USBD_StdEPReq+0x1a0>
 8006e6c:	7bbb      	ldrb	r3, [r7, #14]
 8006e6e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006e72:	4613      	mov	r3, r2
 8006e74:	009b      	lsls	r3, r3, #2
 8006e76:	4413      	add	r3, r2
 8006e78:	009b      	lsls	r3, r3, #2
 8006e7a:	3310      	adds	r3, #16
 8006e7c:	687a      	ldr	r2, [r7, #4]
 8006e7e:	4413      	add	r3, r2
 8006e80:	3304      	adds	r3, #4
 8006e82:	e00b      	b.n	8006e9c <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006e84:	7bbb      	ldrb	r3, [r7, #14]
 8006e86:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006e8a:	4613      	mov	r3, r2
 8006e8c:	009b      	lsls	r3, r3, #2
 8006e8e:	4413      	add	r3, r2
 8006e90:	009b      	lsls	r3, r3, #2
 8006e92:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006e96:	687a      	ldr	r2, [r7, #4]
 8006e98:	4413      	add	r3, r2
 8006e9a:	3304      	adds	r3, #4
 8006e9c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006e9e:	68bb      	ldr	r3, [r7, #8]
 8006ea0:	2200      	movs	r2, #0
 8006ea2:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006ea4:	68bb      	ldr	r3, [r7, #8]
 8006ea6:	2202      	movs	r2, #2
 8006ea8:	4619      	mov	r1, r3
 8006eaa:	6878      	ldr	r0, [r7, #4]
 8006eac:	f000 fbfb 	bl	80076a6 <USBD_CtlSendData>
              break;
 8006eb0:	e06a      	b.n	8006f88 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006eb2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	da11      	bge.n	8006ede <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006eba:	7bbb      	ldrb	r3, [r7, #14]
 8006ebc:	f003 020f 	and.w	r2, r3, #15
 8006ec0:	6879      	ldr	r1, [r7, #4]
 8006ec2:	4613      	mov	r3, r2
 8006ec4:	009b      	lsls	r3, r3, #2
 8006ec6:	4413      	add	r3, r2
 8006ec8:	009b      	lsls	r3, r3, #2
 8006eca:	440b      	add	r3, r1
 8006ecc:	3318      	adds	r3, #24
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d117      	bne.n	8006f04 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8006ed4:	6839      	ldr	r1, [r7, #0]
 8006ed6:	6878      	ldr	r0, [r7, #4]
 8006ed8:	f000 fb7b 	bl	80075d2 <USBD_CtlError>
                  break;
 8006edc:	e054      	b.n	8006f88 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006ede:	7bbb      	ldrb	r3, [r7, #14]
 8006ee0:	f003 020f 	and.w	r2, r3, #15
 8006ee4:	6879      	ldr	r1, [r7, #4]
 8006ee6:	4613      	mov	r3, r2
 8006ee8:	009b      	lsls	r3, r3, #2
 8006eea:	4413      	add	r3, r2
 8006eec:	009b      	lsls	r3, r3, #2
 8006eee:	440b      	add	r3, r1
 8006ef0:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d104      	bne.n	8006f04 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8006efa:	6839      	ldr	r1, [r7, #0]
 8006efc:	6878      	ldr	r0, [r7, #4]
 8006efe:	f000 fb68 	bl	80075d2 <USBD_CtlError>
                  break;
 8006f02:	e041      	b.n	8006f88 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006f04:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	da0b      	bge.n	8006f24 <USBD_StdEPReq+0x240>
 8006f0c:	7bbb      	ldrb	r3, [r7, #14]
 8006f0e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006f12:	4613      	mov	r3, r2
 8006f14:	009b      	lsls	r3, r3, #2
 8006f16:	4413      	add	r3, r2
 8006f18:	009b      	lsls	r3, r3, #2
 8006f1a:	3310      	adds	r3, #16
 8006f1c:	687a      	ldr	r2, [r7, #4]
 8006f1e:	4413      	add	r3, r2
 8006f20:	3304      	adds	r3, #4
 8006f22:	e00b      	b.n	8006f3c <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006f24:	7bbb      	ldrb	r3, [r7, #14]
 8006f26:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006f2a:	4613      	mov	r3, r2
 8006f2c:	009b      	lsls	r3, r3, #2
 8006f2e:	4413      	add	r3, r2
 8006f30:	009b      	lsls	r3, r3, #2
 8006f32:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006f36:	687a      	ldr	r2, [r7, #4]
 8006f38:	4413      	add	r3, r2
 8006f3a:	3304      	adds	r3, #4
 8006f3c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006f3e:	7bbb      	ldrb	r3, [r7, #14]
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d002      	beq.n	8006f4a <USBD_StdEPReq+0x266>
 8006f44:	7bbb      	ldrb	r3, [r7, #14]
 8006f46:	2b80      	cmp	r3, #128	; 0x80
 8006f48:	d103      	bne.n	8006f52 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8006f4a:	68bb      	ldr	r3, [r7, #8]
 8006f4c:	2200      	movs	r2, #0
 8006f4e:	601a      	str	r2, [r3, #0]
 8006f50:	e00e      	b.n	8006f70 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8006f52:	7bbb      	ldrb	r3, [r7, #14]
 8006f54:	4619      	mov	r1, r3
 8006f56:	6878      	ldr	r0, [r7, #4]
 8006f58:	f001 f81a 	bl	8007f90 <USBD_LL_IsStallEP>
 8006f5c:	4603      	mov	r3, r0
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d003      	beq.n	8006f6a <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8006f62:	68bb      	ldr	r3, [r7, #8]
 8006f64:	2201      	movs	r2, #1
 8006f66:	601a      	str	r2, [r3, #0]
 8006f68:	e002      	b.n	8006f70 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8006f6a:	68bb      	ldr	r3, [r7, #8]
 8006f6c:	2200      	movs	r2, #0
 8006f6e:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006f70:	68bb      	ldr	r3, [r7, #8]
 8006f72:	2202      	movs	r2, #2
 8006f74:	4619      	mov	r1, r3
 8006f76:	6878      	ldr	r0, [r7, #4]
 8006f78:	f000 fb95 	bl	80076a6 <USBD_CtlSendData>
              break;
 8006f7c:	e004      	b.n	8006f88 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8006f7e:	6839      	ldr	r1, [r7, #0]
 8006f80:	6878      	ldr	r0, [r7, #4]
 8006f82:	f000 fb26 	bl	80075d2 <USBD_CtlError>
              break;
 8006f86:	bf00      	nop
          }
          break;
 8006f88:	e004      	b.n	8006f94 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8006f8a:	6839      	ldr	r1, [r7, #0]
 8006f8c:	6878      	ldr	r0, [r7, #4]
 8006f8e:	f000 fb20 	bl	80075d2 <USBD_CtlError>
          break;
 8006f92:	bf00      	nop
      }
      break;
 8006f94:	e004      	b.n	8006fa0 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8006f96:	6839      	ldr	r1, [r7, #0]
 8006f98:	6878      	ldr	r0, [r7, #4]
 8006f9a:	f000 fb1a 	bl	80075d2 <USBD_CtlError>
      break;
 8006f9e:	bf00      	nop
  }

  return ret;
 8006fa0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fa2:	4618      	mov	r0, r3
 8006fa4:	3710      	adds	r7, #16
 8006fa6:	46bd      	mov	sp, r7
 8006fa8:	bd80      	pop	{r7, pc}
	...

08006fac <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8006fac:	b580      	push	{r7, lr}
 8006fae:	b084      	sub	sp, #16
 8006fb0:	af00      	add	r7, sp, #0
 8006fb2:	6078      	str	r0, [r7, #4]
 8006fb4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006fb6:	2300      	movs	r3, #0
 8006fb8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006fba:	2300      	movs	r3, #0
 8006fbc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006fbe:	2300      	movs	r3, #0
 8006fc0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006fc2:	683b      	ldr	r3, [r7, #0]
 8006fc4:	885b      	ldrh	r3, [r3, #2]
 8006fc6:	0a1b      	lsrs	r3, r3, #8
 8006fc8:	b29b      	uxth	r3, r3
 8006fca:	3b01      	subs	r3, #1
 8006fcc:	2b06      	cmp	r3, #6
 8006fce:	f200 8128 	bhi.w	8007222 <USBD_GetDescriptor+0x276>
 8006fd2:	a201      	add	r2, pc, #4	; (adr r2, 8006fd8 <USBD_GetDescriptor+0x2c>)
 8006fd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fd8:	08006ff5 	.word	0x08006ff5
 8006fdc:	0800700d 	.word	0x0800700d
 8006fe0:	0800704d 	.word	0x0800704d
 8006fe4:	08007223 	.word	0x08007223
 8006fe8:	08007223 	.word	0x08007223
 8006fec:	080071c3 	.word	0x080071c3
 8006ff0:	080071ef 	.word	0x080071ef
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	687a      	ldr	r2, [r7, #4]
 8006ffe:	7c12      	ldrb	r2, [r2, #16]
 8007000:	f107 0108 	add.w	r1, r7, #8
 8007004:	4610      	mov	r0, r2
 8007006:	4798      	blx	r3
 8007008:	60f8      	str	r0, [r7, #12]
      break;
 800700a:	e112      	b.n	8007232 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	7c1b      	ldrb	r3, [r3, #16]
 8007010:	2b00      	cmp	r3, #0
 8007012:	d10d      	bne.n	8007030 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800701a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800701c:	f107 0208 	add.w	r2, r7, #8
 8007020:	4610      	mov	r0, r2
 8007022:	4798      	blx	r3
 8007024:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	3301      	adds	r3, #1
 800702a:	2202      	movs	r2, #2
 800702c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800702e:	e100      	b.n	8007232 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007038:	f107 0208 	add.w	r2, r7, #8
 800703c:	4610      	mov	r0, r2
 800703e:	4798      	blx	r3
 8007040:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	3301      	adds	r3, #1
 8007046:	2202      	movs	r2, #2
 8007048:	701a      	strb	r2, [r3, #0]
      break;
 800704a:	e0f2      	b.n	8007232 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800704c:	683b      	ldr	r3, [r7, #0]
 800704e:	885b      	ldrh	r3, [r3, #2]
 8007050:	b2db      	uxtb	r3, r3
 8007052:	2b05      	cmp	r3, #5
 8007054:	f200 80ac 	bhi.w	80071b0 <USBD_GetDescriptor+0x204>
 8007058:	a201      	add	r2, pc, #4	; (adr r2, 8007060 <USBD_GetDescriptor+0xb4>)
 800705a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800705e:	bf00      	nop
 8007060:	08007079 	.word	0x08007079
 8007064:	080070ad 	.word	0x080070ad
 8007068:	080070e1 	.word	0x080070e1
 800706c:	08007115 	.word	0x08007115
 8007070:	08007149 	.word	0x08007149
 8007074:	0800717d 	.word	0x0800717d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800707e:	685b      	ldr	r3, [r3, #4]
 8007080:	2b00      	cmp	r3, #0
 8007082:	d00b      	beq.n	800709c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800708a:	685b      	ldr	r3, [r3, #4]
 800708c:	687a      	ldr	r2, [r7, #4]
 800708e:	7c12      	ldrb	r2, [r2, #16]
 8007090:	f107 0108 	add.w	r1, r7, #8
 8007094:	4610      	mov	r0, r2
 8007096:	4798      	blx	r3
 8007098:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800709a:	e091      	b.n	80071c0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800709c:	6839      	ldr	r1, [r7, #0]
 800709e:	6878      	ldr	r0, [r7, #4]
 80070a0:	f000 fa97 	bl	80075d2 <USBD_CtlError>
            err++;
 80070a4:	7afb      	ldrb	r3, [r7, #11]
 80070a6:	3301      	adds	r3, #1
 80070a8:	72fb      	strb	r3, [r7, #11]
          break;
 80070aa:	e089      	b.n	80071c0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80070b2:	689b      	ldr	r3, [r3, #8]
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d00b      	beq.n	80070d0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80070be:	689b      	ldr	r3, [r3, #8]
 80070c0:	687a      	ldr	r2, [r7, #4]
 80070c2:	7c12      	ldrb	r2, [r2, #16]
 80070c4:	f107 0108 	add.w	r1, r7, #8
 80070c8:	4610      	mov	r0, r2
 80070ca:	4798      	blx	r3
 80070cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80070ce:	e077      	b.n	80071c0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80070d0:	6839      	ldr	r1, [r7, #0]
 80070d2:	6878      	ldr	r0, [r7, #4]
 80070d4:	f000 fa7d 	bl	80075d2 <USBD_CtlError>
            err++;
 80070d8:	7afb      	ldrb	r3, [r7, #11]
 80070da:	3301      	adds	r3, #1
 80070dc:	72fb      	strb	r3, [r7, #11]
          break;
 80070de:	e06f      	b.n	80071c0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80070e6:	68db      	ldr	r3, [r3, #12]
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d00b      	beq.n	8007104 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80070f2:	68db      	ldr	r3, [r3, #12]
 80070f4:	687a      	ldr	r2, [r7, #4]
 80070f6:	7c12      	ldrb	r2, [r2, #16]
 80070f8:	f107 0108 	add.w	r1, r7, #8
 80070fc:	4610      	mov	r0, r2
 80070fe:	4798      	blx	r3
 8007100:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007102:	e05d      	b.n	80071c0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007104:	6839      	ldr	r1, [r7, #0]
 8007106:	6878      	ldr	r0, [r7, #4]
 8007108:	f000 fa63 	bl	80075d2 <USBD_CtlError>
            err++;
 800710c:	7afb      	ldrb	r3, [r7, #11]
 800710e:	3301      	adds	r3, #1
 8007110:	72fb      	strb	r3, [r7, #11]
          break;
 8007112:	e055      	b.n	80071c0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800711a:	691b      	ldr	r3, [r3, #16]
 800711c:	2b00      	cmp	r3, #0
 800711e:	d00b      	beq.n	8007138 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007126:	691b      	ldr	r3, [r3, #16]
 8007128:	687a      	ldr	r2, [r7, #4]
 800712a:	7c12      	ldrb	r2, [r2, #16]
 800712c:	f107 0108 	add.w	r1, r7, #8
 8007130:	4610      	mov	r0, r2
 8007132:	4798      	blx	r3
 8007134:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007136:	e043      	b.n	80071c0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007138:	6839      	ldr	r1, [r7, #0]
 800713a:	6878      	ldr	r0, [r7, #4]
 800713c:	f000 fa49 	bl	80075d2 <USBD_CtlError>
            err++;
 8007140:	7afb      	ldrb	r3, [r7, #11]
 8007142:	3301      	adds	r3, #1
 8007144:	72fb      	strb	r3, [r7, #11]
          break;
 8007146:	e03b      	b.n	80071c0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800714e:	695b      	ldr	r3, [r3, #20]
 8007150:	2b00      	cmp	r3, #0
 8007152:	d00b      	beq.n	800716c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800715a:	695b      	ldr	r3, [r3, #20]
 800715c:	687a      	ldr	r2, [r7, #4]
 800715e:	7c12      	ldrb	r2, [r2, #16]
 8007160:	f107 0108 	add.w	r1, r7, #8
 8007164:	4610      	mov	r0, r2
 8007166:	4798      	blx	r3
 8007168:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800716a:	e029      	b.n	80071c0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800716c:	6839      	ldr	r1, [r7, #0]
 800716e:	6878      	ldr	r0, [r7, #4]
 8007170:	f000 fa2f 	bl	80075d2 <USBD_CtlError>
            err++;
 8007174:	7afb      	ldrb	r3, [r7, #11]
 8007176:	3301      	adds	r3, #1
 8007178:	72fb      	strb	r3, [r7, #11]
          break;
 800717a:	e021      	b.n	80071c0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007182:	699b      	ldr	r3, [r3, #24]
 8007184:	2b00      	cmp	r3, #0
 8007186:	d00b      	beq.n	80071a0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800718e:	699b      	ldr	r3, [r3, #24]
 8007190:	687a      	ldr	r2, [r7, #4]
 8007192:	7c12      	ldrb	r2, [r2, #16]
 8007194:	f107 0108 	add.w	r1, r7, #8
 8007198:	4610      	mov	r0, r2
 800719a:	4798      	blx	r3
 800719c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800719e:	e00f      	b.n	80071c0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80071a0:	6839      	ldr	r1, [r7, #0]
 80071a2:	6878      	ldr	r0, [r7, #4]
 80071a4:	f000 fa15 	bl	80075d2 <USBD_CtlError>
            err++;
 80071a8:	7afb      	ldrb	r3, [r7, #11]
 80071aa:	3301      	adds	r3, #1
 80071ac:	72fb      	strb	r3, [r7, #11]
          break;
 80071ae:	e007      	b.n	80071c0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 80071b0:	6839      	ldr	r1, [r7, #0]
 80071b2:	6878      	ldr	r0, [r7, #4]
 80071b4:	f000 fa0d 	bl	80075d2 <USBD_CtlError>
          err++;
 80071b8:	7afb      	ldrb	r3, [r7, #11]
 80071ba:	3301      	adds	r3, #1
 80071bc:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 80071be:	e038      	b.n	8007232 <USBD_GetDescriptor+0x286>
 80071c0:	e037      	b.n	8007232 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	7c1b      	ldrb	r3, [r3, #16]
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d109      	bne.n	80071de <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80071d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071d2:	f107 0208 	add.w	r2, r7, #8
 80071d6:	4610      	mov	r0, r2
 80071d8:	4798      	blx	r3
 80071da:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80071dc:	e029      	b.n	8007232 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80071de:	6839      	ldr	r1, [r7, #0]
 80071e0:	6878      	ldr	r0, [r7, #4]
 80071e2:	f000 f9f6 	bl	80075d2 <USBD_CtlError>
        err++;
 80071e6:	7afb      	ldrb	r3, [r7, #11]
 80071e8:	3301      	adds	r3, #1
 80071ea:	72fb      	strb	r3, [r7, #11]
      break;
 80071ec:	e021      	b.n	8007232 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	7c1b      	ldrb	r3, [r3, #16]
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d10d      	bne.n	8007212 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80071fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071fe:	f107 0208 	add.w	r2, r7, #8
 8007202:	4610      	mov	r0, r2
 8007204:	4798      	blx	r3
 8007206:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	3301      	adds	r3, #1
 800720c:	2207      	movs	r2, #7
 800720e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007210:	e00f      	b.n	8007232 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007212:	6839      	ldr	r1, [r7, #0]
 8007214:	6878      	ldr	r0, [r7, #4]
 8007216:	f000 f9dc 	bl	80075d2 <USBD_CtlError>
        err++;
 800721a:	7afb      	ldrb	r3, [r7, #11]
 800721c:	3301      	adds	r3, #1
 800721e:	72fb      	strb	r3, [r7, #11]
      break;
 8007220:	e007      	b.n	8007232 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007222:	6839      	ldr	r1, [r7, #0]
 8007224:	6878      	ldr	r0, [r7, #4]
 8007226:	f000 f9d4 	bl	80075d2 <USBD_CtlError>
      err++;
 800722a:	7afb      	ldrb	r3, [r7, #11]
 800722c:	3301      	adds	r3, #1
 800722e:	72fb      	strb	r3, [r7, #11]
      break;
 8007230:	bf00      	nop
  }

  if (err != 0U)
 8007232:	7afb      	ldrb	r3, [r7, #11]
 8007234:	2b00      	cmp	r3, #0
 8007236:	d11c      	bne.n	8007272 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8007238:	893b      	ldrh	r3, [r7, #8]
 800723a:	2b00      	cmp	r3, #0
 800723c:	d011      	beq.n	8007262 <USBD_GetDescriptor+0x2b6>
 800723e:	683b      	ldr	r3, [r7, #0]
 8007240:	88db      	ldrh	r3, [r3, #6]
 8007242:	2b00      	cmp	r3, #0
 8007244:	d00d      	beq.n	8007262 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8007246:	683b      	ldr	r3, [r7, #0]
 8007248:	88da      	ldrh	r2, [r3, #6]
 800724a:	893b      	ldrh	r3, [r7, #8]
 800724c:	4293      	cmp	r3, r2
 800724e:	bf28      	it	cs
 8007250:	4613      	movcs	r3, r2
 8007252:	b29b      	uxth	r3, r3
 8007254:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007256:	893b      	ldrh	r3, [r7, #8]
 8007258:	461a      	mov	r2, r3
 800725a:	68f9      	ldr	r1, [r7, #12]
 800725c:	6878      	ldr	r0, [r7, #4]
 800725e:	f000 fa22 	bl	80076a6 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8007262:	683b      	ldr	r3, [r7, #0]
 8007264:	88db      	ldrh	r3, [r3, #6]
 8007266:	2b00      	cmp	r3, #0
 8007268:	d104      	bne.n	8007274 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800726a:	6878      	ldr	r0, [r7, #4]
 800726c:	f000 fa79 	bl	8007762 <USBD_CtlSendStatus>
 8007270:	e000      	b.n	8007274 <USBD_GetDescriptor+0x2c8>
    return;
 8007272:	bf00      	nop
    }
  }
}
 8007274:	3710      	adds	r7, #16
 8007276:	46bd      	mov	sp, r7
 8007278:	bd80      	pop	{r7, pc}
 800727a:	bf00      	nop

0800727c <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800727c:	b580      	push	{r7, lr}
 800727e:	b084      	sub	sp, #16
 8007280:	af00      	add	r7, sp, #0
 8007282:	6078      	str	r0, [r7, #4]
 8007284:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007286:	683b      	ldr	r3, [r7, #0]
 8007288:	889b      	ldrh	r3, [r3, #4]
 800728a:	2b00      	cmp	r3, #0
 800728c:	d130      	bne.n	80072f0 <USBD_SetAddress+0x74>
 800728e:	683b      	ldr	r3, [r7, #0]
 8007290:	88db      	ldrh	r3, [r3, #6]
 8007292:	2b00      	cmp	r3, #0
 8007294:	d12c      	bne.n	80072f0 <USBD_SetAddress+0x74>
 8007296:	683b      	ldr	r3, [r7, #0]
 8007298:	885b      	ldrh	r3, [r3, #2]
 800729a:	2b7f      	cmp	r3, #127	; 0x7f
 800729c:	d828      	bhi.n	80072f0 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800729e:	683b      	ldr	r3, [r7, #0]
 80072a0:	885b      	ldrh	r3, [r3, #2]
 80072a2:	b2db      	uxtb	r3, r3
 80072a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80072a8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80072b0:	2b03      	cmp	r3, #3
 80072b2:	d104      	bne.n	80072be <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 80072b4:	6839      	ldr	r1, [r7, #0]
 80072b6:	6878      	ldr	r0, [r7, #4]
 80072b8:	f000 f98b 	bl	80075d2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80072bc:	e01d      	b.n	80072fa <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	7bfa      	ldrb	r2, [r7, #15]
 80072c2:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80072c6:	7bfb      	ldrb	r3, [r7, #15]
 80072c8:	4619      	mov	r1, r3
 80072ca:	6878      	ldr	r0, [r7, #4]
 80072cc:	f000 fe8c 	bl	8007fe8 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80072d0:	6878      	ldr	r0, [r7, #4]
 80072d2:	f000 fa46 	bl	8007762 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80072d6:	7bfb      	ldrb	r3, [r7, #15]
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d004      	beq.n	80072e6 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	2202      	movs	r2, #2
 80072e0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80072e4:	e009      	b.n	80072fa <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	2201      	movs	r2, #1
 80072ea:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80072ee:	e004      	b.n	80072fa <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80072f0:	6839      	ldr	r1, [r7, #0]
 80072f2:	6878      	ldr	r0, [r7, #4]
 80072f4:	f000 f96d 	bl	80075d2 <USBD_CtlError>
  }
}
 80072f8:	bf00      	nop
 80072fa:	bf00      	nop
 80072fc:	3710      	adds	r7, #16
 80072fe:	46bd      	mov	sp, r7
 8007300:	bd80      	pop	{r7, pc}
	...

08007304 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007304:	b580      	push	{r7, lr}
 8007306:	b082      	sub	sp, #8
 8007308:	af00      	add	r7, sp, #0
 800730a:	6078      	str	r0, [r7, #4]
 800730c:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800730e:	683b      	ldr	r3, [r7, #0]
 8007310:	885b      	ldrh	r3, [r3, #2]
 8007312:	b2da      	uxtb	r2, r3
 8007314:	4b41      	ldr	r3, [pc, #260]	; (800741c <USBD_SetConfig+0x118>)
 8007316:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007318:	4b40      	ldr	r3, [pc, #256]	; (800741c <USBD_SetConfig+0x118>)
 800731a:	781b      	ldrb	r3, [r3, #0]
 800731c:	2b01      	cmp	r3, #1
 800731e:	d904      	bls.n	800732a <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8007320:	6839      	ldr	r1, [r7, #0]
 8007322:	6878      	ldr	r0, [r7, #4]
 8007324:	f000 f955 	bl	80075d2 <USBD_CtlError>
 8007328:	e075      	b.n	8007416 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007330:	2b02      	cmp	r3, #2
 8007332:	d002      	beq.n	800733a <USBD_SetConfig+0x36>
 8007334:	2b03      	cmp	r3, #3
 8007336:	d023      	beq.n	8007380 <USBD_SetConfig+0x7c>
 8007338:	e062      	b.n	8007400 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800733a:	4b38      	ldr	r3, [pc, #224]	; (800741c <USBD_SetConfig+0x118>)
 800733c:	781b      	ldrb	r3, [r3, #0]
 800733e:	2b00      	cmp	r3, #0
 8007340:	d01a      	beq.n	8007378 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8007342:	4b36      	ldr	r3, [pc, #216]	; (800741c <USBD_SetConfig+0x118>)
 8007344:	781b      	ldrb	r3, [r3, #0]
 8007346:	461a      	mov	r2, r3
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	2203      	movs	r2, #3
 8007350:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007354:	4b31      	ldr	r3, [pc, #196]	; (800741c <USBD_SetConfig+0x118>)
 8007356:	781b      	ldrb	r3, [r3, #0]
 8007358:	4619      	mov	r1, r3
 800735a:	6878      	ldr	r0, [r7, #4]
 800735c:	f7ff f9e7 	bl	800672e <USBD_SetClassConfig>
 8007360:	4603      	mov	r3, r0
 8007362:	2b02      	cmp	r3, #2
 8007364:	d104      	bne.n	8007370 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8007366:	6839      	ldr	r1, [r7, #0]
 8007368:	6878      	ldr	r0, [r7, #4]
 800736a:	f000 f932 	bl	80075d2 <USBD_CtlError>
            return;
 800736e:	e052      	b.n	8007416 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8007370:	6878      	ldr	r0, [r7, #4]
 8007372:	f000 f9f6 	bl	8007762 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007376:	e04e      	b.n	8007416 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007378:	6878      	ldr	r0, [r7, #4]
 800737a:	f000 f9f2 	bl	8007762 <USBD_CtlSendStatus>
        break;
 800737e:	e04a      	b.n	8007416 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8007380:	4b26      	ldr	r3, [pc, #152]	; (800741c <USBD_SetConfig+0x118>)
 8007382:	781b      	ldrb	r3, [r3, #0]
 8007384:	2b00      	cmp	r3, #0
 8007386:	d112      	bne.n	80073ae <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	2202      	movs	r2, #2
 800738c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8007390:	4b22      	ldr	r3, [pc, #136]	; (800741c <USBD_SetConfig+0x118>)
 8007392:	781b      	ldrb	r3, [r3, #0]
 8007394:	461a      	mov	r2, r3
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800739a:	4b20      	ldr	r3, [pc, #128]	; (800741c <USBD_SetConfig+0x118>)
 800739c:	781b      	ldrb	r3, [r3, #0]
 800739e:	4619      	mov	r1, r3
 80073a0:	6878      	ldr	r0, [r7, #4]
 80073a2:	f7ff f9e3 	bl	800676c <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 80073a6:	6878      	ldr	r0, [r7, #4]
 80073a8:	f000 f9db 	bl	8007762 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80073ac:	e033      	b.n	8007416 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 80073ae:	4b1b      	ldr	r3, [pc, #108]	; (800741c <USBD_SetConfig+0x118>)
 80073b0:	781b      	ldrb	r3, [r3, #0]
 80073b2:	461a      	mov	r2, r3
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	685b      	ldr	r3, [r3, #4]
 80073b8:	429a      	cmp	r2, r3
 80073ba:	d01d      	beq.n	80073f8 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	685b      	ldr	r3, [r3, #4]
 80073c0:	b2db      	uxtb	r3, r3
 80073c2:	4619      	mov	r1, r3
 80073c4:	6878      	ldr	r0, [r7, #4]
 80073c6:	f7ff f9d1 	bl	800676c <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 80073ca:	4b14      	ldr	r3, [pc, #80]	; (800741c <USBD_SetConfig+0x118>)
 80073cc:	781b      	ldrb	r3, [r3, #0]
 80073ce:	461a      	mov	r2, r3
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80073d4:	4b11      	ldr	r3, [pc, #68]	; (800741c <USBD_SetConfig+0x118>)
 80073d6:	781b      	ldrb	r3, [r3, #0]
 80073d8:	4619      	mov	r1, r3
 80073da:	6878      	ldr	r0, [r7, #4]
 80073dc:	f7ff f9a7 	bl	800672e <USBD_SetClassConfig>
 80073e0:	4603      	mov	r3, r0
 80073e2:	2b02      	cmp	r3, #2
 80073e4:	d104      	bne.n	80073f0 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 80073e6:	6839      	ldr	r1, [r7, #0]
 80073e8:	6878      	ldr	r0, [r7, #4]
 80073ea:	f000 f8f2 	bl	80075d2 <USBD_CtlError>
            return;
 80073ee:	e012      	b.n	8007416 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80073f0:	6878      	ldr	r0, [r7, #4]
 80073f2:	f000 f9b6 	bl	8007762 <USBD_CtlSendStatus>
        break;
 80073f6:	e00e      	b.n	8007416 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80073f8:	6878      	ldr	r0, [r7, #4]
 80073fa:	f000 f9b2 	bl	8007762 <USBD_CtlSendStatus>
        break;
 80073fe:	e00a      	b.n	8007416 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8007400:	6839      	ldr	r1, [r7, #0]
 8007402:	6878      	ldr	r0, [r7, #4]
 8007404:	f000 f8e5 	bl	80075d2 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8007408:	4b04      	ldr	r3, [pc, #16]	; (800741c <USBD_SetConfig+0x118>)
 800740a:	781b      	ldrb	r3, [r3, #0]
 800740c:	4619      	mov	r1, r3
 800740e:	6878      	ldr	r0, [r7, #4]
 8007410:	f7ff f9ac 	bl	800676c <USBD_ClrClassConfig>
        break;
 8007414:	bf00      	nop
    }
  }
}
 8007416:	3708      	adds	r7, #8
 8007418:	46bd      	mov	sp, r7
 800741a:	bd80      	pop	{r7, pc}
 800741c:	20000290 	.word	0x20000290

08007420 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007420:	b580      	push	{r7, lr}
 8007422:	b082      	sub	sp, #8
 8007424:	af00      	add	r7, sp, #0
 8007426:	6078      	str	r0, [r7, #4]
 8007428:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800742a:	683b      	ldr	r3, [r7, #0]
 800742c:	88db      	ldrh	r3, [r3, #6]
 800742e:	2b01      	cmp	r3, #1
 8007430:	d004      	beq.n	800743c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007432:	6839      	ldr	r1, [r7, #0]
 8007434:	6878      	ldr	r0, [r7, #4]
 8007436:	f000 f8cc 	bl	80075d2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800743a:	e022      	b.n	8007482 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007442:	2b02      	cmp	r3, #2
 8007444:	dc02      	bgt.n	800744c <USBD_GetConfig+0x2c>
 8007446:	2b00      	cmp	r3, #0
 8007448:	dc03      	bgt.n	8007452 <USBD_GetConfig+0x32>
 800744a:	e015      	b.n	8007478 <USBD_GetConfig+0x58>
 800744c:	2b03      	cmp	r3, #3
 800744e:	d00b      	beq.n	8007468 <USBD_GetConfig+0x48>
 8007450:	e012      	b.n	8007478 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	2200      	movs	r2, #0
 8007456:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	3308      	adds	r3, #8
 800745c:	2201      	movs	r2, #1
 800745e:	4619      	mov	r1, r3
 8007460:	6878      	ldr	r0, [r7, #4]
 8007462:	f000 f920 	bl	80076a6 <USBD_CtlSendData>
        break;
 8007466:	e00c      	b.n	8007482 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	3304      	adds	r3, #4
 800746c:	2201      	movs	r2, #1
 800746e:	4619      	mov	r1, r3
 8007470:	6878      	ldr	r0, [r7, #4]
 8007472:	f000 f918 	bl	80076a6 <USBD_CtlSendData>
        break;
 8007476:	e004      	b.n	8007482 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8007478:	6839      	ldr	r1, [r7, #0]
 800747a:	6878      	ldr	r0, [r7, #4]
 800747c:	f000 f8a9 	bl	80075d2 <USBD_CtlError>
        break;
 8007480:	bf00      	nop
}
 8007482:	bf00      	nop
 8007484:	3708      	adds	r7, #8
 8007486:	46bd      	mov	sp, r7
 8007488:	bd80      	pop	{r7, pc}

0800748a <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800748a:	b580      	push	{r7, lr}
 800748c:	b082      	sub	sp, #8
 800748e:	af00      	add	r7, sp, #0
 8007490:	6078      	str	r0, [r7, #4]
 8007492:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800749a:	3b01      	subs	r3, #1
 800749c:	2b02      	cmp	r3, #2
 800749e:	d81e      	bhi.n	80074de <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80074a0:	683b      	ldr	r3, [r7, #0]
 80074a2:	88db      	ldrh	r3, [r3, #6]
 80074a4:	2b02      	cmp	r3, #2
 80074a6:	d004      	beq.n	80074b2 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 80074a8:	6839      	ldr	r1, [r7, #0]
 80074aa:	6878      	ldr	r0, [r7, #4]
 80074ac:	f000 f891 	bl	80075d2 <USBD_CtlError>
        break;
 80074b0:	e01a      	b.n	80074e8 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	2201      	movs	r2, #1
 80074b6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d005      	beq.n	80074ce <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	68db      	ldr	r3, [r3, #12]
 80074c6:	f043 0202 	orr.w	r2, r3, #2
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	330c      	adds	r3, #12
 80074d2:	2202      	movs	r2, #2
 80074d4:	4619      	mov	r1, r3
 80074d6:	6878      	ldr	r0, [r7, #4]
 80074d8:	f000 f8e5 	bl	80076a6 <USBD_CtlSendData>
      break;
 80074dc:	e004      	b.n	80074e8 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 80074de:	6839      	ldr	r1, [r7, #0]
 80074e0:	6878      	ldr	r0, [r7, #4]
 80074e2:	f000 f876 	bl	80075d2 <USBD_CtlError>
      break;
 80074e6:	bf00      	nop
  }
}
 80074e8:	bf00      	nop
 80074ea:	3708      	adds	r7, #8
 80074ec:	46bd      	mov	sp, r7
 80074ee:	bd80      	pop	{r7, pc}

080074f0 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80074f0:	b580      	push	{r7, lr}
 80074f2:	b082      	sub	sp, #8
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	6078      	str	r0, [r7, #4]
 80074f8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80074fa:	683b      	ldr	r3, [r7, #0]
 80074fc:	885b      	ldrh	r3, [r3, #2]
 80074fe:	2b01      	cmp	r3, #1
 8007500:	d106      	bne.n	8007510 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	2201      	movs	r2, #1
 8007506:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800750a:	6878      	ldr	r0, [r7, #4]
 800750c:	f000 f929 	bl	8007762 <USBD_CtlSendStatus>
  }
}
 8007510:	bf00      	nop
 8007512:	3708      	adds	r7, #8
 8007514:	46bd      	mov	sp, r7
 8007516:	bd80      	pop	{r7, pc}

08007518 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007518:	b580      	push	{r7, lr}
 800751a:	b082      	sub	sp, #8
 800751c:	af00      	add	r7, sp, #0
 800751e:	6078      	str	r0, [r7, #4]
 8007520:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007528:	3b01      	subs	r3, #1
 800752a:	2b02      	cmp	r3, #2
 800752c:	d80b      	bhi.n	8007546 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800752e:	683b      	ldr	r3, [r7, #0]
 8007530:	885b      	ldrh	r3, [r3, #2]
 8007532:	2b01      	cmp	r3, #1
 8007534:	d10c      	bne.n	8007550 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	2200      	movs	r2, #0
 800753a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800753e:	6878      	ldr	r0, [r7, #4]
 8007540:	f000 f90f 	bl	8007762 <USBD_CtlSendStatus>
      }
      break;
 8007544:	e004      	b.n	8007550 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8007546:	6839      	ldr	r1, [r7, #0]
 8007548:	6878      	ldr	r0, [r7, #4]
 800754a:	f000 f842 	bl	80075d2 <USBD_CtlError>
      break;
 800754e:	e000      	b.n	8007552 <USBD_ClrFeature+0x3a>
      break;
 8007550:	bf00      	nop
  }
}
 8007552:	bf00      	nop
 8007554:	3708      	adds	r7, #8
 8007556:	46bd      	mov	sp, r7
 8007558:	bd80      	pop	{r7, pc}

0800755a <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800755a:	b480      	push	{r7}
 800755c:	b083      	sub	sp, #12
 800755e:	af00      	add	r7, sp, #0
 8007560:	6078      	str	r0, [r7, #4]
 8007562:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8007564:	683b      	ldr	r3, [r7, #0]
 8007566:	781a      	ldrb	r2, [r3, #0]
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800756c:	683b      	ldr	r3, [r7, #0]
 800756e:	785a      	ldrb	r2, [r3, #1]
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8007574:	683b      	ldr	r3, [r7, #0]
 8007576:	3302      	adds	r3, #2
 8007578:	781b      	ldrb	r3, [r3, #0]
 800757a:	b29a      	uxth	r2, r3
 800757c:	683b      	ldr	r3, [r7, #0]
 800757e:	3303      	adds	r3, #3
 8007580:	781b      	ldrb	r3, [r3, #0]
 8007582:	b29b      	uxth	r3, r3
 8007584:	021b      	lsls	r3, r3, #8
 8007586:	b29b      	uxth	r3, r3
 8007588:	4413      	add	r3, r2
 800758a:	b29a      	uxth	r2, r3
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8007590:	683b      	ldr	r3, [r7, #0]
 8007592:	3304      	adds	r3, #4
 8007594:	781b      	ldrb	r3, [r3, #0]
 8007596:	b29a      	uxth	r2, r3
 8007598:	683b      	ldr	r3, [r7, #0]
 800759a:	3305      	adds	r3, #5
 800759c:	781b      	ldrb	r3, [r3, #0]
 800759e:	b29b      	uxth	r3, r3
 80075a0:	021b      	lsls	r3, r3, #8
 80075a2:	b29b      	uxth	r3, r3
 80075a4:	4413      	add	r3, r2
 80075a6:	b29a      	uxth	r2, r3
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 80075ac:	683b      	ldr	r3, [r7, #0]
 80075ae:	3306      	adds	r3, #6
 80075b0:	781b      	ldrb	r3, [r3, #0]
 80075b2:	b29a      	uxth	r2, r3
 80075b4:	683b      	ldr	r3, [r7, #0]
 80075b6:	3307      	adds	r3, #7
 80075b8:	781b      	ldrb	r3, [r3, #0]
 80075ba:	b29b      	uxth	r3, r3
 80075bc:	021b      	lsls	r3, r3, #8
 80075be:	b29b      	uxth	r3, r3
 80075c0:	4413      	add	r3, r2
 80075c2:	b29a      	uxth	r2, r3
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	80da      	strh	r2, [r3, #6]

}
 80075c8:	bf00      	nop
 80075ca:	370c      	adds	r7, #12
 80075cc:	46bd      	mov	sp, r7
 80075ce:	bc80      	pop	{r7}
 80075d0:	4770      	bx	lr

080075d2 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 80075d2:	b580      	push	{r7, lr}
 80075d4:	b082      	sub	sp, #8
 80075d6:	af00      	add	r7, sp, #0
 80075d8:	6078      	str	r0, [r7, #4]
 80075da:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 80075dc:	2180      	movs	r1, #128	; 0x80
 80075de:	6878      	ldr	r0, [r7, #4]
 80075e0:	f000 fc98 	bl	8007f14 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80075e4:	2100      	movs	r1, #0
 80075e6:	6878      	ldr	r0, [r7, #4]
 80075e8:	f000 fc94 	bl	8007f14 <USBD_LL_StallEP>
}
 80075ec:	bf00      	nop
 80075ee:	3708      	adds	r7, #8
 80075f0:	46bd      	mov	sp, r7
 80075f2:	bd80      	pop	{r7, pc}

080075f4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80075f4:	b580      	push	{r7, lr}
 80075f6:	b086      	sub	sp, #24
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	60f8      	str	r0, [r7, #12]
 80075fc:	60b9      	str	r1, [r7, #8]
 80075fe:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007600:	2300      	movs	r3, #0
 8007602:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	2b00      	cmp	r3, #0
 8007608:	d032      	beq.n	8007670 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800760a:	68f8      	ldr	r0, [r7, #12]
 800760c:	f000 f834 	bl	8007678 <USBD_GetLen>
 8007610:	4603      	mov	r3, r0
 8007612:	3301      	adds	r3, #1
 8007614:	b29b      	uxth	r3, r3
 8007616:	005b      	lsls	r3, r3, #1
 8007618:	b29a      	uxth	r2, r3
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800761e:	7dfb      	ldrb	r3, [r7, #23]
 8007620:	1c5a      	adds	r2, r3, #1
 8007622:	75fa      	strb	r2, [r7, #23]
 8007624:	461a      	mov	r2, r3
 8007626:	68bb      	ldr	r3, [r7, #8]
 8007628:	4413      	add	r3, r2
 800762a:	687a      	ldr	r2, [r7, #4]
 800762c:	7812      	ldrb	r2, [r2, #0]
 800762e:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8007630:	7dfb      	ldrb	r3, [r7, #23]
 8007632:	1c5a      	adds	r2, r3, #1
 8007634:	75fa      	strb	r2, [r7, #23]
 8007636:	461a      	mov	r2, r3
 8007638:	68bb      	ldr	r3, [r7, #8]
 800763a:	4413      	add	r3, r2
 800763c:	2203      	movs	r2, #3
 800763e:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8007640:	e012      	b.n	8007668 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	1c5a      	adds	r2, r3, #1
 8007646:	60fa      	str	r2, [r7, #12]
 8007648:	7dfa      	ldrb	r2, [r7, #23]
 800764a:	1c51      	adds	r1, r2, #1
 800764c:	75f9      	strb	r1, [r7, #23]
 800764e:	4611      	mov	r1, r2
 8007650:	68ba      	ldr	r2, [r7, #8]
 8007652:	440a      	add	r2, r1
 8007654:	781b      	ldrb	r3, [r3, #0]
 8007656:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8007658:	7dfb      	ldrb	r3, [r7, #23]
 800765a:	1c5a      	adds	r2, r3, #1
 800765c:	75fa      	strb	r2, [r7, #23]
 800765e:	461a      	mov	r2, r3
 8007660:	68bb      	ldr	r3, [r7, #8]
 8007662:	4413      	add	r3, r2
 8007664:	2200      	movs	r2, #0
 8007666:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	781b      	ldrb	r3, [r3, #0]
 800766c:	2b00      	cmp	r3, #0
 800766e:	d1e8      	bne.n	8007642 <USBD_GetString+0x4e>
    }
  }
}
 8007670:	bf00      	nop
 8007672:	3718      	adds	r7, #24
 8007674:	46bd      	mov	sp, r7
 8007676:	bd80      	pop	{r7, pc}

08007678 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007678:	b480      	push	{r7}
 800767a:	b085      	sub	sp, #20
 800767c:	af00      	add	r7, sp, #0
 800767e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007680:	2300      	movs	r3, #0
 8007682:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8007684:	e005      	b.n	8007692 <USBD_GetLen+0x1a>
  {
    len++;
 8007686:	7bfb      	ldrb	r3, [r7, #15]
 8007688:	3301      	adds	r3, #1
 800768a:	73fb      	strb	r3, [r7, #15]
    buf++;
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	3301      	adds	r3, #1
 8007690:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	781b      	ldrb	r3, [r3, #0]
 8007696:	2b00      	cmp	r3, #0
 8007698:	d1f5      	bne.n	8007686 <USBD_GetLen+0xe>
  }

  return len;
 800769a:	7bfb      	ldrb	r3, [r7, #15]
}
 800769c:	4618      	mov	r0, r3
 800769e:	3714      	adds	r7, #20
 80076a0:	46bd      	mov	sp, r7
 80076a2:	bc80      	pop	{r7}
 80076a4:	4770      	bx	lr

080076a6 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 80076a6:	b580      	push	{r7, lr}
 80076a8:	b084      	sub	sp, #16
 80076aa:	af00      	add	r7, sp, #0
 80076ac:	60f8      	str	r0, [r7, #12]
 80076ae:	60b9      	str	r1, [r7, #8]
 80076b0:	4613      	mov	r3, r2
 80076b2:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	2202      	movs	r2, #2
 80076b8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80076bc:	88fa      	ldrh	r2, [r7, #6]
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 80076c2:	88fa      	ldrh	r2, [r7, #6]
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80076c8:	88fb      	ldrh	r3, [r7, #6]
 80076ca:	68ba      	ldr	r2, [r7, #8]
 80076cc:	2100      	movs	r1, #0
 80076ce:	68f8      	ldr	r0, [r7, #12]
 80076d0:	f000 fca9 	bl	8008026 <USBD_LL_Transmit>

  return USBD_OK;
 80076d4:	2300      	movs	r3, #0
}
 80076d6:	4618      	mov	r0, r3
 80076d8:	3710      	adds	r7, #16
 80076da:	46bd      	mov	sp, r7
 80076dc:	bd80      	pop	{r7, pc}

080076de <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 80076de:	b580      	push	{r7, lr}
 80076e0:	b084      	sub	sp, #16
 80076e2:	af00      	add	r7, sp, #0
 80076e4:	60f8      	str	r0, [r7, #12]
 80076e6:	60b9      	str	r1, [r7, #8]
 80076e8:	4613      	mov	r3, r2
 80076ea:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80076ec:	88fb      	ldrh	r3, [r7, #6]
 80076ee:	68ba      	ldr	r2, [r7, #8]
 80076f0:	2100      	movs	r1, #0
 80076f2:	68f8      	ldr	r0, [r7, #12]
 80076f4:	f000 fc97 	bl	8008026 <USBD_LL_Transmit>

  return USBD_OK;
 80076f8:	2300      	movs	r3, #0
}
 80076fa:	4618      	mov	r0, r3
 80076fc:	3710      	adds	r7, #16
 80076fe:	46bd      	mov	sp, r7
 8007700:	bd80      	pop	{r7, pc}

08007702 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8007702:	b580      	push	{r7, lr}
 8007704:	b084      	sub	sp, #16
 8007706:	af00      	add	r7, sp, #0
 8007708:	60f8      	str	r0, [r7, #12]
 800770a:	60b9      	str	r1, [r7, #8]
 800770c:	4613      	mov	r3, r2
 800770e:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	2203      	movs	r2, #3
 8007714:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007718:	88fa      	ldrh	r2, [r7, #6]
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8007720:	88fa      	ldrh	r2, [r7, #6]
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007728:	88fb      	ldrh	r3, [r7, #6]
 800772a:	68ba      	ldr	r2, [r7, #8]
 800772c:	2100      	movs	r1, #0
 800772e:	68f8      	ldr	r0, [r7, #12]
 8007730:	f000 fc9c 	bl	800806c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007734:	2300      	movs	r3, #0
}
 8007736:	4618      	mov	r0, r3
 8007738:	3710      	adds	r7, #16
 800773a:	46bd      	mov	sp, r7
 800773c:	bd80      	pop	{r7, pc}

0800773e <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800773e:	b580      	push	{r7, lr}
 8007740:	b084      	sub	sp, #16
 8007742:	af00      	add	r7, sp, #0
 8007744:	60f8      	str	r0, [r7, #12]
 8007746:	60b9      	str	r1, [r7, #8]
 8007748:	4613      	mov	r3, r2
 800774a:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800774c:	88fb      	ldrh	r3, [r7, #6]
 800774e:	68ba      	ldr	r2, [r7, #8]
 8007750:	2100      	movs	r1, #0
 8007752:	68f8      	ldr	r0, [r7, #12]
 8007754:	f000 fc8a 	bl	800806c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007758:	2300      	movs	r3, #0
}
 800775a:	4618      	mov	r0, r3
 800775c:	3710      	adds	r7, #16
 800775e:	46bd      	mov	sp, r7
 8007760:	bd80      	pop	{r7, pc}

08007762 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007762:	b580      	push	{r7, lr}
 8007764:	b082      	sub	sp, #8
 8007766:	af00      	add	r7, sp, #0
 8007768:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	2204      	movs	r2, #4
 800776e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007772:	2300      	movs	r3, #0
 8007774:	2200      	movs	r2, #0
 8007776:	2100      	movs	r1, #0
 8007778:	6878      	ldr	r0, [r7, #4]
 800777a:	f000 fc54 	bl	8008026 <USBD_LL_Transmit>

  return USBD_OK;
 800777e:	2300      	movs	r3, #0
}
 8007780:	4618      	mov	r0, r3
 8007782:	3708      	adds	r7, #8
 8007784:	46bd      	mov	sp, r7
 8007786:	bd80      	pop	{r7, pc}

08007788 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007788:	b580      	push	{r7, lr}
 800778a:	b082      	sub	sp, #8
 800778c:	af00      	add	r7, sp, #0
 800778e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	2205      	movs	r2, #5
 8007794:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007798:	2300      	movs	r3, #0
 800779a:	2200      	movs	r2, #0
 800779c:	2100      	movs	r1, #0
 800779e:	6878      	ldr	r0, [r7, #4]
 80077a0:	f000 fc64 	bl	800806c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80077a4:	2300      	movs	r3, #0
}
 80077a6:	4618      	mov	r0, r3
 80077a8:	3708      	adds	r7, #8
 80077aa:	46bd      	mov	sp, r7
 80077ac:	bd80      	pop	{r7, pc}
	...

080077b0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80077b0:	b580      	push	{r7, lr}
 80077b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80077b4:	2200      	movs	r2, #0
 80077b6:	4912      	ldr	r1, [pc, #72]	; (8007800 <MX_USB_DEVICE_Init+0x50>)
 80077b8:	4812      	ldr	r0, [pc, #72]	; (8007804 <MX_USB_DEVICE_Init+0x54>)
 80077ba:	f7fe ff5e 	bl	800667a <USBD_Init>
 80077be:	4603      	mov	r3, r0
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d001      	beq.n	80077c8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80077c4:	f7f8 fef0 	bl	80005a8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80077c8:	490f      	ldr	r1, [pc, #60]	; (8007808 <MX_USB_DEVICE_Init+0x58>)
 80077ca:	480e      	ldr	r0, [pc, #56]	; (8007804 <MX_USB_DEVICE_Init+0x54>)
 80077cc:	f7fe ff80 	bl	80066d0 <USBD_RegisterClass>
 80077d0:	4603      	mov	r3, r0
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d001      	beq.n	80077da <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80077d6:	f7f8 fee7 	bl	80005a8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80077da:	490c      	ldr	r1, [pc, #48]	; (800780c <MX_USB_DEVICE_Init+0x5c>)
 80077dc:	4809      	ldr	r0, [pc, #36]	; (8007804 <MX_USB_DEVICE_Init+0x54>)
 80077de:	f7fe feb1 	bl	8006544 <USBD_CDC_RegisterInterface>
 80077e2:	4603      	mov	r3, r0
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d001      	beq.n	80077ec <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80077e8:	f7f8 fede 	bl	80005a8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80077ec:	4805      	ldr	r0, [pc, #20]	; (8007804 <MX_USB_DEVICE_Init+0x54>)
 80077ee:	f7fe ff88 	bl	8006702 <USBD_Start>
 80077f2:	4603      	mov	r3, r0
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d001      	beq.n	80077fc <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80077f8:	f7f8 fed6 	bl	80005a8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80077fc:	bf00      	nop
 80077fe:	bd80      	pop	{r7, pc}
 8007800:	2000012c 	.word	0x2000012c
 8007804:	20000294 	.word	0x20000294
 8007808:	20000018 	.word	0x20000018
 800780c:	2000011c 	.word	0x2000011c

08007810 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007810:	b580      	push	{r7, lr}
 8007812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007814:	2200      	movs	r2, #0
 8007816:	4905      	ldr	r1, [pc, #20]	; (800782c <CDC_Init_FS+0x1c>)
 8007818:	4805      	ldr	r0, [pc, #20]	; (8007830 <CDC_Init_FS+0x20>)
 800781a:	f7fe fea9 	bl	8006570 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800781e:	4905      	ldr	r1, [pc, #20]	; (8007834 <CDC_Init_FS+0x24>)
 8007820:	4803      	ldr	r0, [pc, #12]	; (8007830 <CDC_Init_FS+0x20>)
 8007822:	f7fe febe 	bl	80065a2 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8007826:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007828:	4618      	mov	r0, r3
 800782a:	bd80      	pop	{r7, pc}
 800782c:	20000960 	.word	0x20000960
 8007830:	20000294 	.word	0x20000294
 8007834:	20000560 	.word	0x20000560

08007838 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007838:	b480      	push	{r7}
 800783a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800783c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800783e:	4618      	mov	r0, r3
 8007840:	46bd      	mov	sp, r7
 8007842:	bc80      	pop	{r7}
 8007844:	4770      	bx	lr
	...

08007848 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007848:	b480      	push	{r7}
 800784a:	b083      	sub	sp, #12
 800784c:	af00      	add	r7, sp, #0
 800784e:	4603      	mov	r3, r0
 8007850:	6039      	str	r1, [r7, #0]
 8007852:	71fb      	strb	r3, [r7, #7]
 8007854:	4613      	mov	r3, r2
 8007856:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007858:	79fb      	ldrb	r3, [r7, #7]
 800785a:	2b23      	cmp	r3, #35	; 0x23
 800785c:	f200 808c 	bhi.w	8007978 <CDC_Control_FS+0x130>
 8007860:	a201      	add	r2, pc, #4	; (adr r2, 8007868 <CDC_Control_FS+0x20>)
 8007862:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007866:	bf00      	nop
 8007868:	08007979 	.word	0x08007979
 800786c:	08007979 	.word	0x08007979
 8007870:	08007979 	.word	0x08007979
 8007874:	08007979 	.word	0x08007979
 8007878:	08007979 	.word	0x08007979
 800787c:	08007979 	.word	0x08007979
 8007880:	08007979 	.word	0x08007979
 8007884:	08007979 	.word	0x08007979
 8007888:	08007979 	.word	0x08007979
 800788c:	08007979 	.word	0x08007979
 8007890:	08007979 	.word	0x08007979
 8007894:	08007979 	.word	0x08007979
 8007898:	08007979 	.word	0x08007979
 800789c:	08007979 	.word	0x08007979
 80078a0:	08007979 	.word	0x08007979
 80078a4:	08007979 	.word	0x08007979
 80078a8:	08007979 	.word	0x08007979
 80078ac:	08007979 	.word	0x08007979
 80078b0:	08007979 	.word	0x08007979
 80078b4:	08007979 	.word	0x08007979
 80078b8:	08007979 	.word	0x08007979
 80078bc:	08007979 	.word	0x08007979
 80078c0:	08007979 	.word	0x08007979
 80078c4:	08007979 	.word	0x08007979
 80078c8:	08007979 	.word	0x08007979
 80078cc:	08007979 	.word	0x08007979
 80078d0:	08007979 	.word	0x08007979
 80078d4:	08007979 	.word	0x08007979
 80078d8:	08007979 	.word	0x08007979
 80078dc:	08007979 	.word	0x08007979
 80078e0:	08007979 	.word	0x08007979
 80078e4:	08007979 	.word	0x08007979
 80078e8:	080078f9 	.word	0x080078f9
 80078ec:	08007933 	.word	0x08007933
 80078f0:	08007979 	.word	0x08007979
 80078f4:	08007979 	.word	0x08007979
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
    	buffer[0] = pbuf[0];
 80078f8:	683b      	ldr	r3, [r7, #0]
 80078fa:	781a      	ldrb	r2, [r3, #0]
 80078fc:	4b22      	ldr	r3, [pc, #136]	; (8007988 <CDC_Control_FS+0x140>)
 80078fe:	701a      	strb	r2, [r3, #0]
    	buffer[1] = pbuf[1];
 8007900:	683b      	ldr	r3, [r7, #0]
 8007902:	785a      	ldrb	r2, [r3, #1]
 8007904:	4b20      	ldr	r3, [pc, #128]	; (8007988 <CDC_Control_FS+0x140>)
 8007906:	705a      	strb	r2, [r3, #1]
    	buffer[2] = pbuf[2];
 8007908:	683b      	ldr	r3, [r7, #0]
 800790a:	789a      	ldrb	r2, [r3, #2]
 800790c:	4b1e      	ldr	r3, [pc, #120]	; (8007988 <CDC_Control_FS+0x140>)
 800790e:	709a      	strb	r2, [r3, #2]
    	buffer[3] = pbuf[3];
 8007910:	683b      	ldr	r3, [r7, #0]
 8007912:	78da      	ldrb	r2, [r3, #3]
 8007914:	4b1c      	ldr	r3, [pc, #112]	; (8007988 <CDC_Control_FS+0x140>)
 8007916:	70da      	strb	r2, [r3, #3]
    	buffer[4] = pbuf[4];
 8007918:	683b      	ldr	r3, [r7, #0]
 800791a:	791a      	ldrb	r2, [r3, #4]
 800791c:	4b1a      	ldr	r3, [pc, #104]	; (8007988 <CDC_Control_FS+0x140>)
 800791e:	711a      	strb	r2, [r3, #4]
    	buffer[5] = pbuf[5];
 8007920:	683b      	ldr	r3, [r7, #0]
 8007922:	795a      	ldrb	r2, [r3, #5]
 8007924:	4b18      	ldr	r3, [pc, #96]	; (8007988 <CDC_Control_FS+0x140>)
 8007926:	715a      	strb	r2, [r3, #5]
    	buffer[6] = pbuf[6];
 8007928:	683b      	ldr	r3, [r7, #0]
 800792a:	799a      	ldrb	r2, [r3, #6]
 800792c:	4b16      	ldr	r3, [pc, #88]	; (8007988 <CDC_Control_FS+0x140>)
 800792e:	719a      	strb	r2, [r3, #6]
    break;
 8007930:	e023      	b.n	800797a <CDC_Control_FS+0x132>

    case CDC_GET_LINE_CODING:
    	pbuf[0] = buffer[0];
 8007932:	4b15      	ldr	r3, [pc, #84]	; (8007988 <CDC_Control_FS+0x140>)
 8007934:	781a      	ldrb	r2, [r3, #0]
 8007936:	683b      	ldr	r3, [r7, #0]
 8007938:	701a      	strb	r2, [r3, #0]
    	pbuf[1] = buffer[1];
 800793a:	683b      	ldr	r3, [r7, #0]
 800793c:	3301      	adds	r3, #1
 800793e:	4a12      	ldr	r2, [pc, #72]	; (8007988 <CDC_Control_FS+0x140>)
 8007940:	7852      	ldrb	r2, [r2, #1]
 8007942:	701a      	strb	r2, [r3, #0]
    	pbuf[2] = buffer[2];
 8007944:	683b      	ldr	r3, [r7, #0]
 8007946:	3302      	adds	r3, #2
 8007948:	4a0f      	ldr	r2, [pc, #60]	; (8007988 <CDC_Control_FS+0x140>)
 800794a:	7892      	ldrb	r2, [r2, #2]
 800794c:	701a      	strb	r2, [r3, #0]
    	pbuf[3] = buffer[3];
 800794e:	683b      	ldr	r3, [r7, #0]
 8007950:	3303      	adds	r3, #3
 8007952:	4a0d      	ldr	r2, [pc, #52]	; (8007988 <CDC_Control_FS+0x140>)
 8007954:	78d2      	ldrb	r2, [r2, #3]
 8007956:	701a      	strb	r2, [r3, #0]
    	pbuf[4] = buffer[4];
 8007958:	683b      	ldr	r3, [r7, #0]
 800795a:	3304      	adds	r3, #4
 800795c:	4a0a      	ldr	r2, [pc, #40]	; (8007988 <CDC_Control_FS+0x140>)
 800795e:	7912      	ldrb	r2, [r2, #4]
 8007960:	701a      	strb	r2, [r3, #0]
    	pbuf[5] = buffer[5];
 8007962:	683b      	ldr	r3, [r7, #0]
 8007964:	3305      	adds	r3, #5
 8007966:	4a08      	ldr	r2, [pc, #32]	; (8007988 <CDC_Control_FS+0x140>)
 8007968:	7952      	ldrb	r2, [r2, #5]
 800796a:	701a      	strb	r2, [r3, #0]
    	pbuf[6] = buffer[6];
 800796c:	683b      	ldr	r3, [r7, #0]
 800796e:	3306      	adds	r3, #6
 8007970:	4a05      	ldr	r2, [pc, #20]	; (8007988 <CDC_Control_FS+0x140>)
 8007972:	7992      	ldrb	r2, [r2, #6]
 8007974:	701a      	strb	r2, [r3, #0]

    break;
 8007976:	e000      	b.n	800797a <CDC_Control_FS+0x132>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007978:	bf00      	nop
  }

  return (USBD_OK);
 800797a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800797c:	4618      	mov	r0, r3
 800797e:	370c      	adds	r7, #12
 8007980:	46bd      	mov	sp, r7
 8007982:	bc80      	pop	{r7}
 8007984:	4770      	bx	lr
 8007986:	bf00      	nop
 8007988:	20000558 	.word	0x20000558

0800798c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800798c:	b580      	push	{r7, lr}
 800798e:	b082      	sub	sp, #8
 8007990:	af00      	add	r7, sp, #0
 8007992:	6078      	str	r0, [r7, #4]
 8007994:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007996:	6879      	ldr	r1, [r7, #4]
 8007998:	4805      	ldr	r0, [pc, #20]	; (80079b0 <CDC_Receive_FS+0x24>)
 800799a:	f7fe fe02 	bl	80065a2 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800799e:	4804      	ldr	r0, [pc, #16]	; (80079b0 <CDC_Receive_FS+0x24>)
 80079a0:	f7fe fe41 	bl	8006626 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80079a4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80079a6:	4618      	mov	r0, r3
 80079a8:	3708      	adds	r7, #8
 80079aa:	46bd      	mov	sp, r7
 80079ac:	bd80      	pop	{r7, pc}
 80079ae:	bf00      	nop
 80079b0:	20000294 	.word	0x20000294

080079b4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80079b4:	b580      	push	{r7, lr}
 80079b6:	b084      	sub	sp, #16
 80079b8:	af00      	add	r7, sp, #0
 80079ba:	6078      	str	r0, [r7, #4]
 80079bc:	460b      	mov	r3, r1
 80079be:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80079c0:	2300      	movs	r3, #0
 80079c2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80079c4:	4b0d      	ldr	r3, [pc, #52]	; (80079fc <CDC_Transmit_FS+0x48>)
 80079c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079ca:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80079cc:	68bb      	ldr	r3, [r7, #8]
 80079ce:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d001      	beq.n	80079da <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80079d6:	2301      	movs	r3, #1
 80079d8:	e00b      	b.n	80079f2 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80079da:	887b      	ldrh	r3, [r7, #2]
 80079dc:	461a      	mov	r2, r3
 80079de:	6879      	ldr	r1, [r7, #4]
 80079e0:	4806      	ldr	r0, [pc, #24]	; (80079fc <CDC_Transmit_FS+0x48>)
 80079e2:	f7fe fdc5 	bl	8006570 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80079e6:	4805      	ldr	r0, [pc, #20]	; (80079fc <CDC_Transmit_FS+0x48>)
 80079e8:	f7fe fdee 	bl	80065c8 <USBD_CDC_TransmitPacket>
 80079ec:	4603      	mov	r3, r0
 80079ee:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80079f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80079f2:	4618      	mov	r0, r3
 80079f4:	3710      	adds	r7, #16
 80079f6:	46bd      	mov	sp, r7
 80079f8:	bd80      	pop	{r7, pc}
 80079fa:	bf00      	nop
 80079fc:	20000294 	.word	0x20000294

08007a00 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007a00:	b480      	push	{r7}
 8007a02:	b083      	sub	sp, #12
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	4603      	mov	r3, r0
 8007a08:	6039      	str	r1, [r7, #0]
 8007a0a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007a0c:	683b      	ldr	r3, [r7, #0]
 8007a0e:	2212      	movs	r2, #18
 8007a10:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007a12:	4b03      	ldr	r3, [pc, #12]	; (8007a20 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007a14:	4618      	mov	r0, r3
 8007a16:	370c      	adds	r7, #12
 8007a18:	46bd      	mov	sp, r7
 8007a1a:	bc80      	pop	{r7}
 8007a1c:	4770      	bx	lr
 8007a1e:	bf00      	nop
 8007a20:	20000148 	.word	0x20000148

08007a24 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007a24:	b480      	push	{r7}
 8007a26:	b083      	sub	sp, #12
 8007a28:	af00      	add	r7, sp, #0
 8007a2a:	4603      	mov	r3, r0
 8007a2c:	6039      	str	r1, [r7, #0]
 8007a2e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007a30:	683b      	ldr	r3, [r7, #0]
 8007a32:	2204      	movs	r2, #4
 8007a34:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007a36:	4b03      	ldr	r3, [pc, #12]	; (8007a44 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007a38:	4618      	mov	r0, r3
 8007a3a:	370c      	adds	r7, #12
 8007a3c:	46bd      	mov	sp, r7
 8007a3e:	bc80      	pop	{r7}
 8007a40:	4770      	bx	lr
 8007a42:	bf00      	nop
 8007a44:	2000015c 	.word	0x2000015c

08007a48 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007a48:	b580      	push	{r7, lr}
 8007a4a:	b082      	sub	sp, #8
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	4603      	mov	r3, r0
 8007a50:	6039      	str	r1, [r7, #0]
 8007a52:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007a54:	79fb      	ldrb	r3, [r7, #7]
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d105      	bne.n	8007a66 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007a5a:	683a      	ldr	r2, [r7, #0]
 8007a5c:	4907      	ldr	r1, [pc, #28]	; (8007a7c <USBD_FS_ProductStrDescriptor+0x34>)
 8007a5e:	4808      	ldr	r0, [pc, #32]	; (8007a80 <USBD_FS_ProductStrDescriptor+0x38>)
 8007a60:	f7ff fdc8 	bl	80075f4 <USBD_GetString>
 8007a64:	e004      	b.n	8007a70 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007a66:	683a      	ldr	r2, [r7, #0]
 8007a68:	4904      	ldr	r1, [pc, #16]	; (8007a7c <USBD_FS_ProductStrDescriptor+0x34>)
 8007a6a:	4805      	ldr	r0, [pc, #20]	; (8007a80 <USBD_FS_ProductStrDescriptor+0x38>)
 8007a6c:	f7ff fdc2 	bl	80075f4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007a70:	4b02      	ldr	r3, [pc, #8]	; (8007a7c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007a72:	4618      	mov	r0, r3
 8007a74:	3708      	adds	r7, #8
 8007a76:	46bd      	mov	sp, r7
 8007a78:	bd80      	pop	{r7, pc}
 8007a7a:	bf00      	nop
 8007a7c:	20000d60 	.word	0x20000d60
 8007a80:	08008b88 	.word	0x08008b88

08007a84 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007a84:	b580      	push	{r7, lr}
 8007a86:	b082      	sub	sp, #8
 8007a88:	af00      	add	r7, sp, #0
 8007a8a:	4603      	mov	r3, r0
 8007a8c:	6039      	str	r1, [r7, #0]
 8007a8e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007a90:	683a      	ldr	r2, [r7, #0]
 8007a92:	4904      	ldr	r1, [pc, #16]	; (8007aa4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007a94:	4804      	ldr	r0, [pc, #16]	; (8007aa8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007a96:	f7ff fdad 	bl	80075f4 <USBD_GetString>
  return USBD_StrDesc;
 8007a9a:	4b02      	ldr	r3, [pc, #8]	; (8007aa4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007a9c:	4618      	mov	r0, r3
 8007a9e:	3708      	adds	r7, #8
 8007aa0:	46bd      	mov	sp, r7
 8007aa2:	bd80      	pop	{r7, pc}
 8007aa4:	20000d60 	.word	0x20000d60
 8007aa8:	08008ba0 	.word	0x08008ba0

08007aac <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007aac:	b580      	push	{r7, lr}
 8007aae:	b082      	sub	sp, #8
 8007ab0:	af00      	add	r7, sp, #0
 8007ab2:	4603      	mov	r3, r0
 8007ab4:	6039      	str	r1, [r7, #0]
 8007ab6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007ab8:	683b      	ldr	r3, [r7, #0]
 8007aba:	221a      	movs	r2, #26
 8007abc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007abe:	f000 f843 	bl	8007b48 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007ac2:	4b02      	ldr	r3, [pc, #8]	; (8007acc <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007ac4:	4618      	mov	r0, r3
 8007ac6:	3708      	adds	r7, #8
 8007ac8:	46bd      	mov	sp, r7
 8007aca:	bd80      	pop	{r7, pc}
 8007acc:	20000160 	.word	0x20000160

08007ad0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007ad0:	b580      	push	{r7, lr}
 8007ad2:	b082      	sub	sp, #8
 8007ad4:	af00      	add	r7, sp, #0
 8007ad6:	4603      	mov	r3, r0
 8007ad8:	6039      	str	r1, [r7, #0]
 8007ada:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007adc:	79fb      	ldrb	r3, [r7, #7]
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d105      	bne.n	8007aee <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007ae2:	683a      	ldr	r2, [r7, #0]
 8007ae4:	4907      	ldr	r1, [pc, #28]	; (8007b04 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007ae6:	4808      	ldr	r0, [pc, #32]	; (8007b08 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007ae8:	f7ff fd84 	bl	80075f4 <USBD_GetString>
 8007aec:	e004      	b.n	8007af8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007aee:	683a      	ldr	r2, [r7, #0]
 8007af0:	4904      	ldr	r1, [pc, #16]	; (8007b04 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007af2:	4805      	ldr	r0, [pc, #20]	; (8007b08 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007af4:	f7ff fd7e 	bl	80075f4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007af8:	4b02      	ldr	r3, [pc, #8]	; (8007b04 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007afa:	4618      	mov	r0, r3
 8007afc:	3708      	adds	r7, #8
 8007afe:	46bd      	mov	sp, r7
 8007b00:	bd80      	pop	{r7, pc}
 8007b02:	bf00      	nop
 8007b04:	20000d60 	.word	0x20000d60
 8007b08:	08008bb4 	.word	0x08008bb4

08007b0c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007b0c:	b580      	push	{r7, lr}
 8007b0e:	b082      	sub	sp, #8
 8007b10:	af00      	add	r7, sp, #0
 8007b12:	4603      	mov	r3, r0
 8007b14:	6039      	str	r1, [r7, #0]
 8007b16:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007b18:	79fb      	ldrb	r3, [r7, #7]
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d105      	bne.n	8007b2a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007b1e:	683a      	ldr	r2, [r7, #0]
 8007b20:	4907      	ldr	r1, [pc, #28]	; (8007b40 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007b22:	4808      	ldr	r0, [pc, #32]	; (8007b44 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007b24:	f7ff fd66 	bl	80075f4 <USBD_GetString>
 8007b28:	e004      	b.n	8007b34 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007b2a:	683a      	ldr	r2, [r7, #0]
 8007b2c:	4904      	ldr	r1, [pc, #16]	; (8007b40 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007b2e:	4805      	ldr	r0, [pc, #20]	; (8007b44 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007b30:	f7ff fd60 	bl	80075f4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007b34:	4b02      	ldr	r3, [pc, #8]	; (8007b40 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007b36:	4618      	mov	r0, r3
 8007b38:	3708      	adds	r7, #8
 8007b3a:	46bd      	mov	sp, r7
 8007b3c:	bd80      	pop	{r7, pc}
 8007b3e:	bf00      	nop
 8007b40:	20000d60 	.word	0x20000d60
 8007b44:	08008bc0 	.word	0x08008bc0

08007b48 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007b48:	b580      	push	{r7, lr}
 8007b4a:	b084      	sub	sp, #16
 8007b4c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007b4e:	4b0f      	ldr	r3, [pc, #60]	; (8007b8c <Get_SerialNum+0x44>)
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007b54:	4b0e      	ldr	r3, [pc, #56]	; (8007b90 <Get_SerialNum+0x48>)
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007b5a:	4b0e      	ldr	r3, [pc, #56]	; (8007b94 <Get_SerialNum+0x4c>)
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007b60:	68fa      	ldr	r2, [r7, #12]
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	4413      	add	r3, r2
 8007b66:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d009      	beq.n	8007b82 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007b6e:	2208      	movs	r2, #8
 8007b70:	4909      	ldr	r1, [pc, #36]	; (8007b98 <Get_SerialNum+0x50>)
 8007b72:	68f8      	ldr	r0, [r7, #12]
 8007b74:	f000 f814 	bl	8007ba0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007b78:	2204      	movs	r2, #4
 8007b7a:	4908      	ldr	r1, [pc, #32]	; (8007b9c <Get_SerialNum+0x54>)
 8007b7c:	68b8      	ldr	r0, [r7, #8]
 8007b7e:	f000 f80f 	bl	8007ba0 <IntToUnicode>
  }
}
 8007b82:	bf00      	nop
 8007b84:	3710      	adds	r7, #16
 8007b86:	46bd      	mov	sp, r7
 8007b88:	bd80      	pop	{r7, pc}
 8007b8a:	bf00      	nop
 8007b8c:	1ffff7e8 	.word	0x1ffff7e8
 8007b90:	1ffff7ec 	.word	0x1ffff7ec
 8007b94:	1ffff7f0 	.word	0x1ffff7f0
 8007b98:	20000162 	.word	0x20000162
 8007b9c:	20000172 	.word	0x20000172

08007ba0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007ba0:	b480      	push	{r7}
 8007ba2:	b087      	sub	sp, #28
 8007ba4:	af00      	add	r7, sp, #0
 8007ba6:	60f8      	str	r0, [r7, #12]
 8007ba8:	60b9      	str	r1, [r7, #8]
 8007baa:	4613      	mov	r3, r2
 8007bac:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007bae:	2300      	movs	r3, #0
 8007bb0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007bb2:	2300      	movs	r3, #0
 8007bb4:	75fb      	strb	r3, [r7, #23]
 8007bb6:	e027      	b.n	8007c08 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	0f1b      	lsrs	r3, r3, #28
 8007bbc:	2b09      	cmp	r3, #9
 8007bbe:	d80b      	bhi.n	8007bd8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	0f1b      	lsrs	r3, r3, #28
 8007bc4:	b2da      	uxtb	r2, r3
 8007bc6:	7dfb      	ldrb	r3, [r7, #23]
 8007bc8:	005b      	lsls	r3, r3, #1
 8007bca:	4619      	mov	r1, r3
 8007bcc:	68bb      	ldr	r3, [r7, #8]
 8007bce:	440b      	add	r3, r1
 8007bd0:	3230      	adds	r2, #48	; 0x30
 8007bd2:	b2d2      	uxtb	r2, r2
 8007bd4:	701a      	strb	r2, [r3, #0]
 8007bd6:	e00a      	b.n	8007bee <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	0f1b      	lsrs	r3, r3, #28
 8007bdc:	b2da      	uxtb	r2, r3
 8007bde:	7dfb      	ldrb	r3, [r7, #23]
 8007be0:	005b      	lsls	r3, r3, #1
 8007be2:	4619      	mov	r1, r3
 8007be4:	68bb      	ldr	r3, [r7, #8]
 8007be6:	440b      	add	r3, r1
 8007be8:	3237      	adds	r2, #55	; 0x37
 8007bea:	b2d2      	uxtb	r2, r2
 8007bec:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	011b      	lsls	r3, r3, #4
 8007bf2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007bf4:	7dfb      	ldrb	r3, [r7, #23]
 8007bf6:	005b      	lsls	r3, r3, #1
 8007bf8:	3301      	adds	r3, #1
 8007bfa:	68ba      	ldr	r2, [r7, #8]
 8007bfc:	4413      	add	r3, r2
 8007bfe:	2200      	movs	r2, #0
 8007c00:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007c02:	7dfb      	ldrb	r3, [r7, #23]
 8007c04:	3301      	adds	r3, #1
 8007c06:	75fb      	strb	r3, [r7, #23]
 8007c08:	7dfa      	ldrb	r2, [r7, #23]
 8007c0a:	79fb      	ldrb	r3, [r7, #7]
 8007c0c:	429a      	cmp	r2, r3
 8007c0e:	d3d3      	bcc.n	8007bb8 <IntToUnicode+0x18>
  }
}
 8007c10:	bf00      	nop
 8007c12:	bf00      	nop
 8007c14:	371c      	adds	r7, #28
 8007c16:	46bd      	mov	sp, r7
 8007c18:	bc80      	pop	{r7}
 8007c1a:	4770      	bx	lr

08007c1c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007c1c:	b580      	push	{r7, lr}
 8007c1e:	b084      	sub	sp, #16
 8007c20:	af00      	add	r7, sp, #0
 8007c22:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	4a0d      	ldr	r2, [pc, #52]	; (8007c60 <HAL_PCD_MspInit+0x44>)
 8007c2a:	4293      	cmp	r3, r2
 8007c2c:	d113      	bne.n	8007c56 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8007c2e:	4b0d      	ldr	r3, [pc, #52]	; (8007c64 <HAL_PCD_MspInit+0x48>)
 8007c30:	69db      	ldr	r3, [r3, #28]
 8007c32:	4a0c      	ldr	r2, [pc, #48]	; (8007c64 <HAL_PCD_MspInit+0x48>)
 8007c34:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007c38:	61d3      	str	r3, [r2, #28]
 8007c3a:	4b0a      	ldr	r3, [pc, #40]	; (8007c64 <HAL_PCD_MspInit+0x48>)
 8007c3c:	69db      	ldr	r3, [r3, #28]
 8007c3e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007c42:	60fb      	str	r3, [r7, #12]
 8007c44:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8007c46:	2200      	movs	r2, #0
 8007c48:	2100      	movs	r1, #0
 8007c4a:	2014      	movs	r0, #20
 8007c4c:	f7f8 ff71 	bl	8000b32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8007c50:	2014      	movs	r0, #20
 8007c52:	f7f8 ff8a 	bl	8000b6a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8007c56:	bf00      	nop
 8007c58:	3710      	adds	r7, #16
 8007c5a:	46bd      	mov	sp, r7
 8007c5c:	bd80      	pop	{r7, pc}
 8007c5e:	bf00      	nop
 8007c60:	40005c00 	.word	0x40005c00
 8007c64:	40021000 	.word	0x40021000

08007c68 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007c68:	b580      	push	{r7, lr}
 8007c6a:	b082      	sub	sp, #8
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8007c7c:	4619      	mov	r1, r3
 8007c7e:	4610      	mov	r0, r2
 8007c80:	f7fe fd87 	bl	8006792 <USBD_LL_SetupStage>
}
 8007c84:	bf00      	nop
 8007c86:	3708      	adds	r7, #8
 8007c88:	46bd      	mov	sp, r7
 8007c8a:	bd80      	pop	{r7, pc}

08007c8c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007c8c:	b580      	push	{r7, lr}
 8007c8e:	b082      	sub	sp, #8
 8007c90:	af00      	add	r7, sp, #0
 8007c92:	6078      	str	r0, [r7, #4]
 8007c94:	460b      	mov	r3, r1
 8007c96:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8007c9e:	78fa      	ldrb	r2, [r7, #3]
 8007ca0:	6879      	ldr	r1, [r7, #4]
 8007ca2:	4613      	mov	r3, r2
 8007ca4:	009b      	lsls	r3, r3, #2
 8007ca6:	4413      	add	r3, r2
 8007ca8:	00db      	lsls	r3, r3, #3
 8007caa:	440b      	add	r3, r1
 8007cac:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8007cb0:	681a      	ldr	r2, [r3, #0]
 8007cb2:	78fb      	ldrb	r3, [r7, #3]
 8007cb4:	4619      	mov	r1, r3
 8007cb6:	f7fe fdb9 	bl	800682c <USBD_LL_DataOutStage>
}
 8007cba:	bf00      	nop
 8007cbc:	3708      	adds	r7, #8
 8007cbe:	46bd      	mov	sp, r7
 8007cc0:	bd80      	pop	{r7, pc}

08007cc2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007cc2:	b580      	push	{r7, lr}
 8007cc4:	b082      	sub	sp, #8
 8007cc6:	af00      	add	r7, sp, #0
 8007cc8:	6078      	str	r0, [r7, #4]
 8007cca:	460b      	mov	r3, r1
 8007ccc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8007cd4:	78fa      	ldrb	r2, [r7, #3]
 8007cd6:	6879      	ldr	r1, [r7, #4]
 8007cd8:	4613      	mov	r3, r2
 8007cda:	009b      	lsls	r3, r3, #2
 8007cdc:	4413      	add	r3, r2
 8007cde:	00db      	lsls	r3, r3, #3
 8007ce0:	440b      	add	r3, r1
 8007ce2:	333c      	adds	r3, #60	; 0x3c
 8007ce4:	681a      	ldr	r2, [r3, #0]
 8007ce6:	78fb      	ldrb	r3, [r7, #3]
 8007ce8:	4619      	mov	r1, r3
 8007cea:	f7fe fe10 	bl	800690e <USBD_LL_DataInStage>
}
 8007cee:	bf00      	nop
 8007cf0:	3708      	adds	r7, #8
 8007cf2:	46bd      	mov	sp, r7
 8007cf4:	bd80      	pop	{r7, pc}

08007cf6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007cf6:	b580      	push	{r7, lr}
 8007cf8:	b082      	sub	sp, #8
 8007cfa:	af00      	add	r7, sp, #0
 8007cfc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007d04:	4618      	mov	r0, r3
 8007d06:	f7fe ff20 	bl	8006b4a <USBD_LL_SOF>
}
 8007d0a:	bf00      	nop
 8007d0c:	3708      	adds	r7, #8
 8007d0e:	46bd      	mov	sp, r7
 8007d10:	bd80      	pop	{r7, pc}

08007d12 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d12:	b580      	push	{r7, lr}
 8007d14:	b084      	sub	sp, #16
 8007d16:	af00      	add	r7, sp, #0
 8007d18:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007d1a:	2301      	movs	r3, #1
 8007d1c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	689b      	ldr	r3, [r3, #8]
 8007d22:	2b02      	cmp	r3, #2
 8007d24:	d001      	beq.n	8007d2a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8007d26:	f7f8 fc3f 	bl	80005a8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007d30:	7bfa      	ldrb	r2, [r7, #15]
 8007d32:	4611      	mov	r1, r2
 8007d34:	4618      	mov	r0, r3
 8007d36:	f7fe fed0 	bl	8006ada <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007d40:	4618      	mov	r0, r3
 8007d42:	f7fe fe89 	bl	8006a58 <USBD_LL_Reset>
}
 8007d46:	bf00      	nop
 8007d48:	3710      	adds	r7, #16
 8007d4a:	46bd      	mov	sp, r7
 8007d4c:	bd80      	pop	{r7, pc}
	...

08007d50 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d50:	b580      	push	{r7, lr}
 8007d52:	b082      	sub	sp, #8
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007d5e:	4618      	mov	r0, r3
 8007d60:	f7fe feca 	bl	8006af8 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	699b      	ldr	r3, [r3, #24]
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d005      	beq.n	8007d78 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007d6c:	4b04      	ldr	r3, [pc, #16]	; (8007d80 <HAL_PCD_SuspendCallback+0x30>)
 8007d6e:	691b      	ldr	r3, [r3, #16]
 8007d70:	4a03      	ldr	r2, [pc, #12]	; (8007d80 <HAL_PCD_SuspendCallback+0x30>)
 8007d72:	f043 0306 	orr.w	r3, r3, #6
 8007d76:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007d78:	bf00      	nop
 8007d7a:	3708      	adds	r7, #8
 8007d7c:	46bd      	mov	sp, r7
 8007d7e:	bd80      	pop	{r7, pc}
 8007d80:	e000ed00 	.word	0xe000ed00

08007d84 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d84:	b580      	push	{r7, lr}
 8007d86:	b082      	sub	sp, #8
 8007d88:	af00      	add	r7, sp, #0
 8007d8a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007d92:	4618      	mov	r0, r3
 8007d94:	f7fe fec4 	bl	8006b20 <USBD_LL_Resume>
}
 8007d98:	bf00      	nop
 8007d9a:	3708      	adds	r7, #8
 8007d9c:	46bd      	mov	sp, r7
 8007d9e:	bd80      	pop	{r7, pc}

08007da0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007da0:	b580      	push	{r7, lr}
 8007da2:	b082      	sub	sp, #8
 8007da4:	af00      	add	r7, sp, #0
 8007da6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8007da8:	4a28      	ldr	r2, [pc, #160]	; (8007e4c <USBD_LL_Init+0xac>)
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	4a26      	ldr	r2, [pc, #152]	; (8007e4c <USBD_LL_Init+0xac>)
 8007db4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8007db8:	4b24      	ldr	r3, [pc, #144]	; (8007e4c <USBD_LL_Init+0xac>)
 8007dba:	4a25      	ldr	r2, [pc, #148]	; (8007e50 <USBD_LL_Init+0xb0>)
 8007dbc:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8007dbe:	4b23      	ldr	r3, [pc, #140]	; (8007e4c <USBD_LL_Init+0xac>)
 8007dc0:	2208      	movs	r2, #8
 8007dc2:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8007dc4:	4b21      	ldr	r3, [pc, #132]	; (8007e4c <USBD_LL_Init+0xac>)
 8007dc6:	2202      	movs	r2, #2
 8007dc8:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8007dca:	4b20      	ldr	r3, [pc, #128]	; (8007e4c <USBD_LL_Init+0xac>)
 8007dcc:	2200      	movs	r2, #0
 8007dce:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8007dd0:	4b1e      	ldr	r3, [pc, #120]	; (8007e4c <USBD_LL_Init+0xac>)
 8007dd2:	2200      	movs	r2, #0
 8007dd4:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8007dd6:	4b1d      	ldr	r3, [pc, #116]	; (8007e4c <USBD_LL_Init+0xac>)
 8007dd8:	2200      	movs	r2, #0
 8007dda:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8007ddc:	481b      	ldr	r0, [pc, #108]	; (8007e4c <USBD_LL_Init+0xac>)
 8007dde:	f7f9 f8b5 	bl	8000f4c <HAL_PCD_Init>
 8007de2:	4603      	mov	r3, r0
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d001      	beq.n	8007dec <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8007de8:	f7f8 fbde 	bl	80005a8 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007df2:	2318      	movs	r3, #24
 8007df4:	2200      	movs	r2, #0
 8007df6:	2100      	movs	r1, #0
 8007df8:	f7fa fd29 	bl	800284e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007e02:	2358      	movs	r3, #88	; 0x58
 8007e04:	2200      	movs	r2, #0
 8007e06:	2180      	movs	r1, #128	; 0x80
 8007e08:	f7fa fd21 	bl	800284e <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007e12:	23c0      	movs	r3, #192	; 0xc0
 8007e14:	2200      	movs	r2, #0
 8007e16:	2181      	movs	r1, #129	; 0x81
 8007e18:	f7fa fd19 	bl	800284e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007e22:	f44f 7388 	mov.w	r3, #272	; 0x110
 8007e26:	2200      	movs	r2, #0
 8007e28:	2101      	movs	r1, #1
 8007e2a:	f7fa fd10 	bl	800284e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007e34:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007e38:	2200      	movs	r2, #0
 8007e3a:	2182      	movs	r1, #130	; 0x82
 8007e3c:	f7fa fd07 	bl	800284e <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8007e40:	2300      	movs	r3, #0
}
 8007e42:	4618      	mov	r0, r3
 8007e44:	3708      	adds	r7, #8
 8007e46:	46bd      	mov	sp, r7
 8007e48:	bd80      	pop	{r7, pc}
 8007e4a:	bf00      	nop
 8007e4c:	20000f60 	.word	0x20000f60
 8007e50:	40005c00 	.word	0x40005c00

08007e54 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007e54:	b580      	push	{r7, lr}
 8007e56:	b084      	sub	sp, #16
 8007e58:	af00      	add	r7, sp, #0
 8007e5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007e5c:	2300      	movs	r3, #0
 8007e5e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007e60:	2300      	movs	r3, #0
 8007e62:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007e6a:	4618      	mov	r0, r3
 8007e6c:	f7f9 f979 	bl	8001162 <HAL_PCD_Start>
 8007e70:	4603      	mov	r3, r0
 8007e72:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007e74:	7bfb      	ldrb	r3, [r7, #15]
 8007e76:	4618      	mov	r0, r3
 8007e78:	f000 f94e 	bl	8008118 <USBD_Get_USB_Status>
 8007e7c:	4603      	mov	r3, r0
 8007e7e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007e80:	7bbb      	ldrb	r3, [r7, #14]
}
 8007e82:	4618      	mov	r0, r3
 8007e84:	3710      	adds	r7, #16
 8007e86:	46bd      	mov	sp, r7
 8007e88:	bd80      	pop	{r7, pc}

08007e8a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007e8a:	b580      	push	{r7, lr}
 8007e8c:	b084      	sub	sp, #16
 8007e8e:	af00      	add	r7, sp, #0
 8007e90:	6078      	str	r0, [r7, #4]
 8007e92:	4608      	mov	r0, r1
 8007e94:	4611      	mov	r1, r2
 8007e96:	461a      	mov	r2, r3
 8007e98:	4603      	mov	r3, r0
 8007e9a:	70fb      	strb	r3, [r7, #3]
 8007e9c:	460b      	mov	r3, r1
 8007e9e:	70bb      	strb	r3, [r7, #2]
 8007ea0:	4613      	mov	r3, r2
 8007ea2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007ea4:	2300      	movs	r3, #0
 8007ea6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007ea8:	2300      	movs	r3, #0
 8007eaa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007eb2:	78bb      	ldrb	r3, [r7, #2]
 8007eb4:	883a      	ldrh	r2, [r7, #0]
 8007eb6:	78f9      	ldrb	r1, [r7, #3]
 8007eb8:	f7f9 faf1 	bl	800149e <HAL_PCD_EP_Open>
 8007ebc:	4603      	mov	r3, r0
 8007ebe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007ec0:	7bfb      	ldrb	r3, [r7, #15]
 8007ec2:	4618      	mov	r0, r3
 8007ec4:	f000 f928 	bl	8008118 <USBD_Get_USB_Status>
 8007ec8:	4603      	mov	r3, r0
 8007eca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007ecc:	7bbb      	ldrb	r3, [r7, #14]
}
 8007ece:	4618      	mov	r0, r3
 8007ed0:	3710      	adds	r7, #16
 8007ed2:	46bd      	mov	sp, r7
 8007ed4:	bd80      	pop	{r7, pc}

08007ed6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007ed6:	b580      	push	{r7, lr}
 8007ed8:	b084      	sub	sp, #16
 8007eda:	af00      	add	r7, sp, #0
 8007edc:	6078      	str	r0, [r7, #4]
 8007ede:	460b      	mov	r3, r1
 8007ee0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007ee2:	2300      	movs	r3, #0
 8007ee4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007ee6:	2300      	movs	r3, #0
 8007ee8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007ef0:	78fa      	ldrb	r2, [r7, #3]
 8007ef2:	4611      	mov	r1, r2
 8007ef4:	4618      	mov	r0, r3
 8007ef6:	f7f9 fb38 	bl	800156a <HAL_PCD_EP_Close>
 8007efa:	4603      	mov	r3, r0
 8007efc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007efe:	7bfb      	ldrb	r3, [r7, #15]
 8007f00:	4618      	mov	r0, r3
 8007f02:	f000 f909 	bl	8008118 <USBD_Get_USB_Status>
 8007f06:	4603      	mov	r3, r0
 8007f08:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007f0a:	7bbb      	ldrb	r3, [r7, #14]
}
 8007f0c:	4618      	mov	r0, r3
 8007f0e:	3710      	adds	r7, #16
 8007f10:	46bd      	mov	sp, r7
 8007f12:	bd80      	pop	{r7, pc}

08007f14 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007f14:	b580      	push	{r7, lr}
 8007f16:	b084      	sub	sp, #16
 8007f18:	af00      	add	r7, sp, #0
 8007f1a:	6078      	str	r0, [r7, #4]
 8007f1c:	460b      	mov	r3, r1
 8007f1e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007f20:	2300      	movs	r3, #0
 8007f22:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007f24:	2300      	movs	r3, #0
 8007f26:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007f2e:	78fa      	ldrb	r2, [r7, #3]
 8007f30:	4611      	mov	r1, r2
 8007f32:	4618      	mov	r0, r3
 8007f34:	f7f9 fbf8 	bl	8001728 <HAL_PCD_EP_SetStall>
 8007f38:	4603      	mov	r3, r0
 8007f3a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007f3c:	7bfb      	ldrb	r3, [r7, #15]
 8007f3e:	4618      	mov	r0, r3
 8007f40:	f000 f8ea 	bl	8008118 <USBD_Get_USB_Status>
 8007f44:	4603      	mov	r3, r0
 8007f46:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007f48:	7bbb      	ldrb	r3, [r7, #14]
}
 8007f4a:	4618      	mov	r0, r3
 8007f4c:	3710      	adds	r7, #16
 8007f4e:	46bd      	mov	sp, r7
 8007f50:	bd80      	pop	{r7, pc}

08007f52 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007f52:	b580      	push	{r7, lr}
 8007f54:	b084      	sub	sp, #16
 8007f56:	af00      	add	r7, sp, #0
 8007f58:	6078      	str	r0, [r7, #4]
 8007f5a:	460b      	mov	r3, r1
 8007f5c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007f5e:	2300      	movs	r3, #0
 8007f60:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007f62:	2300      	movs	r3, #0
 8007f64:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007f6c:	78fa      	ldrb	r2, [r7, #3]
 8007f6e:	4611      	mov	r1, r2
 8007f70:	4618      	mov	r0, r3
 8007f72:	f7f9 fc39 	bl	80017e8 <HAL_PCD_EP_ClrStall>
 8007f76:	4603      	mov	r3, r0
 8007f78:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007f7a:	7bfb      	ldrb	r3, [r7, #15]
 8007f7c:	4618      	mov	r0, r3
 8007f7e:	f000 f8cb 	bl	8008118 <USBD_Get_USB_Status>
 8007f82:	4603      	mov	r3, r0
 8007f84:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007f86:	7bbb      	ldrb	r3, [r7, #14]
}
 8007f88:	4618      	mov	r0, r3
 8007f8a:	3710      	adds	r7, #16
 8007f8c:	46bd      	mov	sp, r7
 8007f8e:	bd80      	pop	{r7, pc}

08007f90 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007f90:	b480      	push	{r7}
 8007f92:	b085      	sub	sp, #20
 8007f94:	af00      	add	r7, sp, #0
 8007f96:	6078      	str	r0, [r7, #4]
 8007f98:	460b      	mov	r3, r1
 8007f9a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007fa2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007fa4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	da0c      	bge.n	8007fc6 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007fac:	78fb      	ldrb	r3, [r7, #3]
 8007fae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007fb2:	68f9      	ldr	r1, [r7, #12]
 8007fb4:	1c5a      	adds	r2, r3, #1
 8007fb6:	4613      	mov	r3, r2
 8007fb8:	009b      	lsls	r3, r3, #2
 8007fba:	4413      	add	r3, r2
 8007fbc:	00db      	lsls	r3, r3, #3
 8007fbe:	440b      	add	r3, r1
 8007fc0:	3302      	adds	r3, #2
 8007fc2:	781b      	ldrb	r3, [r3, #0]
 8007fc4:	e00b      	b.n	8007fde <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007fc6:	78fb      	ldrb	r3, [r7, #3]
 8007fc8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007fcc:	68f9      	ldr	r1, [r7, #12]
 8007fce:	4613      	mov	r3, r2
 8007fd0:	009b      	lsls	r3, r3, #2
 8007fd2:	4413      	add	r3, r2
 8007fd4:	00db      	lsls	r3, r3, #3
 8007fd6:	440b      	add	r3, r1
 8007fd8:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8007fdc:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007fde:	4618      	mov	r0, r3
 8007fe0:	3714      	adds	r7, #20
 8007fe2:	46bd      	mov	sp, r7
 8007fe4:	bc80      	pop	{r7}
 8007fe6:	4770      	bx	lr

08007fe8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007fe8:	b580      	push	{r7, lr}
 8007fea:	b084      	sub	sp, #16
 8007fec:	af00      	add	r7, sp, #0
 8007fee:	6078      	str	r0, [r7, #4]
 8007ff0:	460b      	mov	r3, r1
 8007ff2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007ff4:	2300      	movs	r3, #0
 8007ff6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007ff8:	2300      	movs	r3, #0
 8007ffa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008002:	78fa      	ldrb	r2, [r7, #3]
 8008004:	4611      	mov	r1, r2
 8008006:	4618      	mov	r0, r3
 8008008:	f7f9 fa24 	bl	8001454 <HAL_PCD_SetAddress>
 800800c:	4603      	mov	r3, r0
 800800e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008010:	7bfb      	ldrb	r3, [r7, #15]
 8008012:	4618      	mov	r0, r3
 8008014:	f000 f880 	bl	8008118 <USBD_Get_USB_Status>
 8008018:	4603      	mov	r3, r0
 800801a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800801c:	7bbb      	ldrb	r3, [r7, #14]
}
 800801e:	4618      	mov	r0, r3
 8008020:	3710      	adds	r7, #16
 8008022:	46bd      	mov	sp, r7
 8008024:	bd80      	pop	{r7, pc}

08008026 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008026:	b580      	push	{r7, lr}
 8008028:	b086      	sub	sp, #24
 800802a:	af00      	add	r7, sp, #0
 800802c:	60f8      	str	r0, [r7, #12]
 800802e:	607a      	str	r2, [r7, #4]
 8008030:	461a      	mov	r2, r3
 8008032:	460b      	mov	r3, r1
 8008034:	72fb      	strb	r3, [r7, #11]
 8008036:	4613      	mov	r3, r2
 8008038:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800803a:	2300      	movs	r3, #0
 800803c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800803e:	2300      	movs	r3, #0
 8008040:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008048:	893b      	ldrh	r3, [r7, #8]
 800804a:	7af9      	ldrb	r1, [r7, #11]
 800804c:	687a      	ldr	r2, [r7, #4]
 800804e:	f7f9 fb28 	bl	80016a2 <HAL_PCD_EP_Transmit>
 8008052:	4603      	mov	r3, r0
 8008054:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008056:	7dfb      	ldrb	r3, [r7, #23]
 8008058:	4618      	mov	r0, r3
 800805a:	f000 f85d 	bl	8008118 <USBD_Get_USB_Status>
 800805e:	4603      	mov	r3, r0
 8008060:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008062:	7dbb      	ldrb	r3, [r7, #22]
}
 8008064:	4618      	mov	r0, r3
 8008066:	3718      	adds	r7, #24
 8008068:	46bd      	mov	sp, r7
 800806a:	bd80      	pop	{r7, pc}

0800806c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800806c:	b580      	push	{r7, lr}
 800806e:	b086      	sub	sp, #24
 8008070:	af00      	add	r7, sp, #0
 8008072:	60f8      	str	r0, [r7, #12]
 8008074:	607a      	str	r2, [r7, #4]
 8008076:	461a      	mov	r2, r3
 8008078:	460b      	mov	r3, r1
 800807a:	72fb      	strb	r3, [r7, #11]
 800807c:	4613      	mov	r3, r2
 800807e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008080:	2300      	movs	r3, #0
 8008082:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008084:	2300      	movs	r3, #0
 8008086:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800808e:	893b      	ldrh	r3, [r7, #8]
 8008090:	7af9      	ldrb	r1, [r7, #11]
 8008092:	687a      	ldr	r2, [r7, #4]
 8008094:	f7f9 fab1 	bl	80015fa <HAL_PCD_EP_Receive>
 8008098:	4603      	mov	r3, r0
 800809a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800809c:	7dfb      	ldrb	r3, [r7, #23]
 800809e:	4618      	mov	r0, r3
 80080a0:	f000 f83a 	bl	8008118 <USBD_Get_USB_Status>
 80080a4:	4603      	mov	r3, r0
 80080a6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80080a8:	7dbb      	ldrb	r3, [r7, #22]
}
 80080aa:	4618      	mov	r0, r3
 80080ac:	3718      	adds	r7, #24
 80080ae:	46bd      	mov	sp, r7
 80080b0:	bd80      	pop	{r7, pc}

080080b2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80080b2:	b580      	push	{r7, lr}
 80080b4:	b082      	sub	sp, #8
 80080b6:	af00      	add	r7, sp, #0
 80080b8:	6078      	str	r0, [r7, #4]
 80080ba:	460b      	mov	r3, r1
 80080bc:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80080c4:	78fa      	ldrb	r2, [r7, #3]
 80080c6:	4611      	mov	r1, r2
 80080c8:	4618      	mov	r0, r3
 80080ca:	f7f9 fad3 	bl	8001674 <HAL_PCD_EP_GetRxCount>
 80080ce:	4603      	mov	r3, r0
}
 80080d0:	4618      	mov	r0, r3
 80080d2:	3708      	adds	r7, #8
 80080d4:	46bd      	mov	sp, r7
 80080d6:	bd80      	pop	{r7, pc}

080080d8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80080d8:	b480      	push	{r7}
 80080da:	b083      	sub	sp, #12
 80080dc:	af00      	add	r7, sp, #0
 80080de:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80080e0:	4b02      	ldr	r3, [pc, #8]	; (80080ec <USBD_static_malloc+0x14>)
}
 80080e2:	4618      	mov	r0, r3
 80080e4:	370c      	adds	r7, #12
 80080e6:	46bd      	mov	sp, r7
 80080e8:	bc80      	pop	{r7}
 80080ea:	4770      	bx	lr
 80080ec:	2000124c 	.word	0x2000124c

080080f0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80080f0:	b480      	push	{r7}
 80080f2:	b083      	sub	sp, #12
 80080f4:	af00      	add	r7, sp, #0
 80080f6:	6078      	str	r0, [r7, #4]

}
 80080f8:	bf00      	nop
 80080fa:	370c      	adds	r7, #12
 80080fc:	46bd      	mov	sp, r7
 80080fe:	bc80      	pop	{r7}
 8008100:	4770      	bx	lr

08008102 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008102:	b480      	push	{r7}
 8008104:	b083      	sub	sp, #12
 8008106:	af00      	add	r7, sp, #0
 8008108:	6078      	str	r0, [r7, #4]
 800810a:	460b      	mov	r3, r1
 800810c:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800810e:	bf00      	nop
 8008110:	370c      	adds	r7, #12
 8008112:	46bd      	mov	sp, r7
 8008114:	bc80      	pop	{r7}
 8008116:	4770      	bx	lr

08008118 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008118:	b480      	push	{r7}
 800811a:	b085      	sub	sp, #20
 800811c:	af00      	add	r7, sp, #0
 800811e:	4603      	mov	r3, r0
 8008120:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008122:	2300      	movs	r3, #0
 8008124:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008126:	79fb      	ldrb	r3, [r7, #7]
 8008128:	2b03      	cmp	r3, #3
 800812a:	d817      	bhi.n	800815c <USBD_Get_USB_Status+0x44>
 800812c:	a201      	add	r2, pc, #4	; (adr r2, 8008134 <USBD_Get_USB_Status+0x1c>)
 800812e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008132:	bf00      	nop
 8008134:	08008145 	.word	0x08008145
 8008138:	0800814b 	.word	0x0800814b
 800813c:	08008151 	.word	0x08008151
 8008140:	08008157 	.word	0x08008157
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008144:	2300      	movs	r3, #0
 8008146:	73fb      	strb	r3, [r7, #15]
    break;
 8008148:	e00b      	b.n	8008162 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800814a:	2302      	movs	r3, #2
 800814c:	73fb      	strb	r3, [r7, #15]
    break;
 800814e:	e008      	b.n	8008162 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008150:	2301      	movs	r3, #1
 8008152:	73fb      	strb	r3, [r7, #15]
    break;
 8008154:	e005      	b.n	8008162 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008156:	2302      	movs	r3, #2
 8008158:	73fb      	strb	r3, [r7, #15]
    break;
 800815a:	e002      	b.n	8008162 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800815c:	2302      	movs	r3, #2
 800815e:	73fb      	strb	r3, [r7, #15]
    break;
 8008160:	bf00      	nop
  }
  return usb_status;
 8008162:	7bfb      	ldrb	r3, [r7, #15]
}
 8008164:	4618      	mov	r0, r3
 8008166:	3714      	adds	r7, #20
 8008168:	46bd      	mov	sp, r7
 800816a:	bc80      	pop	{r7}
 800816c:	4770      	bx	lr
 800816e:	bf00      	nop

08008170 <sniprintf>:
 8008170:	b40c      	push	{r2, r3}
 8008172:	b530      	push	{r4, r5, lr}
 8008174:	4b17      	ldr	r3, [pc, #92]	; (80081d4 <sniprintf+0x64>)
 8008176:	1e0c      	subs	r4, r1, #0
 8008178:	681d      	ldr	r5, [r3, #0]
 800817a:	b09d      	sub	sp, #116	; 0x74
 800817c:	da08      	bge.n	8008190 <sniprintf+0x20>
 800817e:	238b      	movs	r3, #139	; 0x8b
 8008180:	f04f 30ff 	mov.w	r0, #4294967295
 8008184:	602b      	str	r3, [r5, #0]
 8008186:	b01d      	add	sp, #116	; 0x74
 8008188:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800818c:	b002      	add	sp, #8
 800818e:	4770      	bx	lr
 8008190:	f44f 7302 	mov.w	r3, #520	; 0x208
 8008194:	f8ad 3014 	strh.w	r3, [sp, #20]
 8008198:	bf0c      	ite	eq
 800819a:	4623      	moveq	r3, r4
 800819c:	f104 33ff 	addne.w	r3, r4, #4294967295
 80081a0:	9304      	str	r3, [sp, #16]
 80081a2:	9307      	str	r3, [sp, #28]
 80081a4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80081a8:	9002      	str	r0, [sp, #8]
 80081aa:	9006      	str	r0, [sp, #24]
 80081ac:	f8ad 3016 	strh.w	r3, [sp, #22]
 80081b0:	4628      	mov	r0, r5
 80081b2:	ab21      	add	r3, sp, #132	; 0x84
 80081b4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80081b6:	a902      	add	r1, sp, #8
 80081b8:	9301      	str	r3, [sp, #4]
 80081ba:	f000 f98f 	bl	80084dc <_svfiprintf_r>
 80081be:	1c43      	adds	r3, r0, #1
 80081c0:	bfbc      	itt	lt
 80081c2:	238b      	movlt	r3, #139	; 0x8b
 80081c4:	602b      	strlt	r3, [r5, #0]
 80081c6:	2c00      	cmp	r4, #0
 80081c8:	d0dd      	beq.n	8008186 <sniprintf+0x16>
 80081ca:	2200      	movs	r2, #0
 80081cc:	9b02      	ldr	r3, [sp, #8]
 80081ce:	701a      	strb	r2, [r3, #0]
 80081d0:	e7d9      	b.n	8008186 <sniprintf+0x16>
 80081d2:	bf00      	nop
 80081d4:	200001c8 	.word	0x200001c8

080081d8 <memset>:
 80081d8:	4603      	mov	r3, r0
 80081da:	4402      	add	r2, r0
 80081dc:	4293      	cmp	r3, r2
 80081de:	d100      	bne.n	80081e2 <memset+0xa>
 80081e0:	4770      	bx	lr
 80081e2:	f803 1b01 	strb.w	r1, [r3], #1
 80081e6:	e7f9      	b.n	80081dc <memset+0x4>

080081e8 <__errno>:
 80081e8:	4b01      	ldr	r3, [pc, #4]	; (80081f0 <__errno+0x8>)
 80081ea:	6818      	ldr	r0, [r3, #0]
 80081ec:	4770      	bx	lr
 80081ee:	bf00      	nop
 80081f0:	200001c8 	.word	0x200001c8

080081f4 <__libc_init_array>:
 80081f4:	b570      	push	{r4, r5, r6, lr}
 80081f6:	2600      	movs	r6, #0
 80081f8:	4d0c      	ldr	r5, [pc, #48]	; (800822c <__libc_init_array+0x38>)
 80081fa:	4c0d      	ldr	r4, [pc, #52]	; (8008230 <__libc_init_array+0x3c>)
 80081fc:	1b64      	subs	r4, r4, r5
 80081fe:	10a4      	asrs	r4, r4, #2
 8008200:	42a6      	cmp	r6, r4
 8008202:	d109      	bne.n	8008218 <__libc_init_array+0x24>
 8008204:	f000 fc7a 	bl	8008afc <_init>
 8008208:	2600      	movs	r6, #0
 800820a:	4d0a      	ldr	r5, [pc, #40]	; (8008234 <__libc_init_array+0x40>)
 800820c:	4c0a      	ldr	r4, [pc, #40]	; (8008238 <__libc_init_array+0x44>)
 800820e:	1b64      	subs	r4, r4, r5
 8008210:	10a4      	asrs	r4, r4, #2
 8008212:	42a6      	cmp	r6, r4
 8008214:	d105      	bne.n	8008222 <__libc_init_array+0x2e>
 8008216:	bd70      	pop	{r4, r5, r6, pc}
 8008218:	f855 3b04 	ldr.w	r3, [r5], #4
 800821c:	4798      	blx	r3
 800821e:	3601      	adds	r6, #1
 8008220:	e7ee      	b.n	8008200 <__libc_init_array+0xc>
 8008222:	f855 3b04 	ldr.w	r3, [r5], #4
 8008226:	4798      	blx	r3
 8008228:	3601      	adds	r6, #1
 800822a:	e7f2      	b.n	8008212 <__libc_init_array+0x1e>
 800822c:	08008c1c 	.word	0x08008c1c
 8008230:	08008c1c 	.word	0x08008c1c
 8008234:	08008c1c 	.word	0x08008c1c
 8008238:	08008c20 	.word	0x08008c20

0800823c <__retarget_lock_acquire_recursive>:
 800823c:	4770      	bx	lr

0800823e <__retarget_lock_release_recursive>:
 800823e:	4770      	bx	lr

08008240 <_free_r>:
 8008240:	b538      	push	{r3, r4, r5, lr}
 8008242:	4605      	mov	r5, r0
 8008244:	2900      	cmp	r1, #0
 8008246:	d040      	beq.n	80082ca <_free_r+0x8a>
 8008248:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800824c:	1f0c      	subs	r4, r1, #4
 800824e:	2b00      	cmp	r3, #0
 8008250:	bfb8      	it	lt
 8008252:	18e4      	addlt	r4, r4, r3
 8008254:	f000 f8dc 	bl	8008410 <__malloc_lock>
 8008258:	4a1c      	ldr	r2, [pc, #112]	; (80082cc <_free_r+0x8c>)
 800825a:	6813      	ldr	r3, [r2, #0]
 800825c:	b933      	cbnz	r3, 800826c <_free_r+0x2c>
 800825e:	6063      	str	r3, [r4, #4]
 8008260:	6014      	str	r4, [r2, #0]
 8008262:	4628      	mov	r0, r5
 8008264:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008268:	f000 b8d8 	b.w	800841c <__malloc_unlock>
 800826c:	42a3      	cmp	r3, r4
 800826e:	d908      	bls.n	8008282 <_free_r+0x42>
 8008270:	6820      	ldr	r0, [r4, #0]
 8008272:	1821      	adds	r1, r4, r0
 8008274:	428b      	cmp	r3, r1
 8008276:	bf01      	itttt	eq
 8008278:	6819      	ldreq	r1, [r3, #0]
 800827a:	685b      	ldreq	r3, [r3, #4]
 800827c:	1809      	addeq	r1, r1, r0
 800827e:	6021      	streq	r1, [r4, #0]
 8008280:	e7ed      	b.n	800825e <_free_r+0x1e>
 8008282:	461a      	mov	r2, r3
 8008284:	685b      	ldr	r3, [r3, #4]
 8008286:	b10b      	cbz	r3, 800828c <_free_r+0x4c>
 8008288:	42a3      	cmp	r3, r4
 800828a:	d9fa      	bls.n	8008282 <_free_r+0x42>
 800828c:	6811      	ldr	r1, [r2, #0]
 800828e:	1850      	adds	r0, r2, r1
 8008290:	42a0      	cmp	r0, r4
 8008292:	d10b      	bne.n	80082ac <_free_r+0x6c>
 8008294:	6820      	ldr	r0, [r4, #0]
 8008296:	4401      	add	r1, r0
 8008298:	1850      	adds	r0, r2, r1
 800829a:	4283      	cmp	r3, r0
 800829c:	6011      	str	r1, [r2, #0]
 800829e:	d1e0      	bne.n	8008262 <_free_r+0x22>
 80082a0:	6818      	ldr	r0, [r3, #0]
 80082a2:	685b      	ldr	r3, [r3, #4]
 80082a4:	4408      	add	r0, r1
 80082a6:	6010      	str	r0, [r2, #0]
 80082a8:	6053      	str	r3, [r2, #4]
 80082aa:	e7da      	b.n	8008262 <_free_r+0x22>
 80082ac:	d902      	bls.n	80082b4 <_free_r+0x74>
 80082ae:	230c      	movs	r3, #12
 80082b0:	602b      	str	r3, [r5, #0]
 80082b2:	e7d6      	b.n	8008262 <_free_r+0x22>
 80082b4:	6820      	ldr	r0, [r4, #0]
 80082b6:	1821      	adds	r1, r4, r0
 80082b8:	428b      	cmp	r3, r1
 80082ba:	bf01      	itttt	eq
 80082bc:	6819      	ldreq	r1, [r3, #0]
 80082be:	685b      	ldreq	r3, [r3, #4]
 80082c0:	1809      	addeq	r1, r1, r0
 80082c2:	6021      	streq	r1, [r4, #0]
 80082c4:	6063      	str	r3, [r4, #4]
 80082c6:	6054      	str	r4, [r2, #4]
 80082c8:	e7cb      	b.n	8008262 <_free_r+0x22>
 80082ca:	bd38      	pop	{r3, r4, r5, pc}
 80082cc:	200015ac 	.word	0x200015ac

080082d0 <sbrk_aligned>:
 80082d0:	b570      	push	{r4, r5, r6, lr}
 80082d2:	4e0e      	ldr	r6, [pc, #56]	; (800830c <sbrk_aligned+0x3c>)
 80082d4:	460c      	mov	r4, r1
 80082d6:	6831      	ldr	r1, [r6, #0]
 80082d8:	4605      	mov	r5, r0
 80082da:	b911      	cbnz	r1, 80082e2 <sbrk_aligned+0x12>
 80082dc:	f000 fbaa 	bl	8008a34 <_sbrk_r>
 80082e0:	6030      	str	r0, [r6, #0]
 80082e2:	4621      	mov	r1, r4
 80082e4:	4628      	mov	r0, r5
 80082e6:	f000 fba5 	bl	8008a34 <_sbrk_r>
 80082ea:	1c43      	adds	r3, r0, #1
 80082ec:	d00a      	beq.n	8008304 <sbrk_aligned+0x34>
 80082ee:	1cc4      	adds	r4, r0, #3
 80082f0:	f024 0403 	bic.w	r4, r4, #3
 80082f4:	42a0      	cmp	r0, r4
 80082f6:	d007      	beq.n	8008308 <sbrk_aligned+0x38>
 80082f8:	1a21      	subs	r1, r4, r0
 80082fa:	4628      	mov	r0, r5
 80082fc:	f000 fb9a 	bl	8008a34 <_sbrk_r>
 8008300:	3001      	adds	r0, #1
 8008302:	d101      	bne.n	8008308 <sbrk_aligned+0x38>
 8008304:	f04f 34ff 	mov.w	r4, #4294967295
 8008308:	4620      	mov	r0, r4
 800830a:	bd70      	pop	{r4, r5, r6, pc}
 800830c:	200015b0 	.word	0x200015b0

08008310 <_malloc_r>:
 8008310:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008314:	1ccd      	adds	r5, r1, #3
 8008316:	f025 0503 	bic.w	r5, r5, #3
 800831a:	3508      	adds	r5, #8
 800831c:	2d0c      	cmp	r5, #12
 800831e:	bf38      	it	cc
 8008320:	250c      	movcc	r5, #12
 8008322:	2d00      	cmp	r5, #0
 8008324:	4607      	mov	r7, r0
 8008326:	db01      	blt.n	800832c <_malloc_r+0x1c>
 8008328:	42a9      	cmp	r1, r5
 800832a:	d905      	bls.n	8008338 <_malloc_r+0x28>
 800832c:	230c      	movs	r3, #12
 800832e:	2600      	movs	r6, #0
 8008330:	603b      	str	r3, [r7, #0]
 8008332:	4630      	mov	r0, r6
 8008334:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008338:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800840c <_malloc_r+0xfc>
 800833c:	f000 f868 	bl	8008410 <__malloc_lock>
 8008340:	f8d8 3000 	ldr.w	r3, [r8]
 8008344:	461c      	mov	r4, r3
 8008346:	bb5c      	cbnz	r4, 80083a0 <_malloc_r+0x90>
 8008348:	4629      	mov	r1, r5
 800834a:	4638      	mov	r0, r7
 800834c:	f7ff ffc0 	bl	80082d0 <sbrk_aligned>
 8008350:	1c43      	adds	r3, r0, #1
 8008352:	4604      	mov	r4, r0
 8008354:	d155      	bne.n	8008402 <_malloc_r+0xf2>
 8008356:	f8d8 4000 	ldr.w	r4, [r8]
 800835a:	4626      	mov	r6, r4
 800835c:	2e00      	cmp	r6, #0
 800835e:	d145      	bne.n	80083ec <_malloc_r+0xdc>
 8008360:	2c00      	cmp	r4, #0
 8008362:	d048      	beq.n	80083f6 <_malloc_r+0xe6>
 8008364:	6823      	ldr	r3, [r4, #0]
 8008366:	4631      	mov	r1, r6
 8008368:	4638      	mov	r0, r7
 800836a:	eb04 0903 	add.w	r9, r4, r3
 800836e:	f000 fb61 	bl	8008a34 <_sbrk_r>
 8008372:	4581      	cmp	r9, r0
 8008374:	d13f      	bne.n	80083f6 <_malloc_r+0xe6>
 8008376:	6821      	ldr	r1, [r4, #0]
 8008378:	4638      	mov	r0, r7
 800837a:	1a6d      	subs	r5, r5, r1
 800837c:	4629      	mov	r1, r5
 800837e:	f7ff ffa7 	bl	80082d0 <sbrk_aligned>
 8008382:	3001      	adds	r0, #1
 8008384:	d037      	beq.n	80083f6 <_malloc_r+0xe6>
 8008386:	6823      	ldr	r3, [r4, #0]
 8008388:	442b      	add	r3, r5
 800838a:	6023      	str	r3, [r4, #0]
 800838c:	f8d8 3000 	ldr.w	r3, [r8]
 8008390:	2b00      	cmp	r3, #0
 8008392:	d038      	beq.n	8008406 <_malloc_r+0xf6>
 8008394:	685a      	ldr	r2, [r3, #4]
 8008396:	42a2      	cmp	r2, r4
 8008398:	d12b      	bne.n	80083f2 <_malloc_r+0xe2>
 800839a:	2200      	movs	r2, #0
 800839c:	605a      	str	r2, [r3, #4]
 800839e:	e00f      	b.n	80083c0 <_malloc_r+0xb0>
 80083a0:	6822      	ldr	r2, [r4, #0]
 80083a2:	1b52      	subs	r2, r2, r5
 80083a4:	d41f      	bmi.n	80083e6 <_malloc_r+0xd6>
 80083a6:	2a0b      	cmp	r2, #11
 80083a8:	d917      	bls.n	80083da <_malloc_r+0xca>
 80083aa:	1961      	adds	r1, r4, r5
 80083ac:	42a3      	cmp	r3, r4
 80083ae:	6025      	str	r5, [r4, #0]
 80083b0:	bf18      	it	ne
 80083b2:	6059      	strne	r1, [r3, #4]
 80083b4:	6863      	ldr	r3, [r4, #4]
 80083b6:	bf08      	it	eq
 80083b8:	f8c8 1000 	streq.w	r1, [r8]
 80083bc:	5162      	str	r2, [r4, r5]
 80083be:	604b      	str	r3, [r1, #4]
 80083c0:	4638      	mov	r0, r7
 80083c2:	f104 060b 	add.w	r6, r4, #11
 80083c6:	f000 f829 	bl	800841c <__malloc_unlock>
 80083ca:	f026 0607 	bic.w	r6, r6, #7
 80083ce:	1d23      	adds	r3, r4, #4
 80083d0:	1af2      	subs	r2, r6, r3
 80083d2:	d0ae      	beq.n	8008332 <_malloc_r+0x22>
 80083d4:	1b9b      	subs	r3, r3, r6
 80083d6:	50a3      	str	r3, [r4, r2]
 80083d8:	e7ab      	b.n	8008332 <_malloc_r+0x22>
 80083da:	42a3      	cmp	r3, r4
 80083dc:	6862      	ldr	r2, [r4, #4]
 80083de:	d1dd      	bne.n	800839c <_malloc_r+0x8c>
 80083e0:	f8c8 2000 	str.w	r2, [r8]
 80083e4:	e7ec      	b.n	80083c0 <_malloc_r+0xb0>
 80083e6:	4623      	mov	r3, r4
 80083e8:	6864      	ldr	r4, [r4, #4]
 80083ea:	e7ac      	b.n	8008346 <_malloc_r+0x36>
 80083ec:	4634      	mov	r4, r6
 80083ee:	6876      	ldr	r6, [r6, #4]
 80083f0:	e7b4      	b.n	800835c <_malloc_r+0x4c>
 80083f2:	4613      	mov	r3, r2
 80083f4:	e7cc      	b.n	8008390 <_malloc_r+0x80>
 80083f6:	230c      	movs	r3, #12
 80083f8:	4638      	mov	r0, r7
 80083fa:	603b      	str	r3, [r7, #0]
 80083fc:	f000 f80e 	bl	800841c <__malloc_unlock>
 8008400:	e797      	b.n	8008332 <_malloc_r+0x22>
 8008402:	6025      	str	r5, [r4, #0]
 8008404:	e7dc      	b.n	80083c0 <_malloc_r+0xb0>
 8008406:	605b      	str	r3, [r3, #4]
 8008408:	deff      	udf	#255	; 0xff
 800840a:	bf00      	nop
 800840c:	200015ac 	.word	0x200015ac

08008410 <__malloc_lock>:
 8008410:	4801      	ldr	r0, [pc, #4]	; (8008418 <__malloc_lock+0x8>)
 8008412:	f7ff bf13 	b.w	800823c <__retarget_lock_acquire_recursive>
 8008416:	bf00      	nop
 8008418:	200015a8 	.word	0x200015a8

0800841c <__malloc_unlock>:
 800841c:	4801      	ldr	r0, [pc, #4]	; (8008424 <__malloc_unlock+0x8>)
 800841e:	f7ff bf0e 	b.w	800823e <__retarget_lock_release_recursive>
 8008422:	bf00      	nop
 8008424:	200015a8 	.word	0x200015a8

08008428 <__ssputs_r>:
 8008428:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800842c:	461f      	mov	r7, r3
 800842e:	688e      	ldr	r6, [r1, #8]
 8008430:	4682      	mov	sl, r0
 8008432:	42be      	cmp	r6, r7
 8008434:	460c      	mov	r4, r1
 8008436:	4690      	mov	r8, r2
 8008438:	680b      	ldr	r3, [r1, #0]
 800843a:	d82c      	bhi.n	8008496 <__ssputs_r+0x6e>
 800843c:	898a      	ldrh	r2, [r1, #12]
 800843e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008442:	d026      	beq.n	8008492 <__ssputs_r+0x6a>
 8008444:	6965      	ldr	r5, [r4, #20]
 8008446:	6909      	ldr	r1, [r1, #16]
 8008448:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800844c:	eba3 0901 	sub.w	r9, r3, r1
 8008450:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008454:	1c7b      	adds	r3, r7, #1
 8008456:	444b      	add	r3, r9
 8008458:	106d      	asrs	r5, r5, #1
 800845a:	429d      	cmp	r5, r3
 800845c:	bf38      	it	cc
 800845e:	461d      	movcc	r5, r3
 8008460:	0553      	lsls	r3, r2, #21
 8008462:	d527      	bpl.n	80084b4 <__ssputs_r+0x8c>
 8008464:	4629      	mov	r1, r5
 8008466:	f7ff ff53 	bl	8008310 <_malloc_r>
 800846a:	4606      	mov	r6, r0
 800846c:	b360      	cbz	r0, 80084c8 <__ssputs_r+0xa0>
 800846e:	464a      	mov	r2, r9
 8008470:	6921      	ldr	r1, [r4, #16]
 8008472:	f000 fafd 	bl	8008a70 <memcpy>
 8008476:	89a3      	ldrh	r3, [r4, #12]
 8008478:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800847c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008480:	81a3      	strh	r3, [r4, #12]
 8008482:	6126      	str	r6, [r4, #16]
 8008484:	444e      	add	r6, r9
 8008486:	6026      	str	r6, [r4, #0]
 8008488:	463e      	mov	r6, r7
 800848a:	6165      	str	r5, [r4, #20]
 800848c:	eba5 0509 	sub.w	r5, r5, r9
 8008490:	60a5      	str	r5, [r4, #8]
 8008492:	42be      	cmp	r6, r7
 8008494:	d900      	bls.n	8008498 <__ssputs_r+0x70>
 8008496:	463e      	mov	r6, r7
 8008498:	4632      	mov	r2, r6
 800849a:	4641      	mov	r1, r8
 800849c:	6820      	ldr	r0, [r4, #0]
 800849e:	f000 faaf 	bl	8008a00 <memmove>
 80084a2:	2000      	movs	r0, #0
 80084a4:	68a3      	ldr	r3, [r4, #8]
 80084a6:	1b9b      	subs	r3, r3, r6
 80084a8:	60a3      	str	r3, [r4, #8]
 80084aa:	6823      	ldr	r3, [r4, #0]
 80084ac:	4433      	add	r3, r6
 80084ae:	6023      	str	r3, [r4, #0]
 80084b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80084b4:	462a      	mov	r2, r5
 80084b6:	f000 fae9 	bl	8008a8c <_realloc_r>
 80084ba:	4606      	mov	r6, r0
 80084bc:	2800      	cmp	r0, #0
 80084be:	d1e0      	bne.n	8008482 <__ssputs_r+0x5a>
 80084c0:	4650      	mov	r0, sl
 80084c2:	6921      	ldr	r1, [r4, #16]
 80084c4:	f7ff febc 	bl	8008240 <_free_r>
 80084c8:	230c      	movs	r3, #12
 80084ca:	f8ca 3000 	str.w	r3, [sl]
 80084ce:	89a3      	ldrh	r3, [r4, #12]
 80084d0:	f04f 30ff 	mov.w	r0, #4294967295
 80084d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80084d8:	81a3      	strh	r3, [r4, #12]
 80084da:	e7e9      	b.n	80084b0 <__ssputs_r+0x88>

080084dc <_svfiprintf_r>:
 80084dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084e0:	4698      	mov	r8, r3
 80084e2:	898b      	ldrh	r3, [r1, #12]
 80084e4:	4607      	mov	r7, r0
 80084e6:	061b      	lsls	r3, r3, #24
 80084e8:	460d      	mov	r5, r1
 80084ea:	4614      	mov	r4, r2
 80084ec:	b09d      	sub	sp, #116	; 0x74
 80084ee:	d50e      	bpl.n	800850e <_svfiprintf_r+0x32>
 80084f0:	690b      	ldr	r3, [r1, #16]
 80084f2:	b963      	cbnz	r3, 800850e <_svfiprintf_r+0x32>
 80084f4:	2140      	movs	r1, #64	; 0x40
 80084f6:	f7ff ff0b 	bl	8008310 <_malloc_r>
 80084fa:	6028      	str	r0, [r5, #0]
 80084fc:	6128      	str	r0, [r5, #16]
 80084fe:	b920      	cbnz	r0, 800850a <_svfiprintf_r+0x2e>
 8008500:	230c      	movs	r3, #12
 8008502:	603b      	str	r3, [r7, #0]
 8008504:	f04f 30ff 	mov.w	r0, #4294967295
 8008508:	e0d0      	b.n	80086ac <_svfiprintf_r+0x1d0>
 800850a:	2340      	movs	r3, #64	; 0x40
 800850c:	616b      	str	r3, [r5, #20]
 800850e:	2300      	movs	r3, #0
 8008510:	9309      	str	r3, [sp, #36]	; 0x24
 8008512:	2320      	movs	r3, #32
 8008514:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008518:	2330      	movs	r3, #48	; 0x30
 800851a:	f04f 0901 	mov.w	r9, #1
 800851e:	f8cd 800c 	str.w	r8, [sp, #12]
 8008522:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 80086c4 <_svfiprintf_r+0x1e8>
 8008526:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800852a:	4623      	mov	r3, r4
 800852c:	469a      	mov	sl, r3
 800852e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008532:	b10a      	cbz	r2, 8008538 <_svfiprintf_r+0x5c>
 8008534:	2a25      	cmp	r2, #37	; 0x25
 8008536:	d1f9      	bne.n	800852c <_svfiprintf_r+0x50>
 8008538:	ebba 0b04 	subs.w	fp, sl, r4
 800853c:	d00b      	beq.n	8008556 <_svfiprintf_r+0x7a>
 800853e:	465b      	mov	r3, fp
 8008540:	4622      	mov	r2, r4
 8008542:	4629      	mov	r1, r5
 8008544:	4638      	mov	r0, r7
 8008546:	f7ff ff6f 	bl	8008428 <__ssputs_r>
 800854a:	3001      	adds	r0, #1
 800854c:	f000 80a9 	beq.w	80086a2 <_svfiprintf_r+0x1c6>
 8008550:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008552:	445a      	add	r2, fp
 8008554:	9209      	str	r2, [sp, #36]	; 0x24
 8008556:	f89a 3000 	ldrb.w	r3, [sl]
 800855a:	2b00      	cmp	r3, #0
 800855c:	f000 80a1 	beq.w	80086a2 <_svfiprintf_r+0x1c6>
 8008560:	2300      	movs	r3, #0
 8008562:	f04f 32ff 	mov.w	r2, #4294967295
 8008566:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800856a:	f10a 0a01 	add.w	sl, sl, #1
 800856e:	9304      	str	r3, [sp, #16]
 8008570:	9307      	str	r3, [sp, #28]
 8008572:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008576:	931a      	str	r3, [sp, #104]	; 0x68
 8008578:	4654      	mov	r4, sl
 800857a:	2205      	movs	r2, #5
 800857c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008580:	4850      	ldr	r0, [pc, #320]	; (80086c4 <_svfiprintf_r+0x1e8>)
 8008582:	f000 fa67 	bl	8008a54 <memchr>
 8008586:	9a04      	ldr	r2, [sp, #16]
 8008588:	b9d8      	cbnz	r0, 80085c2 <_svfiprintf_r+0xe6>
 800858a:	06d0      	lsls	r0, r2, #27
 800858c:	bf44      	itt	mi
 800858e:	2320      	movmi	r3, #32
 8008590:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008594:	0711      	lsls	r1, r2, #28
 8008596:	bf44      	itt	mi
 8008598:	232b      	movmi	r3, #43	; 0x2b
 800859a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800859e:	f89a 3000 	ldrb.w	r3, [sl]
 80085a2:	2b2a      	cmp	r3, #42	; 0x2a
 80085a4:	d015      	beq.n	80085d2 <_svfiprintf_r+0xf6>
 80085a6:	4654      	mov	r4, sl
 80085a8:	2000      	movs	r0, #0
 80085aa:	f04f 0c0a 	mov.w	ip, #10
 80085ae:	9a07      	ldr	r2, [sp, #28]
 80085b0:	4621      	mov	r1, r4
 80085b2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80085b6:	3b30      	subs	r3, #48	; 0x30
 80085b8:	2b09      	cmp	r3, #9
 80085ba:	d94d      	bls.n	8008658 <_svfiprintf_r+0x17c>
 80085bc:	b1b0      	cbz	r0, 80085ec <_svfiprintf_r+0x110>
 80085be:	9207      	str	r2, [sp, #28]
 80085c0:	e014      	b.n	80085ec <_svfiprintf_r+0x110>
 80085c2:	eba0 0308 	sub.w	r3, r0, r8
 80085c6:	fa09 f303 	lsl.w	r3, r9, r3
 80085ca:	4313      	orrs	r3, r2
 80085cc:	46a2      	mov	sl, r4
 80085ce:	9304      	str	r3, [sp, #16]
 80085d0:	e7d2      	b.n	8008578 <_svfiprintf_r+0x9c>
 80085d2:	9b03      	ldr	r3, [sp, #12]
 80085d4:	1d19      	adds	r1, r3, #4
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	9103      	str	r1, [sp, #12]
 80085da:	2b00      	cmp	r3, #0
 80085dc:	bfbb      	ittet	lt
 80085de:	425b      	neglt	r3, r3
 80085e0:	f042 0202 	orrlt.w	r2, r2, #2
 80085e4:	9307      	strge	r3, [sp, #28]
 80085e6:	9307      	strlt	r3, [sp, #28]
 80085e8:	bfb8      	it	lt
 80085ea:	9204      	strlt	r2, [sp, #16]
 80085ec:	7823      	ldrb	r3, [r4, #0]
 80085ee:	2b2e      	cmp	r3, #46	; 0x2e
 80085f0:	d10c      	bne.n	800860c <_svfiprintf_r+0x130>
 80085f2:	7863      	ldrb	r3, [r4, #1]
 80085f4:	2b2a      	cmp	r3, #42	; 0x2a
 80085f6:	d134      	bne.n	8008662 <_svfiprintf_r+0x186>
 80085f8:	9b03      	ldr	r3, [sp, #12]
 80085fa:	3402      	adds	r4, #2
 80085fc:	1d1a      	adds	r2, r3, #4
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	9203      	str	r2, [sp, #12]
 8008602:	2b00      	cmp	r3, #0
 8008604:	bfb8      	it	lt
 8008606:	f04f 33ff 	movlt.w	r3, #4294967295
 800860a:	9305      	str	r3, [sp, #20]
 800860c:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 80086c8 <_svfiprintf_r+0x1ec>
 8008610:	2203      	movs	r2, #3
 8008612:	4650      	mov	r0, sl
 8008614:	7821      	ldrb	r1, [r4, #0]
 8008616:	f000 fa1d 	bl	8008a54 <memchr>
 800861a:	b138      	cbz	r0, 800862c <_svfiprintf_r+0x150>
 800861c:	2240      	movs	r2, #64	; 0x40
 800861e:	9b04      	ldr	r3, [sp, #16]
 8008620:	eba0 000a 	sub.w	r0, r0, sl
 8008624:	4082      	lsls	r2, r0
 8008626:	4313      	orrs	r3, r2
 8008628:	3401      	adds	r4, #1
 800862a:	9304      	str	r3, [sp, #16]
 800862c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008630:	2206      	movs	r2, #6
 8008632:	4826      	ldr	r0, [pc, #152]	; (80086cc <_svfiprintf_r+0x1f0>)
 8008634:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008638:	f000 fa0c 	bl	8008a54 <memchr>
 800863c:	2800      	cmp	r0, #0
 800863e:	d038      	beq.n	80086b2 <_svfiprintf_r+0x1d6>
 8008640:	4b23      	ldr	r3, [pc, #140]	; (80086d0 <_svfiprintf_r+0x1f4>)
 8008642:	bb1b      	cbnz	r3, 800868c <_svfiprintf_r+0x1b0>
 8008644:	9b03      	ldr	r3, [sp, #12]
 8008646:	3307      	adds	r3, #7
 8008648:	f023 0307 	bic.w	r3, r3, #7
 800864c:	3308      	adds	r3, #8
 800864e:	9303      	str	r3, [sp, #12]
 8008650:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008652:	4433      	add	r3, r6
 8008654:	9309      	str	r3, [sp, #36]	; 0x24
 8008656:	e768      	b.n	800852a <_svfiprintf_r+0x4e>
 8008658:	460c      	mov	r4, r1
 800865a:	2001      	movs	r0, #1
 800865c:	fb0c 3202 	mla	r2, ip, r2, r3
 8008660:	e7a6      	b.n	80085b0 <_svfiprintf_r+0xd4>
 8008662:	2300      	movs	r3, #0
 8008664:	f04f 0c0a 	mov.w	ip, #10
 8008668:	4619      	mov	r1, r3
 800866a:	3401      	adds	r4, #1
 800866c:	9305      	str	r3, [sp, #20]
 800866e:	4620      	mov	r0, r4
 8008670:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008674:	3a30      	subs	r2, #48	; 0x30
 8008676:	2a09      	cmp	r2, #9
 8008678:	d903      	bls.n	8008682 <_svfiprintf_r+0x1a6>
 800867a:	2b00      	cmp	r3, #0
 800867c:	d0c6      	beq.n	800860c <_svfiprintf_r+0x130>
 800867e:	9105      	str	r1, [sp, #20]
 8008680:	e7c4      	b.n	800860c <_svfiprintf_r+0x130>
 8008682:	4604      	mov	r4, r0
 8008684:	2301      	movs	r3, #1
 8008686:	fb0c 2101 	mla	r1, ip, r1, r2
 800868a:	e7f0      	b.n	800866e <_svfiprintf_r+0x192>
 800868c:	ab03      	add	r3, sp, #12
 800868e:	9300      	str	r3, [sp, #0]
 8008690:	462a      	mov	r2, r5
 8008692:	4638      	mov	r0, r7
 8008694:	4b0f      	ldr	r3, [pc, #60]	; (80086d4 <_svfiprintf_r+0x1f8>)
 8008696:	a904      	add	r1, sp, #16
 8008698:	f3af 8000 	nop.w
 800869c:	1c42      	adds	r2, r0, #1
 800869e:	4606      	mov	r6, r0
 80086a0:	d1d6      	bne.n	8008650 <_svfiprintf_r+0x174>
 80086a2:	89ab      	ldrh	r3, [r5, #12]
 80086a4:	065b      	lsls	r3, r3, #25
 80086a6:	f53f af2d 	bmi.w	8008504 <_svfiprintf_r+0x28>
 80086aa:	9809      	ldr	r0, [sp, #36]	; 0x24
 80086ac:	b01d      	add	sp, #116	; 0x74
 80086ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086b2:	ab03      	add	r3, sp, #12
 80086b4:	9300      	str	r3, [sp, #0]
 80086b6:	462a      	mov	r2, r5
 80086b8:	4638      	mov	r0, r7
 80086ba:	4b06      	ldr	r3, [pc, #24]	; (80086d4 <_svfiprintf_r+0x1f8>)
 80086bc:	a904      	add	r1, sp, #16
 80086be:	f000 f87d 	bl	80087bc <_printf_i>
 80086c2:	e7eb      	b.n	800869c <_svfiprintf_r+0x1c0>
 80086c4:	08008be8 	.word	0x08008be8
 80086c8:	08008bee 	.word	0x08008bee
 80086cc:	08008bf2 	.word	0x08008bf2
 80086d0:	00000000 	.word	0x00000000
 80086d4:	08008429 	.word	0x08008429

080086d8 <_printf_common>:
 80086d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80086dc:	4616      	mov	r6, r2
 80086de:	4699      	mov	r9, r3
 80086e0:	688a      	ldr	r2, [r1, #8]
 80086e2:	690b      	ldr	r3, [r1, #16]
 80086e4:	4607      	mov	r7, r0
 80086e6:	4293      	cmp	r3, r2
 80086e8:	bfb8      	it	lt
 80086ea:	4613      	movlt	r3, r2
 80086ec:	6033      	str	r3, [r6, #0]
 80086ee:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80086f2:	460c      	mov	r4, r1
 80086f4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80086f8:	b10a      	cbz	r2, 80086fe <_printf_common+0x26>
 80086fa:	3301      	adds	r3, #1
 80086fc:	6033      	str	r3, [r6, #0]
 80086fe:	6823      	ldr	r3, [r4, #0]
 8008700:	0699      	lsls	r1, r3, #26
 8008702:	bf42      	ittt	mi
 8008704:	6833      	ldrmi	r3, [r6, #0]
 8008706:	3302      	addmi	r3, #2
 8008708:	6033      	strmi	r3, [r6, #0]
 800870a:	6825      	ldr	r5, [r4, #0]
 800870c:	f015 0506 	ands.w	r5, r5, #6
 8008710:	d106      	bne.n	8008720 <_printf_common+0x48>
 8008712:	f104 0a19 	add.w	sl, r4, #25
 8008716:	68e3      	ldr	r3, [r4, #12]
 8008718:	6832      	ldr	r2, [r6, #0]
 800871a:	1a9b      	subs	r3, r3, r2
 800871c:	42ab      	cmp	r3, r5
 800871e:	dc2b      	bgt.n	8008778 <_printf_common+0xa0>
 8008720:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008724:	1e13      	subs	r3, r2, #0
 8008726:	6822      	ldr	r2, [r4, #0]
 8008728:	bf18      	it	ne
 800872a:	2301      	movne	r3, #1
 800872c:	0692      	lsls	r2, r2, #26
 800872e:	d430      	bmi.n	8008792 <_printf_common+0xba>
 8008730:	4649      	mov	r1, r9
 8008732:	4638      	mov	r0, r7
 8008734:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008738:	47c0      	blx	r8
 800873a:	3001      	adds	r0, #1
 800873c:	d023      	beq.n	8008786 <_printf_common+0xae>
 800873e:	6823      	ldr	r3, [r4, #0]
 8008740:	6922      	ldr	r2, [r4, #16]
 8008742:	f003 0306 	and.w	r3, r3, #6
 8008746:	2b04      	cmp	r3, #4
 8008748:	bf14      	ite	ne
 800874a:	2500      	movne	r5, #0
 800874c:	6833      	ldreq	r3, [r6, #0]
 800874e:	f04f 0600 	mov.w	r6, #0
 8008752:	bf08      	it	eq
 8008754:	68e5      	ldreq	r5, [r4, #12]
 8008756:	f104 041a 	add.w	r4, r4, #26
 800875a:	bf08      	it	eq
 800875c:	1aed      	subeq	r5, r5, r3
 800875e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8008762:	bf08      	it	eq
 8008764:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008768:	4293      	cmp	r3, r2
 800876a:	bfc4      	itt	gt
 800876c:	1a9b      	subgt	r3, r3, r2
 800876e:	18ed      	addgt	r5, r5, r3
 8008770:	42b5      	cmp	r5, r6
 8008772:	d11a      	bne.n	80087aa <_printf_common+0xd2>
 8008774:	2000      	movs	r0, #0
 8008776:	e008      	b.n	800878a <_printf_common+0xb2>
 8008778:	2301      	movs	r3, #1
 800877a:	4652      	mov	r2, sl
 800877c:	4649      	mov	r1, r9
 800877e:	4638      	mov	r0, r7
 8008780:	47c0      	blx	r8
 8008782:	3001      	adds	r0, #1
 8008784:	d103      	bne.n	800878e <_printf_common+0xb6>
 8008786:	f04f 30ff 	mov.w	r0, #4294967295
 800878a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800878e:	3501      	adds	r5, #1
 8008790:	e7c1      	b.n	8008716 <_printf_common+0x3e>
 8008792:	2030      	movs	r0, #48	; 0x30
 8008794:	18e1      	adds	r1, r4, r3
 8008796:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800879a:	1c5a      	adds	r2, r3, #1
 800879c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80087a0:	4422      	add	r2, r4
 80087a2:	3302      	adds	r3, #2
 80087a4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80087a8:	e7c2      	b.n	8008730 <_printf_common+0x58>
 80087aa:	2301      	movs	r3, #1
 80087ac:	4622      	mov	r2, r4
 80087ae:	4649      	mov	r1, r9
 80087b0:	4638      	mov	r0, r7
 80087b2:	47c0      	blx	r8
 80087b4:	3001      	adds	r0, #1
 80087b6:	d0e6      	beq.n	8008786 <_printf_common+0xae>
 80087b8:	3601      	adds	r6, #1
 80087ba:	e7d9      	b.n	8008770 <_printf_common+0x98>

080087bc <_printf_i>:
 80087bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80087c0:	7e0f      	ldrb	r7, [r1, #24]
 80087c2:	4691      	mov	r9, r2
 80087c4:	2f78      	cmp	r7, #120	; 0x78
 80087c6:	4680      	mov	r8, r0
 80087c8:	460c      	mov	r4, r1
 80087ca:	469a      	mov	sl, r3
 80087cc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80087ce:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80087d2:	d807      	bhi.n	80087e4 <_printf_i+0x28>
 80087d4:	2f62      	cmp	r7, #98	; 0x62
 80087d6:	d80a      	bhi.n	80087ee <_printf_i+0x32>
 80087d8:	2f00      	cmp	r7, #0
 80087da:	f000 80d5 	beq.w	8008988 <_printf_i+0x1cc>
 80087de:	2f58      	cmp	r7, #88	; 0x58
 80087e0:	f000 80c1 	beq.w	8008966 <_printf_i+0x1aa>
 80087e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80087e8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80087ec:	e03a      	b.n	8008864 <_printf_i+0xa8>
 80087ee:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80087f2:	2b15      	cmp	r3, #21
 80087f4:	d8f6      	bhi.n	80087e4 <_printf_i+0x28>
 80087f6:	a101      	add	r1, pc, #4	; (adr r1, 80087fc <_printf_i+0x40>)
 80087f8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80087fc:	08008855 	.word	0x08008855
 8008800:	08008869 	.word	0x08008869
 8008804:	080087e5 	.word	0x080087e5
 8008808:	080087e5 	.word	0x080087e5
 800880c:	080087e5 	.word	0x080087e5
 8008810:	080087e5 	.word	0x080087e5
 8008814:	08008869 	.word	0x08008869
 8008818:	080087e5 	.word	0x080087e5
 800881c:	080087e5 	.word	0x080087e5
 8008820:	080087e5 	.word	0x080087e5
 8008824:	080087e5 	.word	0x080087e5
 8008828:	0800896f 	.word	0x0800896f
 800882c:	08008895 	.word	0x08008895
 8008830:	08008929 	.word	0x08008929
 8008834:	080087e5 	.word	0x080087e5
 8008838:	080087e5 	.word	0x080087e5
 800883c:	08008991 	.word	0x08008991
 8008840:	080087e5 	.word	0x080087e5
 8008844:	08008895 	.word	0x08008895
 8008848:	080087e5 	.word	0x080087e5
 800884c:	080087e5 	.word	0x080087e5
 8008850:	08008931 	.word	0x08008931
 8008854:	682b      	ldr	r3, [r5, #0]
 8008856:	1d1a      	adds	r2, r3, #4
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	602a      	str	r2, [r5, #0]
 800885c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008860:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008864:	2301      	movs	r3, #1
 8008866:	e0a0      	b.n	80089aa <_printf_i+0x1ee>
 8008868:	6820      	ldr	r0, [r4, #0]
 800886a:	682b      	ldr	r3, [r5, #0]
 800886c:	0607      	lsls	r7, r0, #24
 800886e:	f103 0104 	add.w	r1, r3, #4
 8008872:	6029      	str	r1, [r5, #0]
 8008874:	d501      	bpl.n	800887a <_printf_i+0xbe>
 8008876:	681e      	ldr	r6, [r3, #0]
 8008878:	e003      	b.n	8008882 <_printf_i+0xc6>
 800887a:	0646      	lsls	r6, r0, #25
 800887c:	d5fb      	bpl.n	8008876 <_printf_i+0xba>
 800887e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8008882:	2e00      	cmp	r6, #0
 8008884:	da03      	bge.n	800888e <_printf_i+0xd2>
 8008886:	232d      	movs	r3, #45	; 0x2d
 8008888:	4276      	negs	r6, r6
 800888a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800888e:	230a      	movs	r3, #10
 8008890:	4859      	ldr	r0, [pc, #356]	; (80089f8 <_printf_i+0x23c>)
 8008892:	e012      	b.n	80088ba <_printf_i+0xfe>
 8008894:	682b      	ldr	r3, [r5, #0]
 8008896:	6820      	ldr	r0, [r4, #0]
 8008898:	1d19      	adds	r1, r3, #4
 800889a:	6029      	str	r1, [r5, #0]
 800889c:	0605      	lsls	r5, r0, #24
 800889e:	d501      	bpl.n	80088a4 <_printf_i+0xe8>
 80088a0:	681e      	ldr	r6, [r3, #0]
 80088a2:	e002      	b.n	80088aa <_printf_i+0xee>
 80088a4:	0641      	lsls	r1, r0, #25
 80088a6:	d5fb      	bpl.n	80088a0 <_printf_i+0xe4>
 80088a8:	881e      	ldrh	r6, [r3, #0]
 80088aa:	2f6f      	cmp	r7, #111	; 0x6f
 80088ac:	bf0c      	ite	eq
 80088ae:	2308      	moveq	r3, #8
 80088b0:	230a      	movne	r3, #10
 80088b2:	4851      	ldr	r0, [pc, #324]	; (80089f8 <_printf_i+0x23c>)
 80088b4:	2100      	movs	r1, #0
 80088b6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80088ba:	6865      	ldr	r5, [r4, #4]
 80088bc:	2d00      	cmp	r5, #0
 80088be:	bfa8      	it	ge
 80088c0:	6821      	ldrge	r1, [r4, #0]
 80088c2:	60a5      	str	r5, [r4, #8]
 80088c4:	bfa4      	itt	ge
 80088c6:	f021 0104 	bicge.w	r1, r1, #4
 80088ca:	6021      	strge	r1, [r4, #0]
 80088cc:	b90e      	cbnz	r6, 80088d2 <_printf_i+0x116>
 80088ce:	2d00      	cmp	r5, #0
 80088d0:	d04b      	beq.n	800896a <_printf_i+0x1ae>
 80088d2:	4615      	mov	r5, r2
 80088d4:	fbb6 f1f3 	udiv	r1, r6, r3
 80088d8:	fb03 6711 	mls	r7, r3, r1, r6
 80088dc:	5dc7      	ldrb	r7, [r0, r7]
 80088de:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80088e2:	4637      	mov	r7, r6
 80088e4:	42bb      	cmp	r3, r7
 80088e6:	460e      	mov	r6, r1
 80088e8:	d9f4      	bls.n	80088d4 <_printf_i+0x118>
 80088ea:	2b08      	cmp	r3, #8
 80088ec:	d10b      	bne.n	8008906 <_printf_i+0x14a>
 80088ee:	6823      	ldr	r3, [r4, #0]
 80088f0:	07de      	lsls	r6, r3, #31
 80088f2:	d508      	bpl.n	8008906 <_printf_i+0x14a>
 80088f4:	6923      	ldr	r3, [r4, #16]
 80088f6:	6861      	ldr	r1, [r4, #4]
 80088f8:	4299      	cmp	r1, r3
 80088fa:	bfde      	ittt	le
 80088fc:	2330      	movle	r3, #48	; 0x30
 80088fe:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008902:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008906:	1b52      	subs	r2, r2, r5
 8008908:	6122      	str	r2, [r4, #16]
 800890a:	464b      	mov	r3, r9
 800890c:	4621      	mov	r1, r4
 800890e:	4640      	mov	r0, r8
 8008910:	f8cd a000 	str.w	sl, [sp]
 8008914:	aa03      	add	r2, sp, #12
 8008916:	f7ff fedf 	bl	80086d8 <_printf_common>
 800891a:	3001      	adds	r0, #1
 800891c:	d14a      	bne.n	80089b4 <_printf_i+0x1f8>
 800891e:	f04f 30ff 	mov.w	r0, #4294967295
 8008922:	b004      	add	sp, #16
 8008924:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008928:	6823      	ldr	r3, [r4, #0]
 800892a:	f043 0320 	orr.w	r3, r3, #32
 800892e:	6023      	str	r3, [r4, #0]
 8008930:	2778      	movs	r7, #120	; 0x78
 8008932:	4832      	ldr	r0, [pc, #200]	; (80089fc <_printf_i+0x240>)
 8008934:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008938:	6823      	ldr	r3, [r4, #0]
 800893a:	6829      	ldr	r1, [r5, #0]
 800893c:	061f      	lsls	r7, r3, #24
 800893e:	f851 6b04 	ldr.w	r6, [r1], #4
 8008942:	d402      	bmi.n	800894a <_printf_i+0x18e>
 8008944:	065f      	lsls	r7, r3, #25
 8008946:	bf48      	it	mi
 8008948:	b2b6      	uxthmi	r6, r6
 800894a:	07df      	lsls	r7, r3, #31
 800894c:	bf48      	it	mi
 800894e:	f043 0320 	orrmi.w	r3, r3, #32
 8008952:	6029      	str	r1, [r5, #0]
 8008954:	bf48      	it	mi
 8008956:	6023      	strmi	r3, [r4, #0]
 8008958:	b91e      	cbnz	r6, 8008962 <_printf_i+0x1a6>
 800895a:	6823      	ldr	r3, [r4, #0]
 800895c:	f023 0320 	bic.w	r3, r3, #32
 8008960:	6023      	str	r3, [r4, #0]
 8008962:	2310      	movs	r3, #16
 8008964:	e7a6      	b.n	80088b4 <_printf_i+0xf8>
 8008966:	4824      	ldr	r0, [pc, #144]	; (80089f8 <_printf_i+0x23c>)
 8008968:	e7e4      	b.n	8008934 <_printf_i+0x178>
 800896a:	4615      	mov	r5, r2
 800896c:	e7bd      	b.n	80088ea <_printf_i+0x12e>
 800896e:	682b      	ldr	r3, [r5, #0]
 8008970:	6826      	ldr	r6, [r4, #0]
 8008972:	1d18      	adds	r0, r3, #4
 8008974:	6961      	ldr	r1, [r4, #20]
 8008976:	6028      	str	r0, [r5, #0]
 8008978:	0635      	lsls	r5, r6, #24
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	d501      	bpl.n	8008982 <_printf_i+0x1c6>
 800897e:	6019      	str	r1, [r3, #0]
 8008980:	e002      	b.n	8008988 <_printf_i+0x1cc>
 8008982:	0670      	lsls	r0, r6, #25
 8008984:	d5fb      	bpl.n	800897e <_printf_i+0x1c2>
 8008986:	8019      	strh	r1, [r3, #0]
 8008988:	2300      	movs	r3, #0
 800898a:	4615      	mov	r5, r2
 800898c:	6123      	str	r3, [r4, #16]
 800898e:	e7bc      	b.n	800890a <_printf_i+0x14e>
 8008990:	682b      	ldr	r3, [r5, #0]
 8008992:	2100      	movs	r1, #0
 8008994:	1d1a      	adds	r2, r3, #4
 8008996:	602a      	str	r2, [r5, #0]
 8008998:	681d      	ldr	r5, [r3, #0]
 800899a:	6862      	ldr	r2, [r4, #4]
 800899c:	4628      	mov	r0, r5
 800899e:	f000 f859 	bl	8008a54 <memchr>
 80089a2:	b108      	cbz	r0, 80089a8 <_printf_i+0x1ec>
 80089a4:	1b40      	subs	r0, r0, r5
 80089a6:	6060      	str	r0, [r4, #4]
 80089a8:	6863      	ldr	r3, [r4, #4]
 80089aa:	6123      	str	r3, [r4, #16]
 80089ac:	2300      	movs	r3, #0
 80089ae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80089b2:	e7aa      	b.n	800890a <_printf_i+0x14e>
 80089b4:	462a      	mov	r2, r5
 80089b6:	4649      	mov	r1, r9
 80089b8:	4640      	mov	r0, r8
 80089ba:	6923      	ldr	r3, [r4, #16]
 80089bc:	47d0      	blx	sl
 80089be:	3001      	adds	r0, #1
 80089c0:	d0ad      	beq.n	800891e <_printf_i+0x162>
 80089c2:	6823      	ldr	r3, [r4, #0]
 80089c4:	079b      	lsls	r3, r3, #30
 80089c6:	d413      	bmi.n	80089f0 <_printf_i+0x234>
 80089c8:	68e0      	ldr	r0, [r4, #12]
 80089ca:	9b03      	ldr	r3, [sp, #12]
 80089cc:	4298      	cmp	r0, r3
 80089ce:	bfb8      	it	lt
 80089d0:	4618      	movlt	r0, r3
 80089d2:	e7a6      	b.n	8008922 <_printf_i+0x166>
 80089d4:	2301      	movs	r3, #1
 80089d6:	4632      	mov	r2, r6
 80089d8:	4649      	mov	r1, r9
 80089da:	4640      	mov	r0, r8
 80089dc:	47d0      	blx	sl
 80089de:	3001      	adds	r0, #1
 80089e0:	d09d      	beq.n	800891e <_printf_i+0x162>
 80089e2:	3501      	adds	r5, #1
 80089e4:	68e3      	ldr	r3, [r4, #12]
 80089e6:	9903      	ldr	r1, [sp, #12]
 80089e8:	1a5b      	subs	r3, r3, r1
 80089ea:	42ab      	cmp	r3, r5
 80089ec:	dcf2      	bgt.n	80089d4 <_printf_i+0x218>
 80089ee:	e7eb      	b.n	80089c8 <_printf_i+0x20c>
 80089f0:	2500      	movs	r5, #0
 80089f2:	f104 0619 	add.w	r6, r4, #25
 80089f6:	e7f5      	b.n	80089e4 <_printf_i+0x228>
 80089f8:	08008bf9 	.word	0x08008bf9
 80089fc:	08008c0a 	.word	0x08008c0a

08008a00 <memmove>:
 8008a00:	4288      	cmp	r0, r1
 8008a02:	b510      	push	{r4, lr}
 8008a04:	eb01 0402 	add.w	r4, r1, r2
 8008a08:	d902      	bls.n	8008a10 <memmove+0x10>
 8008a0a:	4284      	cmp	r4, r0
 8008a0c:	4623      	mov	r3, r4
 8008a0e:	d807      	bhi.n	8008a20 <memmove+0x20>
 8008a10:	1e43      	subs	r3, r0, #1
 8008a12:	42a1      	cmp	r1, r4
 8008a14:	d008      	beq.n	8008a28 <memmove+0x28>
 8008a16:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008a1a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008a1e:	e7f8      	b.n	8008a12 <memmove+0x12>
 8008a20:	4601      	mov	r1, r0
 8008a22:	4402      	add	r2, r0
 8008a24:	428a      	cmp	r2, r1
 8008a26:	d100      	bne.n	8008a2a <memmove+0x2a>
 8008a28:	bd10      	pop	{r4, pc}
 8008a2a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008a2e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008a32:	e7f7      	b.n	8008a24 <memmove+0x24>

08008a34 <_sbrk_r>:
 8008a34:	b538      	push	{r3, r4, r5, lr}
 8008a36:	2300      	movs	r3, #0
 8008a38:	4d05      	ldr	r5, [pc, #20]	; (8008a50 <_sbrk_r+0x1c>)
 8008a3a:	4604      	mov	r4, r0
 8008a3c:	4608      	mov	r0, r1
 8008a3e:	602b      	str	r3, [r5, #0]
 8008a40:	f7f7 feb8 	bl	80007b4 <_sbrk>
 8008a44:	1c43      	adds	r3, r0, #1
 8008a46:	d102      	bne.n	8008a4e <_sbrk_r+0x1a>
 8008a48:	682b      	ldr	r3, [r5, #0]
 8008a4a:	b103      	cbz	r3, 8008a4e <_sbrk_r+0x1a>
 8008a4c:	6023      	str	r3, [r4, #0]
 8008a4e:	bd38      	pop	{r3, r4, r5, pc}
 8008a50:	200015a4 	.word	0x200015a4

08008a54 <memchr>:
 8008a54:	4603      	mov	r3, r0
 8008a56:	b510      	push	{r4, lr}
 8008a58:	b2c9      	uxtb	r1, r1
 8008a5a:	4402      	add	r2, r0
 8008a5c:	4293      	cmp	r3, r2
 8008a5e:	4618      	mov	r0, r3
 8008a60:	d101      	bne.n	8008a66 <memchr+0x12>
 8008a62:	2000      	movs	r0, #0
 8008a64:	e003      	b.n	8008a6e <memchr+0x1a>
 8008a66:	7804      	ldrb	r4, [r0, #0]
 8008a68:	3301      	adds	r3, #1
 8008a6a:	428c      	cmp	r4, r1
 8008a6c:	d1f6      	bne.n	8008a5c <memchr+0x8>
 8008a6e:	bd10      	pop	{r4, pc}

08008a70 <memcpy>:
 8008a70:	440a      	add	r2, r1
 8008a72:	4291      	cmp	r1, r2
 8008a74:	f100 33ff 	add.w	r3, r0, #4294967295
 8008a78:	d100      	bne.n	8008a7c <memcpy+0xc>
 8008a7a:	4770      	bx	lr
 8008a7c:	b510      	push	{r4, lr}
 8008a7e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008a82:	4291      	cmp	r1, r2
 8008a84:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008a88:	d1f9      	bne.n	8008a7e <memcpy+0xe>
 8008a8a:	bd10      	pop	{r4, pc}

08008a8c <_realloc_r>:
 8008a8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a90:	4680      	mov	r8, r0
 8008a92:	4614      	mov	r4, r2
 8008a94:	460e      	mov	r6, r1
 8008a96:	b921      	cbnz	r1, 8008aa2 <_realloc_r+0x16>
 8008a98:	4611      	mov	r1, r2
 8008a9a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008a9e:	f7ff bc37 	b.w	8008310 <_malloc_r>
 8008aa2:	b92a      	cbnz	r2, 8008ab0 <_realloc_r+0x24>
 8008aa4:	f7ff fbcc 	bl	8008240 <_free_r>
 8008aa8:	4625      	mov	r5, r4
 8008aaa:	4628      	mov	r0, r5
 8008aac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ab0:	f000 f81b 	bl	8008aea <_malloc_usable_size_r>
 8008ab4:	4284      	cmp	r4, r0
 8008ab6:	4607      	mov	r7, r0
 8008ab8:	d802      	bhi.n	8008ac0 <_realloc_r+0x34>
 8008aba:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008abe:	d812      	bhi.n	8008ae6 <_realloc_r+0x5a>
 8008ac0:	4621      	mov	r1, r4
 8008ac2:	4640      	mov	r0, r8
 8008ac4:	f7ff fc24 	bl	8008310 <_malloc_r>
 8008ac8:	4605      	mov	r5, r0
 8008aca:	2800      	cmp	r0, #0
 8008acc:	d0ed      	beq.n	8008aaa <_realloc_r+0x1e>
 8008ace:	42bc      	cmp	r4, r7
 8008ad0:	4622      	mov	r2, r4
 8008ad2:	4631      	mov	r1, r6
 8008ad4:	bf28      	it	cs
 8008ad6:	463a      	movcs	r2, r7
 8008ad8:	f7ff ffca 	bl	8008a70 <memcpy>
 8008adc:	4631      	mov	r1, r6
 8008ade:	4640      	mov	r0, r8
 8008ae0:	f7ff fbae 	bl	8008240 <_free_r>
 8008ae4:	e7e1      	b.n	8008aaa <_realloc_r+0x1e>
 8008ae6:	4635      	mov	r5, r6
 8008ae8:	e7df      	b.n	8008aaa <_realloc_r+0x1e>

08008aea <_malloc_usable_size_r>:
 8008aea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008aee:	1f18      	subs	r0, r3, #4
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	bfbc      	itt	lt
 8008af4:	580b      	ldrlt	r3, [r1, r0]
 8008af6:	18c0      	addlt	r0, r0, r3
 8008af8:	4770      	bx	lr
	...

08008afc <_init>:
 8008afc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008afe:	bf00      	nop
 8008b00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b02:	bc08      	pop	{r3}
 8008b04:	469e      	mov	lr, r3
 8008b06:	4770      	bx	lr

08008b08 <_fini>:
 8008b08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b0a:	bf00      	nop
 8008b0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b0e:	bc08      	pop	{r3}
 8008b10:	469e      	mov	lr, r3
 8008b12:	4770      	bx	lr
